{
  "version": "2",
  "toolVersion": "1.57.0",
  "snippets": {
    "15aaeac9a4855bcf6202544d26a7f2fdc88cec372de8b972e8a8090948102eb1": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration, HttpLambdaIntegration\n\n# books_default_fn: lambda.Function\n\n\nget_books_integration = HttpUrlIntegration(\"GetBooksIntegration\", \"https://get-books-proxy.myproxy.internal\")\nbooks_default_integration = HttpLambdaIntegration(\"BooksIntegration\", books_default_fn)\n\nhttp_api = apigwv2.HttpApi(self, \"HttpApi\")\n\nhttp_api.add_routes(\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.GET],\n    integration=get_books_integration\n)\nhttp_api.add_routes(\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.ANY],\n    integration=books_default_integration\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction booksDefaultFn;\n\n\nHttpUrlIntegration getBooksIntegration = new HttpUrlIntegration(\"GetBooksIntegration\", \"https://get-books-proxy.myproxy.internal\");\nHttpLambdaIntegration booksDefaultIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.AddRoutes(new AddRoutesOptions {\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.GET },\n    Integration = getBooksIntegration\n});\nhttpApi.AddRoutes(new AddRoutesOptions {\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.ANY },\n    Integration = booksDefaultIntegration\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpLambdaIntegration;\n\nFunction booksDefaultFn;\n\n\nHttpUrlIntegration getBooksIntegration = new HttpUrlIntegration(\"GetBooksIntegration\", \"https://get-books-proxy.myproxy.internal\");\nHttpLambdaIntegration booksDefaultIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.addRoutes(AddRoutesOptions.builder()\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.GET))\n        .integration(getBooksIntegration)\n        .build());\nhttpApi.addRoutes(AddRoutesOptions.builder()\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.ANY))\n        .integration(booksDefaultIntegration)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpUrlIntegration awscdkapigatewayv2integrationsalpha.HttpUrlIntegration\ntype HttpLambdaIntegration awscdkapigatewayv2integrationsalpha.HttpLambdaIntegration\n\nvar booksDefaultFn function\n\ngetBooksIntegration := NewHttpUrlIntegration(jsii.String(\"GetBooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\"))\nbooksDefaultIntegration := NewHttpLambdaIntegration(jsii.String(\"BooksIntegration\"), booksDefaultFn)\n\nhttpApi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\nhttpApi.addRoutes(&addRoutesOptions{\n\tpath: jsii.String(\"/books\"),\n\tmethods: []httpMethod{\n\t\tapigwv2.*httpMethod_GET,\n\t},\n\tintegration: getBooksIntegration,\n})\nhttpApi.addRoutes(&addRoutesOptions{\n\tpath: jsii.String(\"/books\"),\n\tmethods: []*httpMethod{\n\t\tapigwv2.*httpMethod_ANY,\n\t},\n\tintegration: booksDefaultIntegration,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpUrlIntegration, HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst getBooksIntegration = new HttpUrlIntegration('GetBooksIntegration', 'https://get-books-proxy.myproxy.internal');\n\ndeclare const booksDefaultFn: lambda.Function;\nconst booksDefaultIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: getBooksIntegration,\n});\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.ANY ],\n  integration: booksDefaultIntegration,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 71
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#ANY",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpUrlIntegration, HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const booksDefaultFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBooksIntegration = new HttpUrlIntegration('GetBooksIntegration', 'https://get-books-proxy.myproxy.internal');\nconst booksDefaultIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: getBooksIntegration,\n});\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.ANY ],\n  integration: booksDefaultIntegration,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 31,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "0e4f4f59c2df72a19c4396a896011fde122edea139aa4954fae1e730b0fb4dff"
    },
    "9a37d0aa3d50a46265e6612a6fa311d58caaa596c0a264491da713b42e41002c": {
      "translations": {
        "python": {
          "source": "http_api = apigwv2.HttpApi(self, \"HttpApi\",\n    disable_execute_api_endpoint=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HttpApi httpApi = new HttpApi(this, \"HttpApi\", new HttpApiProps {\n    DisableExecuteApiEndpoint = true\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi httpApi = HttpApi.Builder.create(this, \"HttpApi\")\n        .disableExecuteApiEndpoint(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "httpApi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"), &httpApiProps{\n\tdisableExecuteApiEndpoint: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "const httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  disableExecuteApiEndpoint: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 95
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  disableExecuteApiEndpoint: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "6400bd400c0bd5749573b71f30d6c64537322620809d580d9889833409108c77"
    },
    "bd639a94c6b3ef95cfdad9359c56d761cedec1504d16fb6e42c5d34c6af59aaa": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n\napigwv2.HttpApi(self, \"HttpProxyApi\",\n    default_integration=HttpUrlIntegration(\"DefaultIntegration\", \"https://example.com\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n\nnew HttpApi(this, \"HttpProxyApi\", new HttpApiProps {\n    DefaultIntegration = new HttpUrlIntegration(\"DefaultIntegration\", \"https://example.com\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\n\nHttpApi.Builder.create(this, \"HttpProxyApi\")\n        .defaultIntegration(new HttpUrlIntegration(\"DefaultIntegration\", \"https://example.com\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpUrlIntegration awscdkapigatewayv2integrationsalpha.HttpUrlIntegration\n\napigwv2.NewHttpApi(this, jsii.String(\"HttpProxyApi\"), &httpApiProps{\n\tdefaultIntegration: NewHttpUrlIntegration(jsii.String(\"DefaultIntegration\"), jsii.String(\"https://example.com\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nnew apigwv2.HttpApi(this, 'HttpProxyApi', {\n  defaultIntegration: new HttpUrlIntegration('DefaultIntegration', 'https://example.com'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 104
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigwv2.HttpApi(this, 'HttpProxyApi', {\n  defaultIntegration: new HttpUrlIntegration('DefaultIntegration', 'https://example.com'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 2,
        "226": 1,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b530b34a1c272bde721b5b9702e0cdf0c0a54caa9d8a20f35671301c820306bd"
    },
    "dce4df7c9f4978235f9f58f970243d951b6b2e1c67a47ef7c61981c8e0dc9642": {
      "translations": {
        "python": {
          "source": "apigwv2.HttpApi(self, \"HttpProxyApi\",\n    cors_preflight=apigwv2.CorsPreflightOptions(\n        allow_headers=[\"Authorization\"],\n        allow_methods=[apigwv2.CorsHttpMethod.GET, apigwv2.CorsHttpMethod.HEAD, apigwv2.CorsHttpMethod.OPTIONS, apigwv2.CorsHttpMethod.POST\n        ],\n        allow_origins=[\"*\"],\n        max_age=Duration.days(10)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new HttpApi(this, \"HttpProxyApi\", new HttpApiProps {\n    CorsPreflight = new CorsPreflightOptions {\n        AllowHeaders = new [] { \"Authorization\" },\n        AllowMethods = new [] { CorsHttpMethod.GET, CorsHttpMethod.HEAD, CorsHttpMethod.OPTIONS, CorsHttpMethod.POST },\n        AllowOrigins = new [] { \"*\" },\n        MaxAge = Duration.Days(10)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi.Builder.create(this, \"HttpProxyApi\")\n        .corsPreflight(CorsPreflightOptions.builder()\n                .allowHeaders(List.of(\"Authorization\"))\n                .allowMethods(List.of(CorsHttpMethod.GET, CorsHttpMethod.HEAD, CorsHttpMethod.OPTIONS, CorsHttpMethod.POST))\n                .allowOrigins(List.of(\"*\"))\n                .maxAge(Duration.days(10))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyApi\"), &httpApiProps{\n\tcorsPreflight: &corsPreflightOptions{\n\t\tallowHeaders: []*string{\n\t\t\tjsii.String(\"Authorization\"),\n\t\t},\n\t\tallowMethods: []corsHttpMethod{\n\t\t\tapigwv2.*corsHttpMethod_GET,\n\t\t\tapigwv2.*corsHttpMethod_HEAD,\n\t\t\tapigwv2.*corsHttpMethod_OPTIONS,\n\t\t\tapigwv2.*corsHttpMethod_POST,\n\t\t},\n\t\tallowOrigins: []*string{\n\t\t\tjsii.String(\"*\"),\n\t\t},\n\t\tmaxAge: duration.days(jsii.Number(10)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new apigwv2.HttpApi(this, 'HttpProxyApi', {\n  corsPreflight: {\n    allowHeaders: ['Authorization'],\n    allowMethods: [\n      apigwv2.CorsHttpMethod.GET,\n      apigwv2.CorsHttpMethod.HEAD,\n      apigwv2.CorsHttpMethod.OPTIONS,\n      apigwv2.CorsHttpMethod.POST,\n    ],\n    allowOrigins: ['*'],\n    maxAge: Duration.days(10),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 125
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#HEAD",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#OPTIONS",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#POST",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsPreflightOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "aws-cdk-lib.Duration",
        "aws-cdk-lib.Duration#days"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigwv2.HttpApi(this, 'HttpProxyApi', {\n  corsPreflight: {\n    allowHeaders: ['Authorization'],\n    allowMethods: [\n      apigwv2.CorsHttpMethod.GET,\n      apigwv2.CorsHttpMethod.HEAD,\n      apigwv2.CorsHttpMethod.OPTIONS,\n      apigwv2.CorsHttpMethod.POST,\n    ],\n    allowOrigins: ['*'],\n    maxAge: Duration.days(10),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "104": 1,
        "192": 3,
        "193": 2,
        "194": 10,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "55d19eff5ff2c459a4ea799461395ca955e03c13a3f31ac0e3969a1a5ff0a62f"
    },
    "d3cf3af7751e742813bbb9960bb8df36f53bb7cd68c9e598afa9fa404a0be78a": {
      "translations": {
        "python": {
          "source": "# api: apigwv2.HttpApi\n\n\napigwv2.HttpStage(self, \"Stage\",\n    http_api=api,\n    stage_name=\"beta\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HttpApi api;\n\n\nnew HttpStage(this, \"Stage\", new HttpStageProps {\n    HttpApi = api,\n    StageName = \"beta\"\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api;\n\n\nHttpStage.Builder.create(this, \"Stage\")\n        .httpApi(api)\n        .stageName(\"beta\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api httpApi\n\napigwv2.NewHttpStage(this, jsii.String(\"Stage\"), &httpStageProps{\n\thttpApi: api,\n\tstageName: jsii.String(\"beta\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigwv2.HttpApi;\n\nnew apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n  stageName: 'beta',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 150
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpStage",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpStageProps",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigwv2.HttpApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n  stageName: 'beta',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c1dc83830122b270c353c30e80d99d8691dc6741ea3353b4e6551847fc8e7734"
    },
    "da5f74f94b5e542bf6a1b88670d6d65d61b8aa4a302e81892f904e1fd4630b2d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpLambdaIntegration\n\n# handler: lambda.Function\n\n\ncert_arn = \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomain_name = \"example.com\"\n\ndn = apigwv2.DomainName(self, \"DN\",\n    domain_name=domain_name,\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", cert_arn)\n)\napi = apigwv2.HttpApi(self, \"HttpProxyProdApi\",\n    default_integration=HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    # https://${dn.domainName}/foo goes to prodApi $default stage\n    default_domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"foo\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction handler;\n\n\nstring certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nstring domainName = \"example.com\";\n\nDomainName dn = new DomainName(this, \"DN\", new DomainNameProps {\n    DomainName = domainName,\n    Certificate = Certificate.FromCertificateArn(this, \"cert\", certArn)\n});\nHttpApi api = new HttpApi(this, \"HttpProxyProdApi\", new HttpApiProps {\n    DefaultIntegration = new HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    // https://${dn.domainName}/foo goes to prodApi $default stage\n    DefaultDomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"foo\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpLambdaIntegration;\n\nFunction handler;\n\n\nString certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nString domainName = \"example.com\";\n\nDomainName dn = DomainName.Builder.create(this, \"DN\")\n        .domainName(domainName)\n        .certificate(Certificate.fromCertificateArn(this, \"cert\", certArn))\n        .build();\nHttpApi api = HttpApi.Builder.create(this, \"HttpProxyProdApi\")\n        .defaultIntegration(new HttpLambdaIntegration(\"DefaultIntegration\", handler))\n        // https://${dn.domainName}/foo goes to prodApi $default stage\n        .defaultDomainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"foo\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import acm \"github.com/aws/aws-cdk-go/awscdk\"import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpLambdaIntegration awscdkapigatewayv2integrationsalpha.HttpLambdaIntegration\n\nvar handler function\n\ncertArn := \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomainName := \"example.com\"\n\ndn := apigwv2.NewDomainName(this, jsii.String(\"DN\"), &domainNameProps{\n\tdomainName: jsii.String(domainName),\n\tcertificate: acm.certificate.fromCertificateArn(this, jsii.String(\"cert\"), certArn),\n})\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyProdApi\"), &httpApiProps{\n\tdefaultIntegration: NewHttpLambdaIntegration(jsii.String(\"DefaultIntegration\"), handler),\n\t// https://${dn.domainName}/foo goes to prodApi $default stage\n\tdefaultDomainMapping: &domainMappingOptions{\n\t\tdomainName: dn,\n\t\tmappingKey: jsii.String(\"foo\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from 'aws-cdk-lib/aws-certificatemanager';\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nconst dn = new apigwv2.DomainName(this, 'DN', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n});\n\ndeclare const handler: lambda.Function;\nconst api = new apigwv2.HttpApi(this, 'HttpProxyProdApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/foo goes to prodApi $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'foo',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 171
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.DomainName",
        "@aws-cdk/aws-apigatewayv2-alpha.DomainNameProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IDomainName",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpLambdaIntegration",
        "aws-cdk-lib.aws_certificatemanager.Certificate",
        "aws-cdk-lib.aws_certificatemanager.Certificate#fromCertificateArn",
        "aws-cdk-lib.aws_certificatemanager.ICertificate",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as acm from 'aws-cdk-lib/aws-certificatemanager';\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nconst dn = new apigwv2.DomainName(this, 'DN', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n});\nconst api = new apigwv2.HttpApi(this, 'HttpProxyProdApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/foo goes to prodApi $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'foo',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 26,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "0cfaa707512ac8352e5a04ee49c5f7b8f9a71878583c97070d53ca7000691981"
    },
    "ff9c2c72054be39d157855e32d9b7454fcf48a580acb785dd070d362deed3af5": {
      "translations": {
        "python": {
          "source": "# api: apigwv2.HttpApi\n# dn: apigwv2.DomainName\n\n\napi.add_stage(\"beta\",\n    stage_name=\"beta\",\n    auto_deploy=True,\n    # https://${dn.domainName}/bar goes to the beta stage\n    domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"bar\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HttpApi api;\nDomainName dn;\n\n\napi.AddStage(\"beta\", new HttpStageOptions {\n    StageName = \"beta\",\n    AutoDeploy = true,\n    // https://${dn.domainName}/bar goes to the beta stage\n    DomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"bar\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api;\nDomainName dn;\n\n\napi.addStage(\"beta\", HttpStageOptions.builder()\n        .stageName(\"beta\")\n        .autoDeploy(true)\n        // https://${dn.domainName}/bar goes to the beta stage\n        .domainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"bar\")\n                .build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var api httpApi\nvar dn domainName\n\napi.addStage(jsii.String(\"beta\"), &httpStageOptions{\n\tstageName: jsii.String(\"beta\"),\n\tautoDeploy: jsii.Boolean(true),\n\t// https://${dn.domainName}/bar goes to the beta stage\n\tdomainMapping: &domainMappingOptions{\n\t\tdomainName: dn,\n\t\tmappingKey: jsii.String(\"bar\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigwv2.HttpApi;\ndeclare const dn: apigwv2.DomainName;\n\napi.addStage('beta', {\n  stageName: 'beta',\n  autoDeploy: true,\n  // https://${dn.domainName}/bar goes to the beta stage\n  domainMapping: {\n    domainName: dn,\n    mappingKey: 'bar',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 200
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addStage",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpStageOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.IDomainName"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigwv2.HttpApi;\ndeclare const dn: apigwv2.DomainName;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\napi.addStage('beta', {\n  stageName: 'beta',\n  autoDeploy: true,\n  // https://${dn.domainName}/bar goes to the beta stage\n  domainMapping: {\n    domainName: dn,\n    mappingKey: 'bar',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "c8a3852b2d8b53f1703f15fe99a43e3088e07a1b9054c68be9cbd49c5ba740b5"
    },
    "82d457f6573bef4d91b0293a35f5e2f0ffdd0441fc27c4803172243522e5f567": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import HttpLambdaIntegration\n\n# handler: lambda.Function\n# dn: apigwv2.DomainName\n\n\napi_demo = apigwv2.HttpApi(self, \"DemoApi\",\n    default_integration=HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    # https://${dn.domainName}/demo goes to apiDemo $default stage\n    default_domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"demo\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction handler;\nDomainName dn;\n\n\nHttpApi apiDemo = new HttpApi(this, \"DemoApi\", new HttpApiProps {\n    DefaultIntegration = new HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    // https://${dn.domainName}/demo goes to apiDemo $default stage\n    DefaultDomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"demo\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpLambdaIntegration;\n\nFunction handler;\nDomainName dn;\n\n\nHttpApi apiDemo = HttpApi.Builder.create(this, \"DemoApi\")\n        .defaultIntegration(new HttpLambdaIntegration(\"DefaultIntegration\", handler))\n        // https://${dn.domainName}/demo goes to apiDemo $default stage\n        .defaultDomainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"demo\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpLambdaIntegration awscdkapigatewayv2integrationsalpha.HttpLambdaIntegration\n\nvar handler function\nvar dn domainName\n\napiDemo := apigwv2.NewHttpApi(this, jsii.String(\"DemoApi\"), &httpApiProps{\n\tdefaultIntegration: NewHttpLambdaIntegration(jsii.String(\"DefaultIntegration\"), handler),\n\t// https://${dn.domainName}/demo goes to apiDemo $default stage\n\tdefaultDomainMapping: &domainMappingOptions{\n\t\tdomainName: dn,\n\t\tmappingKey: jsii.String(\"demo\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const handler: lambda.Function;\ndeclare const dn: apigwv2.DomainName;\n\nconst apiDemo = new apigwv2.HttpApi(this, 'DemoApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/demo goes to apiDemo $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'demo',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 217
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IDomainName",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpLambdaIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const handler: lambda.Function;\ndeclare const dn: apigwv2.DomainName;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst apiDemo = new apigwv2.HttpApi(this, 'DemoApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/demo goes to apiDemo $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'demo',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "5e3c1168a6514b29ad8718e11087090602635f7ed5721c6f920db12601be8994"
    },
    "a94bfbd21c441b98878acc80c2001e3a2c5420605a747b81e8bba2c844782bda": {
      "translations": {
        "python": {
          "source": "# api_demo: apigwv2.HttpApi\n\ndemo_domain_url = api_demo.default_stage.domain_url",
          "version": "2"
        },
        "csharp": {
          "source": "HttpApi apiDemo;\n\nstring? demoDomainUrl = apiDemo.DefaultStage.DomainUrl;",
          "version": "1"
        },
        "java": {
          "source": "HttpApi apiDemo;\n\nString demoDomainUrl = apiDemo.getDefaultStage().getDomainUrl();",
          "version": "1"
        },
        "go": {
          "source": "var apiDemo httpApi\ndemoDomainUrl := apiDemo.defaultStage.domainUrl",
          "version": "1"
        },
        "$": {
          "source": "declare const apiDemo: apigwv2.HttpApi;\nconst demoDomainUrl = apiDemo.defaultStage?.domainUrl; // returns \"https://example.com/demo\"",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 245
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#defaultStage",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpStage#domainUrl"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const apiDemo: apigwv2.HttpApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst demoDomainUrl = apiDemo.defaultStage?.domainUrl;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "28": 1,
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "d9f70bd891bcfa94ecda5c61e558ac6c0fb606a16d0401d349fe41b78aebd73a"
    },
    "0759a4f316db778abaafcc5685ca8dfbafaf4abec132b025f205e58b3abec240": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3 as s3\nimport aws_cdk.aws_certificatemanager as acm\n# bucket: s3.Bucket\n\n\ncert_arn = \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomain_name = \"example.com\"\n\napigwv2.DomainName(self, \"DomainName\",\n    domain_name=domain_name,\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", cert_arn),\n    mtls=apigwv2.MTLSConfig(\n        bucket=bucket,\n        key=\"someca.pem\",\n        version=\"version\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3;\nusing Amazon.CDK.AWS.CertificateManager;\nBucket bucket;\n\n\nstring certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nstring domainName = \"example.com\";\n\nnew DomainName(this, \"DomainName\", new DomainNameProps {\n    DomainName = domainName,\n    Certificate = Certificate.FromCertificateArn(this, \"cert\", certArn),\n    Mtls = new MTLSConfig {\n        Bucket = bucket,\n        Key = \"someca.pem\",\n        Version = \"version\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.services.certificatemanager.*;\nBucket bucket;\n\n\nString certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nString domainName = \"example.com\";\n\nDomainName.Builder.create(this, \"DomainName\")\n        .domainName(domainName)\n        .certificate(Certificate.fromCertificateArn(this, \"cert\", certArn))\n        .mtls(MTLSConfig.builder()\n                .bucket(bucket)\n                .key(\"someca.pem\")\n                .version(\"version\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import s3 \"github.com/aws/aws-cdk-go/awscdk\"import acm \"github.com/aws/aws-cdk-go/awscdk\"\nvar bucket bucket\n\ncertArn := \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomainName := \"example.com\"\n\napigwv2.NewDomainName(this, jsii.String(\"DomainName\"), &domainNameProps{\n\tdomainName: jsii.String(domainName),\n\tcertificate: acm.certificate.fromCertificateArn(this, jsii.String(\"cert\"), certArn),\n\tmtls: &mTLSConfig{\n\t\tbucket: bucket,\n\t\tkey: jsii.String(\"someca.pem\"),\n\t\tversion: jsii.String(\"version\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as s3 from 'aws-cdk-lib/aws-s3';\nimport * as acm from 'aws-cdk-lib/aws-certificatemanager';\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\ndeclare const bucket: s3.Bucket;\n\nnew apigwv2.DomainName(this, 'DomainName', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n  mtls: {\n    bucket,\n    key: 'someca.pem',\n    version: 'version',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 254
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.DomainName",
        "@aws-cdk/aws-apigatewayv2-alpha.DomainNameProps",
        "@aws-cdk/aws-apigatewayv2-alpha.MTLSConfig",
        "aws-cdk-lib.aws_certificatemanager.Certificate",
        "aws-cdk-lib.aws_certificatemanager.Certificate#fromCertificateArn",
        "aws-cdk-lib.aws_certificatemanager.ICertificate",
        "aws-cdk-lib.aws_s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as s3 from 'aws-cdk-lib/aws-s3';\nimport * as acm from 'aws-cdk-lib/aws-certificatemanager';\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nnew apigwv2.DomainName(this, 'DomainName', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n  mtls: {\n    bucket,\n    key: 'someca.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 19,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "72e7f13c8f5be88730be544daa0939d739a461f5d8bdf66667755994a61c67f2"
    },
    "4b1a628365d0bb84fb736f9030cfb25949f0f6da7ef138c717041515c7847305": {
      "translations": {
        "python": {
          "source": "api = apigwv2.HttpApi(self, \"my-api\")\nclient_error_metric = api.metric_client_error()",
          "version": "2"
        },
        "csharp": {
          "source": "HttpApi api = new HttpApi(this, \"my-api\");\nMetric clientErrorMetric = api.MetricClientError();",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api = new HttpApi(this, \"my-api\");\nMetric clientErrorMetric = api.metricClientError();",
          "version": "1"
        },
        "go": {
          "source": "api := apigwv2.NewHttpApi(this, jsii.String(\"my-api\"))\nclientErrorMetric := api.metricClientError()",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigwv2.HttpApi(this, 'my-api');\nconst clientErrorMetric = api.metricClientError();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 289
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "aws-cdk-lib.aws_cloudwatch.Metric"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigwv2.HttpApi(this, 'my-api');\nconst clientErrorMetric = api.metricClientError();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "630dd36c1d5a4da76a8c10ad3b815fce69f82096ba837e229856cf731a42435b"
    },
    "f826afb14803495009fa3af632b89b7a770586f837ff9119c3e8597f2975ae63": {
      "translations": {
        "python": {
          "source": "api = apigwv2.HttpApi(self, \"my-api\")\nstage = apigwv2.HttpStage(self, \"Stage\",\n    http_api=api\n)\nclient_error_metric = stage.metric_client_error()",
          "version": "2"
        },
        "csharp": {
          "source": "HttpApi api = new HttpApi(this, \"my-api\");\nHttpStage stage = new HttpStage(this, \"Stage\", new HttpStageProps {\n    HttpApi = api\n});\nMetric clientErrorMetric = stage.MetricClientError();",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api = new HttpApi(this, \"my-api\");\nHttpStage stage = HttpStage.Builder.create(this, \"Stage\")\n        .httpApi(api)\n        .build();\nMetric clientErrorMetric = stage.metricClientError();",
          "version": "1"
        },
        "go": {
          "source": "api := apigwv2.NewHttpApi(this, jsii.String(\"my-api\"))\nstage := apigwv2.NewHttpStage(this, jsii.String(\"Stage\"), &httpStageProps{\n\thttpApi: api,\n})\nclientErrorMetric := stage.metricClientError()",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigwv2.HttpApi(this, 'my-api');\nconst stage = new apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n});\nconst clientErrorMetric = stage.metricClientError();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 297
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpStage",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpStageProps",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpApi",
        "aws-cdk-lib.aws_cloudwatch.Metric"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigwv2.HttpApi(this, 'my-api');\nconst stage = new apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n});\nconst clientErrorMetric = stage.metricClientError();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1
      },
      "fqnsFingerprint": "3c08b7f5bf32e2a0024479c542026004e6fc1c718545cd976154f69745080930"
    },
    "e387e464716562611914b9bc4e64844ac7ca9187cd286b61d036e5dbb95e6daa": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nvpc_link = apigwv2.VpcLink(self, \"VpcLink\", vpc=vpc)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = new VpcLink(this, \"VpcLink\", new VpcLinkProps { Vpc = vpc });",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = VpcLink.Builder.create(this, \"VpcLink\").vpc(vpc).build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws/aws-cdk-go/awscdk\"\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nvpcLink := apigwv2.NewVpcLink(this, jsii.String(\"VpcLink\"), &vpcLinkProps{\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from 'aws-cdk-lib/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 311
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.VpcLink",
        "@aws-cdk/aws-apigatewayv2-alpha.VpcLinkProps",
        "aws-cdk-lib.aws_ec2.IVpc",
        "aws-cdk-lib.aws_ec2.Vpc"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "04a9f7d99a3413d8875e8ea80b2eeb825145699a50e840d36567bc97a60d412e"
    },
    "41b98ac34547915ffad1427cb978d72ba0709d6cb455a9ede26535b3875bf4f0": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n# vpc: ec2.Vpc\n\nawesome_link = apigwv2.VpcLink.from_vpc_link_attributes(self, \"awesome-vpc-link\",\n    vpc_link_id=\"us-east-1_oiuR12Abd\",\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\nVpc vpc;\n\nIVpcLink awesomeLink = VpcLink.FromVpcLinkAttributes(this, \"awesome-vpc-link\", new VpcLinkAttributes {\n    VpcLinkId = \"us-east-1_oiuR12Abd\",\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\nVpc vpc;\n\nIVpcLink awesomeLink = VpcLink.fromVpcLinkAttributes(this, \"awesome-vpc-link\", VpcLinkAttributes.builder()\n        .vpcLinkId(\"us-east-1_oiuR12Abd\")\n        .vpc(vpc)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar vpc vpc\nawesomeLink := apigwv2.vpcLink.fromVpcLinkAttributes(this, jsii.String(\"awesome-vpc-link\"), &vpcLinkAttributes{\n\tvpcLinkId: jsii.String(\"us-east-1_oiuR12Abd\"),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from 'aws-cdk-lib/aws-ec2';\n\ndeclare const vpc: ec2.Vpc;\nconst awesomeLink = apigwv2.VpcLink.fromVpcLinkAttributes(this, 'awesome-vpc-link', {\n  vpcLinkId: 'us-east-1_oiuR12Abd',\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 320
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IVpcLink",
        "@aws-cdk/aws-apigatewayv2-alpha.VpcLink",
        "@aws-cdk/aws-apigatewayv2-alpha.VpcLink#fromVpcLinkAttributes",
        "@aws-cdk/aws-apigatewayv2-alpha.VpcLinkAttributes",
        "aws-cdk-lib.aws_ec2.IVpc"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\n\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst awesomeLink = apigwv2.VpcLink.fromVpcLinkAttributes(this, 'awesome-vpc-link', {\n  vpcLinkId: 'us-east-1_oiuR12Abd',\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "454bbc5409fc5bb5b94d02daea3589a5f189cbae88d2999f424d05cad77a2181"
    },
    "3ee053db4f32259b7ea3f6f9dcb2fcfcca6738c9f0e23d6928d720644f670c70": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import WebSocketLambdaIntegration\n\n# connect_handler: lambda.Function\n# disconnect_handler: lambda.Function\n# default_handler: lambda.Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\",\n    connect_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"ConnectIntegration\", connect_handler)),\n    disconnect_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnect_handler)),\n    default_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"DefaultIntegration\", default_handler))\n)\n\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction connectHandler;\nFunction disconnectHandler;\nFunction defaultHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\", new WebSocketApiProps {\n    ConnectRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"ConnectIntegration\", connectHandler) },\n    DisconnectRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnectHandler) },\n    DefaultRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"DefaultIntegration\", defaultHandler) }\n});\n\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.WebSocketLambdaIntegration;\n\nFunction connectHandler;\nFunction disconnectHandler;\nFunction defaultHandler;\n\n\nWebSocketApi webSocketApi = WebSocketApi.Builder.create(this, \"mywsapi\")\n        .connectRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"ConnectIntegration\", connectHandler)).build())\n        .disconnectRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnectHandler)).build())\n        .defaultRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"DefaultIntegration\", defaultHandler)).build())\n        .build();\n\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type WebSocketLambdaIntegration awscdkapigatewayv2integrationsalpha.WebSocketLambdaIntegration\n\nvar connectHandler function\nvar disconnectHandler function\nvar defaultHandler function\n\nwebSocketApi := apigwv2.NewWebSocketApi(this, jsii.String(\"mywsapi\"), &webSocketApiProps{\n\tconnectRouteOptions: &webSocketRouteOptions{\n\t\tintegration: NewWebSocketLambdaIntegration(jsii.String(\"ConnectIntegration\"), connectHandler),\n\t},\n\tdisconnectRouteOptions: &webSocketRouteOptions{\n\t\tintegration: NewWebSocketLambdaIntegration(jsii.String(\"DisconnectIntegration\"), disconnectHandler),\n\t},\n\tdefaultRouteOptions: &webSocketRouteOptions{\n\t\tintegration: NewWebSocketLambdaIntegration(jsii.String(\"DefaultIntegration\"), defaultHandler),\n\t},\n})\n\napigwv2.NewWebSocketStage(this, jsii.String(\"mystage\"), &webSocketStageProps{\n\twebSocketApi: webSocketApi,\n\tstageName: jsii.String(\"dev\"),\n\tautoDeploy: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const connectHandler: lambda.Function;\ndeclare const disconnectHandler: lambda.Function;\ndeclare const defaultHandler: lambda.Function;\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi', {\n  connectRouteOptions: { integration: new WebSocketLambdaIntegration('ConnectIntegration', connectHandler) },\n  disconnectRouteOptions: { integration: new WebSocketLambdaIntegration('DisconnectIntegration',disconnectHandler) },\n  defaultRouteOptions: { integration: new WebSocketLambdaIntegration('DefaultIntegration', defaultHandler) },\n});\n\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 356
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStageProps",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.WebSocketLambdaIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const connectHandler: lambda.Function;\ndeclare const disconnectHandler: lambda.Function;\ndeclare const defaultHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi', {\n  connectRouteOptions: { integration: new WebSocketLambdaIntegration('ConnectIntegration', connectHandler) },\n  disconnectRouteOptions: { integration: new WebSocketLambdaIntegration('DisconnectIntegration',disconnectHandler) },\n  defaultRouteOptions: { integration: new WebSocketLambdaIntegration('DefaultIntegration', defaultHandler) },\n});\n\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 30,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 2,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2674e11af1600c23990cbc4c24c05c1babd7baadff4056df82d6ec1700694201"
    },
    "89a4fafb9121a626ba57ecbff01c204bb78cdaf7168bdd716c7886ea34773fcc": {
      "translations": {
        "python": {
          "source": "# web_socket_stage: apigwv2.WebSocketStage\n\n\nweb_socket_uRL = web_socket_stage.url\n# wss://${this.api.apiId}.execute-api.${s.region}.${s.urlSuffix}/${urlPath}\ncallback_uRL = web_socket_stage.callback_url",
          "version": "2"
        },
        "csharp": {
          "source": "WebSocketStage webSocketStage;\n\n\nstring webSocketURL = webSocketStage.Url;\n// wss://${this.api.apiId}.execute-api.${s.region}.${s.urlSuffix}/${urlPath}\nstring callbackURL = webSocketStage.CallbackUrl;",
          "version": "1"
        },
        "java": {
          "source": "WebSocketStage webSocketStage;\n\n\nString webSocketURL = webSocketStage.getUrl();\n// wss://${this.api.apiId}.execute-api.${s.region}.${s.urlSuffix}/${urlPath}\nString callbackURL = webSocketStage.getCallbackUrl();",
          "version": "1"
        },
        "go": {
          "source": "var webSocketStage webSocketStage\n\nwebSocketURL := webSocketStage.url\n// wss://${this.api.apiId}.execute-api.${s.region}.${s.urlSuffix}/${urlPath}\ncallbackURL := webSocketStage.callbackUrl",
          "version": "1"
        },
        "$": {
          "source": "declare const webSocketStage: apigwv2.WebSocketStage;\n\nconst webSocketURL = webSocketStage.url;\n// wss://${this.api.apiId}.execute-api.${s.region}.${s.urlSuffix}/${urlPath}\nconst callbackURL = webSocketStage.callbackUrl;\n// https://${this.api.apiId}.execute-api.${s.region}.${s.urlSuffix}/${urlPath}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 378
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const webSocketStage: apigwv2.WebSocketStage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketURL = webSocketStage.url;\n// wss://${this.api.apiId}.execute-api.${s.region}.${s.urlSuffix}/${urlPath}\nconst callbackURL = webSocketStage.callbackUrl;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "7887ff2d0e31bc05f15b696f65ac6faa89c4005761cb49b746aaf85bf030a9e4": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import WebSocketLambdaIntegration\n\n# message_handler: lambda.Function\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\")\nweb_socket_api.add_route(\"sendmessage\",\n    integration=WebSocketLambdaIntegration(\"SendMessageIntegration\", message_handler)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction messageHandler;\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nwebSocketApi.AddRoute(\"sendmessage\", new WebSocketRouteOptions {\n    Integration = new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.WebSocketLambdaIntegration;\n\nFunction messageHandler;\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nwebSocketApi.addRoute(\"sendmessage\", WebSocketRouteOptions.builder()\n        .integration(new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type WebSocketLambdaIntegration awscdkapigatewayv2integrationsalpha.WebSocketLambdaIntegration\n\nvar messageHandler function\nwebSocketApi := apigwv2.NewWebSocketApi(this, jsii.String(\"mywsapi\"))\nwebSocketApi.addRoute(jsii.String(\"sendmessage\"), &webSocketRouteOptions{\n\tintegration: NewWebSocketLambdaIntegration(jsii.String(\"SendMessageIntegration\"), messageHandler),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const messageHandler: lambda.Function;\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 389
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi#addRoute",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.WebSocketLambdaIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const messageHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "230a388a50b6f288d5ef8341baf502ddf84edd1975cda7a1d9d3d8f3b85b0109"
    },
    "3c9bb446ed5248e4813e1df948548dfe10d65fbba6502417b8f2cfffe1e29389": {
      "translations": {
        "python": {
          "source": "web_socket_api = apigwv2.WebSocketApi.from_web_socket_api_attributes(self, \"mywsapi\", web_socket_id=\"api-1234\")",
          "version": "2"
        },
        "csharp": {
          "source": "IWebSocketApi webSocketApi = WebSocketApi.FromWebSocketApiAttributes(this, \"mywsapi\", new WebSocketApiAttributes { WebSocketId = \"api-1234\" });",
          "version": "1"
        },
        "java": {
          "source": "IWebSocketApi webSocketApi = WebSocketApi.fromWebSocketApiAttributes(this, \"mywsapi\", WebSocketApiAttributes.builder().webSocketId(\"api-1234\").build());",
          "version": "1"
        },
        "go": {
          "source": "webSocketApi := apigwv2.webSocketApi.fromWebSocketApiAttributes(this, jsii.String(\"mywsapi\"), &webSocketApiAttributes{\n\twebSocketId: jsii.String(\"api-1234\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const webSocketApi = apigwv2.WebSocketApi.fromWebSocketApiAttributes(this, 'mywsapi', { webSocketId: 'api-1234' });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 401
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi#fromWebSocketApiAttributes",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiAttributes"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst webSocketApi = apigwv2.WebSocketApi.fromWebSocketApiAttributes(this, 'mywsapi', { webSocketId: 'api-1234' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "56c037bf490c0d6e489b610a04755d913e2ce94d672ae8a1908e9b68c4b836e1"
    },
    "8c1707109935ec67bc5b77fe26a588b59ee864d96b0c76359d79ae4fe7a972c7": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\")\nstage = apigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\"\n)\n# per stage permission\nstage.grant_management_api_access(fn)\n# for all the stages permission\nweb_socket_api.grant_manage_connections(fn)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nWebSocketStage stage = new WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\"\n});\n// per stage permission\nstage.GrantManagementApiAccess(fn);\n// for all the stages permission\nwebSocketApi.GrantManageConnections(fn);",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nWebSocketStage stage = WebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .build();\n// per stage permission\nstage.grantManagementApiAccess(fn);\n// for all the stages permission\nwebSocketApi.grantManageConnections(fn);",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nwebSocketApi := apigwv2.NewWebSocketApi(this, jsii.String(\"mywsapi\"))\nstage := apigwv2.NewWebSocketStage(this, jsii.String(\"mystage\"), &webSocketStageProps{\n\twebSocketApi: webSocketApi,\n\tstageName: jsii.String(\"dev\"),\n})\n// per stage permission\nstage.grantManagementApiAccess(fn)\n// for all the stages permission\nwebSocketApi.grantManageConnections(fn)",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nconst stage = new apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n});\n// per stage permission\nstage.grantManagementApiAccess(fn);\n// for all the stages permission\nwebSocketApi.grantManageConnections(fn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 410
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi#grantManageConnections",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStage#grantManagementApiAccess",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStageProps",
        "aws-cdk-lib.aws_iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nconst stage = new apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n});\n// per stage permission\nstage.grantManagementApiAccess(fn);\n// for all the stages permission\nwebSocketApi.grantManageConnections(fn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "10814a7c08aa2a4e5667b43e102168650fa38580c30ac9288361a93c045599fd"
    },
    "d3fa502465ade0ec62001b7d1519260c778923265c1e27ccdbf2c38ed525a3b7": {
      "translations": {
        "python": {
          "source": "web_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\",\n    api_key_selection_expression=apigwv2.WebSocketApiKeySelectionExpression.HEADER_X_API_KEY\n)",
          "version": "2"
        },
        "csharp": {
          "source": "WebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\", new WebSocketApiProps {\n    ApiKeySelectionExpression = WebSocketApiKeySelectionExpression.HEADER_X_API_KEY\n});",
          "version": "1"
        },
        "java": {
          "source": "WebSocketApi webSocketApi = WebSocketApi.Builder.create(this, \"mywsapi\")\n        .apiKeySelectionExpression(WebSocketApiKeySelectionExpression.HEADER_X_API_KEY)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "webSocketApi := apigwv2.NewWebSocketApi(this, jsii.String(\"mywsapi\"), &webSocketApiProps{\n\tapiKeySelectionExpression: apigwv2.webSocketApiKeySelectionExpression_HEADER_X_API_KEY(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi',{\n  apiKeySelectionExpression: apigwv2.WebSocketApiKeySelectionExpression.HEADER_X_API_KEY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 436
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiKeySelectionExpression",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiKeySelectionExpression#HEADER_X_API_KEY",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi',{\n  apiKeySelectionExpression: apigwv2.WebSocketApiKeySelectionExpression.HEADER_X_API_KEY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "590134f8f369f1b357c7c2974a0ef41f04dc256bf1ef7717eed9aa8ac2939972"
    },
    "0b87d8db11baeab461d7fbbe8be9bbcff06e77e811087cc7ce4c429cc73df453": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpLambdaAuthorizer, HttpLambdaResponseType\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n# This function handles your auth logic\n# auth_handler: lambda.Function\n\n\nauthorizer = HttpLambdaAuthorizer(\"BooksAuthorizer\", auth_handler,\n    response_types=[HttpLambdaResponseType.SIMPLE]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = new HttpLambdaAuthorizer(\"BooksAuthorizer\", authHandler, new HttpLambdaAuthorizerProps {\n    ResponseTypes = new [] { HttpLambdaResponseType.SIMPLE }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpLambdaResponseType;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = HttpLambdaAuthorizer.Builder.create(\"BooksAuthorizer\", authHandler)\n        .responseTypes(List.of(HttpLambdaResponseType.SIMPLE))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2authorizersalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2authorizersalpha\"type HttpLambdaAuthorizer awscdkapigatewayv2authorizersalpha.HttpLambdaAuthorizer\ntype HttpLambdaResponseType awscdkapigatewayv2authorizersalpha.HttpLambdaResponseTypeimport awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpUrlIntegration awscdkapigatewayv2integrationsalpha.HttpUrlIntegration\n\n// This function handles your auth logic\nvar authHandler function\n\nauthorizer := NewHttpLambdaAuthorizer(jsii.String(\"BooksAuthorizer\"), authHandler, &httpLambdaAuthorizerProps{\n\tresponseTypes: []httpLambdaResponseType{\n\t\thttpLambdaResponseType_SIMPLE,\n\t},\n})\n\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tauthorizer: authorizer,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpLambdaResponseType#SIMPLE",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cd376c144f3b18d1dba47b0fc26b8a7655938a822fd3746cd9a89f1fbdbe6c2a"
    },
    "28f327b674b8e0834b462f2bb91362263a1b35d7aa2f2828d3e1420b0dcb1e76": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# api: apigatewayv2_alpha.IApi\n# domain_name: apigatewayv2_alpha.DomainName\n# stage: apigatewayv2_alpha.IStage\n\napi_mapping = apigatewayv2_alpha.ApiMapping(self, \"MyApiMapping\",\n    api=api,\n    domain_name=domain_name,\n\n    # the properties below are optional\n    api_mapping_key=\"apiMappingKey\",\n    stage=stage\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nIApi api;\nDomainName domainName;\nIStage stage;\n\nApiMapping apiMapping = new ApiMapping(this, \"MyApiMapping\", new ApiMappingProps {\n    Api = api,\n    DomainName = domainName,\n\n    // the properties below are optional\n    ApiMappingKey = \"apiMappingKey\",\n    Stage = stage\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nIApi api;\nDomainName domainName;\nIStage stage;\n\nApiMapping apiMapping = ApiMapping.Builder.create(this, \"MyApiMapping\")\n        .api(api)\n        .domainName(domainName)\n\n        // the properties below are optional\n        .apiMappingKey(\"apiMappingKey\")\n        .stage(stage)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar api iApi\nvar domainName domainName\nvar stage iStage\napiMapping := apigatewayv2_alpha.NewApiMapping(this, jsii.String(\"MyApiMapping\"), &apiMappingProps{\n\tapi: api,\n\tdomainName: domainName,\n\n\t// the properties below are optional\n\tapiMappingKey: jsii.String(\"apiMappingKey\"),\n\tstage: stage,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const api: apigatewayv2_alpha.IApi;\ndeclare const domainName: apigatewayv2_alpha.DomainName;\ndeclare const stage: apigatewayv2_alpha.IStage;\nconst apiMapping = new apigatewayv2_alpha.ApiMapping(this, 'MyApiMapping', {\n  api: api,\n  domainName: domainName,\n\n  // the properties below are optional\n  apiMappingKey: 'apiMappingKey',\n  stage: stage,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.ApiMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.ApiMapping",
        "@aws-cdk/aws-apigatewayv2-alpha.ApiMappingProps",
        "@aws-cdk/aws-apigatewayv2-alpha.IApi",
        "@aws-cdk/aws-apigatewayv2-alpha.IDomainName",
        "@aws-cdk/aws-apigatewayv2-alpha.IStage"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const api: apigatewayv2_alpha.IApi;\ndeclare const domainName: apigatewayv2_alpha.DomainName;\ndeclare const stage: apigatewayv2_alpha.IStage;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiMapping = new apigatewayv2_alpha.ApiMapping(this, 'MyApiMapping', {\n  api: api,\n  domainName: domainName,\n\n  // the properties below are optional\n  apiMappingKey: 'apiMappingKey',\n  stage: stage,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 20,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "68a8215d38ee797b4379336086bb1c250a55d1ab5cedf5e79ddf1e9b6faa3ff9"
    },
    "9f5a0113a69e1099dbe97ed1c55d09944e64ded19dd2b69405206843c1166731": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\napi_mapping_attributes = apigatewayv2_alpha.ApiMappingAttributes(\n    api_mapping_id=\"apiMappingId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nApiMappingAttributes apiMappingAttributes = new ApiMappingAttributes {\n    ApiMappingId = \"apiMappingId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nApiMappingAttributes apiMappingAttributes = ApiMappingAttributes.builder()\n        .apiMappingId(\"apiMappingId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\napiMappingAttributes := &apiMappingAttributes{\n\tapiMappingId: jsii.String(\"apiMappingId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst apiMappingAttributes: apigatewayv2_alpha.ApiMappingAttributes = {\n  apiMappingId: 'apiMappingId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.ApiMappingAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.ApiMappingAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiMappingAttributes: apigatewayv2_alpha.ApiMappingAttributes = {\n  apiMappingId: 'apiMappingId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9b168a3403fc76a2cbebbf3a92fe2b3deed212364139a266307b58a0ccd411f8"
    },
    "57835f1f5e4926a56d0e0a37427941c1d58cbeea8352aeedee78c903d965482a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# api: apigatewayv2_alpha.IApi\n# domain_name: apigatewayv2_alpha.DomainName\n# stage: apigatewayv2_alpha.IStage\n\napi_mapping_props = apigatewayv2_alpha.ApiMappingProps(\n    api=api,\n    domain_name=domain_name,\n\n    # the properties below are optional\n    api_mapping_key=\"apiMappingKey\",\n    stage=stage\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nIApi api;\nDomainName domainName;\nIStage stage;\n\nApiMappingProps apiMappingProps = new ApiMappingProps {\n    Api = api,\n    DomainName = domainName,\n\n    // the properties below are optional\n    ApiMappingKey = \"apiMappingKey\",\n    Stage = stage\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nIApi api;\nDomainName domainName;\nIStage stage;\n\nApiMappingProps apiMappingProps = ApiMappingProps.builder()\n        .api(api)\n        .domainName(domainName)\n\n        // the properties below are optional\n        .apiMappingKey(\"apiMappingKey\")\n        .stage(stage)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar api iApi\nvar domainName domainName\nvar stage iStage\napiMappingProps := &apiMappingProps{\n\tapi: api,\n\tdomainName: domainName,\n\n\t// the properties below are optional\n\tapiMappingKey: jsii.String(\"apiMappingKey\"),\n\tstage: stage,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const api: apigatewayv2_alpha.IApi;\ndeclare const domainName: apigatewayv2_alpha.DomainName;\ndeclare const stage: apigatewayv2_alpha.IStage;\nconst apiMappingProps: apigatewayv2_alpha.ApiMappingProps = {\n  api: api,\n  domainName: domainName,\n\n  // the properties below are optional\n  apiMappingKey: 'apiMappingKey',\n  stage: stage,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.ApiMappingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.ApiMappingProps",
        "@aws-cdk/aws-apigatewayv2-alpha.IApi",
        "@aws-cdk/aws-apigatewayv2-alpha.IDomainName",
        "@aws-cdk/aws-apigatewayv2-alpha.IStage"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const api: apigatewayv2_alpha.IApi;\ndeclare const domainName: apigatewayv2_alpha.DomainName;\ndeclare const stage: apigatewayv2_alpha.IStage;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiMappingProps: apigatewayv2_alpha.ApiMappingProps = {\n  api: api,\n  domainName: domainName,\n\n  // the properties below are optional\n  apiMappingKey: 'apiMappingKey',\n  stage: stage,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 20,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "96429dfac23d8a429654c3563748636db271aa60aa2054d22096d2a5394c3dc9"
    },
    "bcd26fafcf95cd801073dfe3d17c013bd2951ac9a2f3bfff9d9d7188be16bc72": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# http_route_integration: apigatewayv2_alpha.HttpRouteIntegration\n\nbatch_http_route_options = apigatewayv2_alpha.BatchHttpRouteOptions(\n    integration=http_route_integration\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nHttpRouteIntegration httpRouteIntegration;\n\nBatchHttpRouteOptions batchHttpRouteOptions = new BatchHttpRouteOptions {\n    Integration = httpRouteIntegration\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nHttpRouteIntegration httpRouteIntegration;\n\nBatchHttpRouteOptions batchHttpRouteOptions = BatchHttpRouteOptions.builder()\n        .integration(httpRouteIntegration)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar httpRouteIntegration httpRouteIntegration\nbatchHttpRouteOptions := &batchHttpRouteOptions{\n\tintegration: httpRouteIntegration,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const httpRouteIntegration: apigatewayv2_alpha.HttpRouteIntegration;\nconst batchHttpRouteOptions: apigatewayv2_alpha.BatchHttpRouteOptions = {\n  integration: httpRouteIntegration,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.BatchHttpRouteOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.BatchHttpRouteOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const httpRouteIntegration: apigatewayv2_alpha.HttpRouteIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst batchHttpRouteOptions: apigatewayv2_alpha.BatchHttpRouteOptions = {\n  integration: httpRouteIntegration,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1534f9a0d8c73c183db6b465d206c306034bb3265051fc3144bb2359b75c2dbf"
    },
    "598985514ebb6df1e3886ab36dacb152f8866c81eb253bba7b85501b7ddf6178": {
      "translations": {
        "python": {
          "source": "apigwv2.HttpApi(self, \"HttpProxyApi\",\n    cors_preflight=apigwv2.CorsPreflightOptions(\n        allow_headers=[\"Authorization\"],\n        allow_methods=[apigwv2.CorsHttpMethod.GET, apigwv2.CorsHttpMethod.HEAD, apigwv2.CorsHttpMethod.OPTIONS, apigwv2.CorsHttpMethod.POST\n        ],\n        allow_origins=[\"*\"],\n        max_age=Duration.days(10)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new HttpApi(this, \"HttpProxyApi\", new HttpApiProps {\n    CorsPreflight = new CorsPreflightOptions {\n        AllowHeaders = new [] { \"Authorization\" },\n        AllowMethods = new [] { CorsHttpMethod.GET, CorsHttpMethod.HEAD, CorsHttpMethod.OPTIONS, CorsHttpMethod.POST },\n        AllowOrigins = new [] { \"*\" },\n        MaxAge = Duration.Days(10)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi.Builder.create(this, \"HttpProxyApi\")\n        .corsPreflight(CorsPreflightOptions.builder()\n                .allowHeaders(List.of(\"Authorization\"))\n                .allowMethods(List.of(CorsHttpMethod.GET, CorsHttpMethod.HEAD, CorsHttpMethod.OPTIONS, CorsHttpMethod.POST))\n                .allowOrigins(List.of(\"*\"))\n                .maxAge(Duration.days(10))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyApi\"), &httpApiProps{\n\tcorsPreflight: &corsPreflightOptions{\n\t\tallowHeaders: []*string{\n\t\t\tjsii.String(\"Authorization\"),\n\t\t},\n\t\tallowMethods: []corsHttpMethod{\n\t\t\tapigwv2.*corsHttpMethod_GET,\n\t\t\tapigwv2.*corsHttpMethod_HEAD,\n\t\t\tapigwv2.*corsHttpMethod_OPTIONS,\n\t\t\tapigwv2.*corsHttpMethod_POST,\n\t\t},\n\t\tallowOrigins: []*string{\n\t\t\tjsii.String(\"*\"),\n\t\t},\n\t\tmaxAge: duration.days(jsii.Number(10)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new apigwv2.HttpApi(this, 'HttpProxyApi', {\n  corsPreflight: {\n    allowHeaders: ['Authorization'],\n    allowMethods: [\n      apigwv2.CorsHttpMethod.GET,\n      apigwv2.CorsHttpMethod.HEAD,\n      apigwv2.CorsHttpMethod.OPTIONS,\n      apigwv2.CorsHttpMethod.POST,\n    ],\n    allowOrigins: ['*'],\n    maxAge: Duration.days(10),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#HEAD",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#OPTIONS",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#POST",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsPreflightOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "aws-cdk-lib.Duration",
        "aws-cdk-lib.Duration#days"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigwv2.HttpApi(this, 'HttpProxyApi', {\n  corsPreflight: {\n    allowHeaders: ['Authorization'],\n    allowMethods: [\n      apigwv2.CorsHttpMethod.GET,\n      apigwv2.CorsHttpMethod.HEAD,\n      apigwv2.CorsHttpMethod.OPTIONS,\n      apigwv2.CorsHttpMethod.POST,\n    ],\n    allowOrigins: ['*'],\n    maxAge: Duration.days(10),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "104": 1,
        "192": 3,
        "193": 2,
        "194": 10,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "55d19eff5ff2c459a4ea799461395ca955e03c13a3f31ac0e3969a1a5ff0a62f"
    },
    "9ae4c000fe281dd225b6b6834f9f6d3606a48af820c874f83be4351ac6710b07": {
      "translations": {
        "python": {
          "source": "apigwv2.HttpApi(self, \"HttpProxyApi\",\n    cors_preflight=apigwv2.CorsPreflightOptions(\n        allow_headers=[\"Authorization\"],\n        allow_methods=[apigwv2.CorsHttpMethod.GET, apigwv2.CorsHttpMethod.HEAD, apigwv2.CorsHttpMethod.OPTIONS, apigwv2.CorsHttpMethod.POST\n        ],\n        allow_origins=[\"*\"],\n        max_age=Duration.days(10)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new HttpApi(this, \"HttpProxyApi\", new HttpApiProps {\n    CorsPreflight = new CorsPreflightOptions {\n        AllowHeaders = new [] { \"Authorization\" },\n        AllowMethods = new [] { CorsHttpMethod.GET, CorsHttpMethod.HEAD, CorsHttpMethod.OPTIONS, CorsHttpMethod.POST },\n        AllowOrigins = new [] { \"*\" },\n        MaxAge = Duration.Days(10)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi.Builder.create(this, \"HttpProxyApi\")\n        .corsPreflight(CorsPreflightOptions.builder()\n                .allowHeaders(List.of(\"Authorization\"))\n                .allowMethods(List.of(CorsHttpMethod.GET, CorsHttpMethod.HEAD, CorsHttpMethod.OPTIONS, CorsHttpMethod.POST))\n                .allowOrigins(List.of(\"*\"))\n                .maxAge(Duration.days(10))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyApi\"), &httpApiProps{\n\tcorsPreflight: &corsPreflightOptions{\n\t\tallowHeaders: []*string{\n\t\t\tjsii.String(\"Authorization\"),\n\t\t},\n\t\tallowMethods: []corsHttpMethod{\n\t\t\tapigwv2.*corsHttpMethod_GET,\n\t\t\tapigwv2.*corsHttpMethod_HEAD,\n\t\t\tapigwv2.*corsHttpMethod_OPTIONS,\n\t\t\tapigwv2.*corsHttpMethod_POST,\n\t\t},\n\t\tallowOrigins: []*string{\n\t\t\tjsii.String(\"*\"),\n\t\t},\n\t\tmaxAge: duration.days(jsii.Number(10)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new apigwv2.HttpApi(this, 'HttpProxyApi', {\n  corsPreflight: {\n    allowHeaders: ['Authorization'],\n    allowMethods: [\n      apigwv2.CorsHttpMethod.GET,\n      apigwv2.CorsHttpMethod.HEAD,\n      apigwv2.CorsHttpMethod.OPTIONS,\n      apigwv2.CorsHttpMethod.POST,\n    ],\n    allowOrigins: ['*'],\n    maxAge: Duration.days(10),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.CorsPreflightOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#HEAD",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#OPTIONS",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsHttpMethod#POST",
        "@aws-cdk/aws-apigatewayv2-alpha.CorsPreflightOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "aws-cdk-lib.Duration",
        "aws-cdk-lib.Duration#days"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigwv2.HttpApi(this, 'HttpProxyApi', {\n  corsPreflight: {\n    allowHeaders: ['Authorization'],\n    allowMethods: [\n      apigwv2.CorsHttpMethod.GET,\n      apigwv2.CorsHttpMethod.HEAD,\n      apigwv2.CorsHttpMethod.OPTIONS,\n      apigwv2.CorsHttpMethod.POST,\n    ],\n    allowOrigins: ['*'],\n    maxAge: Duration.days(10),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "104": 1,
        "192": 3,
        "193": 2,
        "194": 10,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "55d19eff5ff2c459a4ea799461395ca955e03c13a3f31ac0e3969a1a5ff0a62f"
    },
    "2216ae6c98e4c9423c79dbab92502553d89ece986712e658c05714bf3084f9c0": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import HttpLambdaIntegration\n\n# handler: lambda.Function\n# dn: apigwv2.DomainName\n\n\napi_demo = apigwv2.HttpApi(self, \"DemoApi\",\n    default_integration=HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    # https://${dn.domainName}/demo goes to apiDemo $default stage\n    default_domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"demo\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction handler;\nDomainName dn;\n\n\nHttpApi apiDemo = new HttpApi(this, \"DemoApi\", new HttpApiProps {\n    DefaultIntegration = new HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    // https://${dn.domainName}/demo goes to apiDemo $default stage\n    DefaultDomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"demo\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpLambdaIntegration;\n\nFunction handler;\nDomainName dn;\n\n\nHttpApi apiDemo = HttpApi.Builder.create(this, \"DemoApi\")\n        .defaultIntegration(new HttpLambdaIntegration(\"DefaultIntegration\", handler))\n        // https://${dn.domainName}/demo goes to apiDemo $default stage\n        .defaultDomainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"demo\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpLambdaIntegration awscdkapigatewayv2integrationsalpha.HttpLambdaIntegration\n\nvar handler function\nvar dn domainName\n\napiDemo := apigwv2.NewHttpApi(this, jsii.String(\"DemoApi\"), &httpApiProps{\n\tdefaultIntegration: NewHttpLambdaIntegration(jsii.String(\"DefaultIntegration\"), handler),\n\t// https://${dn.domainName}/demo goes to apiDemo $default stage\n\tdefaultDomainMapping: &domainMappingOptions{\n\t\tdomainName: dn,\n\t\tmappingKey: jsii.String(\"demo\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const handler: lambda.Function;\ndeclare const dn: apigwv2.DomainName;\n\nconst apiDemo = new apigwv2.HttpApi(this, 'DemoApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/demo goes to apiDemo $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'demo',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.DomainMappingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IDomainName",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpLambdaIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const handler: lambda.Function;\ndeclare const dn: apigwv2.DomainName;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst apiDemo = new apigwv2.HttpApi(this, 'DemoApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/demo goes to apiDemo $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'demo',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "5e3c1168a6514b29ad8718e11087090602635f7ed5721c6f920db12601be8994"
    },
    "2cd27273105c3efee2619f8f2d4e7cc43899f32dc9c1094a0ac94547998f0fff": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpLambdaIntegration\n\n# handler: lambda.Function\n\n\ncert_arn = \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomain_name = \"example.com\"\n\ndn = apigwv2.DomainName(self, \"DN\",\n    domain_name=domain_name,\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", cert_arn)\n)\napi = apigwv2.HttpApi(self, \"HttpProxyProdApi\",\n    default_integration=HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    # https://${dn.domainName}/foo goes to prodApi $default stage\n    default_domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"foo\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction handler;\n\n\nstring certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nstring domainName = \"example.com\";\n\nDomainName dn = new DomainName(this, \"DN\", new DomainNameProps {\n    DomainName = domainName,\n    Certificate = Certificate.FromCertificateArn(this, \"cert\", certArn)\n});\nHttpApi api = new HttpApi(this, \"HttpProxyProdApi\", new HttpApiProps {\n    DefaultIntegration = new HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    // https://${dn.domainName}/foo goes to prodApi $default stage\n    DefaultDomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"foo\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpLambdaIntegration;\n\nFunction handler;\n\n\nString certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nString domainName = \"example.com\";\n\nDomainName dn = DomainName.Builder.create(this, \"DN\")\n        .domainName(domainName)\n        .certificate(Certificate.fromCertificateArn(this, \"cert\", certArn))\n        .build();\nHttpApi api = HttpApi.Builder.create(this, \"HttpProxyProdApi\")\n        .defaultIntegration(new HttpLambdaIntegration(\"DefaultIntegration\", handler))\n        // https://${dn.domainName}/foo goes to prodApi $default stage\n        .defaultDomainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"foo\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import acm \"github.com/aws/aws-cdk-go/awscdk\"import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpLambdaIntegration awscdkapigatewayv2integrationsalpha.HttpLambdaIntegration\n\nvar handler function\n\ncertArn := \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomainName := \"example.com\"\n\ndn := apigwv2.NewDomainName(this, jsii.String(\"DN\"), &domainNameProps{\n\tdomainName: jsii.String(domainName),\n\tcertificate: acm.certificate.fromCertificateArn(this, jsii.String(\"cert\"), certArn),\n})\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyProdApi\"), &httpApiProps{\n\tdefaultIntegration: NewHttpLambdaIntegration(jsii.String(\"DefaultIntegration\"), handler),\n\t// https://${dn.domainName}/foo goes to prodApi $default stage\n\tdefaultDomainMapping: &domainMappingOptions{\n\t\tdomainName: dn,\n\t\tmappingKey: jsii.String(\"foo\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from 'aws-cdk-lib/aws-certificatemanager';\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nconst dn = new apigwv2.DomainName(this, 'DN', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n});\n\ndeclare const handler: lambda.Function;\nconst api = new apigwv2.HttpApi(this, 'HttpProxyProdApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/foo goes to prodApi $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'foo',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.DomainName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.DomainName",
        "@aws-cdk/aws-apigatewayv2-alpha.DomainNameProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IDomainName",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpLambdaIntegration",
        "aws-cdk-lib.aws_certificatemanager.Certificate",
        "aws-cdk-lib.aws_certificatemanager.Certificate#fromCertificateArn",
        "aws-cdk-lib.aws_certificatemanager.ICertificate",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as acm from 'aws-cdk-lib/aws-certificatemanager';\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nconst dn = new apigwv2.DomainName(this, 'DN', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n});\nconst api = new apigwv2.HttpApi(this, 'HttpProxyProdApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/foo goes to prodApi $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'foo',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 26,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "0cfaa707512ac8352e5a04ee49c5f7b8f9a71878583c97070d53ca7000691981"
    },
    "6a31dbf67fb6f5b1db7a1bb671e3dfe336439e7a71790ae1f403f0fecdcf4315": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\ndomain_name_attributes = apigatewayv2_alpha.DomainNameAttributes(\n    name=\"name\",\n    regional_domain_name=\"regionalDomainName\",\n    regional_hosted_zone_id=\"regionalHostedZoneId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nDomainNameAttributes domainNameAttributes = new DomainNameAttributes {\n    Name = \"name\",\n    RegionalDomainName = \"regionalDomainName\",\n    RegionalHostedZoneId = \"regionalHostedZoneId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nDomainNameAttributes domainNameAttributes = DomainNameAttributes.builder()\n        .name(\"name\")\n        .regionalDomainName(\"regionalDomainName\")\n        .regionalHostedZoneId(\"regionalHostedZoneId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\ndomainNameAttributes := &domainNameAttributes{\n\tname: jsii.String(\"name\"),\n\tregionalDomainName: jsii.String(\"regionalDomainName\"),\n\tregionalHostedZoneId: jsii.String(\"regionalHostedZoneId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst domainNameAttributes: apigatewayv2_alpha.DomainNameAttributes = {\n  name: 'name',\n  regionalDomainName: 'regionalDomainName',\n  regionalHostedZoneId: 'regionalHostedZoneId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.DomainNameAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.DomainNameAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst domainNameAttributes: apigatewayv2_alpha.DomainNameAttributes = {\n  name: 'name',\n  regionalDomainName: 'regionalDomainName',\n  regionalHostedZoneId: 'regionalHostedZoneId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "9b7f06797addb7de4a52dd273e1ec2871078959db25b650b0eff2afa003aa2cc"
    },
    "69c7eec5d7f189329eae0bb3b86fd67ca5fca1ebefbbaa2c9de96d017dbb088d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpLambdaIntegration\n\n# handler: lambda.Function\n\n\ncert_arn = \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomain_name = \"example.com\"\n\ndn = apigwv2.DomainName(self, \"DN\",\n    domain_name=domain_name,\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", cert_arn)\n)\napi = apigwv2.HttpApi(self, \"HttpProxyProdApi\",\n    default_integration=HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    # https://${dn.domainName}/foo goes to prodApi $default stage\n    default_domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"foo\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction handler;\n\n\nstring certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nstring domainName = \"example.com\";\n\nDomainName dn = new DomainName(this, \"DN\", new DomainNameProps {\n    DomainName = domainName,\n    Certificate = Certificate.FromCertificateArn(this, \"cert\", certArn)\n});\nHttpApi api = new HttpApi(this, \"HttpProxyProdApi\", new HttpApiProps {\n    DefaultIntegration = new HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    // https://${dn.domainName}/foo goes to prodApi $default stage\n    DefaultDomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"foo\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpLambdaIntegration;\n\nFunction handler;\n\n\nString certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nString domainName = \"example.com\";\n\nDomainName dn = DomainName.Builder.create(this, \"DN\")\n        .domainName(domainName)\n        .certificate(Certificate.fromCertificateArn(this, \"cert\", certArn))\n        .build();\nHttpApi api = HttpApi.Builder.create(this, \"HttpProxyProdApi\")\n        .defaultIntegration(new HttpLambdaIntegration(\"DefaultIntegration\", handler))\n        // https://${dn.domainName}/foo goes to prodApi $default stage\n        .defaultDomainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"foo\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import acm \"github.com/aws/aws-cdk-go/awscdk\"import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpLambdaIntegration awscdkapigatewayv2integrationsalpha.HttpLambdaIntegration\n\nvar handler function\n\ncertArn := \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomainName := \"example.com\"\n\ndn := apigwv2.NewDomainName(this, jsii.String(\"DN\"), &domainNameProps{\n\tdomainName: jsii.String(domainName),\n\tcertificate: acm.certificate.fromCertificateArn(this, jsii.String(\"cert\"), certArn),\n})\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyProdApi\"), &httpApiProps{\n\tdefaultIntegration: NewHttpLambdaIntegration(jsii.String(\"DefaultIntegration\"), handler),\n\t// https://${dn.domainName}/foo goes to prodApi $default stage\n\tdefaultDomainMapping: &domainMappingOptions{\n\t\tdomainName: dn,\n\t\tmappingKey: jsii.String(\"foo\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from 'aws-cdk-lib/aws-certificatemanager';\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nconst dn = new apigwv2.DomainName(this, 'DN', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n});\n\ndeclare const handler: lambda.Function;\nconst api = new apigwv2.HttpApi(this, 'HttpProxyProdApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/foo goes to prodApi $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'foo',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.DomainNameProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.DomainName",
        "@aws-cdk/aws-apigatewayv2-alpha.DomainNameProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IDomainName",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpLambdaIntegration",
        "aws-cdk-lib.aws_certificatemanager.Certificate",
        "aws-cdk-lib.aws_certificatemanager.Certificate#fromCertificateArn",
        "aws-cdk-lib.aws_certificatemanager.ICertificate",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as acm from 'aws-cdk-lib/aws-certificatemanager';\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nconst dn = new apigwv2.DomainName(this, 'DN', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n});\nconst api = new apigwv2.HttpApi(this, 'HttpProxyProdApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/foo goes to prodApi $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'foo',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 26,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "0cfaa707512ac8352e5a04ee49c5f7b8f9a71878583c97070d53ca7000691981"
    },
    "d1215fcae711b8bdfa114e48178c5a456413a3f0f6d5837a921f256c041f09e1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\nfrom aws_cdk import aws_certificatemanager as certificatemanager\n\n# certificate: certificatemanager.Certificate\n\nendpoint_options = apigatewayv2_alpha.EndpointOptions(\n    certificate=certificate,\n\n    # the properties below are optional\n    certificate_name=\"certificateName\",\n    endpoint_type=apigatewayv2_alpha.EndpointType.EDGE,\n    ownership_certificate=certificate,\n    security_policy=apigatewayv2_alpha.SecurityPolicy.TLS_1_0\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\nusing Amazon.CDK.AWS.CertificateManager;\n\nCertificate certificate;\n\nEndpointOptions endpointOptions = new EndpointOptions {\n    Certificate = certificate,\n\n    // the properties below are optional\n    CertificateName = \"certificateName\",\n    EndpointType = EndpointType.EDGE,\n    OwnershipCertificate = certificate,\n    SecurityPolicy = SecurityPolicy.TLS_1_0\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\nimport software.amazon.awscdk.services.certificatemanager.*;\n\nCertificate certificate;\n\nEndpointOptions endpointOptions = EndpointOptions.builder()\n        .certificate(certificate)\n\n        // the properties below are optional\n        .certificateName(\"certificateName\")\n        .endpointType(EndpointType.EDGE)\n        .ownershipCertificate(certificate)\n        .securityPolicy(SecurityPolicy.TLS_1_0)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"import awscdk \"github.com/aws/aws-cdk-go/awscdk\"import certificatemanager \"github.com/aws/aws-cdk-go/awscdk/aws_certificatemanager\"\n\nvar certificate certificate\nendpointOptions := &endpointOptions{\n\tcertificate: certificate,\n\n\t// the properties below are optional\n\tcertificateName: jsii.String(\"certificateName\"),\n\tendpointType: apigatewayv2_alpha.endpointType_EDGE,\n\townershipCertificate: certificate,\n\tsecurityPolicy: apigatewayv2_alpha.securityPolicy_TLS_1_0,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport { aws_certificatemanager as certificatemanager } from 'aws-cdk-lib';\n\ndeclare const certificate: certificatemanager.Certificate;\nconst endpointOptions: apigatewayv2_alpha.EndpointOptions = {\n  certificate: certificate,\n\n  // the properties below are optional\n  certificateName: 'certificateName',\n  endpointType: apigatewayv2_alpha.EndpointType.EDGE,\n  ownershipCertificate: certificate,\n  securityPolicy: apigatewayv2_alpha.SecurityPolicy.TLS_1_0,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.EndpointOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.EndpointOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.EndpointType",
        "@aws-cdk/aws-apigatewayv2-alpha.EndpointType#EDGE",
        "@aws-cdk/aws-apigatewayv2-alpha.SecurityPolicy",
        "@aws-cdk/aws-apigatewayv2-alpha.SecurityPolicy#TLS_1_0",
        "aws-cdk-lib.aws_certificatemanager.ICertificate"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport { aws_certificatemanager as certificatemanager } from 'aws-cdk-lib';\n\ndeclare const certificate: certificatemanager.Certificate;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst endpointOptions: apigatewayv2_alpha.EndpointOptions = {\n  certificate: certificate,\n\n  // the properties below are optional\n  certificateName: 'certificateName',\n  endpointType: apigatewayv2_alpha.EndpointType.EDGE,\n  ownershipCertificate: certificate,\n  securityPolicy: apigatewayv2_alpha.SecurityPolicy.TLS_1_0,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 22,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "384fd0bd1690315b6b1942bcf48b14bf7dc0e4f9bff51bda28eb33ba49d88b9e"
    },
    "f9834376444aa5738443ce209e48a1c16fc8d80d53fb95ddba50521d8f32787e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\ngrant_invoke_options = apigatewayv2_alpha.GrantInvokeOptions(\n    http_methods=[apigatewayv2_alpha.HttpMethod.ANY]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nGrantInvokeOptions grantInvokeOptions = new GrantInvokeOptions {\n    HttpMethods = new [] { HttpMethod.ANY }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nGrantInvokeOptions grantInvokeOptions = GrantInvokeOptions.builder()\n        .httpMethods(List.of(HttpMethod.ANY))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\ngrantInvokeOptions := &grantInvokeOptions{\n\thttpMethods: []httpMethod{\n\t\tapigatewayv2_alpha.*httpMethod_ANY,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst grantInvokeOptions: apigatewayv2_alpha.GrantInvokeOptions = {\n  httpMethods: [apigatewayv2_alpha.HttpMethod.ANY],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.GrantInvokeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.GrantInvokeOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#ANY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst grantInvokeOptions: apigatewayv2_alpha.GrantInvokeOptions = {\n  httpMethods: [apigatewayv2_alpha.HttpMethod.ANY],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "fb36674b884d7e8b9d46a56be93a28cca7eaa8ddb32b0e7e01f54f7ea13f7724"
    },
    "831c772ca454b5f2ac71f936b636ca8b6b1bc76d54fcfaad61734614205d3b9e": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import HttpLambdaIntegration\n\n# books_default_fn: lambda.Function\n\nbooks_integration = HttpLambdaIntegration(\"BooksIntegration\", books_default_fn)\n\nhttp_api = apigwv2.HttpApi(self, \"HttpApi\")\n\nhttp_api.add_routes(\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.GET],\n    integration=books_integration\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction booksDefaultFn;\n\nHttpLambdaIntegration booksIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.AddRoutes(new AddRoutesOptions {\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.GET },\n    Integration = booksIntegration\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpLambdaIntegration;\n\nFunction booksDefaultFn;\n\nHttpLambdaIntegration booksIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.addRoutes(AddRoutesOptions.builder()\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.GET))\n        .integration(booksIntegration)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpLambdaIntegration awscdkapigatewayv2integrationsalpha.HttpLambdaIntegration\n\nvar booksDefaultFn function\nbooksIntegration := NewHttpLambdaIntegration(jsii.String(\"BooksIntegration\"), booksDefaultFn)\n\nhttpApi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\nhttpApi.addRoutes(&addRoutesOptions{\n\tpath: jsii.String(\"/books\"),\n\tmethods: []httpMethod{\n\t\tapigwv2.*httpMethod_GET,\n\t},\n\tintegration: booksIntegration,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const booksDefaultFn: lambda.Function;\nconst booksIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: booksIntegration,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpLambdaIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const booksDefaultFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst booksIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: booksIntegration,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "1ce62aaab1e8343a2258ac7d2bde3137486505ba2e2e9cbcb3de098bc187b62c"
    },
    "eed8013b8382e0de3a13dc477ddb46c883cd03a4663b659d7d91f09082dc6fdf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\nhttp_api_attributes = apigatewayv2_alpha.HttpApiAttributes(\n    http_api_id=\"httpApiId\",\n\n    # the properties below are optional\n    api_endpoint=\"apiEndpoint\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nHttpApiAttributes httpApiAttributes = new HttpApiAttributes {\n    HttpApiId = \"httpApiId\",\n\n    // the properties below are optional\n    ApiEndpoint = \"apiEndpoint\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nHttpApiAttributes httpApiAttributes = HttpApiAttributes.builder()\n        .httpApiId(\"httpApiId\")\n\n        // the properties below are optional\n        .apiEndpoint(\"apiEndpoint\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\nhttpApiAttributes := &httpApiAttributes{\n\thttpApiId: jsii.String(\"httpApiId\"),\n\n\t// the properties below are optional\n\tapiEndpoint: jsii.String(\"apiEndpoint\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst httpApiAttributes: apigatewayv2_alpha.HttpApiAttributes = {\n  httpApiId: 'httpApiId',\n\n  // the properties below are optional\n  apiEndpoint: 'apiEndpoint',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpApiAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpApiAttributes: apigatewayv2_alpha.HttpApiAttributes = {\n  httpApiId: 'httpApiId',\n\n  // the properties below are optional\n  apiEndpoint: 'apiEndpoint',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8a1be4e38d17d5138cff3a088620ae3bf821785c00d6421e7c8343688a3f691f"
    },
    "8fbcdf3ceee3e48fd59aa9f788dc9ec013c23c47818bc34385a8e6f47596965e": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import HttpAlbIntegration\n\n# lb: elbv2.ApplicationLoadBalancer\n\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener,\n        parameter_mapping=apigwv2.ParameterMapping().custom(\"myKey\", \"myValue\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener, new HttpAlbIntegrationProps {\n        ParameterMapping = new ParameterMapping().Custom(\"myKey\", \"myValue\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpAlbIntegration;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpAlbIntegration.Builder.create(\"DefaultIntegration\", listener)\n                .parameterMapping(new ParameterMapping().custom(\"myKey\", \"myValue\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpAlbIntegration awscdkapigatewayv2integrationsalpha.HttpAlbIntegration\n\nvar lb applicationLoadBalancer\nlistener := lb.addListener(jsii.String(\"listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nlistener.addTargets(jsii.String(\"target\"), &addApplicationTargetsProps{\n\tport: jsii.Number(80),\n})\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: NewHttpAlbIntegration(jsii.String(\"DefaultIntegration\"), listener, &httpAlbIntegrationProps{\n\t\tparameterMapping: apigwv2.NewParameterMapping().custom(jsii.String(\"myKey\"), jsii.String(\"myValue\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping().custom('myKey', 'myValue'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping#custom",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpAlbIntegrationProps",
        "aws-cdk-lib.aws_elasticloadbalancingv2.AddApplicationTargetsProps",
        "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationListener",
        "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationListener#addTargets",
        "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "aws-cdk-lib.aws_elasticloadbalancingv2.BaseApplicationListenerProps",
        "aws-cdk-lib.aws_elasticloadbalancingv2.IApplicationListener"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping().custom('myKey', 'myValue'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "40a41c4f44f1836d1c3f182ff220a732d98b732b16a54609ce460d88eb1d1b78"
    },
    "9ea79d940ebb024daf63e54e7f6ac3a7c355288d4e8aa3ba30ecc0fdea5473be": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\nimport aws_cdk as cdk\n\n# http_api: apigatewayv2_alpha.HttpApi\n\nhttp_authorizer = apigatewayv2_alpha.HttpAuthorizer(self, \"MyHttpAuthorizer\",\n    http_api=http_api,\n    identity_source=[\"identitySource\"],\n    type=apigatewayv2_alpha.HttpAuthorizerType.IAM,\n\n    # the properties below are optional\n    authorizer_name=\"authorizerName\",\n    authorizer_uri=\"authorizerUri\",\n    enable_simple_responses=False,\n    jwt_audience=[\"jwtAudience\"],\n    jwt_issuer=\"jwtIssuer\",\n    payload_format_version=apigatewayv2_alpha.AuthorizerPayloadVersion.VERSION_1_0,\n    results_cache_ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\nusing Amazon.CDK;\n\nHttpApi httpApi;\n\nHttpAuthorizer httpAuthorizer = new HttpAuthorizer(this, \"MyHttpAuthorizer\", new HttpAuthorizerProps {\n    HttpApi = httpApi,\n    IdentitySource = new [] { \"identitySource\" },\n    Type = HttpAuthorizerType.IAM,\n\n    // the properties below are optional\n    AuthorizerName = \"authorizerName\",\n    AuthorizerUri = \"authorizerUri\",\n    EnableSimpleResponses = false,\n    JwtAudience = new [] { \"jwtAudience\" },\n    JwtIssuer = \"jwtIssuer\",\n    PayloadFormatVersion = AuthorizerPayloadVersion.VERSION_1_0,\n    ResultsCacheTtl = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\nimport software.amazon.awscdk.*;\n\nHttpApi httpApi;\n\nHttpAuthorizer httpAuthorizer = HttpAuthorizer.Builder.create(this, \"MyHttpAuthorizer\")\n        .httpApi(httpApi)\n        .identitySource(List.of(\"identitySource\"))\n        .type(HttpAuthorizerType.IAM)\n\n        // the properties below are optional\n        .authorizerName(\"authorizerName\")\n        .authorizerUri(\"authorizerUri\")\n        .enableSimpleResponses(false)\n        .jwtAudience(List.of(\"jwtAudience\"))\n        .jwtIssuer(\"jwtIssuer\")\n        .payloadFormatVersion(AuthorizerPayloadVersion.VERSION_1_0)\n        .resultsCacheTtl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"import cdk \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar httpApi httpApi\nhttpAuthorizer := apigatewayv2_alpha.NewHttpAuthorizer(this, jsii.String(\"MyHttpAuthorizer\"), &httpAuthorizerProps{\n\thttpApi: httpApi,\n\tidentitySource: []*string{\n\t\tjsii.String(\"identitySource\"),\n\t},\n\ttype: apigatewayv2_alpha.httpAuthorizerType_IAM,\n\n\t// the properties below are optional\n\tauthorizerName: jsii.String(\"authorizerName\"),\n\tauthorizerUri: jsii.String(\"authorizerUri\"),\n\tenableSimpleResponses: jsii.Boolean(false),\n\tjwtAudience: []*string{\n\t\tjsii.String(\"jwtAudience\"),\n\t},\n\tjwtIssuer: jsii.String(\"jwtIssuer\"),\n\tpayloadFormatVersion: apigatewayv2_alpha.authorizerPayloadVersion_VERSION_1_0,\n\tresultsCacheTtl: cdk.duration.minutes(jsii.Number(30)),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\nconst httpAuthorizer = new apigatewayv2_alpha.HttpAuthorizer(this, 'MyHttpAuthorizer', {\n  httpApi: httpApi,\n  identitySource: ['identitySource'],\n  type: apigatewayv2_alpha.HttpAuthorizerType.IAM,\n\n  // the properties below are optional\n  authorizerName: 'authorizerName',\n  authorizerUri: 'authorizerUri',\n  enableSimpleResponses: false,\n  jwtAudience: ['jwtAudience'],\n  jwtIssuer: 'jwtIssuer',\n  payloadFormatVersion: apigatewayv2_alpha.AuthorizerPayloadVersion.VERSION_1_0,\n  resultsCacheTtl: cdk.Duration.minutes(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AuthorizerPayloadVersion",
        "@aws-cdk/aws-apigatewayv2-alpha.AuthorizerPayloadVersion#VERSION_1_0",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizer",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerType",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerType#IAM",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpApi",
        "aws-cdk-lib.Duration",
        "aws-cdk-lib.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpAuthorizer = new apigatewayv2_alpha.HttpAuthorizer(this, 'MyHttpAuthorizer', {\n  httpApi: httpApi,\n  identitySource: ['identitySource'],\n  type: apigatewayv2_alpha.HttpAuthorizerType.IAM,\n\n  // the properties below are optional\n  authorizerName: 'authorizerName',\n  authorizerUri: 'authorizerUri',\n  enableSimpleResponses: false,\n  jwtAudience: ['jwtAudience'],\n  jwtIssuer: 'jwtIssuer',\n  payloadFormatVersion: apigatewayv2_alpha.AuthorizerPayloadVersion.VERSION_1_0,\n  resultsCacheTtl: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 28,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 7,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "8b4df20822e2c8ac5107851b8638611435295cb00f045f3dd59d3473e9279367"
    },
    "6d7ad8a8e8ff287c942e7e43c60cab2addeba179cd72b683a54ca00c61fb8a8f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\nhttp_authorizer_attributes = apigatewayv2_alpha.HttpAuthorizerAttributes(\n    authorizer_id=\"authorizerId\",\n    authorizer_type=\"authorizerType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nHttpAuthorizerAttributes httpAuthorizerAttributes = new HttpAuthorizerAttributes {\n    AuthorizerId = \"authorizerId\",\n    AuthorizerType = \"authorizerType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nHttpAuthorizerAttributes httpAuthorizerAttributes = HttpAuthorizerAttributes.builder()\n        .authorizerId(\"authorizerId\")\n        .authorizerType(\"authorizerType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\nhttpAuthorizerAttributes := &httpAuthorizerAttributes{\n\tauthorizerId: jsii.String(\"authorizerId\"),\n\tauthorizerType: jsii.String(\"authorizerType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst httpAuthorizerAttributes: apigatewayv2_alpha.HttpAuthorizerAttributes = {\n  authorizerId: 'authorizerId',\n  authorizerType: 'authorizerType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpAuthorizerAttributes: apigatewayv2_alpha.HttpAuthorizerAttributes = {\n  authorizerId: 'authorizerId',\n  authorizerType: 'authorizerType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "df56cc83a5f2cadac1b28b6e1d732edb4e62544b04ad561ba1d863dd187f6b70"
    },
    "7be67e975fb3e5b69d69ff04bfbc0ab586e0a0b8cae70fb8a0f993266e868d68": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\nimport aws_cdk as cdk\n\n# http_api: apigatewayv2_alpha.HttpApi\n\nhttp_authorizer_props = apigatewayv2_alpha.HttpAuthorizerProps(\n    http_api=http_api,\n    identity_source=[\"identitySource\"],\n    type=apigatewayv2_alpha.HttpAuthorizerType.IAM,\n\n    # the properties below are optional\n    authorizer_name=\"authorizerName\",\n    authorizer_uri=\"authorizerUri\",\n    enable_simple_responses=False,\n    jwt_audience=[\"jwtAudience\"],\n    jwt_issuer=\"jwtIssuer\",\n    payload_format_version=apigatewayv2_alpha.AuthorizerPayloadVersion.VERSION_1_0,\n    results_cache_ttl=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\nusing Amazon.CDK;\n\nHttpApi httpApi;\n\nHttpAuthorizerProps httpAuthorizerProps = new HttpAuthorizerProps {\n    HttpApi = httpApi,\n    IdentitySource = new [] { \"identitySource\" },\n    Type = HttpAuthorizerType.IAM,\n\n    // the properties below are optional\n    AuthorizerName = \"authorizerName\",\n    AuthorizerUri = \"authorizerUri\",\n    EnableSimpleResponses = false,\n    JwtAudience = new [] { \"jwtAudience\" },\n    JwtIssuer = \"jwtIssuer\",\n    PayloadFormatVersion = AuthorizerPayloadVersion.VERSION_1_0,\n    ResultsCacheTtl = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\nimport software.amazon.awscdk.*;\n\nHttpApi httpApi;\n\nHttpAuthorizerProps httpAuthorizerProps = HttpAuthorizerProps.builder()\n        .httpApi(httpApi)\n        .identitySource(List.of(\"identitySource\"))\n        .type(HttpAuthorizerType.IAM)\n\n        // the properties below are optional\n        .authorizerName(\"authorizerName\")\n        .authorizerUri(\"authorizerUri\")\n        .enableSimpleResponses(false)\n        .jwtAudience(List.of(\"jwtAudience\"))\n        .jwtIssuer(\"jwtIssuer\")\n        .payloadFormatVersion(AuthorizerPayloadVersion.VERSION_1_0)\n        .resultsCacheTtl(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"import cdk \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar httpApi httpApi\nhttpAuthorizerProps := &httpAuthorizerProps{\n\thttpApi: httpApi,\n\tidentitySource: []*string{\n\t\tjsii.String(\"identitySource\"),\n\t},\n\ttype: apigatewayv2_alpha.httpAuthorizerType_IAM,\n\n\t// the properties below are optional\n\tauthorizerName: jsii.String(\"authorizerName\"),\n\tauthorizerUri: jsii.String(\"authorizerUri\"),\n\tenableSimpleResponses: jsii.Boolean(false),\n\tjwtAudience: []*string{\n\t\tjsii.String(\"jwtAudience\"),\n\t},\n\tjwtIssuer: jsii.String(\"jwtIssuer\"),\n\tpayloadFormatVersion: apigatewayv2_alpha.authorizerPayloadVersion_VERSION_1_0,\n\tresultsCacheTtl: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\nconst httpAuthorizerProps: apigatewayv2_alpha.HttpAuthorizerProps = {\n  httpApi: httpApi,\n  identitySource: ['identitySource'],\n  type: apigatewayv2_alpha.HttpAuthorizerType.IAM,\n\n  // the properties below are optional\n  authorizerName: 'authorizerName',\n  authorizerUri: 'authorizerUri',\n  enableSimpleResponses: false,\n  jwtAudience: ['jwtAudience'],\n  jwtIssuer: 'jwtIssuer',\n  payloadFormatVersion: apigatewayv2_alpha.AuthorizerPayloadVersion.VERSION_1_0,\n  resultsCacheTtl: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AuthorizerPayloadVersion",
        "@aws-cdk/aws-apigatewayv2-alpha.AuthorizerPayloadVersion#VERSION_1_0",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerType",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpAuthorizerType#IAM",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpApi",
        "aws-cdk-lib.Duration",
        "aws-cdk-lib.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpAuthorizerProps: apigatewayv2_alpha.HttpAuthorizerProps = {\n  httpApi: httpApi,\n  identitySource: ['identitySource'],\n  type: apigatewayv2_alpha.HttpAuthorizerType.IAM,\n\n  // the properties below are optional\n  authorizerName: 'authorizerName',\n  authorizerUri: 'authorizerUri',\n  enableSimpleResponses: false,\n  jwtAudience: ['jwtAudience'],\n  jwtIssuer: 'jwtIssuer',\n  payloadFormatVersion: apigatewayv2_alpha.AuthorizerPayloadVersion.VERSION_1_0,\n  resultsCacheTtl: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 28,
        "91": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "9f29e37cc677cc996f740b2321db7d9805fd8b9d86414edb67e80e2a95fbfa69"
    },
    "afd403598d77ed82b2f410012eae0ad6725cbc30acf4f9a3a8f54ada26b2d434": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# http_api: apigatewayv2_alpha.HttpApi\n# integration_credentials: apigatewayv2_alpha.IntegrationCredentials\n# parameter_mapping: apigatewayv2_alpha.ParameterMapping\n# payload_format_version: apigatewayv2_alpha.PayloadFormatVersion\n\nhttp_integration = apigatewayv2_alpha.HttpIntegration(self, \"MyHttpIntegration\",\n    http_api=http_api,\n    integration_type=apigatewayv2_alpha.HttpIntegrationType.HTTP_PROXY,\n\n    # the properties below are optional\n    connection_id=\"connectionId\",\n    connection_type=apigatewayv2_alpha.HttpConnectionType.VPC_LINK,\n    credentials=integration_credentials,\n    integration_subtype=apigatewayv2_alpha.HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS,\n    integration_uri=\"integrationUri\",\n    method=apigatewayv2_alpha.HttpMethod.ANY,\n    parameter_mapping=parameter_mapping,\n    payload_format_version=payload_format_version,\n    secure_server_name=\"secureServerName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nHttpApi httpApi;\nIntegrationCredentials integrationCredentials;\nParameterMapping parameterMapping;\nPayloadFormatVersion payloadFormatVersion;\n\nHttpIntegration httpIntegration = new HttpIntegration(this, \"MyHttpIntegration\", new HttpIntegrationProps {\n    HttpApi = httpApi,\n    IntegrationType = HttpIntegrationType.HTTP_PROXY,\n\n    // the properties below are optional\n    ConnectionId = \"connectionId\",\n    ConnectionType = HttpConnectionType.VPC_LINK,\n    Credentials = integrationCredentials,\n    IntegrationSubtype = HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS,\n    IntegrationUri = \"integrationUri\",\n    Method = HttpMethod.ANY,\n    ParameterMapping = parameterMapping,\n    PayloadFormatVersion = payloadFormatVersion,\n    SecureServerName = \"secureServerName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nHttpApi httpApi;\nIntegrationCredentials integrationCredentials;\nParameterMapping parameterMapping;\nPayloadFormatVersion payloadFormatVersion;\n\nHttpIntegration httpIntegration = HttpIntegration.Builder.create(this, \"MyHttpIntegration\")\n        .httpApi(httpApi)\n        .integrationType(HttpIntegrationType.HTTP_PROXY)\n\n        // the properties below are optional\n        .connectionId(\"connectionId\")\n        .connectionType(HttpConnectionType.VPC_LINK)\n        .credentials(integrationCredentials)\n        .integrationSubtype(HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS)\n        .integrationUri(\"integrationUri\")\n        .method(HttpMethod.ANY)\n        .parameterMapping(parameterMapping)\n        .payloadFormatVersion(payloadFormatVersion)\n        .secureServerName(\"secureServerName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar httpApi httpApi\nvar integrationCredentials integrationCredentials\nvar parameterMapping parameterMapping\nvar payloadFormatVersion payloadFormatVersion\nhttpIntegration := apigatewayv2_alpha.NewHttpIntegration(this, jsii.String(\"MyHttpIntegration\"), &httpIntegrationProps{\n\thttpApi: httpApi,\n\tintegrationType: apigatewayv2_alpha.httpIntegrationType_HTTP_PROXY,\n\n\t// the properties below are optional\n\tconnectionId: jsii.String(\"connectionId\"),\n\tconnectionType: apigatewayv2_alpha.httpConnectionType_VPC_LINK,\n\tcredentials: integrationCredentials,\n\tintegrationSubtype: apigatewayv2_alpha.httpIntegrationSubtype_EVENTBRIDGE_PUT_EVENTS,\n\tintegrationUri: jsii.String(\"integrationUri\"),\n\tmethod: apigatewayv2_alpha.httpMethod_ANY,\n\tparameterMapping: parameterMapping,\n\tpayloadFormatVersion: payloadFormatVersion,\n\tsecureServerName: jsii.String(\"secureServerName\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\ndeclare const integrationCredentials: apigatewayv2_alpha.IntegrationCredentials;\ndeclare const parameterMapping: apigatewayv2_alpha.ParameterMapping;\ndeclare const payloadFormatVersion: apigatewayv2_alpha.PayloadFormatVersion;\nconst httpIntegration = new apigatewayv2_alpha.HttpIntegration(this, 'MyHttpIntegration', {\n  httpApi: httpApi,\n  integrationType: apigatewayv2_alpha.HttpIntegrationType.HTTP_PROXY,\n\n  // the properties below are optional\n  connectionId: 'connectionId',\n  connectionType: apigatewayv2_alpha.HttpConnectionType.VPC_LINK,\n  credentials: integrationCredentials,\n  integrationSubtype: apigatewayv2_alpha.HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS,\n  integrationUri: 'integrationUri',\n  method: apigatewayv2_alpha.HttpMethod.ANY,\n  parameterMapping: parameterMapping,\n  payloadFormatVersion: payloadFormatVersion,\n  secureServerName: 'secureServerName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpConnectionType",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype#EVENTBRIDGE_PUT_EVENTS",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationType",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#ANY",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.IntegrationCredentials",
        "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2-alpha.PayloadFormatVersion"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\ndeclare const integrationCredentials: apigatewayv2_alpha.IntegrationCredentials;\ndeclare const parameterMapping: apigatewayv2_alpha.ParameterMapping;\ndeclare const payloadFormatVersion: apigatewayv2_alpha.PayloadFormatVersion;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpIntegration = new apigatewayv2_alpha.HttpIntegration(this, 'MyHttpIntegration', {\n  httpApi: httpApi,\n  integrationType: apigatewayv2_alpha.HttpIntegrationType.HTTP_PROXY,\n\n  // the properties below are optional\n  connectionId: 'connectionId',\n  connectionType: apigatewayv2_alpha.HttpConnectionType.VPC_LINK,\n  credentials: integrationCredentials,\n  integrationSubtype: apigatewayv2_alpha.HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS,\n  integrationUri: 'integrationUri',\n  method: apigatewayv2_alpha.HttpMethod.ANY,\n  parameterMapping: parameterMapping,\n  payloadFormatVersion: payloadFormatVersion,\n  secureServerName: 'secureServerName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 43,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 9,
        "197": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "ac8f1e1e9ce8d90f68f6354f6283ada8b2f3d9aae3ce2ac1a45e233ddedfdf3c"
    },
    "41ab317a192b332423545ff1de054835a559d9817f886bc2999869b14b16c2dd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# http_api: apigatewayv2_alpha.HttpApi\n# integration_credentials: apigatewayv2_alpha.IntegrationCredentials\n# parameter_mapping: apigatewayv2_alpha.ParameterMapping\n# payload_format_version: apigatewayv2_alpha.PayloadFormatVersion\n\nhttp_integration_props = apigatewayv2_alpha.HttpIntegrationProps(\n    http_api=http_api,\n    integration_type=apigatewayv2_alpha.HttpIntegrationType.HTTP_PROXY,\n\n    # the properties below are optional\n    connection_id=\"connectionId\",\n    connection_type=apigatewayv2_alpha.HttpConnectionType.VPC_LINK,\n    credentials=integration_credentials,\n    integration_subtype=apigatewayv2_alpha.HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS,\n    integration_uri=\"integrationUri\",\n    method=apigatewayv2_alpha.HttpMethod.ANY,\n    parameter_mapping=parameter_mapping,\n    payload_format_version=payload_format_version,\n    secure_server_name=\"secureServerName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nHttpApi httpApi;\nIntegrationCredentials integrationCredentials;\nParameterMapping parameterMapping;\nPayloadFormatVersion payloadFormatVersion;\n\nHttpIntegrationProps httpIntegrationProps = new HttpIntegrationProps {\n    HttpApi = httpApi,\n    IntegrationType = HttpIntegrationType.HTTP_PROXY,\n\n    // the properties below are optional\n    ConnectionId = \"connectionId\",\n    ConnectionType = HttpConnectionType.VPC_LINK,\n    Credentials = integrationCredentials,\n    IntegrationSubtype = HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS,\n    IntegrationUri = \"integrationUri\",\n    Method = HttpMethod.ANY,\n    ParameterMapping = parameterMapping,\n    PayloadFormatVersion = payloadFormatVersion,\n    SecureServerName = \"secureServerName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nHttpApi httpApi;\nIntegrationCredentials integrationCredentials;\nParameterMapping parameterMapping;\nPayloadFormatVersion payloadFormatVersion;\n\nHttpIntegrationProps httpIntegrationProps = HttpIntegrationProps.builder()\n        .httpApi(httpApi)\n        .integrationType(HttpIntegrationType.HTTP_PROXY)\n\n        // the properties below are optional\n        .connectionId(\"connectionId\")\n        .connectionType(HttpConnectionType.VPC_LINK)\n        .credentials(integrationCredentials)\n        .integrationSubtype(HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS)\n        .integrationUri(\"integrationUri\")\n        .method(HttpMethod.ANY)\n        .parameterMapping(parameterMapping)\n        .payloadFormatVersion(payloadFormatVersion)\n        .secureServerName(\"secureServerName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar httpApi httpApi\nvar integrationCredentials integrationCredentials\nvar parameterMapping parameterMapping\nvar payloadFormatVersion payloadFormatVersion\nhttpIntegrationProps := &httpIntegrationProps{\n\thttpApi: httpApi,\n\tintegrationType: apigatewayv2_alpha.httpIntegrationType_HTTP_PROXY,\n\n\t// the properties below are optional\n\tconnectionId: jsii.String(\"connectionId\"),\n\tconnectionType: apigatewayv2_alpha.httpConnectionType_VPC_LINK,\n\tcredentials: integrationCredentials,\n\tintegrationSubtype: apigatewayv2_alpha.httpIntegrationSubtype_EVENTBRIDGE_PUT_EVENTS,\n\tintegrationUri: jsii.String(\"integrationUri\"),\n\tmethod: apigatewayv2_alpha.httpMethod_ANY,\n\tparameterMapping: parameterMapping,\n\tpayloadFormatVersion: payloadFormatVersion,\n\tsecureServerName: jsii.String(\"secureServerName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\ndeclare const integrationCredentials: apigatewayv2_alpha.IntegrationCredentials;\ndeclare const parameterMapping: apigatewayv2_alpha.ParameterMapping;\ndeclare const payloadFormatVersion: apigatewayv2_alpha.PayloadFormatVersion;\nconst httpIntegrationProps: apigatewayv2_alpha.HttpIntegrationProps = {\n  httpApi: httpApi,\n  integrationType: apigatewayv2_alpha.HttpIntegrationType.HTTP_PROXY,\n\n  // the properties below are optional\n  connectionId: 'connectionId',\n  connectionType: apigatewayv2_alpha.HttpConnectionType.VPC_LINK,\n  credentials: integrationCredentials,\n  integrationSubtype: apigatewayv2_alpha.HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS,\n  integrationUri: 'integrationUri',\n  method: apigatewayv2_alpha.HttpMethod.ANY,\n  parameterMapping: parameterMapping,\n  payloadFormatVersion: payloadFormatVersion,\n  secureServerName: 'secureServerName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpConnectionType",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype#EVENTBRIDGE_PUT_EVENTS",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationType",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#ANY",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.IntegrationCredentials",
        "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2-alpha.PayloadFormatVersion"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\ndeclare const integrationCredentials: apigatewayv2_alpha.IntegrationCredentials;\ndeclare const parameterMapping: apigatewayv2_alpha.ParameterMapping;\ndeclare const payloadFormatVersion: apigatewayv2_alpha.PayloadFormatVersion;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpIntegrationProps: apigatewayv2_alpha.HttpIntegrationProps = {\n  httpApi: httpApi,\n  integrationType: apigatewayv2_alpha.HttpIntegrationType.HTTP_PROXY,\n\n  // the properties below are optional\n  connectionId: 'connectionId',\n  connectionType: apigatewayv2_alpha.HttpConnectionType.VPC_LINK,\n  credentials: integrationCredentials,\n  integrationSubtype: apigatewayv2_alpha.HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS,\n  integrationUri: 'integrationUri',\n  method: apigatewayv2_alpha.HttpMethod.ANY,\n  parameterMapping: parameterMapping,\n  payloadFormatVersion: payloadFormatVersion,\n  secureServerName: 'secureServerName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 43,
        "130": 4,
        "153": 5,
        "169": 5,
        "193": 1,
        "194": 8,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "3b1bdb92b0db300704fac4e42ee9eecbd503067b25507882d5f83abb2b2e9654"
    },
    "7f4be4b294990338948af81e8c9af7691447a244fc70c1e0a7d7cccf960cd252": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration, HttpLambdaIntegration\n\n# books_default_fn: lambda.Function\n\n\nget_books_integration = HttpUrlIntegration(\"GetBooksIntegration\", \"https://get-books-proxy.myproxy.internal\")\nbooks_default_integration = HttpLambdaIntegration(\"BooksIntegration\", books_default_fn)\n\nhttp_api = apigwv2.HttpApi(self, \"HttpApi\")\n\nhttp_api.add_routes(\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.GET],\n    integration=get_books_integration\n)\nhttp_api.add_routes(\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.ANY],\n    integration=books_default_integration\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction booksDefaultFn;\n\n\nHttpUrlIntegration getBooksIntegration = new HttpUrlIntegration(\"GetBooksIntegration\", \"https://get-books-proxy.myproxy.internal\");\nHttpLambdaIntegration booksDefaultIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.AddRoutes(new AddRoutesOptions {\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.GET },\n    Integration = getBooksIntegration\n});\nhttpApi.AddRoutes(new AddRoutesOptions {\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.ANY },\n    Integration = booksDefaultIntegration\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpLambdaIntegration;\n\nFunction booksDefaultFn;\n\n\nHttpUrlIntegration getBooksIntegration = new HttpUrlIntegration(\"GetBooksIntegration\", \"https://get-books-proxy.myproxy.internal\");\nHttpLambdaIntegration booksDefaultIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.addRoutes(AddRoutesOptions.builder()\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.GET))\n        .integration(getBooksIntegration)\n        .build());\nhttpApi.addRoutes(AddRoutesOptions.builder()\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.ANY))\n        .integration(booksDefaultIntegration)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpUrlIntegration awscdkapigatewayv2integrationsalpha.HttpUrlIntegration\ntype HttpLambdaIntegration awscdkapigatewayv2integrationsalpha.HttpLambdaIntegration\n\nvar booksDefaultFn function\n\ngetBooksIntegration := NewHttpUrlIntegration(jsii.String(\"GetBooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\"))\nbooksDefaultIntegration := NewHttpLambdaIntegration(jsii.String(\"BooksIntegration\"), booksDefaultFn)\n\nhttpApi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\nhttpApi.addRoutes(&addRoutesOptions{\n\tpath: jsii.String(\"/books\"),\n\tmethods: []httpMethod{\n\t\tapigwv2.*httpMethod_GET,\n\t},\n\tintegration: getBooksIntegration,\n})\nhttpApi.addRoutes(&addRoutesOptions{\n\tpath: jsii.String(\"/books\"),\n\tmethods: []*httpMethod{\n\t\tapigwv2.*httpMethod_ANY,\n\t},\n\tintegration: booksDefaultIntegration,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpUrlIntegration, HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst getBooksIntegration = new HttpUrlIntegration('GetBooksIntegration', 'https://get-books-proxy.myproxy.internal');\n\ndeclare const booksDefaultFn: lambda.Function;\nconst booksDefaultIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: getBooksIntegration,\n});\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.ANY ],\n  integration: booksDefaultIntegration,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#ANY",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpUrlIntegration, HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const booksDefaultFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBooksIntegration = new HttpUrlIntegration('GetBooksIntegration', 'https://get-books-proxy.myproxy.internal');\nconst booksDefaultIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: getBooksIntegration,\n});\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.ANY ],\n  integration: booksDefaultIntegration,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 31,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "0e4f4f59c2df72a19c4396a896011fde122edea139aa4954fae1e730b0fb4dff"
    },
    "88cb58a6ebd17b918852fbe2cedc8257418200502d68d910158a9b95cc2147ec": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import HttpJwtAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import HttpUrlIntegration\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = HttpJwtAuthorizer(\"DefaultAuthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\",\n    default_authorizer=authorizer,\n    default_authorization_scopes=[\"read:books\"]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.GET]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIdIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books/{id}\",\n    methods=[apigwv2.HttpMethod.GET]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.POST],\n    authorization_scopes=[\"write:books\"]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"LoginIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/login\",\n    methods=[apigwv2.HttpMethod.POST],\n    authorizer=apigwv2.HttpNoneAuthorizer()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n\nstring issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = new HttpJwtAuthorizer(\"DefaultAuthorizer\", issuer, new HttpJwtAuthorizerProps {\n    JwtAudience = new [] { \"3131231\" }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\", new HttpApiProps {\n    DefaultAuthorizer = authorizer,\n    DefaultAuthorizationScopes = new [] { \"read:books\" }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.GET }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIdIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books/{id}\",\n    Methods = new [] { HttpMethod.GET }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.POST },\n    AuthorizationScopes = new [] { \"write:books\" }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"LoginIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/login\",\n    Methods = new [] { HttpMethod.POST },\n    Authorizer = new HttpNoneAuthorizer()\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.HttpJwtAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpUrlIntegration;\n\n\nString issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = HttpJwtAuthorizer.Builder.create(\"DefaultAuthorizer\", issuer)\n        .jwtAudience(List.of(\"3131231\"))\n        .build();\n\nHttpApi api = HttpApi.Builder.create(this, \"HttpApi\")\n        .defaultAuthorizer(authorizer)\n        .defaultAuthorizationScopes(List.of(\"read:books\"))\n        .build();\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.GET))\n        .build());\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIdIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books/{id}\")\n        .methods(List.of(HttpMethod.GET))\n        .build());\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.POST))\n        .authorizationScopes(List.of(\"write:books\"))\n        .build());\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"LoginIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/login\")\n        .methods(List.of(HttpMethod.POST))\n        .authorizer(new HttpNoneAuthorizer())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2authorizersalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2authorizersalpha\"type HttpJwtAuthorizer awscdkapigatewayv2authorizersalpha.HttpJwtAuthorizerimport awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpUrlIntegration awscdkapigatewayv2integrationsalpha.HttpUrlIntegration\n\nissuer := \"https://test.us.auth0.com\"\nauthorizer := NewHttpJwtAuthorizer(jsii.String(\"DefaultAuthorizer\"), issuer, &httpJwtAuthorizerProps{\n\tjwtAudience: []*string{\n\t\tjsii.String(\"3131231\"),\n\t},\n})\n\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"), &httpApiProps{\n\tdefaultAuthorizer: authorizer,\n\tdefaultAuthorizationScopes: []*string{\n\t\tjsii.String(\"read:books\"),\n\t},\n})\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tmethods: []httpMethod{\n\t\tapigwv2.*httpMethod_GET,\n\t},\n})\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: NewHttpUrlIntegration(jsii.String(\"BooksIdIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books/{id}\"),\n\tmethods: []*httpMethod{\n\t\tapigwv2.*httpMethod_GET,\n\t},\n})\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tmethods: []*httpMethod{\n\t\tapigwv2.*httpMethod_POST,\n\t},\n\tauthorizationScopes: []*string{\n\t\tjsii.String(\"write:books\"),\n\t},\n})\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: NewHttpUrlIntegration(jsii.String(\"LoginIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/login\"),\n\tmethods: []*httpMethod{\n\t\tapigwv2.*httpMethod_POST,\n\t},\n\tauthorizer: apigwv2.NewHttpNoneAuthorizer(),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['read:books'],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIdIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{id}',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizationScopes: ['write:books']\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('LoginIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/login',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizer: new apigwv2.HttpNoneAuthorizer(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpNoneAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#POST",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpNoneAuthorizer",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.HttpJwtAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpUrlIntegration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['read:books'],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIdIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{id}',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizationScopes: ['write:books']\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('LoginIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/login',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizer: new apigwv2.HttpNoneAuthorizer(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 20,
        "75": 53,
        "104": 1,
        "192": 7,
        "193": 6,
        "194": 14,
        "196": 4,
        "197": 7,
        "225": 3,
        "226": 4,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "05a9ce728960202379d2a2ba1a4a70fe151f5221c9c4eeb4d445e567ee28ab59"
    },
    "3f8f6c3b5aa8a1113de959a925b53f4cf57723af3a1884c3f4ee3ca9fafe56b1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# http_api: apigatewayv2_alpha.HttpApi\n# http_route_authorizer: apigatewayv2_alpha.IHttpRouteAuthorizer\n# http_route_integration: apigatewayv2_alpha.HttpRouteIntegration\n# http_route_key: apigatewayv2_alpha.HttpRouteKey\n\nhttp_route = apigatewayv2_alpha.HttpRoute(self, \"MyHttpRoute\",\n    http_api=http_api,\n    integration=http_route_integration,\n    route_key=http_route_key,\n\n    # the properties below are optional\n    authorization_scopes=[\"authorizationScopes\"],\n    authorizer=http_route_authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nHttpApi httpApi;\nIHttpRouteAuthorizer httpRouteAuthorizer;\nHttpRouteIntegration httpRouteIntegration;\nHttpRouteKey httpRouteKey;\n\nHttpRoute httpRoute = new HttpRoute(this, \"MyHttpRoute\", new HttpRouteProps {\n    HttpApi = httpApi,\n    Integration = httpRouteIntegration,\n    RouteKey = httpRouteKey,\n\n    // the properties below are optional\n    AuthorizationScopes = new [] { \"authorizationScopes\" },\n    Authorizer = httpRouteAuthorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nHttpApi httpApi;\nIHttpRouteAuthorizer httpRouteAuthorizer;\nHttpRouteIntegration httpRouteIntegration;\nHttpRouteKey httpRouteKey;\n\nHttpRoute httpRoute = HttpRoute.Builder.create(this, \"MyHttpRoute\")\n        .httpApi(httpApi)\n        .integration(httpRouteIntegration)\n        .routeKey(httpRouteKey)\n\n        // the properties below are optional\n        .authorizationScopes(List.of(\"authorizationScopes\"))\n        .authorizer(httpRouteAuthorizer)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar httpApi httpApi\nvar httpRouteAuthorizer iHttpRouteAuthorizer\nvar httpRouteIntegration httpRouteIntegration\nvar httpRouteKey httpRouteKey\nhttpRoute := apigatewayv2_alpha.NewHttpRoute(this, jsii.String(\"MyHttpRoute\"), &httpRouteProps{\n\thttpApi: httpApi,\n\tintegration: httpRouteIntegration,\n\trouteKey: httpRouteKey,\n\n\t// the properties below are optional\n\tauthorizationScopes: []*string{\n\t\tjsii.String(\"authorizationScopes\"),\n\t},\n\tauthorizer: httpRouteAuthorizer,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\ndeclare const httpRouteAuthorizer: apigatewayv2_alpha.IHttpRouteAuthorizer;\ndeclare const httpRouteIntegration: apigatewayv2_alpha.HttpRouteIntegration;\ndeclare const httpRouteKey: apigatewayv2_alpha.HttpRouteKey;\nconst httpRoute = new apigatewayv2_alpha.HttpRoute(this, 'MyHttpRoute', {\n  httpApi: httpApi,\n  integration: httpRouteIntegration,\n  routeKey: httpRouteKey,\n\n  // the properties below are optional\n  authorizationScopes: ['authorizationScopes'],\n  authorizer: httpRouteAuthorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpRoute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRoute",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteKey",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteProps",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\ndeclare const httpRouteAuthorizer: apigatewayv2_alpha.IHttpRouteAuthorizer;\ndeclare const httpRouteIntegration: apigatewayv2_alpha.HttpRouteIntegration;\ndeclare const httpRouteKey: apigatewayv2_alpha.HttpRouteKey;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpRoute = new apigatewayv2_alpha.HttpRoute(this, 'MyHttpRoute', {\n  httpApi: httpApi,\n  integration: httpRouteIntegration,\n  routeKey: httpRouteKey,\n\n  // the properties below are optional\n  authorizationScopes: ['authorizationScopes'],\n  authorizer: httpRouteAuthorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 25,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a54d7319c835161ca8e930434320b6f9af34e92dda5ddff60c1c469b6c25427c"
    },
    "b64ea30d35751dd9885a41197ae54f7a7308581a2cccb1269144ee6b01608157": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\nimport constructs as constructs\n\n# construct: constructs.Construct\n# http_route: apigatewayv2_alpha.HttpRoute\n\nhttp_route_authorizer_bind_options = apigatewayv2_alpha.HttpRouteAuthorizerBindOptions(\n    route=http_route,\n    scope=construct\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\nusing Constructs;\n\nConstruct construct;\nHttpRoute httpRoute;\nHttpRouteAuthorizerBindOptions httpRouteAuthorizerBindOptions = new HttpRouteAuthorizerBindOptions {\n    Route = httpRoute,\n    Scope = construct\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\nimport software.constructs.*;\n\nConstruct construct;\nHttpRoute httpRoute;\n\nHttpRouteAuthorizerBindOptions httpRouteAuthorizerBindOptions = HttpRouteAuthorizerBindOptions.builder()\n        .route(httpRoute)\n        .scope(construct)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"import constructs \"github.com/aws/constructs-go/constructs\"\n\nvar construct construct\nvar httpRoute httpRoute\nhttpRouteAuthorizerBindOptions := &httpRouteAuthorizerBindOptions{\n\troute: httpRoute,\n\tscope: construct,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as constructs from 'constructs';\n\ndeclare const construct: constructs.Construct;\ndeclare const httpRoute: apigatewayv2_alpha.HttpRoute;\nconst httpRouteAuthorizerBindOptions: apigatewayv2_alpha.HttpRouteAuthorizerBindOptions = {\n  route: httpRoute,\n  scope: construct,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteAuthorizerBindOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteAuthorizerBindOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRoute"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as constructs from 'constructs';\n\ndeclare const construct: constructs.Construct;\ndeclare const httpRoute: apigatewayv2_alpha.HttpRoute;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpRouteAuthorizerBindOptions: apigatewayv2_alpha.HttpRouteAuthorizerBindOptions = {\n  route: httpRoute,\n  scope: construct,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f86ee1103ca42886a165b63a0561ad4e889a556dcda3959fdf7cca0135e3bd9e"
    },
    "9d021d318af518d1818c6490b3777c8fbbc88123224fa9e3ce2336c1e0fd2cfd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\nhttp_route_authorizer_config = apigatewayv2_alpha.HttpRouteAuthorizerConfig(\n    authorization_type=\"authorizationType\",\n\n    # the properties below are optional\n    authorization_scopes=[\"authorizationScopes\"],\n    authorizer_id=\"authorizerId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nHttpRouteAuthorizerConfig httpRouteAuthorizerConfig = new HttpRouteAuthorizerConfig {\n    AuthorizationType = \"authorizationType\",\n\n    // the properties below are optional\n    AuthorizationScopes = new [] { \"authorizationScopes\" },\n    AuthorizerId = \"authorizerId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nHttpRouteAuthorizerConfig httpRouteAuthorizerConfig = HttpRouteAuthorizerConfig.builder()\n        .authorizationType(\"authorizationType\")\n\n        // the properties below are optional\n        .authorizationScopes(List.of(\"authorizationScopes\"))\n        .authorizerId(\"authorizerId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\nhttpRouteAuthorizerConfig := &httpRouteAuthorizerConfig{\n\tauthorizationType: jsii.String(\"authorizationType\"),\n\n\t// the properties below are optional\n\tauthorizationScopes: []*string{\n\t\tjsii.String(\"authorizationScopes\"),\n\t},\n\tauthorizerId: jsii.String(\"authorizerId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst httpRouteAuthorizerConfig: apigatewayv2_alpha.HttpRouteAuthorizerConfig = {\n  authorizationType: 'authorizationType',\n\n  // the properties below are optional\n  authorizationScopes: ['authorizationScopes'],\n  authorizerId: 'authorizerId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteAuthorizerConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteAuthorizerConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpRouteAuthorizerConfig: apigatewayv2_alpha.HttpRouteAuthorizerConfig = {\n  authorizationType: 'authorizationType',\n\n  // the properties below are optional\n  authorizationScopes: ['authorizationScopes'],\n  authorizerId: 'authorizerId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0370f7932ab1048b845dafa219076d113387c26baac8dbcdbe6de79f02a6d959"
    },
    "cdef00c35ccad901f545465e145a86b5dc3fd402530b893062cc867d57074261": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import HttpAlbIntegration\n\n# lb: elbv2.ApplicationLoadBalancer\n\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener,\n        parameter_mapping=apigwv2.ParameterMapping().custom(\"myKey\", \"myValue\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener, new HttpAlbIntegrationProps {\n        ParameterMapping = new ParameterMapping().Custom(\"myKey\", \"myValue\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpAlbIntegration;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpAlbIntegration.Builder.create(\"DefaultIntegration\", listener)\n                .parameterMapping(new ParameterMapping().custom(\"myKey\", \"myValue\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpAlbIntegration awscdkapigatewayv2integrationsalpha.HttpAlbIntegration\n\nvar lb applicationLoadBalancer\nlistener := lb.addListener(jsii.String(\"listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nlistener.addTargets(jsii.String(\"target\"), &addApplicationTargetsProps{\n\tport: jsii.Number(80),\n})\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: NewHttpAlbIntegration(jsii.String(\"DefaultIntegration\"), listener, &httpAlbIntegrationProps{\n\t\tparameterMapping: apigwv2.NewParameterMapping().custom(jsii.String(\"myKey\"), jsii.String(\"myValue\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping().custom('myKey', 'myValue'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping#custom",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpAlbIntegrationProps",
        "aws-cdk-lib.aws_elasticloadbalancingv2.AddApplicationTargetsProps",
        "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationListener",
        "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationListener#addTargets",
        "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "aws-cdk-lib.aws_elasticloadbalancingv2.BaseApplicationListenerProps",
        "aws-cdk-lib.aws_elasticloadbalancingv2.IApplicationListener"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping().custom('myKey', 'myValue'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "40a41c4f44f1836d1c3f182ff220a732d98b732b16a54609ce460d88eb1d1b78"
    },
    "943b072aee5975bd55be42229f6c31b71dc8bbff17d9c33869fd46698fa37911": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\nimport constructs as constructs\n\n# construct: constructs.Construct\n# http_route: apigatewayv2_alpha.HttpRoute\n\nhttp_route_integration_bind_options = apigatewayv2_alpha.HttpRouteIntegrationBindOptions(\n    route=http_route,\n    scope=construct\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\nusing Constructs;\n\nConstruct construct;\nHttpRoute httpRoute;\nHttpRouteIntegrationBindOptions httpRouteIntegrationBindOptions = new HttpRouteIntegrationBindOptions {\n    Route = httpRoute,\n    Scope = construct\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\nimport software.constructs.*;\n\nConstruct construct;\nHttpRoute httpRoute;\n\nHttpRouteIntegrationBindOptions httpRouteIntegrationBindOptions = HttpRouteIntegrationBindOptions.builder()\n        .route(httpRoute)\n        .scope(construct)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"import constructs \"github.com/aws/constructs-go/constructs\"\n\nvar construct construct\nvar httpRoute httpRoute\nhttpRouteIntegrationBindOptions := &httpRouteIntegrationBindOptions{\n\troute: httpRoute,\n\tscope: construct,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as constructs from 'constructs';\n\ndeclare const construct: constructs.Construct;\ndeclare const httpRoute: apigatewayv2_alpha.HttpRoute;\nconst httpRouteIntegrationBindOptions: apigatewayv2_alpha.HttpRouteIntegrationBindOptions = {\n  route: httpRoute,\n  scope: construct,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationBindOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationBindOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRoute"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as constructs from 'constructs';\n\ndeclare const construct: constructs.Construct;\ndeclare const httpRoute: apigatewayv2_alpha.HttpRoute;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpRouteIntegrationBindOptions: apigatewayv2_alpha.HttpRouteIntegrationBindOptions = {\n  route: httpRoute,\n  scope: construct,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b3ff4258223b43e05dfedeea43be067bdc2a032384cefa1b7980495dfad81680"
    },
    "f0ab0574f540e1fc91fbfd07448a679abce9b85294b8e360b864ed55d1db99be": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# integration_credentials: apigatewayv2_alpha.IntegrationCredentials\n# parameter_mapping: apigatewayv2_alpha.ParameterMapping\n# payload_format_version: apigatewayv2_alpha.PayloadFormatVersion\n\nhttp_route_integration_config = apigatewayv2_alpha.HttpRouteIntegrationConfig(\n    payload_format_version=payload_format_version,\n    type=apigatewayv2_alpha.HttpIntegrationType.HTTP_PROXY,\n\n    # the properties below are optional\n    connection_id=\"connectionId\",\n    connection_type=apigatewayv2_alpha.HttpConnectionType.VPC_LINK,\n    credentials=integration_credentials,\n    method=apigatewayv2_alpha.HttpMethod.ANY,\n    parameter_mapping=parameter_mapping,\n    secure_server_name=\"secureServerName\",\n    subtype=apigatewayv2_alpha.HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS,\n    uri=\"uri\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nIntegrationCredentials integrationCredentials;\nParameterMapping parameterMapping;\nPayloadFormatVersion payloadFormatVersion;\n\nHttpRouteIntegrationConfig httpRouteIntegrationConfig = new HttpRouteIntegrationConfig {\n    PayloadFormatVersion = payloadFormatVersion,\n    Type = HttpIntegrationType.HTTP_PROXY,\n\n    // the properties below are optional\n    ConnectionId = \"connectionId\",\n    ConnectionType = HttpConnectionType.VPC_LINK,\n    Credentials = integrationCredentials,\n    Method = HttpMethod.ANY,\n    ParameterMapping = parameterMapping,\n    SecureServerName = \"secureServerName\",\n    Subtype = HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS,\n    Uri = \"uri\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nIntegrationCredentials integrationCredentials;\nParameterMapping parameterMapping;\nPayloadFormatVersion payloadFormatVersion;\n\nHttpRouteIntegrationConfig httpRouteIntegrationConfig = HttpRouteIntegrationConfig.builder()\n        .payloadFormatVersion(payloadFormatVersion)\n        .type(HttpIntegrationType.HTTP_PROXY)\n\n        // the properties below are optional\n        .connectionId(\"connectionId\")\n        .connectionType(HttpConnectionType.VPC_LINK)\n        .credentials(integrationCredentials)\n        .method(HttpMethod.ANY)\n        .parameterMapping(parameterMapping)\n        .secureServerName(\"secureServerName\")\n        .subtype(HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS)\n        .uri(\"uri\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar integrationCredentials integrationCredentials\nvar parameterMapping parameterMapping\nvar payloadFormatVersion payloadFormatVersion\nhttpRouteIntegrationConfig := &httpRouteIntegrationConfig{\n\tpayloadFormatVersion: payloadFormatVersion,\n\ttype: apigatewayv2_alpha.httpIntegrationType_HTTP_PROXY,\n\n\t// the properties below are optional\n\tconnectionId: jsii.String(\"connectionId\"),\n\tconnectionType: apigatewayv2_alpha.httpConnectionType_VPC_LINK,\n\tcredentials: integrationCredentials,\n\tmethod: apigatewayv2_alpha.httpMethod_ANY,\n\tparameterMapping: parameterMapping,\n\tsecureServerName: jsii.String(\"secureServerName\"),\n\tsubtype: apigatewayv2_alpha.httpIntegrationSubtype_EVENTBRIDGE_PUT_EVENTS,\n\turi: jsii.String(\"uri\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const integrationCredentials: apigatewayv2_alpha.IntegrationCredentials;\ndeclare const parameterMapping: apigatewayv2_alpha.ParameterMapping;\ndeclare const payloadFormatVersion: apigatewayv2_alpha.PayloadFormatVersion;\nconst httpRouteIntegrationConfig: apigatewayv2_alpha.HttpRouteIntegrationConfig = {\n  payloadFormatVersion: payloadFormatVersion,\n  type: apigatewayv2_alpha.HttpIntegrationType.HTTP_PROXY,\n\n  // the properties below are optional\n  connectionId: 'connectionId',\n  connectionType: apigatewayv2_alpha.HttpConnectionType.VPC_LINK,\n  credentials: integrationCredentials,\n  method: apigatewayv2_alpha.HttpMethod.ANY,\n  parameterMapping: parameterMapping,\n  secureServerName: 'secureServerName',\n  subtype: apigatewayv2_alpha.HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS,\n  uri: 'uri',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpConnectionType",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationSubtype#EVENTBRIDGE_PUT_EVENTS",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationType",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpIntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#ANY",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegrationConfig",
        "@aws-cdk/aws-apigatewayv2-alpha.IntegrationCredentials",
        "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2-alpha.PayloadFormatVersion"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const integrationCredentials: apigatewayv2_alpha.IntegrationCredentials;\ndeclare const parameterMapping: apigatewayv2_alpha.ParameterMapping;\ndeclare const payloadFormatVersion: apigatewayv2_alpha.PayloadFormatVersion;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpRouteIntegrationConfig: apigatewayv2_alpha.HttpRouteIntegrationConfig = {\n  payloadFormatVersion: payloadFormatVersion,\n  type: apigatewayv2_alpha.HttpIntegrationType.HTTP_PROXY,\n\n  // the properties below are optional\n  connectionId: 'connectionId',\n  connectionType: apigatewayv2_alpha.HttpConnectionType.VPC_LINK,\n  credentials: integrationCredentials,\n  method: apigatewayv2_alpha.HttpMethod.ANY,\n  parameterMapping: parameterMapping,\n  secureServerName: 'secureServerName',\n  subtype: apigatewayv2_alpha.HttpIntegrationSubtype.EVENTBRIDGE_PUT_EVENTS,\n  uri: 'uri',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 38,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 8,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "60882335f60333ac98e9073c74f3353848bb7e3665b79528632ab4862ac8d76d"
    },
    "fdf4c4b96d48d18263412db6a72c897dac526a9594ba838507b4968401175cc6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\nhttp_route_key = apigatewayv2_alpha.HttpRouteKey.with(\"path\", apigatewayv2_alpha.HttpMethod.ANY)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nHttpRouteKey httpRouteKey = HttpRouteKey.With(\"path\", HttpMethod.ANY);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nHttpRouteKey httpRouteKey = HttpRouteKey.with(\"path\", HttpMethod.ANY);",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\nhttpRouteKey := apigatewayv2_alpha.httpRouteKey.with(jsii.String(\"path\"), apigatewayv2_alpha.httpMethod_ANY)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst httpRouteKey = apigatewayv2_alpha.HttpRouteKey.with('path', /* all optional props */ apigatewayv2_alpha.HttpMethod.ANY);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpMethod#ANY",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteKey",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteKey#with"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpRouteKey = apigatewayv2_alpha.HttpRouteKey.with('path', /* all optional props */ apigatewayv2_alpha.HttpMethod.ANY);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "194": 4,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "c4a619ca435bb60e6154b64bc804354dadca38a562c60747ae9c502a2436dce9"
    },
    "3d4712da86144bf24cc4326821f8b22132860aa2e4065cab8f9d531dbaec5934": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# http_api: apigatewayv2_alpha.HttpApi\n# http_route_authorizer: apigatewayv2_alpha.IHttpRouteAuthorizer\n# http_route_integration: apigatewayv2_alpha.HttpRouteIntegration\n# http_route_key: apigatewayv2_alpha.HttpRouteKey\n\nhttp_route_props = apigatewayv2_alpha.HttpRouteProps(\n    http_api=http_api,\n    integration=http_route_integration,\n    route_key=http_route_key,\n\n    # the properties below are optional\n    authorization_scopes=[\"authorizationScopes\"],\n    authorizer=http_route_authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nHttpApi httpApi;\nIHttpRouteAuthorizer httpRouteAuthorizer;\nHttpRouteIntegration httpRouteIntegration;\nHttpRouteKey httpRouteKey;\n\nHttpRouteProps httpRouteProps = new HttpRouteProps {\n    HttpApi = httpApi,\n    Integration = httpRouteIntegration,\n    RouteKey = httpRouteKey,\n\n    // the properties below are optional\n    AuthorizationScopes = new [] { \"authorizationScopes\" },\n    Authorizer = httpRouteAuthorizer\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nHttpApi httpApi;\nIHttpRouteAuthorizer httpRouteAuthorizer;\nHttpRouteIntegration httpRouteIntegration;\nHttpRouteKey httpRouteKey;\n\nHttpRouteProps httpRouteProps = HttpRouteProps.builder()\n        .httpApi(httpApi)\n        .integration(httpRouteIntegration)\n        .routeKey(httpRouteKey)\n\n        // the properties below are optional\n        .authorizationScopes(List.of(\"authorizationScopes\"))\n        .authorizer(httpRouteAuthorizer)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar httpApi httpApi\nvar httpRouteAuthorizer iHttpRouteAuthorizer\nvar httpRouteIntegration httpRouteIntegration\nvar httpRouteKey httpRouteKey\nhttpRouteProps := &httpRouteProps{\n\thttpApi: httpApi,\n\tintegration: httpRouteIntegration,\n\trouteKey: httpRouteKey,\n\n\t// the properties below are optional\n\tauthorizationScopes: []*string{\n\t\tjsii.String(\"authorizationScopes\"),\n\t},\n\tauthorizer: httpRouteAuthorizer,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\ndeclare const httpRouteAuthorizer: apigatewayv2_alpha.IHttpRouteAuthorizer;\ndeclare const httpRouteIntegration: apigatewayv2_alpha.HttpRouteIntegration;\ndeclare const httpRouteKey: apigatewayv2_alpha.HttpRouteKey;\nconst httpRouteProps: apigatewayv2_alpha.HttpRouteProps = {\n  httpApi: httpApi,\n  integration: httpRouteIntegration,\n  routeKey: httpRouteKey,\n\n  // the properties below are optional\n  authorizationScopes: ['authorizationScopes'],\n  authorizer: httpRouteAuthorizer,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteKey",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteProps",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpRouteAuthorizer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\ndeclare const httpRouteAuthorizer: apigatewayv2_alpha.IHttpRouteAuthorizer;\ndeclare const httpRouteIntegration: apigatewayv2_alpha.HttpRouteIntegration;\ndeclare const httpRouteKey: apigatewayv2_alpha.HttpRouteKey;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpRouteProps: apigatewayv2_alpha.HttpRouteProps = {\n  httpApi: httpApi,\n  integration: httpRouteIntegration,\n  routeKey: httpRouteKey,\n\n  // the properties below are optional\n  authorizationScopes: ['authorizationScopes'],\n  authorizer: httpRouteAuthorizer,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 25,
        "130": 4,
        "153": 5,
        "169": 5,
        "192": 1,
        "193": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "05b5d1e6db29ea1d75b1204fd5dbeea8d3d5783cd2684c0cf94422c265719674"
    },
    "3ae25a63339187ac6f3d53a9ba9afc7453026c44b20154f3143196f2d3fef13e": {
      "translations": {
        "python": {
          "source": "# api: apigwv2.HttpApi\n\n\napigwv2.HttpStage(self, \"Stage\",\n    http_api=api,\n    stage_name=\"beta\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HttpApi api;\n\n\nnew HttpStage(this, \"Stage\", new HttpStageProps {\n    HttpApi = api,\n    StageName = \"beta\"\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api;\n\n\nHttpStage.Builder.create(this, \"Stage\")\n        .httpApi(api)\n        .stageName(\"beta\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api httpApi\n\napigwv2.NewHttpStage(this, jsii.String(\"Stage\"), &httpStageProps{\n\thttpApi: api,\n\tstageName: jsii.String(\"beta\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigwv2.HttpApi;\n\nnew apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n  stageName: 'beta',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpStage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpStage",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpStageProps",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigwv2.HttpApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n  stageName: 'beta',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c1dc83830122b270c353c30e80d99d8691dc6741ea3353b4e6551847fc8e7734"
    },
    "207685f9c1315935a9544487cd2b78b3f1db86a4db1008208b959c568e5b3ad7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# http_api: apigatewayv2_alpha.HttpApi\n\nhttp_stage_attributes = apigatewayv2_alpha.HttpStageAttributes(\n    api=http_api,\n    stage_name=\"stageName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nHttpApi httpApi;\n\nHttpStageAttributes httpStageAttributes = new HttpStageAttributes {\n    Api = httpApi,\n    StageName = \"stageName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nHttpApi httpApi;\n\nHttpStageAttributes httpStageAttributes = HttpStageAttributes.builder()\n        .api(httpApi)\n        .stageName(\"stageName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar httpApi httpApi\nhttpStageAttributes := &httpStageAttributes{\n\tapi: httpApi,\n\tstageName: jsii.String(\"stageName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\nconst httpStageAttributes: apigatewayv2_alpha.HttpStageAttributes = {\n  api: httpApi,\n  stageName: 'stageName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpStageAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpStageAttributes",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const httpApi: apigatewayv2_alpha.HttpApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpStageAttributes: apigatewayv2_alpha.HttpStageAttributes = {\n  api: httpApi,\n  stageName: 'stageName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "85e505147aaeec0d2cf597329eda7c97547e84b43788cf238c251dacdfda74d2"
    },
    "50b7be8a866543904bb9e70d4b1944328d1472eeea76e5131471d7f4e4208f4e": {
      "translations": {
        "python": {
          "source": "# api: apigwv2.HttpApi\n# dn: apigwv2.DomainName\n\n\napi.add_stage(\"beta\",\n    stage_name=\"beta\",\n    auto_deploy=True,\n    # https://${dn.domainName}/bar goes to the beta stage\n    domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"bar\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HttpApi api;\nDomainName dn;\n\n\napi.AddStage(\"beta\", new HttpStageOptions {\n    StageName = \"beta\",\n    AutoDeploy = true,\n    // https://${dn.domainName}/bar goes to the beta stage\n    DomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"bar\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api;\nDomainName dn;\n\n\napi.addStage(\"beta\", HttpStageOptions.builder()\n        .stageName(\"beta\")\n        .autoDeploy(true)\n        // https://${dn.domainName}/bar goes to the beta stage\n        .domainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"bar\")\n                .build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var api httpApi\nvar dn domainName\n\napi.addStage(jsii.String(\"beta\"), &httpStageOptions{\n\tstageName: jsii.String(\"beta\"),\n\tautoDeploy: jsii.Boolean(true),\n\t// https://${dn.domainName}/bar goes to the beta stage\n\tdomainMapping: &domainMappingOptions{\n\t\tdomainName: dn,\n\t\tmappingKey: jsii.String(\"bar\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigwv2.HttpApi;\ndeclare const dn: apigwv2.DomainName;\n\napi.addStage('beta', {\n  stageName: 'beta',\n  autoDeploy: true,\n  // https://${dn.domainName}/bar goes to the beta stage\n  domainMapping: {\n    domainName: dn,\n    mappingKey: 'bar',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpStageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi#addStage",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpStageOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.IDomainName"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigwv2.HttpApi;\ndeclare const dn: apigwv2.DomainName;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\napi.addStage('beta', {\n  stageName: 'beta',\n  autoDeploy: true,\n  // https://${dn.domainName}/bar goes to the beta stage\n  domainMapping: {\n    domainName: dn,\n    mappingKey: 'bar',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "c8a3852b2d8b53f1703f15fe99a43e3088e07a1b9054c68be9cbd49c5ba740b5"
    },
    "74c36e059561927bcf9c47d9983d88bdb7cebe1d6e7b8a0ee8a0c8fe0608ce4b": {
      "translations": {
        "python": {
          "source": "# api: apigwv2.HttpApi\n\n\napigwv2.HttpStage(self, \"Stage\",\n    http_api=api,\n    stage_name=\"beta\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "HttpApi api;\n\n\nnew HttpStage(this, \"Stage\", new HttpStageProps {\n    HttpApi = api,\n    StageName = \"beta\"\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api;\n\n\nHttpStage.Builder.create(this, \"Stage\")\n        .httpApi(api)\n        .stageName(\"beta\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api httpApi\n\napigwv2.NewHttpStage(this, jsii.String(\"Stage\"), &httpStageProps{\n\thttpApi: api,\n\tstageName: jsii.String(\"beta\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigwv2.HttpApi;\n\nnew apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n  stageName: 'beta',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.HttpStageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpStage",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpStageProps",
        "@aws-cdk/aws-apigatewayv2-alpha.IHttpApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigwv2.HttpApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n  stageName: 'beta',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c1dc83830122b270c353c30e80d99d8691dc6741ea3353b4e6551847fc8e7734"
    },
    "7e6dab2fc13c8336e28367cd09b7fbbed3110da68f10542cd03f8297df69ebf6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\nfrom aws_cdk import aws_iam as iam\n\n# role: iam.Role\n\nintegration_credentials = apigatewayv2_alpha.IntegrationCredentials.from_role(role)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\nusing Amazon.CDK.AWS.IAM;\n\nRole role;\n\nIntegrationCredentials integrationCredentials = IntegrationCredentials.FromRole(role);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\nimport software.amazon.awscdk.services.iam.*;\n\nRole role;\n\nIntegrationCredentials integrationCredentials = IntegrationCredentials.fromRole(role);",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"import awscdk \"github.com/aws/aws-cdk-go/awscdk\"import iam \"github.com/aws/aws-cdk-go/awscdk/aws_iam\"\n\nvar role role\nintegrationCredentials := apigatewayv2_alpha.integrationCredentials.fromRole(role)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const role: iam.Role;\nconst integrationCredentials = apigatewayv2_alpha.IntegrationCredentials.fromRole(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.IntegrationCredentials"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IntegrationCredentials",
        "@aws-cdk/aws-apigatewayv2-alpha.IntegrationCredentials#fromRole",
        "aws-cdk-lib.aws_iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst integrationCredentials = apigatewayv2_alpha.IntegrationCredentials.fromRole(role);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "290": 1
      },
      "fqnsFingerprint": "72e8e71206dea049319bbf83fe3ba46f03d65a63888d056d350e2ea0a27edbdb"
    },
    "ea3b6731fe348025f05db79f8c6b11c71c5f75993867d5c2294a351e62c43c31": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3 as s3\nimport aws_cdk.aws_certificatemanager as acm\n# bucket: s3.Bucket\n\n\ncert_arn = \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomain_name = \"example.com\"\n\napigwv2.DomainName(self, \"DomainName\",\n    domain_name=domain_name,\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", cert_arn),\n    mtls=apigwv2.MTLSConfig(\n        bucket=bucket,\n        key=\"someca.pem\",\n        version=\"version\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3;\nusing Amazon.CDK.AWS.CertificateManager;\nBucket bucket;\n\n\nstring certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nstring domainName = \"example.com\";\n\nnew DomainName(this, \"DomainName\", new DomainNameProps {\n    DomainName = domainName,\n    Certificate = Certificate.FromCertificateArn(this, \"cert\", certArn),\n    Mtls = new MTLSConfig {\n        Bucket = bucket,\n        Key = \"someca.pem\",\n        Version = \"version\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.services.certificatemanager.*;\nBucket bucket;\n\n\nString certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nString domainName = \"example.com\";\n\nDomainName.Builder.create(this, \"DomainName\")\n        .domainName(domainName)\n        .certificate(Certificate.fromCertificateArn(this, \"cert\", certArn))\n        .mtls(MTLSConfig.builder()\n                .bucket(bucket)\n                .key(\"someca.pem\")\n                .version(\"version\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import s3 \"github.com/aws/aws-cdk-go/awscdk\"import acm \"github.com/aws/aws-cdk-go/awscdk\"\nvar bucket bucket\n\ncertArn := \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomainName := \"example.com\"\n\napigwv2.NewDomainName(this, jsii.String(\"DomainName\"), &domainNameProps{\n\tdomainName: jsii.String(domainName),\n\tcertificate: acm.certificate.fromCertificateArn(this, jsii.String(\"cert\"), certArn),\n\tmtls: &mTLSConfig{\n\t\tbucket: bucket,\n\t\tkey: jsii.String(\"someca.pem\"),\n\t\tversion: jsii.String(\"version\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as s3 from 'aws-cdk-lib/aws-s3';\nimport * as acm from 'aws-cdk-lib/aws-certificatemanager';\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\ndeclare const bucket: s3.Bucket;\n\nnew apigwv2.DomainName(this, 'DomainName', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n  mtls: {\n    bucket,\n    key: 'someca.pem',\n    version: 'version',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.MTLSConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.DomainName",
        "@aws-cdk/aws-apigatewayv2-alpha.DomainNameProps",
        "@aws-cdk/aws-apigatewayv2-alpha.MTLSConfig",
        "aws-cdk-lib.aws_certificatemanager.Certificate",
        "aws-cdk-lib.aws_certificatemanager.Certificate#fromCertificateArn",
        "aws-cdk-lib.aws_certificatemanager.ICertificate",
        "aws-cdk-lib.aws_s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as s3 from 'aws-cdk-lib/aws-s3';\nimport * as acm from 'aws-cdk-lib/aws-certificatemanager';\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nnew apigwv2.DomainName(this, 'DomainName', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n  mtls: {\n    bucket,\n    key: 'someca.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 19,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "72e7f13c8f5be88730be544daa0939d739a461f5d8bdf66667755994a61c67f2"
    },
    "efa7e9b238ac3c1ea6bd84edb150b69ba41d4752ee0e2fa8c71988eef5510e68": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import HttpAlbIntegration\n\n# lb: elbv2.ApplicationLoadBalancer\n\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener,\n        parameter_mapping=apigwv2.ParameterMapping().append_header(\"header2\", apigwv2.MappingValue.request_header(\"header1\")).remove_header(\"header1\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener, new HttpAlbIntegrationProps {\n        ParameterMapping = new ParameterMapping().AppendHeader(\"header2\", MappingValue.RequestHeader(\"header1\")).RemoveHeader(\"header1\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpAlbIntegration;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpAlbIntegration.Builder.create(\"DefaultIntegration\", listener)\n                .parameterMapping(new ParameterMapping().appendHeader(\"header2\", MappingValue.requestHeader(\"header1\")).removeHeader(\"header1\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpAlbIntegration awscdkapigatewayv2integrationsalpha.HttpAlbIntegration\n\nvar lb applicationLoadBalancer\nlistener := lb.addListener(jsii.String(\"listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nlistener.addTargets(jsii.String(\"target\"), &addApplicationTargetsProps{\n\tport: jsii.Number(80),\n})\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: NewHttpAlbIntegration(jsii.String(\"DefaultIntegration\"), listener, &httpAlbIntegrationProps{\n\t\tparameterMapping: apigwv2.NewParameterMapping().appendHeader(jsii.String(\"header2\"), apigwv2.mappingValue.requestHeader(jsii.String(\"header1\"))).removeHeader(jsii.String(\"header1\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.MappingValue"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.MappingValue",
        "@aws-cdk/aws-apigatewayv2-alpha.MappingValue#requestHeader",
        "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping#appendHeader",
        "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping#removeHeader",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpAlbIntegrationProps",
        "aws-cdk-lib.aws_elasticloadbalancingv2.AddApplicationTargetsProps",
        "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationListener",
        "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationListener#addTargets",
        "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "aws-cdk-lib.aws_elasticloadbalancingv2.BaseApplicationListenerProps",
        "aws-cdk-lib.aws_elasticloadbalancingv2.IApplicationListener"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "196": 5,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "997ed9463bbc227acacb02c795e41acc785a7cf39728ab8eb070fc6b19789b28"
    },
    "b9d40c5ef5df48f77366c5c7b0059fc9423109d6f98652ce6c232ffbfb2386e2": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import HttpAlbIntegration\n\n# lb: elbv2.ApplicationLoadBalancer\n\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener,\n        parameter_mapping=apigwv2.ParameterMapping().append_header(\"header2\", apigwv2.MappingValue.request_header(\"header1\")).remove_header(\"header1\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener, new HttpAlbIntegrationProps {\n        ParameterMapping = new ParameterMapping().AppendHeader(\"header2\", MappingValue.RequestHeader(\"header1\")).RemoveHeader(\"header1\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.HttpAlbIntegration;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpAlbIntegration.Builder.create(\"DefaultIntegration\", listener)\n                .parameterMapping(new ParameterMapping().appendHeader(\"header2\", MappingValue.requestHeader(\"header1\")).removeHeader(\"header1\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type HttpAlbIntegration awscdkapigatewayv2integrationsalpha.HttpAlbIntegration\n\nvar lb applicationLoadBalancer\nlistener := lb.addListener(jsii.String(\"listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nlistener.addTargets(jsii.String(\"target\"), &addApplicationTargetsProps{\n\tport: jsii.Number(80),\n})\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: NewHttpAlbIntegration(jsii.String(\"DefaultIntegration\"), listener, &httpAlbIntegrationProps{\n\t\tparameterMapping: apigwv2.NewParameterMapping().appendHeader(jsii.String(\"header2\"), apigwv2.mappingValue.requestHeader(jsii.String(\"header1\"))).removeHeader(jsii.String(\"header1\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApi",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.MappingValue",
        "@aws-cdk/aws-apigatewayv2-alpha.MappingValue#requestHeader",
        "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping#appendHeader",
        "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping#removeHeader",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.HttpAlbIntegrationProps",
        "aws-cdk-lib.aws_elasticloadbalancingv2.AddApplicationTargetsProps",
        "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationListener",
        "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationListener#addTargets",
        "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "aws-cdk-lib.aws_elasticloadbalancingv2.BaseApplicationListenerProps",
        "aws-cdk-lib.aws_elasticloadbalancingv2.IApplicationListener"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "196": 5,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "997ed9463bbc227acacb02c795e41acc785a7cf39728ab8eb070fc6b19789b28"
    },
    "574a6f15a17d5af66420be5cf812fe57070ad42937661a43bc4356c51c6cb0af": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\npayload_format_version = apigatewayv2_alpha.PayloadFormatVersion.custom(\"version\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nPayloadFormatVersion payloadFormatVersion = PayloadFormatVersion.Custom(\"version\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nPayloadFormatVersion payloadFormatVersion = PayloadFormatVersion.custom(\"version\");",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\npayloadFormatVersion := apigatewayv2_alpha.payloadFormatVersion.custom(jsii.String(\"version\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst payloadFormatVersion = apigatewayv2_alpha.PayloadFormatVersion.custom('version');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.PayloadFormatVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.PayloadFormatVersion",
        "@aws-cdk/aws-apigatewayv2-alpha.PayloadFormatVersion#custom"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst payloadFormatVersion = apigatewayv2_alpha.PayloadFormatVersion.custom('version');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "77b1f16605aa23ec55c8d9a21b7bd707c1f3529354c8a1eeeef412aa6e6847e5"
    },
    "b3add7e1a311e7390912977345455419b6a1ea05a290628d830dc98162b831d7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\nstage_attributes = apigatewayv2_alpha.StageAttributes(\n    stage_name=\"stageName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nStageAttributes stageAttributes = new StageAttributes {\n    StageName = \"stageName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nStageAttributes stageAttributes = StageAttributes.builder()\n        .stageName(\"stageName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\nstageAttributes := &stageAttributes{\n\tstageName: jsii.String(\"stageName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst stageAttributes: apigatewayv2_alpha.StageAttributes = {\n  stageName: 'stageName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.StageAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.StageAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stageAttributes: apigatewayv2_alpha.StageAttributes = {\n  stageName: 'stageName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "30466fb51fa8aa4955ff7fb2b278863eb1093b754f868a32d01c74664867c1ba"
    },
    "44f0ca20a2412fc862e01d91a84de61eaa934c90e42984bd8272a470c8f228a3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# domain_name: apigatewayv2_alpha.DomainName\n\nstage_options = apigatewayv2_alpha.StageOptions(\n    auto_deploy=False,\n    domain_mapping=apigatewayv2_alpha.DomainMappingOptions(\n        domain_name=domain_name,\n\n        # the properties below are optional\n        mapping_key=\"mappingKey\"\n    ),\n    throttle=apigatewayv2_alpha.ThrottleSettings(\n        burst_limit=123,\n        rate_limit=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nDomainName domainName;\n\nStageOptions stageOptions = new StageOptions {\n    AutoDeploy = false,\n    DomainMapping = new DomainMappingOptions {\n        DomainName = domainName,\n\n        // the properties below are optional\n        MappingKey = \"mappingKey\"\n    },\n    Throttle = new ThrottleSettings {\n        BurstLimit = 123,\n        RateLimit = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nDomainName domainName;\n\nStageOptions stageOptions = StageOptions.builder()\n        .autoDeploy(false)\n        .domainMapping(DomainMappingOptions.builder()\n                .domainName(domainName)\n\n                // the properties below are optional\n                .mappingKey(\"mappingKey\")\n                .build())\n        .throttle(ThrottleSettings.builder()\n                .burstLimit(123)\n                .rateLimit(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar domainName domainName\nstageOptions := &stageOptions{\n\tautoDeploy: jsii.Boolean(false),\n\tdomainMapping: &domainMappingOptions{\n\t\tdomainName: domainName,\n\n\t\t// the properties below are optional\n\t\tmappingKey: jsii.String(\"mappingKey\"),\n\t},\n\tthrottle: &throttleSettings{\n\t\tburstLimit: jsii.Number(123),\n\t\trateLimit: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const domainName: apigatewayv2_alpha.DomainName;\nconst stageOptions: apigatewayv2_alpha.StageOptions = {\n  autoDeploy: false,\n  domainMapping: {\n    domainName: domainName,\n\n    // the properties below are optional\n    mappingKey: 'mappingKey',\n  },\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.StageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.IDomainName",
        "@aws-cdk/aws-apigatewayv2-alpha.StageOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.ThrottleSettings"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const domainName: apigatewayv2_alpha.DomainName;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stageOptions: apigatewayv2_alpha.StageOptions = {\n  autoDeploy: false,\n  domainMapping: {\n    domainName: domainName,\n\n    // the properties below are optional\n    mappingKey: 'mappingKey',\n  },\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 15,
        "91": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "9026eeb703b59faac5aea18b3454ca4d2d56f6aba2f64d4bbc139d01aa68bc08"
    },
    "af86e491edfe80e2c2a15e9a0fbb6653c99464747503ec26041f91cbdc995b64": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\nthrottle_settings = apigatewayv2_alpha.ThrottleSettings(\n    burst_limit=123,\n    rate_limit=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nThrottleSettings throttleSettings = new ThrottleSettings {\n    BurstLimit = 123,\n    RateLimit = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nThrottleSettings throttleSettings = ThrottleSettings.builder()\n        .burstLimit(123)\n        .rateLimit(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\nthrottleSettings := &throttleSettings{\n\tburstLimit: jsii.Number(123),\n\trateLimit: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst throttleSettings: apigatewayv2_alpha.ThrottleSettings = {\n  burstLimit: 123,\n  rateLimit: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.ThrottleSettings"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.ThrottleSettings"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst throttleSettings: apigatewayv2_alpha.ThrottleSettings = {\n  burstLimit: 123,\n  rateLimit: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "964fd9b26df233b3d59a885769e91c3cdb1cfe99ccd925d114a6cd68b0cf21ec"
    },
    "0833eedbb487f511c8c1a3f714684a07944c2832b269605609e8a840d55d4756": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nvpc_link = apigwv2.VpcLink(self, \"VpcLink\", vpc=vpc)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = new VpcLink(this, \"VpcLink\", new VpcLinkProps { Vpc = vpc });",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = VpcLink.Builder.create(this, \"VpcLink\").vpc(vpc).build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws/aws-cdk-go/awscdk\"\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nvpcLink := apigwv2.NewVpcLink(this, jsii.String(\"VpcLink\"), &vpcLinkProps{\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from 'aws-cdk-lib/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.VpcLink"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.VpcLink",
        "@aws-cdk/aws-apigatewayv2-alpha.VpcLinkProps",
        "aws-cdk-lib.aws_ec2.IVpc",
        "aws-cdk-lib.aws_ec2.Vpc"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "04a9f7d99a3413d8875e8ea80b2eeb825145699a50e840d36567bc97a60d412e"
    },
    "3c40f07a074929b5ffcdec2af807fbac94600686a59d4b81639aa410eb0d133a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n# vpc: ec2.Vpc\n\nawesome_link = apigwv2.VpcLink.from_vpc_link_attributes(self, \"awesome-vpc-link\",\n    vpc_link_id=\"us-east-1_oiuR12Abd\",\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\nVpc vpc;\n\nIVpcLink awesomeLink = VpcLink.FromVpcLinkAttributes(this, \"awesome-vpc-link\", new VpcLinkAttributes {\n    VpcLinkId = \"us-east-1_oiuR12Abd\",\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\nVpc vpc;\n\nIVpcLink awesomeLink = VpcLink.fromVpcLinkAttributes(this, \"awesome-vpc-link\", VpcLinkAttributes.builder()\n        .vpcLinkId(\"us-east-1_oiuR12Abd\")\n        .vpc(vpc)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar vpc vpc\nawesomeLink := apigwv2.vpcLink.fromVpcLinkAttributes(this, jsii.String(\"awesome-vpc-link\"), &vpcLinkAttributes{\n\tvpcLinkId: jsii.String(\"us-east-1_oiuR12Abd\"),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from 'aws-cdk-lib/aws-ec2';\n\ndeclare const vpc: ec2.Vpc;\nconst awesomeLink = apigwv2.VpcLink.fromVpcLinkAttributes(this, 'awesome-vpc-link', {\n  vpcLinkId: 'us-east-1_oiuR12Abd',\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.VpcLinkAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IVpcLink",
        "@aws-cdk/aws-apigatewayv2-alpha.VpcLink",
        "@aws-cdk/aws-apigatewayv2-alpha.VpcLink#fromVpcLinkAttributes",
        "@aws-cdk/aws-apigatewayv2-alpha.VpcLinkAttributes",
        "aws-cdk-lib.aws_ec2.IVpc"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\n\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst awesomeLink = apigwv2.VpcLink.fromVpcLinkAttributes(this, 'awesome-vpc-link', {\n  vpcLinkId: 'us-east-1_oiuR12Abd',\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "454bbc5409fc5bb5b94d02daea3589a5f189cbae88d2999f424d05cad77a2181"
    },
    "049c8677f32805dd147d41daeb95c77945d6d539f99496eead9704f512640774": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nvpc_link = apigwv2.VpcLink(self, \"VpcLink\", vpc=vpc)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = new VpcLink(this, \"VpcLink\", new VpcLinkProps { Vpc = vpc });",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = VpcLink.Builder.create(this, \"VpcLink\").vpc(vpc).build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws/aws-cdk-go/awscdk\"\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nvpcLink := apigwv2.NewVpcLink(this, jsii.String(\"VpcLink\"), &vpcLinkProps{\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from 'aws-cdk-lib/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.VpcLinkProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.VpcLink",
        "@aws-cdk/aws-apigatewayv2-alpha.VpcLinkProps",
        "aws-cdk-lib.aws_ec2.IVpc",
        "aws-cdk-lib.aws_ec2.Vpc"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "04a9f7d99a3413d8875e8ea80b2eeb825145699a50e840d36567bc97a60d412e"
    },
    "cc870298added226f56d9ed3e9167feeff6a8eab778cb04aa07999d739f09bf3": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import WebSocketLambdaIntegration\n\n# message_handler: lambda.Function\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\")\nweb_socket_api.add_route(\"sendmessage\",\n    integration=WebSocketLambdaIntegration(\"SendMessageIntegration\", message_handler)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction messageHandler;\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nwebSocketApi.AddRoute(\"sendmessage\", new WebSocketRouteOptions {\n    Integration = new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.WebSocketLambdaIntegration;\n\nFunction messageHandler;\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nwebSocketApi.addRoute(\"sendmessage\", WebSocketRouteOptions.builder()\n        .integration(new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type WebSocketLambdaIntegration awscdkapigatewayv2integrationsalpha.WebSocketLambdaIntegration\n\nvar messageHandler function\nwebSocketApi := apigwv2.NewWebSocketApi(this, jsii.String(\"mywsapi\"))\nwebSocketApi.addRoute(jsii.String(\"sendmessage\"), &webSocketRouteOptions{\n\tintegration: NewWebSocketLambdaIntegration(jsii.String(\"SendMessageIntegration\"), messageHandler),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const messageHandler: lambda.Function;\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi#addRoute",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.WebSocketLambdaIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const messageHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "230a388a50b6f288d5ef8341baf502ddf84edd1975cda7a1d9d3d8f3b85b0109"
    },
    "615cec9570cd44da0cc9ebdac5be18e708903df18dd4809d50c3f3a549b316cd": {
      "translations": {
        "python": {
          "source": "web_socket_api = apigwv2.WebSocketApi.from_web_socket_api_attributes(self, \"mywsapi\", web_socket_id=\"api-1234\")",
          "version": "2"
        },
        "csharp": {
          "source": "IWebSocketApi webSocketApi = WebSocketApi.FromWebSocketApiAttributes(this, \"mywsapi\", new WebSocketApiAttributes { WebSocketId = \"api-1234\" });",
          "version": "1"
        },
        "java": {
          "source": "IWebSocketApi webSocketApi = WebSocketApi.fromWebSocketApiAttributes(this, \"mywsapi\", WebSocketApiAttributes.builder().webSocketId(\"api-1234\").build());",
          "version": "1"
        },
        "go": {
          "source": "webSocketApi := apigwv2.webSocketApi.fromWebSocketApiAttributes(this, jsii.String(\"mywsapi\"), &webSocketApiAttributes{\n\twebSocketId: jsii.String(\"api-1234\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const webSocketApi = apigwv2.WebSocketApi.fromWebSocketApiAttributes(this, 'mywsapi', { webSocketId: 'api-1234' });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi#fromWebSocketApiAttributes",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiAttributes"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst webSocketApi = apigwv2.WebSocketApi.fromWebSocketApiAttributes(this, 'mywsapi', { webSocketId: 'api-1234' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "56c037bf490c0d6e489b610a04755d913e2ce94d672ae8a1908e9b68c4b836e1"
    },
    "139ddb15af4993e839458728d5ed6ebe652f81efd936e221314aababdbb3eae2": {
      "translations": {
        "python": {
          "source": "web_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\",\n    api_key_selection_expression=apigwv2.WebSocketApiKeySelectionExpression.HEADER_X_API_KEY\n)",
          "version": "2"
        },
        "csharp": {
          "source": "WebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\", new WebSocketApiProps {\n    ApiKeySelectionExpression = WebSocketApiKeySelectionExpression.HEADER_X_API_KEY\n});",
          "version": "1"
        },
        "java": {
          "source": "WebSocketApi webSocketApi = WebSocketApi.Builder.create(this, \"mywsapi\")\n        .apiKeySelectionExpression(WebSocketApiKeySelectionExpression.HEADER_X_API_KEY)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "webSocketApi := apigwv2.NewWebSocketApi(this, jsii.String(\"mywsapi\"), &webSocketApiProps{\n\tapiKeySelectionExpression: apigwv2.webSocketApiKeySelectionExpression_HEADER_X_API_KEY(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi',{\n  apiKeySelectionExpression: apigwv2.WebSocketApiKeySelectionExpression.HEADER_X_API_KEY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiKeySelectionExpression"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiKeySelectionExpression",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiKeySelectionExpression#HEADER_X_API_KEY",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi',{\n  apiKeySelectionExpression: apigwv2.WebSocketApiKeySelectionExpression.HEADER_X_API_KEY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "590134f8f369f1b357c7c2974a0ef41f04dc256bf1ef7717eed9aa8ac2939972"
    },
    "94bba451228eed72272fb44f24cd5fc8e71fa86c52ecc44f4a6589fc203d3afa": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers_alpha import WebSocketLambdaAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import WebSocketLambdaIntegration\n\n# This function handles your auth logic\n# auth_handler: lambda.Function\n\n# This function handles your WebSocket requests\n# handler: lambda.Function\n\n\nauthorizer = WebSocketLambdaAuthorizer(\"Authorizer\", auth_handler)\n\nintegration = WebSocketLambdaIntegration(\"Integration\", handler)\n\napigwv2.WebSocketApi(self, \"WebSocketApi\",\n    connect_route_options=apigwv2.WebSocketRouteOptions(\n        integration=integration,\n        authorizer=authorizer\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Authorizers.Alpha;\nusing Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\n// This function handles your auth logic\nFunction authHandler;\n\n// This function handles your WebSocket requests\nFunction handler;\n\n\nWebSocketLambdaAuthorizer authorizer = new WebSocketLambdaAuthorizer(\"Authorizer\", authHandler);\n\nWebSocketLambdaIntegration integration = new WebSocketLambdaIntegration(\"Integration\", handler);\n\nnew WebSocketApi(this, \"WebSocketApi\", new WebSocketApiProps {\n    ConnectRouteOptions = new WebSocketRouteOptions {\n        Integration = integration,\n        Authorizer = authorizer\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.alpha.WebSocketLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.alpha.WebSocketLambdaIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n// This function handles your WebSocket requests\nFunction handler;\n\n\nWebSocketLambdaAuthorizer authorizer = new WebSocketLambdaAuthorizer(\"Authorizer\", authHandler);\n\nWebSocketLambdaIntegration integration = new WebSocketLambdaIntegration(\"Integration\", handler);\n\nWebSocketApi.Builder.create(this, \"WebSocketApi\")\n        .connectRouteOptions(WebSocketRouteOptions.builder()\n                .integration(integration)\n                .authorizer(authorizer)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2authorizersalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2authorizersalpha\"type WebSocketLambdaAuthorizer awscdkapigatewayv2authorizersalpha.WebSocketLambdaAuthorizerimport awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type WebSocketLambdaIntegration awscdkapigatewayv2integrationsalpha.WebSocketLambdaIntegration\n\n// This function handles your auth logic\nvar authHandler function\n\n// This function handles your WebSocket requests\nvar handler function\n\nauthorizer := NewWebSocketLambdaAuthorizer(jsii.String(\"Authorizer\"), authHandler)\n\nintegration := NewWebSocketLambdaIntegration(jsii.String(\"Integration\"), handler)\n\napigwv2.NewWebSocketApi(this, jsii.String(\"WebSocketApi\"), &webSocketApiProps{\n\tconnectRouteOptions: &webSocketRouteOptions{\n\t\tintegration: integration,\n\t\tauthorizer: authorizer,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\n// This function handles your WebSocket requests\ndeclare const handler: lambda.Function;\n\nconst authorizer = new WebSocketLambdaAuthorizer('Authorizer', authHandler);\n\nconst integration = new WebSocketLambdaIntegration(\n  'Integration',\n  handler,\n);\n\nnew apigwv2.WebSocketApi(this, 'WebSocketApi', {\n  connectRouteOptions: {\n    integration,\n    authorizer,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApiProps",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2-authorizers-alpha.WebSocketLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.WebSocketLambdaIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers-alpha';\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\n// This function handles your WebSocket requests\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new WebSocketLambdaAuthorizer('Authorizer', authHandler);\n\nconst integration = new WebSocketLambdaIntegration(\n  'Integration',\n  handler,\n);\n\nnew apigwv2.WebSocketApi(this, 'WebSocketApi', {\n  connectRouteOptions: {\n    integration,\n    authorizer,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "8bb51e997f12fc40816043e2209a5cfd5dbb2592601d287cd8669d440e644fa9"
    },
    "6dd21bdf28f872305a3a39bd42c4faffa411310187c46407a86d6f493efc186e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# web_socket_api: apigatewayv2_alpha.WebSocketApi\n\nweb_socket_authorizer = apigatewayv2_alpha.WebSocketAuthorizer(self, \"MyWebSocketAuthorizer\",\n    identity_source=[\"identitySource\"],\n    type=apigatewayv2_alpha.WebSocketAuthorizerType.LAMBDA,\n    web_socket_api=web_socket_api,\n\n    # the properties below are optional\n    authorizer_name=\"authorizerName\",\n    authorizer_uri=\"authorizerUri\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nWebSocketApi webSocketApi;\n\nWebSocketAuthorizer webSocketAuthorizer = new WebSocketAuthorizer(this, \"MyWebSocketAuthorizer\", new WebSocketAuthorizerProps {\n    IdentitySource = new [] { \"identitySource\" },\n    Type = WebSocketAuthorizerType.LAMBDA,\n    WebSocketApi = webSocketApi,\n\n    // the properties below are optional\n    AuthorizerName = \"authorizerName\",\n    AuthorizerUri = \"authorizerUri\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nWebSocketApi webSocketApi;\n\nWebSocketAuthorizer webSocketAuthorizer = WebSocketAuthorizer.Builder.create(this, \"MyWebSocketAuthorizer\")\n        .identitySource(List.of(\"identitySource\"))\n        .type(WebSocketAuthorizerType.LAMBDA)\n        .webSocketApi(webSocketApi)\n\n        // the properties below are optional\n        .authorizerName(\"authorizerName\")\n        .authorizerUri(\"authorizerUri\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar webSocketApi webSocketApi\nwebSocketAuthorizer := apigatewayv2_alpha.NewWebSocketAuthorizer(this, jsii.String(\"MyWebSocketAuthorizer\"), &webSocketAuthorizerProps{\n\tidentitySource: []*string{\n\t\tjsii.String(\"identitySource\"),\n\t},\n\ttype: apigatewayv2_alpha.webSocketAuthorizerType_LAMBDA,\n\twebSocketApi: webSocketApi,\n\n\t// the properties below are optional\n\tauthorizerName: jsii.String(\"authorizerName\"),\n\tauthorizerUri: jsii.String(\"authorizerUri\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\nconst webSocketAuthorizer = new apigatewayv2_alpha.WebSocketAuthorizer(this, 'MyWebSocketAuthorizer', {\n  identitySource: ['identitySource'],\n  type: apigatewayv2_alpha.WebSocketAuthorizerType.LAMBDA,\n  webSocketApi: webSocketApi,\n\n  // the properties below are optional\n  authorizerName: 'authorizerName',\n  authorizerUri: 'authorizerUri',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizer",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerType",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerType#LAMBDA"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketAuthorizer = new apigatewayv2_alpha.WebSocketAuthorizer(this, 'MyWebSocketAuthorizer', {\n  identitySource: ['identitySource'],\n  type: apigatewayv2_alpha.WebSocketAuthorizerType.LAMBDA,\n  webSocketApi: webSocketApi,\n\n  // the properties below are optional\n  authorizerName: 'authorizerName',\n  authorizerUri: 'authorizerUri',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "82be2d237a10c3b4b12fc40e294a3a6e681beff193a9f0e4a106afb98edbbf9d"
    },
    "92ed82e805cd9ba338eb3d07e1949dfc78f52057e7c7f3e311222518c897b704": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\nweb_socket_authorizer_attributes = apigatewayv2_alpha.WebSocketAuthorizerAttributes(\n    authorizer_id=\"authorizerId\",\n    authorizer_type=\"authorizerType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nWebSocketAuthorizerAttributes webSocketAuthorizerAttributes = new WebSocketAuthorizerAttributes {\n    AuthorizerId = \"authorizerId\",\n    AuthorizerType = \"authorizerType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nWebSocketAuthorizerAttributes webSocketAuthorizerAttributes = WebSocketAuthorizerAttributes.builder()\n        .authorizerId(\"authorizerId\")\n        .authorizerType(\"authorizerType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\nwebSocketAuthorizerAttributes := &webSocketAuthorizerAttributes{\n\tauthorizerId: jsii.String(\"authorizerId\"),\n\tauthorizerType: jsii.String(\"authorizerType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst webSocketAuthorizerAttributes: apigatewayv2_alpha.WebSocketAuthorizerAttributes = {\n  authorizerId: 'authorizerId',\n  authorizerType: 'authorizerType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketAuthorizerAttributes: apigatewayv2_alpha.WebSocketAuthorizerAttributes = {\n  authorizerId: 'authorizerId',\n  authorizerType: 'authorizerType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ab4c88afec3cc8fa2b17ff6efa01fa9f3b53b5c2697c448e02c4018c33587685"
    },
    "7274a343bad2f2329eb4ef2c7be7cf62c179d48c5d284dd69fbac8789276e9aa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# web_socket_api: apigatewayv2_alpha.WebSocketApi\n\nweb_socket_authorizer_props = apigatewayv2_alpha.WebSocketAuthorizerProps(\n    identity_source=[\"identitySource\"],\n    type=apigatewayv2_alpha.WebSocketAuthorizerType.LAMBDA,\n    web_socket_api=web_socket_api,\n\n    # the properties below are optional\n    authorizer_name=\"authorizerName\",\n    authorizer_uri=\"authorizerUri\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nWebSocketApi webSocketApi;\n\nWebSocketAuthorizerProps webSocketAuthorizerProps = new WebSocketAuthorizerProps {\n    IdentitySource = new [] { \"identitySource\" },\n    Type = WebSocketAuthorizerType.LAMBDA,\n    WebSocketApi = webSocketApi,\n\n    // the properties below are optional\n    AuthorizerName = \"authorizerName\",\n    AuthorizerUri = \"authorizerUri\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nWebSocketApi webSocketApi;\n\nWebSocketAuthorizerProps webSocketAuthorizerProps = WebSocketAuthorizerProps.builder()\n        .identitySource(List.of(\"identitySource\"))\n        .type(WebSocketAuthorizerType.LAMBDA)\n        .webSocketApi(webSocketApi)\n\n        // the properties below are optional\n        .authorizerName(\"authorizerName\")\n        .authorizerUri(\"authorizerUri\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar webSocketApi webSocketApi\nwebSocketAuthorizerProps := &webSocketAuthorizerProps{\n\tidentitySource: []*string{\n\t\tjsii.String(\"identitySource\"),\n\t},\n\ttype: apigatewayv2_alpha.webSocketAuthorizerType_LAMBDA,\n\twebSocketApi: webSocketApi,\n\n\t// the properties below are optional\n\tauthorizerName: jsii.String(\"authorizerName\"),\n\tauthorizerUri: jsii.String(\"authorizerUri\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\nconst webSocketAuthorizerProps: apigatewayv2_alpha.WebSocketAuthorizerProps = {\n  identitySource: ['identitySource'],\n  type: apigatewayv2_alpha.WebSocketAuthorizerType.LAMBDA,\n  webSocketApi: webSocketApi,\n\n  // the properties below are optional\n  authorizerName: 'authorizerName',\n  authorizerUri: 'authorizerUri',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerType",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizerType#LAMBDA"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketAuthorizerProps: apigatewayv2_alpha.WebSocketAuthorizerProps = {\n  identitySource: ['identitySource'],\n  type: apigatewayv2_alpha.WebSocketAuthorizerType.LAMBDA,\n  webSocketApi: webSocketApi,\n\n  // the properties below are optional\n  authorizerName: 'authorizerName',\n  authorizerUri: 'authorizerUri',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "953a1b9ae0253e9f9045f8f1937bafffd92c7674c08ee190fabb16eb6776e252"
    },
    "938dc9273b436c0eb2af866fc45d704e809f949a28754079e33b21be79a46ff4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# web_socket_api: apigatewayv2_alpha.WebSocketApi\n\nweb_socket_integration = apigatewayv2_alpha.WebSocketIntegration(self, \"MyWebSocketIntegration\",\n    integration_type=apigatewayv2_alpha.WebSocketIntegrationType.AWS_PROXY,\n    integration_uri=\"integrationUri\",\n    web_socket_api=web_socket_api\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nWebSocketApi webSocketApi;\n\nWebSocketIntegration webSocketIntegration = new WebSocketIntegration(this, \"MyWebSocketIntegration\", new WebSocketIntegrationProps {\n    IntegrationType = WebSocketIntegrationType.AWS_PROXY,\n    IntegrationUri = \"integrationUri\",\n    WebSocketApi = webSocketApi\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nWebSocketApi webSocketApi;\n\nWebSocketIntegration webSocketIntegration = WebSocketIntegration.Builder.create(this, \"MyWebSocketIntegration\")\n        .integrationType(WebSocketIntegrationType.AWS_PROXY)\n        .integrationUri(\"integrationUri\")\n        .webSocketApi(webSocketApi)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar webSocketApi webSocketApi\nwebSocketIntegration := apigatewayv2_alpha.NewWebSocketIntegration(this, jsii.String(\"MyWebSocketIntegration\"), &webSocketIntegrationProps{\n\tintegrationType: apigatewayv2_alpha.webSocketIntegrationType_AWS_PROXY,\n\tintegrationUri: jsii.String(\"integrationUri\"),\n\twebSocketApi: webSocketApi,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\nconst webSocketIntegration = new apigatewayv2_alpha.WebSocketIntegration(this, 'MyWebSocketIntegration', {\n  integrationType: apigatewayv2_alpha.WebSocketIntegrationType.AWS_PROXY,\n  integrationUri: 'integrationUri',\n  webSocketApi: webSocketApi,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationProps",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationType",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationType#AWS_PROXY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketIntegration = new apigatewayv2_alpha.WebSocketIntegration(this, 'MyWebSocketIntegration', {\n  integrationType: apigatewayv2_alpha.WebSocketIntegrationType.AWS_PROXY,\n  integrationUri: 'integrationUri',\n  webSocketApi: webSocketApi,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "1cfb476c94767ae0cd3d197bd2ebda2dd46193b89d013e1c584864e4b0eded97"
    },
    "9fc529d47d810869a14c6c6e116e23260edd18db4e851cffc9ebf0ca61da173a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# web_socket_api: apigatewayv2_alpha.WebSocketApi\n\nweb_socket_integration_props = apigatewayv2_alpha.WebSocketIntegrationProps(\n    integration_type=apigatewayv2_alpha.WebSocketIntegrationType.AWS_PROXY,\n    integration_uri=\"integrationUri\",\n    web_socket_api=web_socket_api\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nWebSocketApi webSocketApi;\n\nWebSocketIntegrationProps webSocketIntegrationProps = new WebSocketIntegrationProps {\n    IntegrationType = WebSocketIntegrationType.AWS_PROXY,\n    IntegrationUri = \"integrationUri\",\n    WebSocketApi = webSocketApi\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nWebSocketApi webSocketApi;\n\nWebSocketIntegrationProps webSocketIntegrationProps = WebSocketIntegrationProps.builder()\n        .integrationType(WebSocketIntegrationType.AWS_PROXY)\n        .integrationUri(\"integrationUri\")\n        .webSocketApi(webSocketApi)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar webSocketApi webSocketApi\nwebSocketIntegrationProps := &webSocketIntegrationProps{\n\tintegrationType: apigatewayv2_alpha.webSocketIntegrationType_AWS_PROXY,\n\tintegrationUri: jsii.String(\"integrationUri\"),\n\twebSocketApi: webSocketApi,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\nconst webSocketIntegrationProps: apigatewayv2_alpha.WebSocketIntegrationProps = {\n  integrationType: apigatewayv2_alpha.WebSocketIntegrationType.AWS_PROXY,\n  integrationUri: 'integrationUri',\n  webSocketApi: webSocketApi,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationProps",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationType",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationType#AWS_PROXY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketIntegrationProps: apigatewayv2_alpha.WebSocketIntegrationProps = {\n  integrationType: apigatewayv2_alpha.WebSocketIntegrationType.AWS_PROXY,\n  integrationUri: 'integrationUri',\n  webSocketApi: webSocketApi,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6d5ed197c99f1006e7b5f5a2173d8fb30c77d5f698c3e372db429712117bc60c"
    },
    "5342eeb6971f68a77e0092c6a44c354340805b71560c5117824fcbfc9ee0fdda": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\nweb_socket_none_authorizer = apigatewayv2_alpha.WebSocketNoneAuthorizer()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nWebSocketNoneAuthorizer webSocketNoneAuthorizer = new WebSocketNoneAuthorizer();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nWebSocketNoneAuthorizer webSocketNoneAuthorizer = new WebSocketNoneAuthorizer();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\nwebSocketNoneAuthorizer := apigatewayv2_alpha.NewWebSocketNoneAuthorizer()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst webSocketNoneAuthorizer = new apigatewayv2_alpha.WebSocketNoneAuthorizer();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketNoneAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketNoneAuthorizer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketNoneAuthorizer = new apigatewayv2_alpha.WebSocketNoneAuthorizer();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "4ea5fe297b9790dbf116d60f1dcea3bfbe38988a0daaf1f2bc7b08eedfe7d285"
    },
    "7f228019eac93749ad451b4f5d254e2ee9f1719d3a494198c7d0a3cbb003591f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# web_socket_api: apigatewayv2_alpha.WebSocketApi\n# web_socket_route_authorizer: apigatewayv2_alpha.IWebSocketRouteAuthorizer\n# web_socket_route_integration: apigatewayv2_alpha.WebSocketRouteIntegration\n\nweb_socket_route = apigatewayv2_alpha.WebSocketRoute(self, \"MyWebSocketRoute\",\n    integration=web_socket_route_integration,\n    route_key=\"routeKey\",\n    web_socket_api=web_socket_api,\n\n    # the properties below are optional\n    api_key_required=False,\n    authorizer=web_socket_route_authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nWebSocketApi webSocketApi;\nIWebSocketRouteAuthorizer webSocketRouteAuthorizer;\nWebSocketRouteIntegration webSocketRouteIntegration;\n\nWebSocketRoute webSocketRoute = new WebSocketRoute(this, \"MyWebSocketRoute\", new WebSocketRouteProps {\n    Integration = webSocketRouteIntegration,\n    RouteKey = \"routeKey\",\n    WebSocketApi = webSocketApi,\n\n    // the properties below are optional\n    ApiKeyRequired = false,\n    Authorizer = webSocketRouteAuthorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nWebSocketApi webSocketApi;\nIWebSocketRouteAuthorizer webSocketRouteAuthorizer;\nWebSocketRouteIntegration webSocketRouteIntegration;\n\nWebSocketRoute webSocketRoute = WebSocketRoute.Builder.create(this, \"MyWebSocketRoute\")\n        .integration(webSocketRouteIntegration)\n        .routeKey(\"routeKey\")\n        .webSocketApi(webSocketApi)\n\n        // the properties below are optional\n        .apiKeyRequired(false)\n        .authorizer(webSocketRouteAuthorizer)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar webSocketApi webSocketApi\nvar webSocketRouteAuthorizer iWebSocketRouteAuthorizer\nvar webSocketRouteIntegration webSocketRouteIntegration\nwebSocketRoute := apigatewayv2_alpha.NewWebSocketRoute(this, jsii.String(\"MyWebSocketRoute\"), &webSocketRouteProps{\n\tintegration: webSocketRouteIntegration,\n\trouteKey: jsii.String(\"routeKey\"),\n\twebSocketApi: webSocketApi,\n\n\t// the properties below are optional\n\tapiKeyRequired: jsii.Boolean(false),\n\tauthorizer: webSocketRouteAuthorizer,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\ndeclare const webSocketRouteAuthorizer: apigatewayv2_alpha.IWebSocketRouteAuthorizer;\ndeclare const webSocketRouteIntegration: apigatewayv2_alpha.WebSocketRouteIntegration;\nconst webSocketRoute = new apigatewayv2_alpha.WebSocketRoute(this, 'MyWebSocketRoute', {\n  integration: webSocketRouteIntegration,\n  routeKey: 'routeKey',\n  webSocketApi: webSocketApi,\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizer: webSocketRouteAuthorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRoute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRoute",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\ndeclare const webSocketRouteAuthorizer: apigatewayv2_alpha.IWebSocketRouteAuthorizer;\ndeclare const webSocketRouteIntegration: apigatewayv2_alpha.WebSocketRouteIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketRoute = new apigatewayv2_alpha.WebSocketRoute(this, 'MyWebSocketRoute', {\n  integration: webSocketRouteIntegration,\n  routeKey: 'routeKey',\n  webSocketApi: webSocketApi,\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizer: webSocketRouteAuthorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 21,
        "91": 1,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "8c289432f099ebac46998247f922a93d805d944676e32380992f98b8fe3b6398"
    },
    "a9cce6e799bae6dbdb435d6ff3203cd14dfa5ef95bacfa74f6021afefee6a1b4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\nimport constructs as constructs\n\n# construct: constructs.Construct\n# web_socket_route: apigatewayv2_alpha.WebSocketRoute\n\nweb_socket_route_authorizer_bind_options = apigatewayv2_alpha.WebSocketRouteAuthorizerBindOptions(\n    route=web_socket_route,\n    scope=construct\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\nusing Constructs;\n\nConstruct construct;\nWebSocketRoute webSocketRoute;\nWebSocketRouteAuthorizerBindOptions webSocketRouteAuthorizerBindOptions = new WebSocketRouteAuthorizerBindOptions {\n    Route = webSocketRoute,\n    Scope = construct\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\nimport software.constructs.*;\n\nConstruct construct;\nWebSocketRoute webSocketRoute;\n\nWebSocketRouteAuthorizerBindOptions webSocketRouteAuthorizerBindOptions = WebSocketRouteAuthorizerBindOptions.builder()\n        .route(webSocketRoute)\n        .scope(construct)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"import constructs \"github.com/aws/constructs-go/constructs\"\n\nvar construct construct\nvar webSocketRoute webSocketRoute\nwebSocketRouteAuthorizerBindOptions := &webSocketRouteAuthorizerBindOptions{\n\troute: webSocketRoute,\n\tscope: construct,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as constructs from 'constructs';\n\ndeclare const construct: constructs.Construct;\ndeclare const webSocketRoute: apigatewayv2_alpha.WebSocketRoute;\nconst webSocketRouteAuthorizerBindOptions: apigatewayv2_alpha.WebSocketRouteAuthorizerBindOptions = {\n  route: webSocketRoute,\n  scope: construct,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteAuthorizerBindOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketRoute",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteAuthorizerBindOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as constructs from 'constructs';\n\ndeclare const construct: constructs.Construct;\ndeclare const webSocketRoute: apigatewayv2_alpha.WebSocketRoute;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketRouteAuthorizerBindOptions: apigatewayv2_alpha.WebSocketRouteAuthorizerBindOptions = {\n  route: webSocketRoute,\n  scope: construct,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0f5adc6a555a31255404504f1a6e45e64f10c6abe46990e4b9713fba5447403b"
    },
    "babb2163f1b643f19b94e2ecff49529a621f26437bfcb5b5712d9d060373036e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\nweb_socket_route_authorizer_config = apigatewayv2_alpha.WebSocketRouteAuthorizerConfig(\n    authorization_type=\"authorizationType\",\n\n    # the properties below are optional\n    authorizer_id=\"authorizerId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nWebSocketRouteAuthorizerConfig webSocketRouteAuthorizerConfig = new WebSocketRouteAuthorizerConfig {\n    AuthorizationType = \"authorizationType\",\n\n    // the properties below are optional\n    AuthorizerId = \"authorizerId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nWebSocketRouteAuthorizerConfig webSocketRouteAuthorizerConfig = WebSocketRouteAuthorizerConfig.builder()\n        .authorizationType(\"authorizationType\")\n\n        // the properties below are optional\n        .authorizerId(\"authorizerId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\nwebSocketRouteAuthorizerConfig := &webSocketRouteAuthorizerConfig{\n\tauthorizationType: jsii.String(\"authorizationType\"),\n\n\t// the properties below are optional\n\tauthorizerId: jsii.String(\"authorizerId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst webSocketRouteAuthorizerConfig: apigatewayv2_alpha.WebSocketRouteAuthorizerConfig = {\n  authorizationType: 'authorizationType',\n\n  // the properties below are optional\n  authorizerId: 'authorizerId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteAuthorizerConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteAuthorizerConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketRouteAuthorizerConfig: apigatewayv2_alpha.WebSocketRouteAuthorizerConfig = {\n  authorizationType: 'authorizationType',\n\n  // the properties below are optional\n  authorizerId: 'authorizerId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4bb77a3dbe886355f4b2759e85c0e6e3fb6f4c0c05c26a9dd3b4d7f3f9a48c23"
    },
    "4e94b92edb7518b375f50dc6e28ac3099f571ef4c719087ab214c784e006e134": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import WebSocketLambdaIntegration\n\n# message_handler: lambda.Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\")\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)\nweb_socket_api.add_route(\"sendmessage\",\n    integration=WebSocketLambdaIntegration(\"SendMessageIntegration\", message_handler)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});\nwebSocketApi.AddRoute(\"sendmessage\", new WebSocketRouteOptions {\n    Integration = new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.WebSocketLambdaIntegration;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();\nwebSocketApi.addRoute(\"sendmessage\", WebSocketRouteOptions.builder()\n        .integration(new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type WebSocketLambdaIntegration awscdkapigatewayv2integrationsalpha.WebSocketLambdaIntegration\n\nvar messageHandler function\n\nwebSocketApi := apigwv2.NewWebSocketApi(this, jsii.String(\"mywsapi\"))\napigwv2.NewWebSocketStage(this, jsii.String(\"mystage\"), &webSocketStageProps{\n\twebSocketApi: webSocketApi,\n\tstageName: jsii.String(\"dev\"),\n\tautoDeploy: jsii.Boolean(true),\n})\nwebSocketApi.addRoute(jsii.String(\"sendmessage\"), &webSocketRouteOptions{\n\tintegration: NewWebSocketLambdaIntegration(jsii.String(\"SendMessageIntegration\"), messageHandler),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n\ndeclare const messageHandler: lambda.Function;\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi#addRoute",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStageProps",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.WebSocketLambdaIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const messageHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 2,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "919b866230e6ae6810f6dc395e90ea9e392df3c593a526e84ce5d5ffdbac10ab"
    },
    "d58bdd9865392f5cc0eafffa1568bea35b5e7d61473e79dc2b71043cd7ce48e9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\nimport constructs as constructs\n\n# construct: constructs.Construct\n# web_socket_route: apigatewayv2_alpha.WebSocketRoute\n\nweb_socket_route_integration_bind_options = apigatewayv2_alpha.WebSocketRouteIntegrationBindOptions(\n    route=web_socket_route,\n    scope=construct\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\nusing Constructs;\n\nConstruct construct;\nWebSocketRoute webSocketRoute;\nWebSocketRouteIntegrationBindOptions webSocketRouteIntegrationBindOptions = new WebSocketRouteIntegrationBindOptions {\n    Route = webSocketRoute,\n    Scope = construct\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\nimport software.constructs.*;\n\nConstruct construct;\nWebSocketRoute webSocketRoute;\n\nWebSocketRouteIntegrationBindOptions webSocketRouteIntegrationBindOptions = WebSocketRouteIntegrationBindOptions.builder()\n        .route(webSocketRoute)\n        .scope(construct)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"import constructs \"github.com/aws/constructs-go/constructs\"\n\nvar construct construct\nvar webSocketRoute webSocketRoute\nwebSocketRouteIntegrationBindOptions := &webSocketRouteIntegrationBindOptions{\n\troute: webSocketRoute,\n\tscope: construct,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as constructs from 'constructs';\n\ndeclare const construct: constructs.Construct;\ndeclare const webSocketRoute: apigatewayv2_alpha.WebSocketRoute;\nconst webSocketRouteIntegrationBindOptions: apigatewayv2_alpha.WebSocketRouteIntegrationBindOptions = {\n  route: webSocketRoute,\n  scope: construct,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegrationBindOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketRoute",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegrationBindOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as constructs from 'constructs';\n\ndeclare const construct: constructs.Construct;\ndeclare const webSocketRoute: apigatewayv2_alpha.WebSocketRoute;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketRouteIntegrationBindOptions: apigatewayv2_alpha.WebSocketRouteIntegrationBindOptions = {\n  route: webSocketRoute,\n  scope: construct,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "230a8370cdea19c568eb28dbad1f4ba991ab344dc42aafb88a53d66a276d0ab8"
    },
    "8f01dd4e5f4c140072c82712c3a621082f7ba1c60515a48c62ab9f7a7c3ee42e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\nweb_socket_route_integration_config = apigatewayv2_alpha.WebSocketRouteIntegrationConfig(\n    type=apigatewayv2_alpha.WebSocketIntegrationType.AWS_PROXY,\n    uri=\"uri\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nWebSocketRouteIntegrationConfig webSocketRouteIntegrationConfig = new WebSocketRouteIntegrationConfig {\n    Type = WebSocketIntegrationType.AWS_PROXY,\n    Uri = \"uri\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nWebSocketRouteIntegrationConfig webSocketRouteIntegrationConfig = WebSocketRouteIntegrationConfig.builder()\n        .type(WebSocketIntegrationType.AWS_PROXY)\n        .uri(\"uri\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\nwebSocketRouteIntegrationConfig := &webSocketRouteIntegrationConfig{\n\ttype: apigatewayv2_alpha.webSocketIntegrationType_AWS_PROXY,\n\turi: jsii.String(\"uri\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\nconst webSocketRouteIntegrationConfig: apigatewayv2_alpha.WebSocketRouteIntegrationConfig = {\n  type: apigatewayv2_alpha.WebSocketIntegrationType.AWS_PROXY,\n  uri: 'uri',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegrationConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationType",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketIntegrationType#AWS_PROXY",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegrationConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketRouteIntegrationConfig: apigatewayv2_alpha.WebSocketRouteIntegrationConfig = {\n  type: apigatewayv2_alpha.WebSocketIntegrationType.AWS_PROXY,\n  uri: 'uri',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9e69817e702a7e4647da8f617ca6bd4d99f2c6390f96e79837f8363475bdcc07"
    },
    "98bc373dbef6719cb55ab4f7e1b379876cff98d0b8e479a285f6efd61630852c": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import WebSocketLambdaIntegration\n\n# message_handler: lambda.Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\")\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)\nweb_socket_api.add_route(\"sendmessage\",\n    integration=WebSocketLambdaIntegration(\"SendMessageIntegration\", message_handler)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});\nwebSocketApi.AddRoute(\"sendmessage\", new WebSocketRouteOptions {\n    Integration = new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.WebSocketLambdaIntegration;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();\nwebSocketApi.addRoute(\"sendmessage\", WebSocketRouteOptions.builder()\n        .integration(new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type WebSocketLambdaIntegration awscdkapigatewayv2integrationsalpha.WebSocketLambdaIntegration\n\nvar messageHandler function\n\nwebSocketApi := apigwv2.NewWebSocketApi(this, jsii.String(\"mywsapi\"))\napigwv2.NewWebSocketStage(this, jsii.String(\"mystage\"), &webSocketStageProps{\n\twebSocketApi: webSocketApi,\n\tstageName: jsii.String(\"dev\"),\n\tautoDeploy: jsii.Boolean(true),\n})\nwebSocketApi.addRoute(jsii.String(\"sendmessage\"), &webSocketRouteOptions{\n\tintegration: NewWebSocketLambdaIntegration(jsii.String(\"SendMessageIntegration\"), messageHandler),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n\ndeclare const messageHandler: lambda.Function;\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi#addRoute",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStageProps",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.WebSocketLambdaIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const messageHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 2,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "919b866230e6ae6810f6dc395e90ea9e392df3c593a526e84ce5d5ffdbac10ab"
    },
    "170974ed0ce1bd0af5f574d9ac522d2159a68363578080cc44870ec175e86cc3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# web_socket_api: apigatewayv2_alpha.WebSocketApi\n# web_socket_route_authorizer: apigatewayv2_alpha.IWebSocketRouteAuthorizer\n# web_socket_route_integration: apigatewayv2_alpha.WebSocketRouteIntegration\n\nweb_socket_route_props = apigatewayv2_alpha.WebSocketRouteProps(\n    integration=web_socket_route_integration,\n    route_key=\"routeKey\",\n    web_socket_api=web_socket_api,\n\n    # the properties below are optional\n    api_key_required=False,\n    authorizer=web_socket_route_authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nWebSocketApi webSocketApi;\nIWebSocketRouteAuthorizer webSocketRouteAuthorizer;\nWebSocketRouteIntegration webSocketRouteIntegration;\n\nWebSocketRouteProps webSocketRouteProps = new WebSocketRouteProps {\n    Integration = webSocketRouteIntegration,\n    RouteKey = \"routeKey\",\n    WebSocketApi = webSocketApi,\n\n    // the properties below are optional\n    ApiKeyRequired = false,\n    Authorizer = webSocketRouteAuthorizer\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nWebSocketApi webSocketApi;\nIWebSocketRouteAuthorizer webSocketRouteAuthorizer;\nWebSocketRouteIntegration webSocketRouteIntegration;\n\nWebSocketRouteProps webSocketRouteProps = WebSocketRouteProps.builder()\n        .integration(webSocketRouteIntegration)\n        .routeKey(\"routeKey\")\n        .webSocketApi(webSocketApi)\n\n        // the properties below are optional\n        .apiKeyRequired(false)\n        .authorizer(webSocketRouteAuthorizer)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar webSocketApi webSocketApi\nvar webSocketRouteAuthorizer iWebSocketRouteAuthorizer\nvar webSocketRouteIntegration webSocketRouteIntegration\nwebSocketRouteProps := &webSocketRouteProps{\n\tintegration: webSocketRouteIntegration,\n\trouteKey: jsii.String(\"routeKey\"),\n\twebSocketApi: webSocketApi,\n\n\t// the properties below are optional\n\tapiKeyRequired: jsii.Boolean(false),\n\tauthorizer: webSocketRouteAuthorizer,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\ndeclare const webSocketRouteAuthorizer: apigatewayv2_alpha.IWebSocketRouteAuthorizer;\ndeclare const webSocketRouteIntegration: apigatewayv2_alpha.WebSocketRouteIntegration;\nconst webSocketRouteProps: apigatewayv2_alpha.WebSocketRouteProps = {\n  integration: webSocketRouteIntegration,\n  routeKey: 'routeKey',\n  webSocketApi: webSocketApi,\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizer: webSocketRouteAuthorizer,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\ndeclare const webSocketRouteAuthorizer: apigatewayv2_alpha.IWebSocketRouteAuthorizer;\ndeclare const webSocketRouteIntegration: apigatewayv2_alpha.WebSocketRouteIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketRouteProps: apigatewayv2_alpha.WebSocketRouteProps = {\n  integration: webSocketRouteIntegration,\n  routeKey: 'routeKey',\n  webSocketApi: webSocketApi,\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizer: webSocketRouteAuthorizer,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 21,
        "91": 1,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "28089c7e01510aa7cacb79154a69c08fd77d7c7807c3c80968bc99816830e748"
    },
    "a3242ff001b12716391642478e215872e3accc0a955fe1a38a106159cfc49429": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import WebSocketLambdaIntegration\n\n# message_handler: lambda.Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\")\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)\nweb_socket_api.add_route(\"sendmessage\",\n    integration=WebSocketLambdaIntegration(\"SendMessageIntegration\", message_handler)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});\nwebSocketApi.AddRoute(\"sendmessage\", new WebSocketRouteOptions {\n    Integration = new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.WebSocketLambdaIntegration;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();\nwebSocketApi.addRoute(\"sendmessage\", WebSocketRouteOptions.builder()\n        .integration(new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type WebSocketLambdaIntegration awscdkapigatewayv2integrationsalpha.WebSocketLambdaIntegration\n\nvar messageHandler function\n\nwebSocketApi := apigwv2.NewWebSocketApi(this, jsii.String(\"mywsapi\"))\napigwv2.NewWebSocketStage(this, jsii.String(\"mystage\"), &webSocketStageProps{\n\twebSocketApi: webSocketApi,\n\tstageName: jsii.String(\"dev\"),\n\tautoDeploy: jsii.Boolean(true),\n})\nwebSocketApi.addRoute(jsii.String(\"sendmessage\"), &webSocketRouteOptions{\n\tintegration: NewWebSocketLambdaIntegration(jsii.String(\"SendMessageIntegration\"), messageHandler),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n\ndeclare const messageHandler: lambda.Function;\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi#addRoute",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStageProps",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.WebSocketLambdaIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const messageHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 2,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "919b866230e6ae6810f6dc395e90ea9e392df3c593a526e84ce5d5ffdbac10ab"
    },
    "52ab450e81a8275899575c854de9ee552de004d92a62b3ace69995861df3dc6a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_alpha as apigatewayv2_alpha\n\n# web_socket_api: apigatewayv2_alpha.WebSocketApi\n\nweb_socket_stage_attributes = apigatewayv2_alpha.WebSocketStageAttributes(\n    api=web_socket_api,\n    stage_name=\"stageName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Apigatewayv2.Alpha;\n\nWebSocketApi webSocketApi;\n\nWebSocketStageAttributes webSocketStageAttributes = new WebSocketStageAttributes {\n    Api = webSocketApi,\n    StageName = \"stageName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.alpha.*;\n\nWebSocketApi webSocketApi;\n\nWebSocketStageAttributes webSocketStageAttributes = WebSocketStageAttributes.builder()\n        .api(webSocketApi)\n        .stageName(\"stageName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2_alpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha\"\n\nvar webSocketApi webSocketApi\nwebSocketStageAttributes := &webSocketStageAttributes{\n\tapi: webSocketApi,\n\tstageName: jsii.String(\"stageName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\nconst webSocketStageAttributes: apigatewayv2_alpha.WebSocketStageAttributes = {\n  api: webSocketApi,\n  stageName: 'stageName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStageAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStageAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_alpha from '@aws-cdk/aws-apigatewayv2-alpha';\n\ndeclare const webSocketApi: apigatewayv2_alpha.WebSocketApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketStageAttributes: apigatewayv2_alpha.WebSocketStageAttributes = {\n  api: webSocketApi,\n  stageName: 'stageName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "78174bd36f39906d313c2c8e108b2483ee0741437384a7510af8cf8a7cb638b2"
    },
    "fd2431e37c94cb95bf30779b58f777fb13c1ed8d7baa8007c50d0bc64374a1d0": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations_alpha import WebSocketLambdaIntegration\n\n# message_handler: lambda.Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\")\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)\nweb_socket_api.add_route(\"sendmessage\",\n    integration=WebSocketLambdaIntegration(\"SendMessageIntegration\", message_handler)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Apigatewayv2.Integrations.Alpha;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});\nwebSocketApi.AddRoute(\"sendmessage\", new WebSocketRouteOptions {\n    Integration = new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.alpha.WebSocketLambdaIntegration;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();\nwebSocketApi.addRoute(\"sendmessage\", WebSocketRouteOptions.builder()\n        .integration(new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import awscdkapigatewayv2integrationsalpha \"github.com/aws/aws-cdk-go/awscdkapigatewayv2integrationsalpha\"type WebSocketLambdaIntegration awscdkapigatewayv2integrationsalpha.WebSocketLambdaIntegration\n\nvar messageHandler function\n\nwebSocketApi := apigwv2.NewWebSocketApi(this, jsii.String(\"mywsapi\"))\napigwv2.NewWebSocketStage(this, jsii.String(\"mystage\"), &webSocketStageProps{\n\twebSocketApi: webSocketApi,\n\tstageName: jsii.String(\"dev\"),\n\tautoDeploy: jsii.Boolean(true),\n})\nwebSocketApi.addRoute(jsii.String(\"sendmessage\"), &webSocketRouteOptions{\n\tintegration: NewWebSocketLambdaIntegration(jsii.String(\"SendMessageIntegration\"), messageHandler),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n\ndeclare const messageHandler: lambda.Function;\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-alpha.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketApi#addRoute",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2-alpha.WebSocketStageProps",
        "@aws-cdk/aws-apigatewayv2-integrations-alpha.WebSocketLambdaIntegration",
        "aws-cdk-lib.aws_lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations-alpha';\n\ndeclare const messageHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from 'aws-cdk-lib';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2-alpha';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 2,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "919b866230e6ae6810f6dc395e90ea9e392df3c593a526e84ce5d5ffdbac10ab"
    }
  }
}
