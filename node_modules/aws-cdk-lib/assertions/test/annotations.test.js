"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe('Messages', () => {
    let stack;
    let annotations;
    beforeAll(() => {
        stack = new core_1.Stack();
        new core_1.CfnResource(stack, 'Foo', {
            type: 'Foo::Bar',
            properties: {
                Fred: 'Thud',
            },
        });
        new core_1.CfnResource(stack, 'Bar', {
            type: 'Foo::Bar',
            properties: {
                Baz: 'Qux',
            },
        });
        new core_1.CfnResource(stack, 'Fred', {
            type: 'Baz::Qux',
            properties: {
                Foo: 'Bar',
            },
        });
        new core_1.CfnResource(stack, 'Qux', {
            type: 'Fred::Thud',
            properties: {
                Fred: 'Bar',
            },
        });
        core_1.Aspects.of(stack).add(new MyAspect());
        annotations = lib_1.Annotations.fromStack(stack);
    });
    describe('hasError', () => {
        test('match', () => {
            annotations.hasError('/Default/Foo', 'this is an error');
        });
        test('no match', () => {
            expect(() => annotations.hasError('/Default/Fred', lib_1.Match.anyValue()))
                .toThrowError(/Stack has 1 messages.*but none match as expected./);
        });
    });
    describe('hasNoError', () => {
        test('match', () => {
            annotations.hasNoError('/Default/Fred', lib_1.Match.anyValue());
        });
        test('no match', () => {
            expect(() => annotations.hasNoError('/Default/Foo', 'this is an error'))
                .toThrowError(/Expected no matches, but stack has 1 messages as follows:/);
        });
    });
    describe('findError', () => {
        test('match', () => {
            const result = annotations.findError('*', lib_1.Match.anyValue());
            expect(result.length).toEqual(2);
        });
        test('no match', () => {
            const result = annotations.findError('*', 'no message looks like this');
            expect(result.length).toEqual(0);
        });
    });
    describe('hasWarning', () => {
        test('match', () => {
            annotations.hasWarning('/Default/Fred', 'this is a warning');
        });
        test('no match', () => {
            expect(() => annotations.hasWarning('/Default/Foo', lib_1.Match.anyValue())).toThrowError(/Stack has 1 messages.*but none match as expected./);
        });
    });
    describe('hasNoWarning', () => {
        test('match', () => {
            annotations.hasNoWarning('/Default/Foo', lib_1.Match.anyValue());
        });
        test('no match', () => {
            expect(() => annotations.hasNoWarning('/Default/Fred', 'this is a warning'))
                .toThrowError(/Expected no matches, but stack has 1 messages as follows:/);
        });
    });
    describe('findWarning', () => {
        test('match', () => {
            const result = annotations.findWarning('*', lib_1.Match.anyValue());
            expect(result.length).toEqual(1);
        });
        test('no match', () => {
            const result = annotations.findWarning('*', 'no message looks like this');
            expect(result.length).toEqual(0);
        });
    });
    describe('hasInfo', () => {
        test('match', () => {
            annotations.hasInfo('/Default/Qux', 'this is an info');
        });
        test('no match', () => {
            expect(() => annotations.hasInfo('/Default/Qux', 'this info is incorrect')).toThrowError(/Stack has 1 messages.*but none match as expected./);
        });
    });
    describe('hasNoInfo', () => {
        test('match', () => {
            annotations.hasNoInfo('/Default/Qux', 'this info is incorrect');
        });
        test('no match', () => {
            expect(() => annotations.hasNoInfo('/Default/Qux', 'this is an info'))
                .toThrowError(/Expected no matches, but stack has 1 messages as follows:/);
        });
    });
    describe('findInfo', () => {
        test('match', () => {
            const result = annotations.findInfo('/Default/Qux', 'this is an info');
            expect(result.length).toEqual(1);
        });
        test('no match', () => {
            const result = annotations.findInfo('*', 'no message looks like this');
            expect(result.length).toEqual(0);
        });
    });
    describe('with matchers', () => {
        test('anyValue', () => {
            const result = annotations.findError('*', lib_1.Match.anyValue());
            expect(result.length).toEqual(2);
        });
        test('not', () => {
            expect(() => annotations.hasError('/Default/Foo', lib_1.Match.not('this is an error')))
                .toThrowError(/Found unexpected match: "this is an error"/);
        });
        test('stringLikeRegEx', () => {
            annotations.hasError('/Default/Foo', lib_1.Match.stringLikeRegexp('.*error'));
        });
    });
});
describe('Multiple Messages on the Resource', () => {
    let stack;
    let annotations;
    beforeAll(() => {
        stack = new core_1.Stack();
        new core_1.CfnResource(stack, 'Foo', {
            type: 'Foo::Bar',
            properties: {
                Fred: 'Thud',
            },
        });
        const bar = new core_1.CfnResource(stack, 'Bar', {
            type: 'Foo::Bar',
            properties: {
                Baz: 'Qux',
            },
        });
        bar.node.setContext('disable-stack-trace', false);
        core_1.Aspects.of(stack).add(new MultipleAspectsPerNode());
        annotations = lib_1.Annotations.fromStack(stack);
    });
    test('succeeds on hasXxx APIs', () => {
        annotations.hasError('/Default/Foo', 'error: this is an error');
        annotations.hasError('/Default/Foo', 'error: unsupported type Foo::Bar');
        annotations.hasWarning('/Default/Foo', 'warning: Foo::Bar is deprecated');
    });
    test('succeeds on findXxx APIs', () => {
        const result1 = annotations.findError('*', lib_1.Match.stringLikeRegexp('error:.*'));
        expect(result1.length).toEqual(4);
        const result2 = annotations.findError('/Default/Bar', lib_1.Match.stringLikeRegexp('error:.*'));
        expect(result2.length).toEqual(2);
        const result3 = annotations.findWarning('/Default/Bar', 'warning: Foo::Bar is deprecated');
        expect(result3[0].entry.data).toEqual('warning: Foo::Bar is deprecated');
    });
});
class MyAspect {
    visit(node) {
        if (node instanceof core_1.CfnResource) {
            if (node.cfnResourceType === 'Foo::Bar') {
                this.error(node, 'this is an error');
            }
            else if (node.cfnResourceType === 'Baz::Qux') {
                this.warn(node, 'this is a warning');
            }
            else {
                this.info(node, 'this is an info');
            }
        }
    }
    ;
    warn(node, message) {
        core_1.Annotations.of(node).addWarning(message);
    }
    error(node, message) {
        core_1.Annotations.of(node).addError(message);
    }
    info(node, message) {
        core_1.Annotations.of(node).addInfo(message);
    }
}
class MultipleAspectsPerNode {
    visit(node) {
        if (node instanceof core_1.CfnResource) {
            this.error(node, 'error: this is an error');
            this.error(node, `error: unsupported type ${node.cfnResourceType}`);
            this.warn(node, `warning: ${node.cfnResourceType} is deprecated`);
        }
    }
    warn(node, message) {
        core_1.Annotations.of(node).addWarning(message);
    }
    error(node, message) {
        core_1.Annotations.of(node).addError(message);
    }
}
//# sourceMappingURL=data:application/json;base64,