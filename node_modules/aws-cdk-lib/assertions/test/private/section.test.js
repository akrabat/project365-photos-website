"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../../lib");
const section_1 = require("../../lib/private/section");
describe('section', () => {
    describe('matchSection', () => {
        test('success', () => {
            // GIVEN
            const matcher = lib_1.Match.objectLike({ foo: 'bar' });
            const section = {
                Entry1: { foo: 'bar' },
                Entry2: { foo: 'bar', baz: 'qux' },
                Entry3: { fred: 'waldo' },
            };
            // WHEN
            const result = (0, section_1.matchSection)(section, matcher);
            // THEN
            expect(result.match).toEqual(true);
            const success = result;
            expect(Object.keys(success.matches).length).toEqual(2);
            expect(success.matches.Entry1).toEqual({ foo: 'bar' });
            expect(success.matches.Entry2).toEqual({ foo: 'bar', baz: 'qux' });
        });
        test('failure', () => {
            // GIVEN
            const matcher = lib_1.Match.objectLike({ foo: 'bar' });
            const section = {
                Entry1: { foo: 'qux' },
                Entry3: { fred: 'waldo' },
            };
            // WHEN
            const result = (0, section_1.matchSection)(section, matcher);
            // THEN
            expect(result.match).toEqual(false);
            const success = result;
            expect(success.analyzedCount).toEqual(2);
            const ckeys = Object.keys(success.closestResults);
            expect(ckeys).not.toEqual([]);
            expect(success.closestResults[ckeys[0]].target).toEqual({ foo: 'qux' });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdGlvbi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VjdGlvbi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQWtDO0FBQ2xDLHVEQUFxRjtBQUVyRixRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtJQUN2QixRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUM1QixJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtZQUNuQixRQUFRO1lBQ1IsTUFBTSxPQUFPLEdBQUcsV0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sT0FBTyxHQUFHO2dCQUNkLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7Z0JBQ3RCLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtnQkFDbEMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTthQUMxQixDQUFDO1lBRUYsT0FBTztZQUNQLE1BQU0sTUFBTSxHQUFHLElBQUEsc0JBQVksRUFBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFOUMsT0FBTztZQUNQLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25DLE1BQU0sT0FBTyxHQUFHLE1BQXNCLENBQUM7WUFDdkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7WUFDbkIsUUFBUTtZQUNSLE1BQU0sT0FBTyxHQUFHLFdBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUNqRCxNQUFNLE9BQU8sR0FBRztnQkFDZCxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFO2dCQUN0QixNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO2FBQzFCLENBQUM7WUFFRixPQUFPO1lBQ1AsTUFBTSxNQUFNLEdBQUcsSUFBQSxzQkFBWSxFQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztZQUU5QyxPQUFPO1lBQ1AsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEMsTUFBTSxPQUFPLEdBQUcsTUFBc0IsQ0FBQztZQUN2QyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV6QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM5QixNQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXRjaCB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgeyBNYXRjaEZhaWx1cmUsIG1hdGNoU2VjdGlvbiwgTWF0Y2hTdWNjZXNzIH0gZnJvbSAnLi4vLi4vbGliL3ByaXZhdGUvc2VjdGlvbic7XG5cbmRlc2NyaWJlKCdzZWN0aW9uJywgKCkgPT4ge1xuICBkZXNjcmliZSgnbWF0Y2hTZWN0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3N1Y2Nlc3MnLCAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29uc3QgbWF0Y2hlciA9IE1hdGNoLm9iamVjdExpa2UoeyBmb286ICdiYXInIH0pO1xuICAgICAgY29uc3Qgc2VjdGlvbiA9IHtcbiAgICAgICAgRW50cnkxOiB7IGZvbzogJ2JhcicgfSxcbiAgICAgICAgRW50cnkyOiB7IGZvbzogJ2JhcicsIGJhejogJ3F1eCcgfSxcbiAgICAgICAgRW50cnkzOiB7IGZyZWQ6ICd3YWxkbycgfSxcbiAgICAgIH07XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IG1hdGNoU2VjdGlvbihzZWN0aW9uLCBtYXRjaGVyKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KHJlc3VsdC5tYXRjaCkudG9FcXVhbCh0cnVlKTtcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSByZXN1bHQgYXMgTWF0Y2hTdWNjZXNzO1xuICAgICAgZXhwZWN0KE9iamVjdC5rZXlzKHN1Y2Nlc3MubWF0Y2hlcykubGVuZ3RoKS50b0VxdWFsKDIpO1xuICAgICAgZXhwZWN0KHN1Y2Nlc3MubWF0Y2hlcy5FbnRyeTEpLnRvRXF1YWwoeyBmb286ICdiYXInIH0pO1xuICAgICAgZXhwZWN0KHN1Y2Nlc3MubWF0Y2hlcy5FbnRyeTIpLnRvRXF1YWwoeyBmb286ICdiYXInLCBiYXo6ICdxdXgnIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnZmFpbHVyZScsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb25zdCBtYXRjaGVyID0gTWF0Y2gub2JqZWN0TGlrZSh7IGZvbzogJ2JhcicgfSk7XG4gICAgICBjb25zdCBzZWN0aW9uID0ge1xuICAgICAgICBFbnRyeTE6IHsgZm9vOiAncXV4JyB9LFxuICAgICAgICBFbnRyeTM6IHsgZnJlZDogJ3dhbGRvJyB9LFxuICAgICAgfTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgY29uc3QgcmVzdWx0ID0gbWF0Y2hTZWN0aW9uKHNlY3Rpb24sIG1hdGNoZXIpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QocmVzdWx0Lm1hdGNoKS50b0VxdWFsKGZhbHNlKTtcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSByZXN1bHQgYXMgTWF0Y2hGYWlsdXJlO1xuICAgICAgZXhwZWN0KHN1Y2Nlc3MuYW5hbHl6ZWRDb3VudCkudG9FcXVhbCgyKTtcblxuICAgICAgY29uc3QgY2tleXMgPSBPYmplY3Qua2V5cyhzdWNjZXNzLmNsb3Nlc3RSZXN1bHRzKTtcbiAgICAgIGV4cGVjdChja2V5cykubm90LnRvRXF1YWwoW10pO1xuICAgICAgZXhwZWN0KHN1Y2Nlc3MuY2xvc2VzdFJlc3VsdHNbY2tleXNbMF1dLnRhcmdldCkudG9FcXVhbCh7IGZvbzogJ3F1eCcgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il19