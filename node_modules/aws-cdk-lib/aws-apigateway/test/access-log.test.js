"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const apigateway = require("../lib");
describe('access log', () => {
    test('if jsonWithStandardFields method called with no parameter', () => {
        const testFormat = apigateway.AccessLogFormat.jsonWithStandardFields();
        expect(testFormat.toString()).toEqual('{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","user":"$context.identity.user","caller":"$context.identity.caller","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}');
    });
    test('if jsonWithStandardFields method called with all parameters false', () => {
        const testFormat = apigateway.AccessLogFormat.jsonWithStandardFields({
            caller: false,
            httpMethod: false,
            ip: false,
            protocol: false,
            requestTime: false,
            resourcePath: false,
            responseLength: false,
            status: false,
            user: false,
        });
        expect(testFormat.toString()).toEqual('{"requestId":"$context.requestId"}');
    });
    test('if clf method called', () => {
        const testFormat = apigateway.AccessLogFormat.clf();
        expect(testFormat.toString()).toEqual('$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId');
    });
    test('if custom method called', () => {
        const testFormat = apigateway.AccessLogFormat.custom(JSON.stringify({
            requestId: apigateway.AccessLogField.contextRequestId(),
            sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),
            method: apigateway.AccessLogField.contextHttpMethod(),
            callerAccountId: apigateway.AccessLogField.contextCallerAccountId(),
            ownerAccountId: apigateway.AccessLogField.contextOwnerAccountId(),
            userContext: {
                sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),
                email: apigateway.AccessLogField.contextAuthorizerClaims('email'),
            },
            clientCertPem: apigateway.AccessLogField.contextIdentityClientCertPem(),
            subjectDN: apigateway.AccessLogField.contextIdentityClientCertSubjectDN(),
            issunerDN: apigateway.AccessLogField.contextIdentityClientCertIssunerDN(),
            serialNumber: apigateway.AccessLogField.contextIdentityClientCertSerialNumber(),
            validityNotBefore: apigateway.AccessLogField.contextIdentityClientCertValidityNotBefore(),
            validityNotAfter: apigateway.AccessLogField.contextIdentityClientCertValidityNotAfter(),
        }));
        expect(testFormat.toString()).toEqual('{"requestId":"$context.requestId","sourceIp":"$context.identity.sourceIp","method":"$context.httpMethod","callerAccountId":"$context.identity.accountId","ownerAccountId":"$context.accountId","userContext":{"sub":"$context.authorizer.claims.sub","email":"$context.authorizer.claims.email"},"clientCertPem":"$context.identity.clientCert.clientCertPem","subjectDN":"$context.identity.clientCert.subjectDN","issunerDN":"$context.identity.clientCert.issuerDN","serialNumber":"$context.identity.clientCert.serialNumber","validityNotBefore":"$context.identity.clientCert.validity.notBefore","validityNotAfter":"$context.identity.clientCert.validity.notAfter"}');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzLWxvZy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWNjZXNzLWxvZy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQXFDO0FBRXJDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO0lBQzFCLElBQUksQ0FBQywyREFBMkQsRUFBRSxHQUFHLEVBQUU7UUFDckUsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLGVBQWUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQ3ZFLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsOFZBQThWLENBQUMsQ0FBQztJQUN4WSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxtRUFBbUUsRUFBRSxHQUFHLEVBQUU7UUFDN0UsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQztZQUNuRSxNQUFNLEVBQUUsS0FBSztZQUNiLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLEVBQUUsRUFBRSxLQUFLO1lBQ1QsUUFBUSxFQUFFLEtBQUs7WUFDZixXQUFXLEVBQUUsS0FBSztZQUNsQixZQUFZLEVBQUUsS0FBSztZQUNuQixjQUFjLEVBQUUsS0FBSztZQUNyQixNQUFNLEVBQUUsS0FBSztZQUNiLElBQUksRUFBRSxLQUFLO1NBQ1osQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0lBQzlFLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtRQUNoQyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3BELE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsNE5BQTROLENBQUMsQ0FBQztJQUN0USxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7UUFDbkMsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNsRSxTQUFTLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRTtZQUN2RCxRQUFRLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsRUFBRTtZQUM3RCxNQUFNLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRTtZQUNyRCxlQUFlLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRTtZQUNuRSxjQUFjLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRTtZQUNqRSxXQUFXLEVBQUU7Z0JBQ1gsR0FBRyxFQUFFLFVBQVUsQ0FBQyxjQUFjLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDO2dCQUM3RCxLQUFLLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUM7YUFDbEU7WUFDRCxhQUFhLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyw0QkFBNEIsRUFBRTtZQUN2RSxTQUFTLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxrQ0FBa0MsRUFBRTtZQUN6RSxTQUFTLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxrQ0FBa0MsRUFBRTtZQUN6RSxZQUFZLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxxQ0FBcUMsRUFBRTtZQUMvRSxpQkFBaUIsRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLDBDQUEwQyxFQUFFO1lBQ3pGLGdCQUFnQixFQUFFLFVBQVUsQ0FBQyxjQUFjLENBQUMseUNBQXlDLEVBQUU7U0FDeEYsQ0FBQyxDQUFDLENBQUM7UUFDSixNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLDhvQkFBOG9CLENBQUMsQ0FBQztJQUN4ckIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFwaWdhdGV3YXkgZnJvbSAnLi4vbGliJztcblxuZGVzY3JpYmUoJ2FjY2VzcyBsb2cnLCAoKSA9PiB7XG4gIHRlc3QoJ2lmIGpzb25XaXRoU3RhbmRhcmRGaWVsZHMgbWV0aG9kIGNhbGxlZCB3aXRoIG5vIHBhcmFtZXRlcicsICgpID0+IHtcbiAgICBjb25zdCB0ZXN0Rm9ybWF0ID0gYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGb3JtYXQuanNvbldpdGhTdGFuZGFyZEZpZWxkcygpO1xuICAgIGV4cGVjdCh0ZXN0Rm9ybWF0LnRvU3RyaW5nKCkpLnRvRXF1YWwoJ3tcInJlcXVlc3RJZFwiOlwiJGNvbnRleHQucmVxdWVzdElkXCIsXCJpcFwiOlwiJGNvbnRleHQuaWRlbnRpdHkuc291cmNlSXBcIixcInVzZXJcIjpcIiRjb250ZXh0LmlkZW50aXR5LnVzZXJcIixcImNhbGxlclwiOlwiJGNvbnRleHQuaWRlbnRpdHkuY2FsbGVyXCIsXCJyZXF1ZXN0VGltZVwiOlwiJGNvbnRleHQucmVxdWVzdFRpbWVcIixcImh0dHBNZXRob2RcIjpcIiRjb250ZXh0Lmh0dHBNZXRob2RcIixcInJlc291cmNlUGF0aFwiOlwiJGNvbnRleHQucmVzb3VyY2VQYXRoXCIsXCJzdGF0dXNcIjpcIiRjb250ZXh0LnN0YXR1c1wiLFwicHJvdG9jb2xcIjpcIiRjb250ZXh0LnByb3RvY29sXCIsXCJyZXNwb25zZUxlbmd0aFwiOlwiJGNvbnRleHQucmVzcG9uc2VMZW5ndGhcIn0nKTtcbiAgfSk7XG5cbiAgdGVzdCgnaWYganNvbldpdGhTdGFuZGFyZEZpZWxkcyBtZXRob2QgY2FsbGVkIHdpdGggYWxsIHBhcmFtZXRlcnMgZmFsc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgdGVzdEZvcm1hdCA9IGFwaWdhdGV3YXkuQWNjZXNzTG9nRm9ybWF0Lmpzb25XaXRoU3RhbmRhcmRGaWVsZHMoe1xuICAgICAgY2FsbGVyOiBmYWxzZSxcbiAgICAgIGh0dHBNZXRob2Q6IGZhbHNlLFxuICAgICAgaXA6IGZhbHNlLFxuICAgICAgcHJvdG9jb2w6IGZhbHNlLFxuICAgICAgcmVxdWVzdFRpbWU6IGZhbHNlLFxuICAgICAgcmVzb3VyY2VQYXRoOiBmYWxzZSxcbiAgICAgIHJlc3BvbnNlTGVuZ3RoOiBmYWxzZSxcbiAgICAgIHN0YXR1czogZmFsc2UsXG4gICAgICB1c2VyOiBmYWxzZSxcbiAgICB9KTtcbiAgICBleHBlY3QodGVzdEZvcm1hdC50b1N0cmluZygpKS50b0VxdWFsKCd7XCJyZXF1ZXN0SWRcIjpcIiRjb250ZXh0LnJlcXVlc3RJZFwifScpO1xuICB9KTtcblxuICB0ZXN0KCdpZiBjbGYgbWV0aG9kIGNhbGxlZCcsICgpID0+IHtcbiAgICBjb25zdCB0ZXN0Rm9ybWF0ID0gYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGb3JtYXQuY2xmKCk7XG4gICAgZXhwZWN0KHRlc3RGb3JtYXQudG9TdHJpbmcoKSkudG9FcXVhbCgnJGNvbnRleHQuaWRlbnRpdHkuc291cmNlSXAgJGNvbnRleHQuaWRlbnRpdHkuY2FsbGVyICRjb250ZXh0LmlkZW50aXR5LnVzZXIgWyRjb250ZXh0LnJlcXVlc3RUaW1lXSBcIiRjb250ZXh0Lmh0dHBNZXRob2QgJGNvbnRleHQucmVzb3VyY2VQYXRoICRjb250ZXh0LnByb3RvY29sXCIgJGNvbnRleHQuc3RhdHVzICRjb250ZXh0LnJlc3BvbnNlTGVuZ3RoICRjb250ZXh0LnJlcXVlc3RJZCcpO1xuICB9KTtcblxuICB0ZXN0KCdpZiBjdXN0b20gbWV0aG9kIGNhbGxlZCcsICgpID0+IHtcbiAgICBjb25zdCB0ZXN0Rm9ybWF0ID0gYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGb3JtYXQuY3VzdG9tKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHJlcXVlc3RJZDogYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGaWVsZC5jb250ZXh0UmVxdWVzdElkKCksXG4gICAgICBzb3VyY2VJcDogYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGaWVsZC5jb250ZXh0SWRlbnRpdHlTb3VyY2VJcCgpLFxuICAgICAgbWV0aG9kOiBhcGlnYXRld2F5LkFjY2Vzc0xvZ0ZpZWxkLmNvbnRleHRIdHRwTWV0aG9kKCksXG4gICAgICBjYWxsZXJBY2NvdW50SWQ6IGFwaWdhdGV3YXkuQWNjZXNzTG9nRmllbGQuY29udGV4dENhbGxlckFjY291bnRJZCgpLFxuICAgICAgb3duZXJBY2NvdW50SWQ6IGFwaWdhdGV3YXkuQWNjZXNzTG9nRmllbGQuY29udGV4dE93bmVyQWNjb3VudElkKCksXG4gICAgICB1c2VyQ29udGV4dDoge1xuICAgICAgICBzdWI6IGFwaWdhdGV3YXkuQWNjZXNzTG9nRmllbGQuY29udGV4dEF1dGhvcml6ZXJDbGFpbXMoJ3N1YicpLFxuICAgICAgICBlbWFpbDogYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGaWVsZC5jb250ZXh0QXV0aG9yaXplckNsYWltcygnZW1haWwnKSxcbiAgICAgIH0sXG4gICAgICBjbGllbnRDZXJ0UGVtOiBhcGlnYXRld2F5LkFjY2Vzc0xvZ0ZpZWxkLmNvbnRleHRJZGVudGl0eUNsaWVudENlcnRQZW0oKSxcbiAgICAgIHN1YmplY3RETjogYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGaWVsZC5jb250ZXh0SWRlbnRpdHlDbGllbnRDZXJ0U3ViamVjdEROKCksXG4gICAgICBpc3N1bmVyRE46IGFwaWdhdGV3YXkuQWNjZXNzTG9nRmllbGQuY29udGV4dElkZW50aXR5Q2xpZW50Q2VydElzc3VuZXJETigpLFxuICAgICAgc2VyaWFsTnVtYmVyOiBhcGlnYXRld2F5LkFjY2Vzc0xvZ0ZpZWxkLmNvbnRleHRJZGVudGl0eUNsaWVudENlcnRTZXJpYWxOdW1iZXIoKSxcbiAgICAgIHZhbGlkaXR5Tm90QmVmb3JlOiBhcGlnYXRld2F5LkFjY2Vzc0xvZ0ZpZWxkLmNvbnRleHRJZGVudGl0eUNsaWVudENlcnRWYWxpZGl0eU5vdEJlZm9yZSgpLFxuICAgICAgdmFsaWRpdHlOb3RBZnRlcjogYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGaWVsZC5jb250ZXh0SWRlbnRpdHlDbGllbnRDZXJ0VmFsaWRpdHlOb3RBZnRlcigpLFxuICAgIH0pKTtcbiAgICBleHBlY3QodGVzdEZvcm1hdC50b1N0cmluZygpKS50b0VxdWFsKCd7XCJyZXF1ZXN0SWRcIjpcIiRjb250ZXh0LnJlcXVlc3RJZFwiLFwic291cmNlSXBcIjpcIiRjb250ZXh0LmlkZW50aXR5LnNvdXJjZUlwXCIsXCJtZXRob2RcIjpcIiRjb250ZXh0Lmh0dHBNZXRob2RcIixcImNhbGxlckFjY291bnRJZFwiOlwiJGNvbnRleHQuaWRlbnRpdHkuYWNjb3VudElkXCIsXCJvd25lckFjY291bnRJZFwiOlwiJGNvbnRleHQuYWNjb3VudElkXCIsXCJ1c2VyQ29udGV4dFwiOntcInN1YlwiOlwiJGNvbnRleHQuYXV0aG9yaXplci5jbGFpbXMuc3ViXCIsXCJlbWFpbFwiOlwiJGNvbnRleHQuYXV0aG9yaXplci5jbGFpbXMuZW1haWxcIn0sXCJjbGllbnRDZXJ0UGVtXCI6XCIkY29udGV4dC5pZGVudGl0eS5jbGllbnRDZXJ0LmNsaWVudENlcnRQZW1cIixcInN1YmplY3RETlwiOlwiJGNvbnRleHQuaWRlbnRpdHkuY2xpZW50Q2VydC5zdWJqZWN0RE5cIixcImlzc3VuZXJETlwiOlwiJGNvbnRleHQuaWRlbnRpdHkuY2xpZW50Q2VydC5pc3N1ZXJETlwiLFwic2VyaWFsTnVtYmVyXCI6XCIkY29udGV4dC5pZGVudGl0eS5jbGllbnRDZXJ0LnNlcmlhbE51bWJlclwiLFwidmFsaWRpdHlOb3RCZWZvcmVcIjpcIiRjb250ZXh0LmlkZW50aXR5LmNsaWVudENlcnQudmFsaWRpdHkubm90QmVmb3JlXCIsXCJ2YWxpZGl0eU5vdEFmdGVyXCI6XCIkY29udGV4dC5pZGVudGl0eS5jbGllbnRDZXJ0LnZhbGlkaXR5Lm5vdEFmdGVyXCJ9Jyk7XG4gIH0pO1xufSk7XG4iXX0=