"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const cognito = require("../../../aws-cognito");
const core_1 = require("../../../core");
const lib_1 = require("../../lib");
describe('Cognito Authorizer', () => {
    test('default cognito authorizer', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const userPool = new cognito.UserPool(stack, 'UserPool');
        // WHEN
        const authorizer = new lib_1.CognitoUserPoolsAuthorizer(stack, 'myauthorizer', {
            cognitoUserPools: [userPool],
        });
        const restApi = new lib_1.RestApi(stack, 'myrestapi');
        restApi.root.addMethod('ANY', undefined, {
            authorizer,
            authorizationType: lib_1.AuthorizationType.COGNITO,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Authorizer', {
            Type: 'COGNITO_USER_POOLS',
            RestApiId: stack.resolve(restApi.restApiId),
            IdentitySource: 'method.request.header.Authorization',
            ProviderARNs: [stack.resolve(userPool.userPoolArn)],
        });
        expect(authorizer.authorizerArn.endsWith(`/authorizers/${authorizer.authorizerId}`)).toBeTruthy();
    });
    test('cognito authorizer with all parameters specified', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const userPool1 = new cognito.UserPool(stack, 'UserPool1');
        const userPool2 = new cognito.UserPool(stack, 'UserPool2');
        // WHEN
        const authorizer = new lib_1.CognitoUserPoolsAuthorizer(stack, 'myauthorizer', {
            cognitoUserPools: [userPool1, userPool2],
            identitySource: 'method.request.header.whoami',
            authorizerName: 'myauthorizer',
            resultsCacheTtl: core_1.Duration.minutes(1),
        });
        const restApi = new lib_1.RestApi(stack, 'myrestapi');
        restApi.root.addMethod('ANY', undefined, {
            authorizer,
            authorizationType: lib_1.AuthorizationType.COGNITO,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Authorizer', {
            Type: 'COGNITO_USER_POOLS',
            Name: 'myauthorizer',
            RestApiId: stack.resolve(restApi.restApiId),
            IdentitySource: 'method.request.header.whoami',
            AuthorizerResultTtlInSeconds: 60,
            ProviderARNs: [stack.resolve(userPool1.userPoolArn), stack.resolve(userPool2.userPoolArn)],
        });
        expect(authorizer.authorizerArn.endsWith(`/authorizers/${authorizer.authorizerId}`)).toBeTruthy();
    });
    test('rest api depends on the authorizer when @aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId is enabled', () => {
        const stack = new core_1.Stack();
        stack.node.setContext('@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId', true);
        const userPool1 = new cognito.UserPool(stack, 'UserPool');
        const authorizer = new lib_1.CognitoUserPoolsAuthorizer(stack, 'Authorizer', {
            cognitoUserPools: [userPool1],
        });
        const restApi = new lib_1.RestApi(stack, 'Api');
        restApi.root.addMethod('ANY', undefined, {
            authorizer,
            authorizationType: lib_1.AuthorizationType.COGNITO,
        });
        const template = assertions_1.Template.fromStack(stack);
        const authorizerId = Object.keys(template.findResources('AWS::ApiGateway::Authorizer'))[0];
        const deployment = Object.values(template.findResources('AWS::ApiGateway::Deployment'))[0];
        expect(deployment.DependsOn).toEqual(expect.arrayContaining([authorizerId]));
    });
    test('a new deployment is created when a cognito user pool is re-created and @aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId is enabled', () => {
        const createApiTemplate = (userPoolId) => {
            const stack = new core_1.Stack();
            stack.node.setContext('@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId', true);
            const userPool = new cognito.UserPool(stack, userPoolId);
            const auth = new lib_1.CognitoUserPoolsAuthorizer(stack, 'myauthorizer', {
                resultsCacheTtl: core_1.Duration.seconds(0),
                cognitoUserPools: [userPool],
            });
            const restApi = new lib_1.RestApi(stack, 'myrestapi');
            restApi.root.addMethod('ANY', undefined, {
                authorizer: auth,
                authorizationType: lib_1.AuthorizationType.COGNITO,
            });
            return assertions_1.Template.fromStack(stack);
        };
        const oldTemplate = createApiTemplate('foo');
        const newTemplate = createApiTemplate('bar');
        const oldDeploymentId = Object.keys(oldTemplate.findResources('AWS::ApiGateway::Deployment'))[0];
        const newDeploymentId = Object.keys(newTemplate.findResources('AWS::ApiGateway::Deployment'))[0];
        expect(oldDeploymentId).not.toEqual(newDeploymentId);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29nbml0by50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29nbml0by50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0RBQStDO0FBQy9DLGdEQUFnRDtBQUNoRCx3Q0FBZ0Q7QUFDaEQsbUNBQW1GO0FBRW5GLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDbEMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtRQUN0QyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLFFBQVEsR0FBRyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRXpELE9BQU87UUFDUCxNQUFNLFVBQVUsR0FBRyxJQUFJLGdDQUEwQixDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7WUFDdkUsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUM7U0FDN0IsQ0FBQyxDQUFDO1FBRUgsTUFBTSxPQUFPLEdBQUcsSUFBSSxhQUFPLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7WUFDdkMsVUFBVTtZQUNWLGlCQUFpQixFQUFFLHVCQUFpQixDQUFDLE9BQU87U0FDN0MsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLDZCQUE2QixFQUFFO1lBQzdFLElBQUksRUFBRSxvQkFBb0I7WUFDMUIsU0FBUyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUMzQyxjQUFjLEVBQUUscUNBQXFDO1lBQ3JELFlBQVksRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3BELENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwRyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxrREFBa0QsRUFBRSxHQUFHLEVBQUU7UUFDNUQsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxTQUFTLEdBQUcsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMzRCxNQUFNLFNBQVMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRTNELE9BQU87UUFDUCxNQUFNLFVBQVUsR0FBRyxJQUFJLGdDQUEwQixDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7WUFDdkUsZ0JBQWdCLEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDO1lBQ3hDLGNBQWMsRUFBRSw4QkFBOEI7WUFDOUMsY0FBYyxFQUFFLGNBQWM7WUFDOUIsZUFBZSxFQUFFLGVBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ3JDLENBQUMsQ0FBQztRQUVILE1BQU0sT0FBTyxHQUFHLElBQUksYUFBTyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNoRCxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQ3ZDLFVBQVU7WUFDVixpQkFBaUIsRUFBRSx1QkFBaUIsQ0FBQyxPQUFPO1NBQzdDLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyw2QkFBNkIsRUFBRTtZQUM3RSxJQUFJLEVBQUUsb0JBQW9CO1lBQzFCLElBQUksRUFBRSxjQUFjO1lBQ3BCLFNBQVMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFDM0MsY0FBYyxFQUFFLDhCQUE4QjtZQUM5Qyw0QkFBNEIsRUFBRSxFQUFFO1lBQ2hDLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzNGLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwRyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxnSEFBZ0gsRUFBRSxHQUFHLEVBQUU7UUFDMUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyw2REFBNkQsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzRixNQUFNLFNBQVMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRTFELE1BQU0sVUFBVSxHQUFHLElBQUksZ0NBQTBCLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtZQUNyRSxnQkFBZ0IsRUFBRSxDQUFDLFNBQVMsQ0FBQztTQUM5QixDQUFDLENBQUM7UUFFSCxNQUFNLE9BQU8sR0FBRyxJQUFJLGFBQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFMUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUN2QyxVQUFVO1lBQ1YsaUJBQWlCLEVBQUUsdUJBQWlCLENBQUMsT0FBTztTQUM3QyxDQUFDLENBQUM7UUFFSCxNQUFNLFFBQVEsR0FBRyxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUzQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNGLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFM0YsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywrSUFBK0ksRUFBRSxHQUFHLEVBQUU7UUFDekosTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFVBQWtCLEVBQUUsRUFBRTtZQUMvQyxNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1lBQzFCLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLDZEQUE2RCxFQUFFLElBQUksQ0FBQyxDQUFDO1lBRTNGLE1BQU0sUUFBUSxHQUFHLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFFekQsTUFBTSxJQUFJLEdBQUcsSUFBSSxnQ0FBMEIsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO2dCQUNqRSxlQUFlLEVBQUUsZUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3BDLGdCQUFnQixFQUFFLENBQUMsUUFBUSxDQUFDO2FBQzdCLENBQUMsQ0FBQztZQUVILE1BQU0sT0FBTyxHQUFHLElBQUksYUFBTyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztZQUNoRCxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO2dCQUN2QyxVQUFVLEVBQUUsSUFBSTtnQkFDaEIsaUJBQWlCLEVBQUUsdUJBQWlCLENBQUMsT0FBTzthQUM3QyxDQUFDLENBQUM7WUFFSCxPQUFPLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQztRQUVGLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTdDLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakcsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVqRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN2RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIGNvZ25pdG8gZnJvbSAnLi4vLi4vLi4vYXdzLWNvZ25pdG8nO1xuaW1wb3J0IHsgRHVyYXRpb24sIFN0YWNrIH0gZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBBdXRob3JpemF0aW9uVHlwZSwgQ29nbml0b1VzZXJQb29sc0F1dGhvcml6ZXIsIFJlc3RBcGkgfSBmcm9tICcuLi8uLi9saWInO1xuXG5kZXNjcmliZSgnQ29nbml0byBBdXRob3JpemVyJywgKCkgPT4ge1xuICB0ZXN0KCdkZWZhdWx0IGNvZ25pdG8gYXV0aG9yaXplcicsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdXNlclBvb2wgPSBuZXcgY29nbml0by5Vc2VyUG9vbChzdGFjaywgJ1VzZXJQb29sJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgYXV0aG9yaXplciA9IG5ldyBDb2duaXRvVXNlclBvb2xzQXV0aG9yaXplcihzdGFjaywgJ215YXV0aG9yaXplcicsIHtcbiAgICAgIGNvZ25pdG9Vc2VyUG9vbHM6IFt1c2VyUG9vbF0sXG4gICAgfSk7XG5cbiAgICBjb25zdCByZXN0QXBpID0gbmV3IFJlc3RBcGkoc3RhY2ssICdteXJlc3RhcGknKTtcbiAgICByZXN0QXBpLnJvb3QuYWRkTWV0aG9kKCdBTlknLCB1bmRlZmluZWQsIHtcbiAgICAgIGF1dGhvcml6ZXIsXG4gICAgICBhdXRob3JpemF0aW9uVHlwZTogQXV0aG9yaXphdGlvblR5cGUuQ09HTklUTyxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpBcGlHYXRld2F5OjpBdXRob3JpemVyJywge1xuICAgICAgVHlwZTogJ0NPR05JVE9fVVNFUl9QT09MUycsXG4gICAgICBSZXN0QXBpSWQ6IHN0YWNrLnJlc29sdmUocmVzdEFwaS5yZXN0QXBpSWQpLFxuICAgICAgSWRlbnRpdHlTb3VyY2U6ICdtZXRob2QucmVxdWVzdC5oZWFkZXIuQXV0aG9yaXphdGlvbicsXG4gICAgICBQcm92aWRlckFSTnM6IFtzdGFjay5yZXNvbHZlKHVzZXJQb29sLnVzZXJQb29sQXJuKV0sXG4gICAgfSk7XG5cbiAgICBleHBlY3QoYXV0aG9yaXplci5hdXRob3JpemVyQXJuLmVuZHNXaXRoKGAvYXV0aG9yaXplcnMvJHthdXRob3JpemVyLmF1dGhvcml6ZXJJZH1gKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICB0ZXN0KCdjb2duaXRvIGF1dGhvcml6ZXIgd2l0aCBhbGwgcGFyYW1ldGVycyBzcGVjaWZpZWQnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHVzZXJQb29sMSA9IG5ldyBjb2duaXRvLlVzZXJQb29sKHN0YWNrLCAnVXNlclBvb2wxJyk7XG4gICAgY29uc3QgdXNlclBvb2wyID0gbmV3IGNvZ25pdG8uVXNlclBvb2woc3RhY2ssICdVc2VyUG9vbDInKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBhdXRob3JpemVyID0gbmV3IENvZ25pdG9Vc2VyUG9vbHNBdXRob3JpemVyKHN0YWNrLCAnbXlhdXRob3JpemVyJywge1xuICAgICAgY29nbml0b1VzZXJQb29sczogW3VzZXJQb29sMSwgdXNlclBvb2wyXSxcbiAgICAgIGlkZW50aXR5U291cmNlOiAnbWV0aG9kLnJlcXVlc3QuaGVhZGVyLndob2FtaScsXG4gICAgICBhdXRob3JpemVyTmFtZTogJ215YXV0aG9yaXplcicsXG4gICAgICByZXN1bHRzQ2FjaGVUdGw6IER1cmF0aW9uLm1pbnV0ZXMoMSksXG4gICAgfSk7XG5cbiAgICBjb25zdCByZXN0QXBpID0gbmV3IFJlc3RBcGkoc3RhY2ssICdteXJlc3RhcGknKTtcbiAgICByZXN0QXBpLnJvb3QuYWRkTWV0aG9kKCdBTlknLCB1bmRlZmluZWQsIHtcbiAgICAgIGF1dGhvcml6ZXIsXG4gICAgICBhdXRob3JpemF0aW9uVHlwZTogQXV0aG9yaXphdGlvblR5cGUuQ09HTklUTyxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpBcGlHYXRld2F5OjpBdXRob3JpemVyJywge1xuICAgICAgVHlwZTogJ0NPR05JVE9fVVNFUl9QT09MUycsXG4gICAgICBOYW1lOiAnbXlhdXRob3JpemVyJyxcbiAgICAgIFJlc3RBcGlJZDogc3RhY2sucmVzb2x2ZShyZXN0QXBpLnJlc3RBcGlJZCksXG4gICAgICBJZGVudGl0eVNvdXJjZTogJ21ldGhvZC5yZXF1ZXN0LmhlYWRlci53aG9hbWknLFxuICAgICAgQXV0aG9yaXplclJlc3VsdFR0bEluU2Vjb25kczogNjAsXG4gICAgICBQcm92aWRlckFSTnM6IFtzdGFjay5yZXNvbHZlKHVzZXJQb29sMS51c2VyUG9vbEFybiksIHN0YWNrLnJlc29sdmUodXNlclBvb2wyLnVzZXJQb29sQXJuKV0sXG4gICAgfSk7XG5cbiAgICBleHBlY3QoYXV0aG9yaXplci5hdXRob3JpemVyQXJuLmVuZHNXaXRoKGAvYXV0aG9yaXplcnMvJHthdXRob3JpemVyLmF1dGhvcml6ZXJJZH1gKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICB0ZXN0KCdyZXN0IGFwaSBkZXBlbmRzIG9uIHRoZSBhdXRob3JpemVyIHdoZW4gQGF3cy1jZGsvYXdzLWFwaWdhdGV3YXk6YXV0aG9yaXplckNoYW5nZURlcGxveW1lbnRMb2dpY2FsSWQgaXMgZW5hYmxlZCcsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIHN0YWNrLm5vZGUuc2V0Q29udGV4dCgnQGF3cy1jZGsvYXdzLWFwaWdhdGV3YXk6YXV0aG9yaXplckNoYW5nZURlcGxveW1lbnRMb2dpY2FsSWQnLCB0cnVlKTtcbiAgICBjb25zdCB1c2VyUG9vbDEgPSBuZXcgY29nbml0by5Vc2VyUG9vbChzdGFjaywgJ1VzZXJQb29sJyk7XG5cbiAgICBjb25zdCBhdXRob3JpemVyID0gbmV3IENvZ25pdG9Vc2VyUG9vbHNBdXRob3JpemVyKHN0YWNrLCAnQXV0aG9yaXplcicsIHtcbiAgICAgIGNvZ25pdG9Vc2VyUG9vbHM6IFt1c2VyUG9vbDFdLFxuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzdEFwaSA9IG5ldyBSZXN0QXBpKHN0YWNrLCAnQXBpJyk7XG5cbiAgICByZXN0QXBpLnJvb3QuYWRkTWV0aG9kKCdBTlknLCB1bmRlZmluZWQsIHtcbiAgICAgIGF1dGhvcml6ZXIsXG4gICAgICBhdXRob3JpemF0aW9uVHlwZTogQXV0aG9yaXphdGlvblR5cGUuQ09HTklUTyxcbiAgICB9KTtcblxuICAgIGNvbnN0IHRlbXBsYXRlID0gVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKTtcblxuICAgIGNvbnN0IGF1dGhvcml6ZXJJZCA9IE9iamVjdC5rZXlzKHRlbXBsYXRlLmZpbmRSZXNvdXJjZXMoJ0FXUzo6QXBpR2F0ZXdheTo6QXV0aG9yaXplcicpKVswXTtcbiAgICBjb25zdCBkZXBsb3ltZW50ID0gT2JqZWN0LnZhbHVlcyh0ZW1wbGF0ZS5maW5kUmVzb3VyY2VzKCdBV1M6OkFwaUdhdGV3YXk6OkRlcGxveW1lbnQnKSlbMF07XG5cbiAgICBleHBlY3QoZGVwbG95bWVudC5EZXBlbmRzT24pLnRvRXF1YWwoZXhwZWN0LmFycmF5Q29udGFpbmluZyhbYXV0aG9yaXplcklkXSkpO1xuICB9KTtcblxuICB0ZXN0KCdhIG5ldyBkZXBsb3ltZW50IGlzIGNyZWF0ZWQgd2hlbiBhIGNvZ25pdG8gdXNlciBwb29sIGlzIHJlLWNyZWF0ZWQgYW5kIEBhd3MtY2RrL2F3cy1hcGlnYXRld2F5OmF1dGhvcml6ZXJDaGFuZ2VEZXBsb3ltZW50TG9naWNhbElkIGlzIGVuYWJsZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgY3JlYXRlQXBpVGVtcGxhdGUgPSAodXNlclBvb2xJZDogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgICAgc3RhY2subm9kZS5zZXRDb250ZXh0KCdAYXdzLWNkay9hd3MtYXBpZ2F0ZXdheTphdXRob3JpemVyQ2hhbmdlRGVwbG95bWVudExvZ2ljYWxJZCcsIHRydWUpO1xuXG4gICAgICBjb25zdCB1c2VyUG9vbCA9IG5ldyBjb2duaXRvLlVzZXJQb29sKHN0YWNrLCB1c2VyUG9vbElkKTtcblxuICAgICAgY29uc3QgYXV0aCA9IG5ldyBDb2duaXRvVXNlclBvb2xzQXV0aG9yaXplcihzdGFjaywgJ215YXV0aG9yaXplcicsIHtcbiAgICAgICAgcmVzdWx0c0NhY2hlVHRsOiBEdXJhdGlvbi5zZWNvbmRzKDApLFxuICAgICAgICBjb2duaXRvVXNlclBvb2xzOiBbdXNlclBvb2xdLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3RBcGkgPSBuZXcgUmVzdEFwaShzdGFjaywgJ215cmVzdGFwaScpO1xuICAgICAgcmVzdEFwaS5yb290LmFkZE1ldGhvZCgnQU5ZJywgdW5kZWZpbmVkLCB7XG4gICAgICAgIGF1dGhvcml6ZXI6IGF1dGgsXG4gICAgICAgIGF1dGhvcml6YXRpb25UeXBlOiBBdXRob3JpemF0aW9uVHlwZS5DT0dOSVRPLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spO1xuICAgIH07XG5cbiAgICBjb25zdCBvbGRUZW1wbGF0ZSA9IGNyZWF0ZUFwaVRlbXBsYXRlKCdmb28nKTtcbiAgICBjb25zdCBuZXdUZW1wbGF0ZSA9IGNyZWF0ZUFwaVRlbXBsYXRlKCdiYXInKTtcblxuICAgIGNvbnN0IG9sZERlcGxveW1lbnRJZCA9IE9iamVjdC5rZXlzKG9sZFRlbXBsYXRlLmZpbmRSZXNvdXJjZXMoJ0FXUzo6QXBpR2F0ZXdheTo6RGVwbG95bWVudCcpKVswXTtcbiAgICBjb25zdCBuZXdEZXBsb3ltZW50SWQgPSBPYmplY3Qua2V5cyhuZXdUZW1wbGF0ZS5maW5kUmVzb3VyY2VzKCdBV1M6OkFwaUdhdGV3YXk6OkRlcGxveW1lbnQnKSlbMF07XG5cbiAgICBleHBlY3Qob2xkRGVwbG95bWVudElkKS5ub3QudG9FcXVhbChuZXdEZXBsb3ltZW50SWQpO1xuICB9KTtcbn0pO1xuIl19