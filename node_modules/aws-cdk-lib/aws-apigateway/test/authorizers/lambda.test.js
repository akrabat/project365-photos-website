"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const iam = require("../../../aws-iam");
const lambda = require("../../../aws-lambda");
const core_1 = require("../../../core");
const lib_1 = require("../../lib");
describe('lambda authorizer', () => {
    test('default token authorizer', () => {
        const stack = new core_1.Stack();
        const func = new lambda.Function(stack, 'myfunction', {
            handler: 'handler',
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_14_X,
        });
        const auth = new lib_1.TokenAuthorizer(stack, 'myauthorizer', {
            handler: func,
        });
        const restApi = new lib_1.RestApi(stack, 'myrestapi');
        restApi.root.addMethod('ANY', undefined, {
            authorizer: auth,
            authorizationType: lib_1.AuthorizationType.CUSTOM,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Authorizer', {
            Type: 'TOKEN',
            RestApiId: stack.resolve(restApi.restApiId),
            IdentitySource: 'method.request.header.Authorization',
            AuthorizerUri: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            'Fn::Select': [
                                1,
                                {
                                    'Fn::Split': [
                                        ':',
                                        {
                                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                                        },
                                    ],
                                },
                            ],
                        },
                        ':apigateway:',
                        {
                            'Fn::Select': [
                                3,
                                {
                                    'Fn::Split': [
                                        ':',
                                        {
                                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                                        },
                                    ],
                                },
                            ],
                        },
                        ':lambda:path/2015-03-31/functions/',
                        {
                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                        },
                        '/invocations',
                    ],
                ],
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Permission', {
            Action: 'lambda:InvokeFunction',
            Principal: 'apigateway.amazonaws.com',
        });
        expect(auth.authorizerArn.endsWith(`/authorizers/${auth.authorizerId}`)).toBeTruthy();
    });
    test('default request authorizer', () => {
        const stack = new core_1.Stack();
        const func = new lambda.Function(stack, 'myfunction', {
            handler: 'handler',
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_14_X,
        });
        const auth = new lib_1.RequestAuthorizer(stack, 'myauthorizer', {
            handler: func,
            resultsCacheTtl: core_1.Duration.seconds(0),
            identitySources: [],
        });
        const restApi = new lib_1.RestApi(stack, 'myrestapi');
        restApi.root.addMethod('ANY', undefined, {
            authorizer: auth,
            authorizationType: lib_1.AuthorizationType.CUSTOM,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Authorizer', {
            Type: 'REQUEST',
            RestApiId: stack.resolve(restApi.restApiId),
            AuthorizerUri: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            'Fn::Select': [
                                1,
                                {
                                    'Fn::Split': [
                                        ':',
                                        {
                                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                                        },
                                    ],
                                },
                            ],
                        },
                        ':apigateway:',
                        {
                            'Fn::Select': [
                                3,
                                {
                                    'Fn::Split': [
                                        ':',
                                        {
                                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                                        },
                                    ],
                                },
                            ],
                        },
                        ':lambda:path/2015-03-31/functions/',
                        {
                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                        },
                        '/invocations',
                    ],
                ],
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Permission', {
            Action: 'lambda:InvokeFunction',
            Principal: 'apigateway.amazonaws.com',
        });
        expect(auth.authorizerArn.endsWith(`/authorizers/${auth.authorizerId}`)).toBeTruthy();
    });
    test('invalid request authorizer config', () => {
        const stack = new core_1.Stack();
        const func = new lambda.Function(stack, 'myfunction', {
            handler: 'handler',
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_14_X,
        });
        expect(() => new lib_1.RequestAuthorizer(stack, 'myauthorizer', {
            handler: func,
            resultsCacheTtl: core_1.Duration.seconds(1),
            identitySources: [],
        })).toThrow('At least one Identity Source is required for a REQUEST-based Lambda authorizer if caching is enabled.');
    });
    test('token authorizer with all parameters specified', () => {
        const stack = new core_1.Stack();
        const func = new lambda.Function(stack, 'myfunction', {
            handler: 'handler',
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_14_X,
        });
        const auth = new lib_1.TokenAuthorizer(stack, 'myauthorizer', {
            handler: func,
            identitySource: 'method.request.header.whoami',
            validationRegex: 'a-hacker',
            authorizerName: 'myauthorizer',
            resultsCacheTtl: core_1.Duration.minutes(1),
        });
        const restApi = new lib_1.RestApi(stack, 'myrestapi');
        restApi.root.addMethod('ANY', undefined, {
            authorizer: auth,
            authorizationType: lib_1.AuthorizationType.CUSTOM,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Authorizer', {
            Type: 'TOKEN',
            RestApiId: stack.resolve(restApi.restApiId),
            IdentitySource: 'method.request.header.whoami',
            IdentityValidationExpression: 'a-hacker',
            Name: 'myauthorizer',
            AuthorizerResultTtlInSeconds: 60,
            AuthorizerUri: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            'Fn::Select': [
                                1,
                                {
                                    'Fn::Split': [
                                        ':',
                                        {
                                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                                        },
                                    ],
                                },
                            ],
                        },
                        ':apigateway:',
                        {
                            'Fn::Select': [
                                3,
                                {
                                    'Fn::Split': [
                                        ':',
                                        {
                                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                                        },
                                    ],
                                },
                            ],
                        },
                        ':lambda:path/2015-03-31/functions/',
                        {
                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                        },
                        '/invocations',
                    ],
                ],
            },
        });
    });
    test('request authorizer with all parameters specified', () => {
        const stack = new core_1.Stack();
        const func = new lambda.Function(stack, 'myfunction', {
            handler: 'handler',
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_14_X,
        });
        const auth = new lib_1.RequestAuthorizer(stack, 'myauthorizer', {
            handler: func,
            identitySources: [lib_1.IdentitySource.header('whoami')],
            authorizerName: 'myauthorizer',
            resultsCacheTtl: core_1.Duration.minutes(1),
        });
        const restApi = new lib_1.RestApi(stack, 'myrestapi');
        restApi.root.addMethod('ANY', undefined, {
            authorizer: auth,
            authorizationType: lib_1.AuthorizationType.CUSTOM,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Authorizer', {
            Type: 'REQUEST',
            RestApiId: stack.resolve(restApi.restApiId),
            IdentitySource: 'method.request.header.whoami',
            Name: 'myauthorizer',
            AuthorizerResultTtlInSeconds: 60,
            AuthorizerUri: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            'Fn::Select': [
                                1,
                                {
                                    'Fn::Split': [
                                        ':',
                                        {
                                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                                        },
                                    ],
                                },
                            ],
                        },
                        ':apigateway:',
                        {
                            'Fn::Select': [
                                3,
                                {
                                    'Fn::Split': [
                                        ':',
                                        {
                                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                                        },
                                    ],
                                },
                            ],
                        },
                        ':lambda:path/2015-03-31/functions/',
                        {
                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                        },
                        '/invocations',
                    ],
                ],
            },
        });
    });
    test('token authorizer with assume role', () => {
        const stack = new core_1.Stack();
        const func = new lambda.Function(stack, 'myfunction', {
            handler: 'handler',
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_14_X,
        });
        const role = new iam.Role(stack, 'authorizerassumerole', {
            assumedBy: new iam.ServicePrincipal('apigateway.amazonaws.com'),
            roleName: 'authorizerassumerole',
        });
        const auth = new lib_1.TokenAuthorizer(stack, 'myauthorizer', {
            handler: func,
            assumeRole: role,
        });
        const restApi = new lib_1.RestApi(stack, 'myrestapi');
        restApi.root.addMethod('ANY', undefined, {
            authorizer: auth,
            authorizationType: lib_1.AuthorizationType.CUSTOM,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Authorizer', {
            Type: 'TOKEN',
            RestApiId: stack.resolve(restApi.restApiId),
            AuthorizerUri: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            'Fn::Select': [
                                1,
                                {
                                    'Fn::Split': [
                                        ':',
                                        {
                                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                                        },
                                    ],
                                },
                            ],
                        },
                        ':apigateway:',
                        {
                            'Fn::Select': [
                                3,
                                {
                                    'Fn::Split': [
                                        ':',
                                        {
                                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                                        },
                                    ],
                                },
                            ],
                        },
                        ':lambda:path/2015-03-31/functions/',
                        {
                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                        },
                        '/invocations',
                    ],
                ],
            },
        });
        assertions_1.Template.fromStack(stack).hasResource('AWS::IAM::Role', assertions_1.Match.anyValue());
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            Roles: [
                stack.resolve(role.roleName),
            ],
            PolicyDocument: {
                Statement: [
                    {
                        Resource: stack.resolve(func.resourceArnsForGrantInvoke),
                        Action: 'lambda:InvokeFunction',
                        Effect: 'Allow',
                    },
                ],
            },
        });
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Lambda::Permission', 0);
    });
    test('request authorizer with assume role', () => {
        const stack = new core_1.Stack();
        const func = new lambda.Function(stack, 'myfunction', {
            handler: 'handler',
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_14_X,
        });
        const role = new iam.Role(stack, 'authorizerassumerole', {
            assumedBy: new iam.ServicePrincipal('apigateway.amazonaws.com'),
            roleName: 'authorizerassumerole',
        });
        const auth = new lib_1.RequestAuthorizer(stack, 'myauthorizer', {
            handler: func,
            assumeRole: role,
            resultsCacheTtl: core_1.Duration.seconds(0),
            identitySources: [],
        });
        const restApi = new lib_1.RestApi(stack, 'myrestapi');
        restApi.root.addMethod('ANY', undefined, {
            authorizer: auth,
            authorizationType: lib_1.AuthorizationType.CUSTOM,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Authorizer', {
            Type: 'REQUEST',
            RestApiId: stack.resolve(restApi.restApiId),
            AuthorizerUri: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            'Fn::Select': [
                                1,
                                {
                                    'Fn::Split': [
                                        ':',
                                        {
                                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                                        },
                                    ],
                                },
                            ],
                        },
                        ':apigateway:',
                        {
                            'Fn::Select': [
                                3,
                                {
                                    'Fn::Split': [
                                        ':',
                                        {
                                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                                        },
                                    ],
                                },
                            ],
                        },
                        ':lambda:path/2015-03-31/functions/',
                        {
                            'Fn::GetAtt': ['myfunction9B95E948', 'Arn'],
                        },
                        '/invocations',
                    ],
                ],
            },
        });
        assertions_1.Template.fromStack(stack).hasResource('AWS::IAM::Role', assertions_1.Match.anyValue());
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            Roles: [
                stack.resolve(role.roleName),
            ],
            PolicyDocument: {
                Statement: [
                    {
                        Resource: stack.resolve(func.resourceArnsForGrantInvoke),
                        Action: 'lambda:InvokeFunction',
                        Effect: 'Allow',
                    },
                ],
            },
        });
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Lambda::Permission', 0);
    });
    test('token authorizer throws when not attached to a rest api', () => {
        const stack = new core_1.Stack();
        const func = new lambda.Function(stack, 'myfunction', {
            handler: 'handler',
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_14_X,
        });
        const auth = new lib_1.TokenAuthorizer(stack, 'myauthorizer', {
            handler: func,
        });
        expect(() => stack.resolve(auth.authorizerArn)).toThrow(/must be attached to a RestApi/);
    });
    test('request authorizer throws when not attached to a rest api', () => {
        const stack = new core_1.Stack();
        const func = new lambda.Function(stack, 'myfunction', {
            handler: 'handler',
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_14_X,
        });
        const auth = new lib_1.RequestAuthorizer(stack, 'myauthorizer', {
            handler: func,
            identitySources: [lib_1.IdentitySource.header('myheader')],
        });
        expect(() => stack.resolve(auth.authorizerArn)).toThrow(/must be attached to a RestApi/);
    });
    test('rest api depends on the token authorizer when @aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId is enabled', () => {
        const stack = new core_1.Stack();
        stack.node.setContext('@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId', true);
        const func = new lambda.Function(stack, 'myfunction', {
            handler: 'handler',
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_18_X,
        });
        const auth = new lib_1.TokenAuthorizer(stack, 'myauthorizer', {
            handler: func,
        });
        const restApi = new lib_1.RestApi(stack, 'myrestapi');
        restApi.root.addMethod('ANY', undefined, {
            authorizer: auth,
            authorizationType: lib_1.AuthorizationType.CUSTOM,
        });
        const template = assertions_1.Template.fromStack(stack);
        const authorizerId = Object.keys(template.findResources('AWS::ApiGateway::Authorizer'))[0];
        const deployment = Object.values(template.findResources('AWS::ApiGateway::Deployment'))[0];
        expect(deployment.DependsOn).toEqual(expect.arrayContaining([authorizerId]));
    });
    test('rest api depends on the request authorizer when @aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId is enabled', () => {
        const stack = new core_1.Stack();
        stack.node.setContext('@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId', true);
        const func = new lambda.Function(stack, 'myfunction', {
            handler: 'handler',
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_14_X,
        });
        const auth = new lib_1.RequestAuthorizer(stack, 'myauthorizer', {
            handler: func,
            resultsCacheTtl: core_1.Duration.seconds(0),
            identitySources: [],
        });
        const restApi = new lib_1.RestApi(stack, 'myrestapi');
        restApi.root.addMethod('ANY', undefined, {
            authorizer: auth,
            authorizationType: lib_1.AuthorizationType.CUSTOM,
        });
        const template = assertions_1.Template.fromStack(stack);
        const authorizerId = Object.keys(template.findResources('AWS::ApiGateway::Authorizer'))[0];
        const deployment = Object.values(template.findResources('AWS::ApiGateway::Deployment'))[0];
        expect(deployment.DependsOn).toEqual(expect.arrayContaining([authorizerId]));
    });
    test('a new deployment is created when a lambda function changes name and @aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId is enabled', () => {
        const createApiTemplate = (lambdaFunctionName) => {
            const stack = new core_1.Stack();
            stack.node.setContext('@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId', true);
            const func = new lambda.Function(stack, 'myfunction', {
                handler: 'handler',
                functionName: lambdaFunctionName,
                code: lambda.Code.fromInline('foo'),
                runtime: lambda.Runtime.NODEJS_18_X,
            });
            const auth = new lib_1.RequestAuthorizer(stack, 'myauthorizer', {
                handler: func,
                resultsCacheTtl: core_1.Duration.seconds(0),
                identitySources: [],
            });
            const restApi = new lib_1.RestApi(stack, 'myrestapi');
            restApi.root.addMethod('ANY', undefined, {
                authorizer: auth,
                authorizationType: lib_1.AuthorizationType.CUSTOM,
            });
            return assertions_1.Template.fromStack(stack);
        };
        const oldTemplate = createApiTemplate('foo');
        const newTemplate = createApiTemplate('bar');
        const oldDeploymentId = Object.keys(oldTemplate.findResources('AWS::ApiGateway::Deployment'))[0];
        const newDeploymentId = Object.keys(newTemplate.findResources('AWS::ApiGateway::Deployment'))[0];
        expect(oldDeploymentId).not.toEqual(newDeploymentId);
    });
    test('a new deployment is created when an imported lambda function changes name and @aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId is enabled', () => {
        const createApiTemplate = (lambdaFunctionName) => {
            const stack = new core_1.Stack();
            stack.node.setContext('@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId', true);
            const func = lambda.Function.fromFunctionName(stack, 'myfunction', lambdaFunctionName);
            const auth = new lib_1.RequestAuthorizer(stack, 'myauthorizer', {
                handler: func,
                resultsCacheTtl: core_1.Duration.seconds(0),
                identitySources: [],
            });
            const restApi = new lib_1.RestApi(stack, 'myrestapi');
            restApi.root.addMethod('ANY', undefined, {
                authorizer: auth,
                authorizationType: lib_1.AuthorizationType.CUSTOM,
            });
            return assertions_1.Template.fromStack(stack);
        };
        const oldTemplate = createApiTemplate('foo');
        const newTemplate = createApiTemplate('bar');
        const oldDeploymentId = Object.keys(oldTemplate.findResources('AWS::ApiGateway::Deployment'))[0];
        const newDeploymentId = Object.keys(newTemplate.findResources('AWS::ApiGateway::Deployment'))[0];
        expect(oldDeploymentId).not.toEqual(newDeploymentId);
    });
});
//# sourceMappingURL=data:application/json;base64,