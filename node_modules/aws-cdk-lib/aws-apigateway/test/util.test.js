"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const util_1 = require("../lib/util");
describe('util', () => {
    describe('parseMethodResourcePath', () => {
        test('fails if path does not start with a /', () => {
            expect(() => (0, util_1.parseMethodOptionsPath)('foo')).toThrow(/Method options path must start with \'\/\'/);
        });
        test('fails if there are less than two components', () => {
            expect(() => (0, util_1.parseMethodOptionsPath)('/')).toThrow(/Method options path must include at least two components/);
            expect(() => (0, util_1.parseMethodOptionsPath)('/foo')).toThrow(/Method options path must include at least two components/);
            expect(() => (0, util_1.parseMethodOptionsPath)('/foo/')).toThrow(/Invalid HTTP method ""/);
        });
        test('fails if a non-supported http method is used', () => {
            expect(() => (0, util_1.parseMethodOptionsPath)('/foo/bar')).toThrow(/Invalid HTTP method "BAR"/);
        });
        test('extracts resource path and method correctly', () => {
            expect((0, util_1.parseMethodOptionsPath)('/foo/GET')).toEqual({ resourcePath: '/~1foo', httpMethod: 'GET' });
            expect((0, util_1.parseMethodOptionsPath)('/foo/bar/GET')).toEqual({ resourcePath: '/~1foo~1bar', httpMethod: 'GET' });
            expect((0, util_1.parseMethodOptionsPath)('/foo/*/GET')).toEqual({ resourcePath: '/~1foo~1*', httpMethod: 'GET' });
            expect((0, util_1.parseMethodOptionsPath)('/*/GET')).toEqual({ resourcePath: '/*', httpMethod: 'GET' });
            expect((0, util_1.parseMethodOptionsPath)('/*/*')).toEqual({ resourcePath: '/*', httpMethod: '*' });
            expect((0, util_1.parseMethodOptionsPath)('//POST')).toEqual({ resourcePath: '/', httpMethod: 'POST' });
        });
    });
    describe('parseAwsApiCall', () => {
        test('fails if "actionParams" is set but "action" is undefined', () => {
            expect(() => (0, util_1.parseAwsApiCall)(undefined, undefined, { foo: '123' })).toThrow(/"actionParams" requires that "action" will be set/);
        });
        test('fails since "action" and "path" are mutually exclusive', () => {
            expect(() => (0, util_1.parseAwsApiCall)('foo', 'bar')).toThrow(/"path" and "action" are mutually exclusive \(path="foo", action="bar"\)/);
        });
        test('fails if "path" and "action" are both undefined', () => {
            expect(() => (0, util_1.parseAwsApiCall)()).toThrow(/Either "path" or "action" are required/);
        });
        test('"path" mode', () => {
            expect((0, util_1.parseAwsApiCall)('my/path')).toEqual({ apiType: 'path', apiValue: 'my/path' });
        });
        test('"action" mode with no parameters', () => {
            expect((0, util_1.parseAwsApiCall)(undefined, 'MyAction')).toEqual({ apiType: 'action', apiValue: 'MyAction' });
        });
        test('"action" mode with parameters (url-encoded)', () => {
            expect((0, util_1.parseAwsApiCall)(undefined, 'GetObject', { Bucket: 'MyBucket', Key: 'MyKey' })).toEqual({
                apiType: 'action',
                apiValue: 'GetObject&Bucket=MyBucket&Key=MyKey',
            });
        });
    });
    describe('JsonSchemaMapper.toCfnJsonSchema', () => {
        test('maps "ref" found under properties', () => {
            const schema = {
                type: lib_1.JsonSchemaType.OBJECT,
                properties: {
                    collection: {
                        type: lib_1.JsonSchemaType.ARRAY,
                        items: {
                            ref: '#/some/reference',
                        },
                        uniqueItems: true,
                    },
                },
                required: ['collection'],
            };
            const actual = util_1.JsonSchemaMapper.toCfnJsonSchema(schema);
            expect(actual).toEqual({
                $schema: 'http://json-schema.org/draft-04/schema#',
                type: 'object',
                properties: {
                    collection: {
                        type: 'array',
                        items: {
                            $ref: '#/some/reference',
                        },
                        uniqueItems: true,
                    },
                },
                required: ['collection'],
            });
        });
        test('does not map a "ref" property name', () => {
            const schema = {
                type: lib_1.JsonSchemaType.OBJECT,
                properties: {
                    ref: {
                        type: lib_1.JsonSchemaType.ARRAY,
                        items: {
                            ref: '#/some/reference',
                        },
                        uniqueItems: true,
                    },
                },
                required: ['ref'],
            };
            const actual = util_1.JsonSchemaMapper.toCfnJsonSchema(schema);
            expect(actual).toEqual({
                $schema: 'http://json-schema.org/draft-04/schema#',
                type: 'object',
                properties: {
                    ref: {
                        type: 'array',
                        items: {
                            $ref: '#/some/reference',
                        },
                        uniqueItems: true,
                    },
                },
                required: ['ref'],
            });
        });
        test('"default" for enum', () => {
            const schema = {
                type: lib_1.JsonSchemaType.STRING,
                enum: ['green', 'blue', 'red'],
                default: 'blue',
            };
            const actual = util_1.JsonSchemaMapper.toCfnJsonSchema(schema);
            expect(actual).toEqual({
                $schema: 'http://json-schema.org/draft-04/schema#',
                type: 'string',
                enum: ['green', 'blue', 'red'],
                default: 'blue',
            });
        });
        test('"id" maps to "id" when using DRAFT-04', () => {
            const schema = {
                schema: lib_1.JsonSchemaVersion.DRAFT4,
                id: 'http://json-schema.org/draft-04/schema#',
            };
            const actual = util_1.JsonSchemaMapper.toCfnJsonSchema(schema);
            expect(actual).toEqual({
                $schema: 'http://json-schema.org/draft-04/schema#',
                id: 'http://json-schema.org/draft-04/schema#',
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXRpbC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0NBQXVFO0FBQ3ZFLHNDQUF3RjtBQUV4RixRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtJQUNwQixRQUFRLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO1FBQ3ZDLElBQUksQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7WUFDakQsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsNkJBQXNCLEVBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsNENBQTRDLENBQUMsQ0FBQztRQUNwRyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxHQUFHLEVBQUU7WUFDdkQsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsNkJBQXNCLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsMERBQTBELENBQUMsQ0FBQztZQUM5RyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBQSw2QkFBc0IsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQywwREFBMEQsQ0FBQyxDQUFDO1lBQ2pILE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFBLDZCQUFzQixFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDbEYsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsOENBQThDLEVBQUUsR0FBRyxFQUFFO1lBQ3hELE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFBLDZCQUFzQixFQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDeEYsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsNkNBQTZDLEVBQUUsR0FBRyxFQUFFO1lBQ3ZELE1BQU0s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QUFDO1FBRUgsSUFBSSxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtZQUNqRCxNQUFNLE1BQU0sR0FBZTtnQkFDekIsTUFBTSxFQUFFLHVCQUFpQixDQUFDLE1BQU07Z0JBQ2hDLEVBQUUsRUFBRSx5Q0FBeUM7YUFDOUMsQ0FBQztZQUVGLE1BQU0sTUFBTSxHQUFHLHVCQUFnQixDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUNyQixPQUFPLEVBQUUseUNBQXlDO2dCQUNsRCxFQUFFLEVBQUUseUNBQXlDO2FBQzlDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpzb25TY2hlbWEsIEpzb25TY2hlbWFUeXBlLCBKc29uU2NoZW1hVmVyc2lvbiB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgeyBKc29uU2NoZW1hTWFwcGVyLCBwYXJzZUF3c0FwaUNhbGwsIHBhcnNlTWV0aG9kT3B0aW9uc1BhdGggfSBmcm9tICcuLi9saWIvdXRpbCc7XG5cbmRlc2NyaWJlKCd1dGlsJywgKCkgPT4ge1xuICBkZXNjcmliZSgncGFyc2VNZXRob2RSZXNvdXJjZVBhdGgnLCAoKSA9PiB7XG4gICAgdGVzdCgnZmFpbHMgaWYgcGF0aCBkb2VzIG5vdCBzdGFydCB3aXRoIGEgLycsICgpID0+IHtcbiAgICAgIGV4cGVjdCgoKSA9PiBwYXJzZU1ldGhvZE9wdGlvbnNQYXRoKCdmb28nKSkudG9UaHJvdygvTWV0aG9kIG9wdGlvbnMgcGF0aCBtdXN0IHN0YXJ0IHdpdGggXFwnXFwvXFwnLyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdmYWlscyBpZiB0aGVyZSBhcmUgbGVzcyB0aGFuIHR3byBjb21wb25lbnRzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KCgpID0+IHBhcnNlTWV0aG9kT3B0aW9uc1BhdGgoJy8nKSkudG9UaHJvdygvTWV0aG9kIG9wdGlvbnMgcGF0aCBtdXN0IGluY2x1ZGUgYXQgbGVhc3QgdHdvIGNvbXBvbmVudHMvKTtcbiAgICAgIGV4cGVjdCgoKSA9PiBwYXJzZU1ldGhvZE9wdGlvbnNQYXRoKCcvZm9vJykpLnRvVGhyb3coL01ldGhvZCBvcHRpb25zIHBhdGggbXVzdCBpbmNsdWRlIGF0IGxlYXN0IHR3byBjb21wb25lbnRzLyk7XG4gICAgICBleHBlY3QoKCkgPT4gcGFyc2VNZXRob2RPcHRpb25zUGF0aCgnL2Zvby8nKSkudG9UaHJvdygvSW52YWxpZCBIVFRQIG1ldGhvZCBcIlwiLyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdmYWlscyBpZiBhIG5vbi1zdXBwb3J0ZWQgaHR0cCBtZXRob2QgaXMgdXNlZCcsICgpID0+IHtcbiAgICAgIGV4cGVjdCgoKSA9PiBwYXJzZU1ldGhvZE9wdGlvbnNQYXRoKCcvZm9vL2JhcicpKS50b1Rocm93KC9JbnZhbGlkIEhUVFAgbWV0aG9kIFwiQkFSXCIvKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2V4dHJhY3RzIHJlc291cmNlIHBhdGggYW5kIG1ldGhvZCBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBleHBlY3QocGFyc2VNZXRob2RPcHRpb25zUGF0aCgnL2Zvby9HRVQnKSkudG9FcXVhbCh7IHJlc291cmNlUGF0aDogJy9+MWZvbycsIGh0dHBNZXRob2Q6ICdHRVQnIH0pO1xuICAgICAgZXhwZWN0KHBhcnNlTWV0aG9kT3B0aW9uc1BhdGgoJy9mb28vYmFyL0dFVCcpKS50b0VxdWFsKHsgcmVzb3VyY2VQYXRoOiAnL34xZm9vfjFiYXInLCBodHRwTWV0aG9kOiAnR0VUJyB9KTtcbiAgICAgIGV4cGVjdChwYXJzZU1ldGhvZE9wdGlvbnNQYXRoKCcvZm9vLyovR0VUJykpLnRvRXF1YWwoeyByZXNvdXJjZVBhdGg6ICcvfjFmb29+MSonLCBodHRwTWV0aG9kOiAnR0VUJyB9KTtcbiAgICAgIGV4cGVjdChwYXJzZU1ldGhvZE9wdGlvbnNQYXRoKCcvKi9HRVQnKSkudG9FcXVhbCh7IHJlc291cmNlUGF0aDogJy8qJywgaHR0cE1ldGhvZDogJ0dFVCcgfSk7XG4gICAgICBleHBlY3QocGFyc2VNZXRob2RPcHRpb25zUGF0aCgnLyovKicpKS50b0VxdWFsKHsgcmVzb3VyY2VQYXRoOiAnLyonLCBodHRwTWV0aG9kOiAnKicgfSk7XG4gICAgICBleHBlY3QocGFyc2VNZXRob2RPcHRpb25zUGF0aCgnLy9QT1NUJykpLnRvRXF1YWwoeyByZXNvdXJjZVBhdGg6ICcvJywgaHR0cE1ldGhvZDogJ1BPU1QnIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncGFyc2VBd3NBcGlDYWxsJywgKCkgPT4ge1xuICAgIHRlc3QoJ2ZhaWxzIGlmIFwiYWN0aW9uUGFyYW1zXCIgaXMgc2V0IGJ1dCBcImFjdGlvblwiIGlzIHVuZGVmaW5lZCcsICgpID0+IHtcbiAgICAgIGV4cGVjdCgoKSA9PiBwYXJzZUF3c0FwaUNhbGwodW5kZWZpbmVkLCB1bmRlZmluZWQsIHsgZm9vOiAnMTIzJyB9KSkudG9UaHJvdygvXCJhY3Rpb25QYXJhbXNcIiByZXF1aXJlcyB0aGF0IFwiYWN0aW9uXCIgd2lsbCBiZSBzZXQvKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2ZhaWxzIHNpbmNlIFwiYWN0aW9uXCIgYW5kIFwicGF0aFwiIGFyZSBtdXR1YWxseSBleGNsdXNpdmUnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoKCkgPT4gcGFyc2VBd3NBcGlDYWxsKCdmb28nLCAnYmFyJykpLnRvVGhyb3coL1wicGF0aFwiIGFuZCBcImFjdGlvblwiIGFyZSBtdXR1YWxseSBleGNsdXNpdmUgXFwocGF0aD1cImZvb1wiLCBhY3Rpb249XCJiYXJcIlxcKS8pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnZmFpbHMgaWYgXCJwYXRoXCIgYW5kIFwiYWN0aW9uXCIgYXJlIGJvdGggdW5kZWZpbmVkJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KCgpID0+IHBhcnNlQXdzQXBpQ2FsbCgpKS50b1Rocm93KC9FaXRoZXIgXCJwYXRoXCIgb3IgXCJhY3Rpb25cIiBhcmUgcmVxdWlyZWQvKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ1wicGF0aFwiIG1vZGUnLCAoKSA9PiB7XG4gICAgICBleHBlY3QocGFyc2VBd3NBcGlDYWxsKCdteS9wYXRoJykpLnRvRXF1YWwoeyBhcGlUeXBlOiAncGF0aCcsIGFwaVZhbHVlOiAnbXkvcGF0aCcgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdcImFjdGlvblwiIG1vZGUgd2l0aCBubyBwYXJhbWV0ZXJzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHBhcnNlQXdzQXBpQ2FsbCh1bmRlZmluZWQsICdNeUFjdGlvbicpKS50b0VxdWFsKHsgYXBpVHlwZTogJ2FjdGlvbicsIGFwaVZhbHVlOiAnTXlBY3Rpb24nIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnXCJhY3Rpb25cIiBtb2RlIHdpdGggcGFyYW1ldGVycyAodXJsLWVuY29kZWQpJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHBhcnNlQXdzQXBpQ2FsbCh1bmRlZmluZWQsICdHZXRPYmplY3QnLCB7IEJ1Y2tldDogJ015QnVja2V0JywgS2V5OiAnTXlLZXknIH0pKS50b0VxdWFsKHtcbiAgICAgICAgYXBpVHlwZTogJ2FjdGlvbicsXG4gICAgICAgIGFwaVZhbHVlOiAnR2V0T2JqZWN0JkJ1Y2tldD1NeUJ1Y2tldCZLZXk9TXlLZXknLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdKc29uU2NoZW1hTWFwcGVyLnRvQ2ZuSnNvblNjaGVtYScsICgpID0+IHtcbiAgICB0ZXN0KCdtYXBzIFwicmVmXCIgZm91bmQgdW5kZXIgcHJvcGVydGllcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHNjaGVtYTogSnNvblNjaGVtYSA9IHtcbiAgICAgICAgdHlwZTogSnNvblNjaGVtYVR5cGUuT0JKRUNULFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgY29sbGVjdGlvbjoge1xuICAgICAgICAgICAgdHlwZTogSnNvblNjaGVtYVR5cGUuQVJSQVksXG4gICAgICAgICAgICBpdGVtczoge1xuICAgICAgICAgICAgICByZWY6ICcjL3NvbWUvcmVmZXJlbmNlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bmlxdWVJdGVtczogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICByZXF1aXJlZDogWydjb2xsZWN0aW9uJ10sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBhY3R1YWwgPSBKc29uU2NoZW1hTWFwcGVyLnRvQ2ZuSnNvblNjaGVtYShzY2hlbWEpO1xuICAgICAgZXhwZWN0KGFjdHVhbCkudG9FcXVhbCh7XG4gICAgICAgICRzY2hlbWE6ICdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSMnLFxuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGNvbGxlY3Rpb246IHtcbiAgICAgICAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICAgICAgICBpdGVtczoge1xuICAgICAgICAgICAgICAkcmVmOiAnIy9zb21lL3JlZmVyZW5jZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5pcXVlSXRlbXM6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVxdWlyZWQ6IFsnY29sbGVjdGlvbiddLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdkb2VzIG5vdCBtYXAgYSBcInJlZlwiIHByb3BlcnR5IG5hbWUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzY2hlbWE6IEpzb25TY2hlbWEgPSB7XG4gICAgICAgIHR5cGU6IEpzb25TY2hlbWFUeXBlLk9CSkVDVCxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIHJlZjoge1xuICAgICAgICAgICAgdHlwZTogSnNvblNjaGVtYVR5cGUuQVJSQVksXG4gICAgICAgICAgICBpdGVtczoge1xuICAgICAgICAgICAgICByZWY6ICcjL3NvbWUvcmVmZXJlbmNlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bmlxdWVJdGVtczogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICByZXF1aXJlZDogWydyZWYnXSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGFjdHVhbCA9IEpzb25TY2hlbWFNYXBwZXIudG9DZm5Kc29uU2NoZW1hKHNjaGVtYSk7XG4gICAgICBleHBlY3QoYWN0dWFsKS50b0VxdWFsKHtcbiAgICAgICAgJHNjaGVtYTogJ2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIycsXG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgcmVmOiB7XG4gICAgICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICAgICAgJHJlZjogJyMvc29tZS9yZWZlcmVuY2UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVuaXF1ZUl0ZW1zOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlcXVpcmVkOiBbJ3JlZiddLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdcImRlZmF1bHRcIiBmb3IgZW51bScsICgpID0+IHtcbiAgICAgIGNvbnN0IHNjaGVtYTogSnNvblNjaGVtYSA9IHtcbiAgICAgICAgdHlwZTogSnNvblNjaGVtYVR5cGUuU1RSSU5HLFxuICAgICAgICBlbnVtOiBbJ2dyZWVuJywgJ2JsdWUnLCAncmVkJ10sXG4gICAgICAgIGRlZmF1bHQ6ICdibHVlJyxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGFjdHVhbCA9IEpzb25TY2hlbWFNYXBwZXIudG9DZm5Kc29uU2NoZW1hKHNjaGVtYSk7XG4gICAgICBleHBlY3QoYWN0dWFsKS50b0VxdWFsKHtcbiAgICAgICAgJHNjaGVtYTogJ2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIycsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBlbnVtOiBbJ2dyZWVuJywgJ2JsdWUnLCAncmVkJ10sXG4gICAgICAgIGRlZmF1bHQ6ICdibHVlJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnXCJpZFwiIG1hcHMgdG8gXCJpZFwiIHdoZW4gdXNpbmcgRFJBRlQtMDQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzY2hlbWE6IEpzb25TY2hlbWEgPSB7XG4gICAgICAgIHNjaGVtYTogSnNvblNjaGVtYVZlcnNpb24uRFJBRlQ0LFxuICAgICAgICBpZDogJ2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIycsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBhY3R1YWwgPSBKc29uU2NoZW1hTWFwcGVyLnRvQ2ZuSnNvblNjaGVtYShzY2hlbWEpO1xuICAgICAgZXhwZWN0KGFjdHVhbCkudG9FcXVhbCh7XG4gICAgICAgICRzY2hlbWE6ICdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSMnLFxuICAgICAgICBpZDogJ2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIycsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==