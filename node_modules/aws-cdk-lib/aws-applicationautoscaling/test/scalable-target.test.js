"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const cloudwatch = require("../../aws-cloudwatch");
const iam = require("../../aws-iam");
const cdk = require("../../core");
const util_1 = require("./util");
const appscaling = require("../lib");
describe('scalable target', () => {
    test('test scalable target creation', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new appscaling.ScalableTarget(stack, 'Target', {
            serviceNamespace: appscaling.ServiceNamespace.DYNAMODB,
            scalableDimension: 'test:TestCount',
            resourceId: 'test:this/test',
            minCapacity: 1,
            maxCapacity: 20,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApplicationAutoScaling::ScalableTarget', {
            ServiceNamespace: 'dynamodb',
            ScalableDimension: 'test:TestCount',
            ResourceId: 'test:this/test',
            MinCapacity: 1,
            MaxCapacity: 20,
        });
    });
    test('validation does not fail when using Tokens', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new appscaling.ScalableTarget(stack, 'Target', {
            serviceNamespace: appscaling.ServiceNamespace.DYNAMODB,
            scalableDimension: 'test:TestCount',
            resourceId: 'test:this/test',
            minCapacity: cdk.Lazy.number({ produce: () => 10 }),
            maxCapacity: cdk.Lazy.number({ produce: () => 1 }),
        });
        // THEN: no exception
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApplicationAutoScaling::ScalableTarget', {
            ServiceNamespace: 'dynamodb',
            ScalableDimension: 'test:TestCount',
            ResourceId: 'test:this/test',
            MinCapacity: 10,
            MaxCapacity: 1,
        });
    });
    test('add scheduled scaling', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const target = (0, util_1.createScalableTarget)(stack);
        // WHEN
        target.scaleOnSchedule('ScaleUp', {
            schedule: appscaling.Schedule.rate(cdk.Duration.minutes(1)),
            maxCapacity: 50,
            minCapacity: 1,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApplicationAutoScaling::ScalableTarget', {
            ScheduledActions: [
                {
                    ScalableTargetAction: {
                        MaxCapacity: 50,
                        MinCapacity: 1,
                    },
                    Schedule: 'rate(1 minute)',
                    ScheduledActionName: 'ScaleUp',
                },
            ],
        });
    });
    test('scheduled scaling shows warning when minute is not defined in cron', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const target = (0, util_1.createScalableTarget)(stack);
        // WHEN
        target.scaleOnSchedule('ScaleUp', {
            schedule: appscaling.Schedule.cron({
                hour: '8',
                day: '1',
            }),
            maxCapacity: 50,
            minCapacity: 1,
        });
        // THEN
        assertions_1.Annotations.fromStack(stack).hasWarning('/Default/Target', assertions_1.Match.stringLikeRegexp("cron: If you don't pass 'minute', by default the event runs every minute.*"));
    });
    test('scheduled scaling shows no warning when minute is * in cron', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const target = (0, util_1.createScalableTarget)(stack);
        // WHEN
        target.scaleOnSchedule('ScaleUp', {
            schedule: appscaling.Schedule.cron({
                hour: '8',
                day: '1',
                minute: '*',
            }),
            maxCapacity: 50,
            minCapacity: 1,
        });
        // THEN
        assertions_1.Annotations.fromStack(stack).hasNoWarning('/Default/Target', assertions_1.Match.stringLikeRegexp("cron: If you don't pass 'minute', by default the event runs every minute.*"));
    });
    test('step scaling on MathExpression', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const target = (0, util_1.createScalableTarget)(stack);
        // WHEN
        target.scaleOnMetric('Metric', {
            metric: new cloudwatch.MathExpression({
                expression: 'a',
                usingMetrics: {
                    a: new cloudwatch.Metric({
                        namespace: 'Test',
                        metricName: 'Metric',
                    }),
                },
            }),
            adjustmentType: appscaling.AdjustmentType.CHANGE_IN_CAPACITY,
            scalingSteps: [
                { change: -1, lower: 0, upper: 49 },
                { change: 0, lower: 50, upper: 99 },
                { change: 1, lower: 100 },
            ],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Alarm', assertions_1.Match.not({
            Period: 60,
        }));
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Alarm', {
            ComparisonOperator: 'LessThanOrEqualToThreshold',
            EvaluationPeriods: 1,
            Metrics: [
                {
                    Expression: 'a',
                    Id: 'expr_1',
                },
                {
                    Id: 'a',
                    MetricStat: {
                        Metric: {
                            MetricName: 'Metric',
                            Namespace: 'Test',
                        },
                        Period: 300,
                        Stat: 'Average',
                    },
                    ReturnData: false,
                },
            ],
            Threshold: 49,
        });
    });
    test('test service namespace enum', () => {
        expect(appscaling.ServiceNamespace.APPSTREAM).toEqual('appstream');
        expect(appscaling.ServiceNamespace.COMPREHEND).toEqual('comprehend');
        expect(appscaling.ServiceNamespace.CUSTOM_RESOURCE).toEqual('custom-resource');
        expect(appscaling.ServiceNamespace.DYNAMODB).toEqual('dynamodb');
        expect(appscaling.ServiceNamespace.EC2).toEqual('ec2');
        expect(appscaling.ServiceNamespace.ECS).toEqual('ecs');
        expect(appscaling.ServiceNamespace.ELASTIC_MAP_REDUCE).toEqual('elasticmapreduce');
        expect(appscaling.ServiceNamespace.LAMBDA).toEqual('lambda');
        expect(appscaling.ServiceNamespace.RDS).toEqual('rds');
        expect(appscaling.ServiceNamespace.SAGEMAKER).toEqual('sagemaker');
        expect(appscaling.ServiceNamespace.ELASTICACHE).toEqual('elasticache');
        expect(appscaling.ServiceNamespace.NEPTUNE).toEqual('neptune');
    });
    test('create scalable target with negative minCapacity throws error', () => {
        const stack = new cdk.Stack();
        expect(() => {
            new appscaling.ScalableTarget(stack, 'Target', {
                serviceNamespace: appscaling.ServiceNamespace.DYNAMODB,
                scalableDimension: 'test:TestCount',
                resourceId: 'test:this/test',
                minCapacity: -1,
                maxCapacity: 20,
            });
        }).toThrow('minCapacity cannot be negative, got: -1');
    });
    test('create scalable target with negative maxCapacity throws error', () => {
        const stack = new cdk.Stack();
        expect(() => {
            new appscaling.ScalableTarget(stack, 'Target', {
                serviceNamespace: appscaling.ServiceNamespace.DYNAMODB,
                scalableDimension: 'test:TestCount',
                resourceId: 'test:this/test',
                minCapacity: 1,
                maxCapacity: -1,
            });
        }).toThrow('maxCapacity cannot be negative, got: -1');
    });
    test('create scalable target with maxCapacity less than minCapacity throws error', () => {
        const stack = new cdk.Stack();
        expect(() => {
            new appscaling.ScalableTarget(stack, 'Target', {
                serviceNamespace: appscaling.ServiceNamespace.DYNAMODB,
                scalableDimension: 'test:TestCount',
                resourceId: 'test:this/test',
                minCapacity: 2,
                maxCapacity: 1,
            });
        }).toThrow('minCapacity (2) should be lower than maxCapacity (1)');
    });
    test('create scalable target with custom role', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new appscaling.ScalableTarget(stack, 'Target', {
            serviceNamespace: appscaling.ServiceNamespace.DYNAMODB,
            scalableDimension: 'test:TestCount',
            resourceId: 'test:this/test',
            minCapacity: 1,
            maxCapacity: 20,
            role: new iam.Role(stack, 'Role', {
                assumedBy: new iam.ServicePrincipal('test.amazonaws.com'),
            }),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApplicationAutoScaling::ScalableTarget', {
            ServiceNamespace: 'dynamodb',
            ScalableDimension: 'test:TestCount',
            ResourceId: 'test:this/test',
            MinCapacity: 1,
            MaxCapacity: 20,
            RoleARN: {
                'Fn::GetAtt': [
                    'Role1ABCC5F0',
                    'Arn',
                ],
            },
        });
    });
    test('add scheduled scaling with neither of min/maxCapacity defined throws error', () => {
        const stack = new cdk.Stack();
        const target = (0, util_1.createScalableTarget)(stack);
        expect(() => {
            target.scaleOnSchedule('ScaleUp', {
                schedule: appscaling.Schedule.rate(cdk.Duration.minutes(1)),
            });
        }).toThrow(/You must supply at least one of minCapacity or maxCapacity, got/);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGFibGUtdGFyZ2V0LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzY2FsYWJsZS10YXJnZXQudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUFnRTtBQUNoRSxtREFBbUQ7QUFDbkQscUNBQXFDO0FBQ3JDLGtDQUFrQztBQUNsQyxpQ0FBOEM7QUFDOUMscUNBQXFDO0FBRXJDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDL0IsSUFBSSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtRQUN6QyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsT0FBTztRQUNQLElBQUksVUFBVSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO1lBQzdDLGdCQUFnQixFQUFFLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRO1lBQ3RELGlCQUFpQixFQUFFLGdCQUFnQjtZQUNuQyxVQUFVLEVBQUUsZ0JBQWdCO1lBQzVCLFdBQVcsRUFBRSxDQUFDO1lBQ2QsV0FBVyxFQUFFLEVBQUU7U0FDaEIsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLDZDQUE2QyxFQUFFO1lBQzdGLGdCQUFnQixFQUFFLFVBQVU7WUFDNUIsaUJBQWlCLEVBQUUsZ0JBQWdCO1lBQ25DLFVBQVUsRUFBRSxnQkFBZ0I7WUFDNUIsV0FBVyxFQUFFLENBQUM7WUFDZCxXQUFXLEVBQUUsRUFBRTtTQUNoQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw0Q0FBNEMsRUFBRSxHQUFHLEVBQUU7UUFDdEQsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTlCLE9BQU87UUFDUCxJQUFJLFVBQVUsQ0FB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LEVBQUUsR0FBRyxFQUFFO1FBQ3RGLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLE1BQU0sTUFBTSxHQUFHLElBQUEsMkJBQW9CLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLE1BQU0sQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFO2dCQUNoQyxRQUFRLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDNUQsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGlFQUFpRSxDQUFDLENBQUM7SUFDaEYsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFubm90YXRpb25zLCBNYXRjaCwgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIGNsb3Vkd2F0Y2ggZnJvbSAnLi4vLi4vYXdzLWNsb3Vkd2F0Y2gnO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJy4uLy4uL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgY3JlYXRlU2NhbGFibGVUYXJnZXQgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0ICogYXMgYXBwc2NhbGluZyBmcm9tICcuLi9saWInO1xuXG5kZXNjcmliZSgnc2NhbGFibGUgdGFyZ2V0JywgKCkgPT4ge1xuICB0ZXN0KCd0ZXN0IHNjYWxhYmxlIHRhcmdldCBjcmVhdGlvbicsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBhcHBzY2FsaW5nLlNjYWxhYmxlVGFyZ2V0KHN0YWNrLCAnVGFyZ2V0Jywge1xuICAgICAgc2VydmljZU5hbWVzcGFjZTogYXBwc2NhbGluZy5TZXJ2aWNlTmFtZXNwYWNlLkRZTkFNT0RCLFxuICAgICAgc2NhbGFibGVEaW1lbnNpb246ICd0ZXN0OlRlc3RDb3VudCcsXG4gICAgICByZXNvdXJjZUlkOiAndGVzdDp0aGlzL3Rlc3QnLFxuICAgICAgbWluQ2FwYWNpdHk6IDEsXG4gICAgICBtYXhDYXBhY2l0eTogMjAsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6QXBwbGljYXRpb25BdXRvU2NhbGluZzo6U2NhbGFibGVUYXJnZXQnLCB7XG4gICAgICBTZXJ2aWNlTmFtZXNwYWNlOiAnZHluYW1vZGInLFxuICAgICAgU2NhbGFibGVEaW1lbnNpb246ICd0ZXN0OlRlc3RDb3VudCcsXG4gICAgICBSZXNvdXJjZUlkOiAndGVzdDp0aGlzL3Rlc3QnLFxuICAgICAgTWluQ2FwYWNpdHk6IDEsXG4gICAgICBNYXhDYXBhY2l0eTogMjAsXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3ZhbGlkYXRpb24gZG9lcyBub3QgZmFpbCB3aGVuIHVzaW5nIFRva2VucycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBhcHBzY2FsaW5nLlNjYWxhYmxlVGFyZ2V0KHN0YWNrLCAnVGFyZ2V0Jywge1xuICAgICAgc2VydmljZU5hbWVzcGFjZTogYXBwc2NhbGluZy5TZXJ2aWNlTmFtZXNwYWNlLkRZTkFNT0RCLFxuICAgICAgc2NhbGFibGVEaW1lbnNpb246ICd0ZXN0OlRlc3RDb3VudCcsXG4gICAgICByZXNvdXJjZUlkOiAndGVzdDp0aGlzL3Rlc3QnLFxuICAgICAgbWluQ2FwYWNpdHk6IGNkay5MYXp5Lm51bWJlcih7IHByb2R1Y2U6ICgpID0+IDEwIH0pLFxuICAgICAgbWF4Q2FwYWNpdHk6IGNkay5MYXp5Lm51bWJlcih7IHByb2R1Y2U6ICgpID0+IDEgfSksXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOOiBubyBleGNlcHRpb25cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpBcHBsaWNhdGlvbkF1dG9TY2FsaW5nOjpTY2FsYWJsZVRhcmdldCcsIHtcbiAgICAgIFNlcnZpY2VOYW1lc3BhY2U6ICdkeW5hbW9kYicsXG4gICAgICBTY2FsYWJsZURpbWVuc2lvbjogJ3Rlc3Q6VGVzdENvdW50JyxcbiAgICAgIFJlc291cmNlSWQ6ICd0ZXN0OnRoaXMvdGVzdCcsXG4gICAgICBNaW5DYXBhY2l0eTogMTAsXG4gICAgICBNYXhDYXBhY2l0eTogMSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnYWRkIHNjaGVkdWxlZCBzY2FsaW5nJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgdGFyZ2V0ID0gY3JlYXRlU2NhbGFibGVUYXJnZXQoc3RhY2spO1xuXG4gICAgLy8gV0hFTlxuICAgIHRhcmdldC5zY2FsZU9uU2NoZWR1bGUoJ1NjYWxlVXAnLCB7XG4gICAgICBzY2hlZHVsZTogYXBwc2NhbGluZy5TY2hlZHVsZS5yYXRlKGNkay5EdXJhdGlvbi5taW51dGVzKDEpKSxcbiAgICAgIG1heENhcGFjaXR5OiA1MCxcbiAgICAgIG1pbkNhcGFjaXR5OiAxLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkFwcGxpY2F0aW9uQXV0b1NjYWxpbmc6OlNjYWxhYmxlVGFyZ2V0Jywge1xuICAgICAgU2NoZWR1bGVkQWN0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgU2NhbGFibGVUYXJnZXRBY3Rpb246IHtcbiAgICAgICAgICAgIE1heENhcGFjaXR5OiA1MCxcbiAgICAgICAgICAgIE1pbkNhcGFjaXR5OiAxLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgU2NoZWR1bGU6ICdyYXRlKDEgbWludXRlKScsXG4gICAgICAgICAgU2NoZWR1bGVkQWN0aW9uTmFtZTogJ1NjYWxlVXAnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnc2NoZWR1bGVkIHNjYWxpbmcgc2hvd3Mgd2FybmluZyB3aGVuIG1pbnV0ZSBpcyBub3QgZGVmaW5lZCBpbiBjcm9uJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgdGFyZ2V0ID0gY3JlYXRlU2NhbGFibGVUYXJnZXQoc3RhY2spO1xuXG4gICAgLy8gV0hFTlxuICAgIHRhcmdldC5zY2FsZU9uU2NoZWR1bGUoJ1NjYWxlVXAnLCB7XG4gICAgICBzY2hlZHVsZTogYXBwc2NhbGluZy5TY2hlZHVsZS5jcm9uKHtcbiAgICAgICAgaG91cjogJzgnLFxuICAgICAgICBkYXk6ICcxJyxcbiAgICAgIH0pLFxuICAgICAgbWF4Q2FwYWNpdHk6IDUwLFxuICAgICAgbWluQ2FwYWNpdHk6IDEsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgQW5ub3RhdGlvbnMuZnJvbVN0YWNrKHN0YWNrKS5oYXNXYXJuaW5nKCcvRGVmYXVsdC9UYXJnZXQnLCBNYXRjaC5zdHJpbmdMaWtlUmVnZXhwKFwiY3JvbjogSWYgeW91IGRvbid0IHBhc3MgJ21pbnV0ZScsIGJ5IGRlZmF1bHQgdGhlIGV2ZW50IHJ1bnMgZXZlcnkgbWludXRlLipcIikpO1xuICB9KTtcblxuICB0ZXN0KCdzY2hlZHVsZWQgc2NhbGluZyBzaG93cyBubyB3YXJuaW5nIHdoZW4gbWludXRlIGlzICogaW4gY3JvbicsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IHRhcmdldCA9IGNyZWF0ZVNjYWxhYmxlVGFyZ2V0KHN0YWNrKTtcblxuICAgIC8vIFdIRU5cbiAgICB0YXJnZXQuc2NhbGVPblNjaGVkdWxlKCdTY2FsZVVwJywge1xuICAgICAgc2NoZWR1bGU6IGFwcHNjYWxpbmcuU2NoZWR1bGUuY3Jvbih7XG4gICAgICAgIGhvdXI6ICc4JyxcbiAgICAgICAgZGF5OiAnMScsXG4gICAgICAgIG1pbnV0ZTogJyonLFxuICAgICAgfSksXG4gICAgICBtYXhDYXBhY2l0eTogNTAsXG4gICAgICBtaW5DYXBhY2l0eTogMSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBBbm5vdGF0aW9ucy5mcm9tU3RhY2soc3RhY2spLmhhc05vV2FybmluZygnL0RlZmF1bHQvVGFyZ2V0JywgTWF0Y2guc3RyaW5nTGlrZVJlZ2V4cChcImNyb246IElmIHlvdSBkb24ndCBwYXNzICdtaW51dGUnLCBieSBkZWZhdWx0IHRoZSBldmVudCBydW5zIGV2ZXJ5IG1pbnV0ZS4qXCIpKTtcbiAgfSk7XG5cbiAgdGVzdCgnc3RlcCBzY2FsaW5nIG9uIE1hdGhFeHByZXNzaW9uJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgdGFyZ2V0ID0gY3JlYXRlU2NhbGFibGVUYXJnZXQoc3RhY2spO1xuXG4gICAgLy8gV0hFTlxuICAgIHRhcmdldC5zY2FsZU9uTWV0cmljKCdNZXRyaWMnLCB7XG4gICAgICBtZXRyaWM6IG5ldyBjbG91ZHdhdGNoLk1hdGhFeHByZXNzaW9uKHtcbiAgICAgICAgZXhwcmVzc2lvbjogJ2EnLFxuICAgICAgICB1c2luZ01ldHJpY3M6IHtcbiAgICAgICAgICBhOiBuZXcgY2xvdWR3YXRjaC5NZXRyaWMoe1xuICAgICAgICAgICAgbmFtZXNwYWNlOiAnVGVzdCcsXG4gICAgICAgICAgICBtZXRyaWNOYW1lOiAnTWV0cmljJyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgICAgYWRqdXN0bWVudFR5cGU6IGFwcHNjYWxpbmcuQWRqdXN0bWVudFR5cGUuQ0hBTkdFX0lOX0NBUEFDSVRZLFxuICAgICAgc2NhbGluZ1N0ZXBzOiBbXG4gICAgICAgIHsgY2hhbmdlOiAtMSwgbG93ZXI6IDAsIHVwcGVyOiA0OSB9LFxuICAgICAgICB7IGNoYW5nZTogMCwgbG93ZXI6IDUwLCB1cHBlcjogOTkgfSxcbiAgICAgICAgeyBjaGFuZ2U6IDEsIGxvd2VyOiAxMDAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q2xvdWRXYXRjaDo6QWxhcm0nLCBNYXRjaC5ub3Qoe1xuICAgICAgUGVyaW9kOiA2MCxcbiAgICB9KSk7XG5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpDbG91ZFdhdGNoOjpBbGFybScsIHtcbiAgICAgIENvbXBhcmlzb25PcGVyYXRvcjogJ0xlc3NUaGFuT3JFcXVhbFRvVGhyZXNob2xkJyxcbiAgICAgIEV2YWx1YXRpb25QZXJpb2RzOiAxLFxuICAgICAgTWV0cmljczogW1xuICAgICAgICB7XG4gICAgICAgICAgRXhwcmVzc2lvbjogJ2EnLFxuICAgICAgICAgIElkOiAnZXhwcl8xJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIElkOiAnYScsXG4gICAgICAgICAgTWV0cmljU3RhdDoge1xuICAgICAgICAgICAgTWV0cmljOiB7XG4gICAgICAgICAgICAgIE1ldHJpY05hbWU6ICdNZXRyaWMnLFxuICAgICAgICAgICAgICBOYW1lc3BhY2U6ICdUZXN0JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBQZXJpb2Q6IDMwMCxcbiAgICAgICAgICAgIFN0YXQ6ICdBdmVyYWdlJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFJldHVybkRhdGE6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIFRocmVzaG9sZDogNDksXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Rlc3Qgc2VydmljZSBuYW1lc3BhY2UgZW51bScsICgpID0+IHtcbiAgICBleHBlY3QoYXBwc2NhbGluZy5TZXJ2aWNlTmFtZXNwYWNlLkFQUFNUUkVBTSkudG9FcXVhbCgnYXBwc3RyZWFtJyk7XG4gICAgZXhwZWN0KGFwcHNjYWxpbmcuU2VydmljZU5hbWVzcGFjZS5DT01QUkVIRU5EKS50b0VxdWFsKCdjb21wcmVoZW5kJyk7XG4gICAgZXhwZWN0KGFwcHNjYWxpbmcuU2VydmljZU5hbWVzcGFjZS5DVVNUT01fUkVTT1VSQ0UpLnRvRXF1YWwoJ2N1c3RvbS1yZXNvdXJjZScpO1xuICAgIGV4cGVjdChhcHBzY2FsaW5nLlNlcnZpY2VOYW1lc3BhY2UuRFlOQU1PREIpLnRvRXF1YWwoJ2R5bmFtb2RiJyk7XG4gICAgZXhwZWN0KGFwcHNjYWxpbmcuU2VydmljZU5hbWVzcGFjZS5FQzIpLnRvRXF1YWwoJ2VjMicpO1xuICAgIGV4cGVjdChhcHBzY2FsaW5nLlNlcnZpY2VOYW1lc3BhY2UuRUNTKS50b0VxdWFsKCdlY3MnKTtcbiAgICBleHBlY3QoYXBwc2NhbGluZy5TZXJ2aWNlTmFtZXNwYWNlLkVMQVNUSUNfTUFQX1JFRFVDRSkudG9FcXVhbCgnZWxhc3RpY21hcHJlZHVjZScpO1xuICAgIGV4cGVjdChhcHBzY2FsaW5nLlNlcnZpY2VOYW1lc3BhY2UuTEFNQkRBKS50b0VxdWFsKCdsYW1iZGEnKTtcbiAgICBleHBlY3QoYXBwc2NhbGluZy5TZXJ2aWNlTmFtZXNwYWNlLlJEUykudG9FcXVhbCgncmRzJyk7XG4gICAgZXhwZWN0KGFwcHNjYWxpbmcuU2VydmljZU5hbWVzcGFjZS5TQUdFTUFLRVIpLnRvRXF1YWwoJ3NhZ2VtYWtlcicpO1xuICAgIGV4cGVjdChhcHBzY2FsaW5nLlNlcnZpY2VOYW1lc3BhY2UuRUxBU1RJQ0FDSEUpLnRvRXF1YWwoJ2VsYXN0aWNhY2hlJyk7XG4gICAgZXhwZWN0KGFwcHNjYWxpbmcuU2VydmljZU5hbWVzcGFjZS5ORVBUVU5FKS50b0VxdWFsKCduZXB0dW5lJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NyZWF0ZSBzY2FsYWJsZSB0YXJnZXQgd2l0aCBuZWdhdGl2ZSBtaW5DYXBhY2l0eSB0aHJvd3MgZXJyb3InLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIG5ldyBhcHBzY2FsaW5nLlNjYWxhYmxlVGFyZ2V0KHN0YWNrLCAnVGFyZ2V0Jywge1xuICAgICAgICBzZXJ2aWNlTmFtZXNwYWNlOiBhcHBzY2FsaW5nLlNlcnZpY2VOYW1lc3BhY2UuRFlOQU1PREIsXG4gICAgICAgIHNjYWxhYmxlRGltZW5zaW9uOiAndGVzdDpUZXN0Q291bnQnLFxuICAgICAgICByZXNvdXJjZUlkOiAndGVzdDp0aGlzL3Rlc3QnLFxuICAgICAgICBtaW5DYXBhY2l0eTogLTEsXG4gICAgICAgIG1heENhcGFjaXR5OiAyMCxcbiAgICAgIH0pO1xuICAgIH0pLnRvVGhyb3coJ21pbkNhcGFjaXR5IGNhbm5vdCBiZSBuZWdhdGl2ZSwgZ290OiAtMScpO1xuICB9KTtcblxuICB0ZXN0KCdjcmVhdGUgc2NhbGFibGUgdGFyZ2V0IHdpdGggbmVnYXRpdmUgbWF4Q2FwYWNpdHkgdGhyb3dzIGVycm9yJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBuZXcgYXBwc2NhbGluZy5TY2FsYWJsZVRhcmdldChzdGFjaywgJ1RhcmdldCcsIHtcbiAgICAgICAgc2VydmljZU5hbWVzcGFjZTogYXBwc2NhbGluZy5TZXJ2aWNlTmFtZXNwYWNlLkRZTkFNT0RCLFxuICAgICAgICBzY2FsYWJsZURpbWVuc2lvbjogJ3Rlc3Q6VGVzdENvdW50JyxcbiAgICAgICAgcmVzb3VyY2VJZDogJ3Rlc3Q6dGhpcy90ZXN0JyxcbiAgICAgICAgbWluQ2FwYWNpdHk6IDEsXG4gICAgICAgIG1heENhcGFjaXR5OiAtMSxcbiAgICAgIH0pO1xuICAgIH0pLnRvVGhyb3coJ21heENhcGFjaXR5IGNhbm5vdCBiZSBuZWdhdGl2ZSwgZ290OiAtMScpO1xuICB9KTtcblxuICB0ZXN0KCdjcmVhdGUgc2NhbGFibGUgdGFyZ2V0IHdpdGggbWF4Q2FwYWNpdHkgbGVzcyB0aGFuIG1pbkNhcGFjaXR5IHRocm93cyBlcnJvcicsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgbmV3IGFwcHNjYWxpbmcuU2NhbGFibGVUYXJnZXQoc3RhY2ssICdUYXJnZXQnLCB7XG4gICAgICAgIHNlcnZpY2VOYW1lc3BhY2U6IGFwcHNjYWxpbmcuU2VydmljZU5hbWVzcGFjZS5EWU5BTU9EQixcbiAgICAgICAgc2NhbGFibGVEaW1lbnNpb246ICd0ZXN0OlRlc3RDb3VudCcsXG4gICAgICAgIHJlc291cmNlSWQ6ICd0ZXN0OnRoaXMvdGVzdCcsXG4gICAgICAgIG1pbkNhcGFjaXR5OiAyLFxuICAgICAgICBtYXhDYXBhY2l0eTogMSxcbiAgICAgIH0pO1xuICAgIH0pLnRvVGhyb3coJ21pbkNhcGFjaXR5ICgyKSBzaG91bGQgYmUgbG93ZXIgdGhhbiBtYXhDYXBhY2l0eSAoMSknKTtcbiAgfSk7XG5cbiAgdGVzdCgnY3JlYXRlIHNjYWxhYmxlIHRhcmdldCB3aXRoIGN1c3RvbSByb2xlJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgbmV3IGFwcHNjYWxpbmcuU2NhbGFibGVUYXJnZXQoc3RhY2ssICdUYXJnZXQnLCB7XG4gICAgICBzZXJ2aWNlTmFtZXNwYWNlOiBhcHBzY2FsaW5nLlNlcnZpY2VOYW1lc3BhY2UuRFlOQU1PREIsXG4gICAgICBzY2FsYWJsZURpbWVuc2lvbjogJ3Rlc3Q6VGVzdENvdW50JyxcbiAgICAgIHJlc291cmNlSWQ6ICd0ZXN0OnRoaXMvdGVzdCcsXG4gICAgICBtaW5DYXBhY2l0eTogMSxcbiAgICAgIG1heENhcGFjaXR5OiAyMCxcbiAgICAgIHJvbGU6IG5ldyBpYW0uUm9sZShzdGFjaywgJ1JvbGUnLCB7XG4gICAgICAgIGFzc3VtZWRCeTogbmV3IGlhbS5TZXJ2aWNlUHJpbmNpcGFsKCd0ZXN0LmFtYXpvbmF3cy5jb20nKSxcbiAgICAgIH0pLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkFwcGxpY2F0aW9uQXV0b1NjYWxpbmc6OlNjYWxhYmxlVGFyZ2V0Jywge1xuICAgICAgU2VydmljZU5hbWVzcGFjZTogJ2R5bmFtb2RiJyxcbiAgICAgIFNjYWxhYmxlRGltZW5zaW9uOiAndGVzdDpUZXN0Q291bnQnLFxuICAgICAgUmVzb3VyY2VJZDogJ3Rlc3Q6dGhpcy90ZXN0JyxcbiAgICAgIE1pbkNhcGFjaXR5OiAxLFxuICAgICAgTWF4Q2FwYWNpdHk6IDIwLFxuICAgICAgUm9sZUFSTjoge1xuICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAnUm9sZTFBQkNDNUYwJyxcbiAgICAgICAgICAnQXJuJyxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2FkZCBzY2hlZHVsZWQgc2NhbGluZyB3aXRoIG5laXRoZXIgb2YgbWluL21heENhcGFjaXR5IGRlZmluZWQgdGhyb3dzIGVycm9yJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IHRhcmdldCA9IGNyZWF0ZVNjYWxhYmxlVGFyZ2V0KHN0YWNrKTtcbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgdGFyZ2V0LnNjYWxlT25TY2hlZHVsZSgnU2NhbGVVcCcsIHtcbiAgICAgICAgc2NoZWR1bGU6IGFwcHNjYWxpbmcuU2NoZWR1bGUucmF0ZShjZGsuRHVyYXRpb24ubWludXRlcygxKSksXG4gICAgICB9KTtcbiAgICB9KS50b1Rocm93KC9Zb3UgbXVzdCBzdXBwbHkgYXQgbGVhc3Qgb25lIG9mIG1pbkNhcGFjaXR5IG9yIG1heENhcGFjaXR5LCBnb3QvKTtcbiAgfSk7XG59KTtcbiJdfQ==