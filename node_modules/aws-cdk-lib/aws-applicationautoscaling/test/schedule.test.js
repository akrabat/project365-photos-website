"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../../core");
const appscaling = require("../lib");
describe('cron', () => {
    test('test utc cron, hour only', () => {
        expect(appscaling.Schedule.cron({ hour: '18', minute: '0' }).expressionString).toEqual('cron(0 18 * * ? *)');
    });
    test('test utc cron, hour and minute', () => {
        expect(appscaling.Schedule.cron({ hour: '18', minute: '24' }).expressionString).toEqual('cron(24 18 * * ? *)');
    });
});
describe('rate', () => {
    test('rate must be whole number of minutes', () => {
        expect(() => {
            appscaling.Schedule.rate(core_1.Duration.minutes(0.13456));
        }).toThrow(/'0.13456 minutes' cannot be converted into a whole number of seconds/);
    });
    test('rate can be in seconds', () => {
        const duration = appscaling.Schedule.rate(core_1.Duration.seconds(120));
        expect('rate(2 minutes)').toEqual(duration.expressionString);
    });
    test('rate must not be in seconds when specified as a token', () => {
        expect(() => {
            appscaling.Schedule.rate(core_1.Duration.seconds(core_1.Lazy.number({ produce: () => 5 })));
        }).toThrow(/Allowed units for scheduling/);
    });
    test('rate cannot be 0', () => {
        expect(() => {
            appscaling.Schedule.rate(core_1.Duration.days(0));
        }).toThrow(/Duration cannot be 0/);
    });
    test('rate can be token', () => {
        const stack = new core_1.Stack();
        const lazyDuration = core_1.Duration.minutes(core_1.Lazy.number({ produce: () => 5 }));
        const rate = appscaling.Schedule.rate(lazyDuration);
        expect('rate(5 minutes)').toEqual(stack.resolve(rate).expressionString);
    });
    test('rate can be in allowed type hours', () => {
        expect('rate(1 hour)').toEqual(appscaling.Schedule.rate(core_1.Duration.hours(1))
            .expressionString);
    });
});
describe('expression', () => {
    test('test using a literal schedule expression', () => {
        expect(appscaling.Schedule.expression('cron(0 18 * * ? *)').expressionString).toEqual('cron(0 18 * * ? *)');
    });
});
describe('at', () => {
    test('test using at with a specific Date', () => {
        expect(appscaling.Schedule.at(new Date(Date.UTC(2021, 10, 26))).expressionString).toEqual('at(2021-11-26T00:00:00)');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNjaGVkdWxlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBbUQ7QUFDbkQscUNBQXFDO0FBRXJDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0lBQ3BCLElBQUksQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7UUFDcEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBRS9HLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtRQUMxQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFFakgsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0lBQ3BCLElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7UUFDaEQsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsc0VBQXNFLENBQUMsQ0FBQztJQUVyRixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7UUFDbEMsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUUvRCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx1REFBdUQsRUFBRSxHQUFHLEVBQUU7UUFDakUsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQVEsQ0FBQyxPQUFPLENBQUMsV0FBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQztJQUU3QyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7UUFDNUIsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUVyQyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDN0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLFlBQVksR0FBRyxlQUFRLENBQUMsT0FBTyxDQUFDLFdBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFFMUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFO1FBQzdDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN2RSxnQkFBZ0IsQ0FBQyxDQUFDO0lBRXZCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtJQUMxQixJQUFJLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1FBQ3BELE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFFOUcsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFO0lBQ2xCLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLEVBQUU7UUFDOUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUN2SCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHVyYXRpb24sIFN0YWNrLCBMYXp5IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBhcHBzY2FsaW5nIGZyb20gJy4uL2xpYic7XG5cbmRlc2NyaWJlKCdjcm9uJywgKCkgPT4ge1xuICB0ZXN0KCd0ZXN0IHV0YyBjcm9uLCBob3VyIG9ubHknLCAoKSA9PiB7XG4gICAgZXhwZWN0KGFwcHNjYWxpbmcuU2NoZWR1bGUuY3Jvbih7IGhvdXI6ICcxOCcsIG1pbnV0ZTogJzAnIH0pLmV4cHJlc3Npb25TdHJpbmcpLnRvRXF1YWwoJ2Nyb24oMCAxOCAqICogPyAqKScpO1xuXG4gIH0pO1xuXG4gIHRlc3QoJ3Rlc3QgdXRjIGNyb24sIGhvdXIgYW5kIG1pbnV0ZScsICgpID0+IHtcbiAgICBleHBlY3QoYXBwc2NhbGluZy5TY2hlZHVsZS5jcm9uKHsgaG91cjogJzE4JywgbWludXRlOiAnMjQnIH0pLmV4cHJlc3Npb25TdHJpbmcpLnRvRXF1YWwoJ2Nyb24oMjQgMTggKiAqID8gKiknKTtcblxuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgncmF0ZScsICgpID0+IHtcbiAgdGVzdCgncmF0ZSBtdXN0IGJlIHdob2xlIG51bWJlciBvZiBtaW51dGVzJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBhcHBzY2FsaW5nLlNjaGVkdWxlLnJhdGUoRHVyYXRpb24ubWludXRlcygwLjEzNDU2KSk7XG4gICAgfSkudG9UaHJvdygvJzAuMTM0NTYgbWludXRlcycgY2Fubm90IGJlIGNvbnZlcnRlZCBpbnRvIGEgd2hvbGUgbnVtYmVyIG9mIHNlY29uZHMvKTtcblxuICB9KTtcblxuICB0ZXN0KCdyYXRlIGNhbiBiZSBpbiBzZWNvbmRzJywgKCkgPT4ge1xuICAgIGNvbnN0IGR1cmF0aW9uID0gYXBwc2NhbGluZy5TY2hlZHVsZS5yYXRlKER1cmF0aW9uLnNlY29uZHMoMTIwKSk7XG4gICAgZXhwZWN0KCdyYXRlKDIgbWludXRlcyknKS50b0VxdWFsKGR1cmF0aW9uLmV4cHJlc3Npb25TdHJpbmcpO1xuXG4gIH0pO1xuXG4gIHRlc3QoJ3JhdGUgbXVzdCBub3QgYmUgaW4gc2Vjb25kcyB3aGVuIHNwZWNpZmllZCBhcyBhIHRva2VuJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBhcHBzY2FsaW5nLlNjaGVkdWxlLnJhdGUoRHVyYXRpb24uc2Vjb25kcyhMYXp5Lm51bWJlcih7IHByb2R1Y2U6ICgpID0+IDUgfSkpKTtcbiAgICB9KS50b1Rocm93KC9BbGxvd2VkIHVuaXRzIGZvciBzY2hlZHVsaW5nLyk7XG5cbiAgfSk7XG5cbiAgdGVzdCgncmF0ZSBjYW5ub3QgYmUgMCcsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgYXBwc2NhbGluZy5TY2hlZHVsZS5yYXRlKER1cmF0aW9uLmRheXMoMCkpO1xuICAgIH0pLnRvVGhyb3coL0R1cmF0aW9uIGNhbm5vdCBiZSAwLyk7XG5cbiAgfSk7XG5cbiAgdGVzdCgncmF0ZSBjYW4gYmUgdG9rZW4nLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCBsYXp5RHVyYXRpb24gPSBEdXJhdGlvbi5taW51dGVzKExhenkubnVtYmVyKHsgcHJvZHVjZTogKCkgPT4gNSB9KSk7XG4gICAgY29uc3QgcmF0ZSA9IGFwcHNjYWxpbmcuU2NoZWR1bGUucmF0ZShsYXp5RHVyYXRpb24pO1xuICAgIGV4cGVjdCgncmF0ZSg1IG1pbnV0ZXMpJykudG9FcXVhbChzdGFjay5yZXNvbHZlKHJhdGUpLmV4cHJlc3Npb25TdHJpbmcpO1xuXG4gIH0pO1xuXG4gIHRlc3QoJ3JhdGUgY2FuIGJlIGluIGFsbG93ZWQgdHlwZSBob3VycycsICgpID0+IHtcbiAgICBleHBlY3QoJ3JhdGUoMSBob3VyKScpLnRvRXF1YWwoYXBwc2NhbGluZy5TY2hlZHVsZS5yYXRlKER1cmF0aW9uLmhvdXJzKDEpKVxuICAgICAgLmV4cHJlc3Npb25TdHJpbmcpO1xuXG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdleHByZXNzaW9uJywgKCkgPT4ge1xuICB0ZXN0KCd0ZXN0IHVzaW5nIGEgbGl0ZXJhbCBzY2hlZHVsZSBleHByZXNzaW9uJywgKCkgPT4ge1xuICAgIGV4cGVjdChhcHBzY2FsaW5nLlNjaGVkdWxlLmV4cHJlc3Npb24oJ2Nyb24oMCAxOCAqICogPyAqKScpLmV4cHJlc3Npb25TdHJpbmcpLnRvRXF1YWwoJ2Nyb24oMCAxOCAqICogPyAqKScpO1xuXG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdhdCcsICgpID0+IHtcbiAgdGVzdCgndGVzdCB1c2luZyBhdCB3aXRoIGEgc3BlY2lmaWMgRGF0ZScsICgpID0+IHtcbiAgICBleHBlY3QoYXBwc2NhbGluZy5TY2hlZHVsZS5hdChuZXcgRGF0ZShEYXRlLlVUQygyMDIxLCAxMCwgMjYpKSkuZXhwcmVzc2lvblN0cmluZykudG9FcXVhbCgnYXQoMjAyMS0xMS0yNlQwMDowMDowMCknKTtcbiAgfSk7XG59KTtcbiJdfQ==