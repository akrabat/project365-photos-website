"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const cloudwatch = require("../../aws-cloudwatch");
const cdk = require("../../core");
const fc = require("fast-check");
const util_1 = require("./util");
const appscaling = require("../lib");
describe('step scaling policy', () => {
    test('alarm thresholds are valid numbers', () => {
        fc.assert(fc.property((0, util_1.arbitrary_input_intervals)(), (intervals) => {
            const template = setupStepScaling(intervals);
            const lowerThreshold = template.lowerThreshold;
            const upperThreshold = template.upperThreshold;
            return reportFalse((lowerThreshold === undefined || (lowerThreshold > 0 && lowerThreshold !== Infinity))
                && (upperThreshold === undefined || (upperThreshold > 0 && upperThreshold !== Infinity)), lowerThreshold, upperThreshold);
        }));
    });
    test('generated step intervals are valid intervals', () => {
        fc.assert(fc.property((0, util_1.arbitrary_input_intervals)(), (intervals) => {
            const template = setupStepScaling(intervals);
            const steps = template.allStepsAbsolute();
            return reportFalse(steps.every(step => {
                return step.MetricIntervalLowerBound < step.MetricIntervalUpperBound;
            }), steps, 'template', JSON.stringify(template, undefined, 2));
        }));
    });
    test('generated step intervals are nonoverlapping', () => {
        fc.assert(fc.property((0, util_1.arbitrary_input_intervals)(), (intervals) => {
            const template = setupStepScaling(intervals);
            const steps = template.allStepsAbsolute();
            for (let i = 0; i < steps.length; i++) {
                const compareTo = steps.slice(i + 1);
                if (compareTo.some(x => overlaps(steps[i], x))) {
                    return reportFalse(false, steps);
                }
            }
            return true;
        }), { verbose: true });
    });
    test('all template intervals occur in input array', () => {
        fc.assert(fc.property((0, util_1.arbitrary_input_intervals)(), (intervals) => {
            const template = setupStepScaling(intervals);
            const steps = template.allStepsAbsolute();
            return steps.every(step => {
                return reportFalse(intervals.find(interval => {
                    const acceptableLowerBounds = step.MetricIntervalLowerBound === -Infinity ? [undefined, 0] : [undefined, step.MetricIntervalLowerBound];
                    // eslint-disable-next-line max-len
                    const acceptableUpperBounds = step.MetricIntervalUpperBound === Infinity ? [undefined, Infinity] : [undefined, step.MetricIntervalUpperBound];
                    return (acceptableLowerBounds.includes(interval.lower) && acceptableUpperBounds.includes(interval.upper));
                }) !== undefined, step, intervals);
            });
        }));
    });
    test('lower alarm uses lower policy', () => {
        fc.assert(fc.property((0, util_1.arbitrary_input_intervals)(), (intervals) => {
            const template = setupStepScaling(intervals);
            const alarm = template.resource(template.lowerAlarm);
            fc.pre(alarm !== undefined);
            return reportFalse(alarm.Properties.AlarmActions[0].Ref === template.lowerPolicy, alarm);
        }));
    });
    test('upper alarm uses upper policy', () => {
        fc.assert(fc.property((0, util_1.arbitrary_input_intervals)(), (intervals) => {
            const template = setupStepScaling(intervals);
            const alarm = template.resource(template.upperAlarm);
            fc.pre(alarm !== undefined);
            return reportFalse(alarm.Properties.AlarmActions[0].Ref === template.upperPolicy, alarm);
        }));
    });
    test('test step scaling on metric', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const target = (0, util_1.createScalableTarget)(stack);
        // WHEN
        target.scaleOnMetric('Tracking', {
            metric: new cloudwatch.Metric({ namespace: 'Test', metricName: 'Metric' }),
            scalingSteps: [
                { upper: 0, change: -1 },
                { lower: 100, change: +1 },
                { lower: 500, change: +5 },
            ],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApplicationAutoScaling::ScalingPolicy', {
            PolicyType: 'StepScaling',
            ScalingTargetId: {
                Ref: 'Target3191CF44',
            },
            StepScalingPolicyConfiguration: {
                AdjustmentType: 'ChangeInCapacity',
                MetricAggregationType: 'Average',
                StepAdjustments: [
                    {
                        MetricIntervalUpperBound: 0,
                        ScalingAdjustment: -1,
                    },
                ],
            },
        });
    });
    test('step scaling from percentile metric', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const target = (0, util_1.createScalableTarget)(stack);
        // WHEN
        target.scaleOnMetric('Tracking', {
            metric: new cloudwatch.Metric({ namespace: 'Test', metricName: 'Metric', statistic: 'p99' }),
            scalingSteps: [
                { upper: 0, change: -1 },
                { lower: 100, change: +1 },
                { lower: 500, change: +5 },
            ],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApplicationAutoScaling::ScalingPolicy', {
            PolicyType: 'StepScaling',
            StepScalingPolicyConfiguration: {
                AdjustmentType: 'ChangeInCapacity',
                MetricAggregationType: 'Average',
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Alarm', {
            ComparisonOperator: 'GreaterThanOrEqualToThreshold',
            EvaluationPeriods: 1,
            AlarmActions: [
                { Ref: 'TargetTrackingUpperPolicy72CEFA77' },
            ],
            ExtendedStatistic: 'p99',
            MetricName: 'Metric',
            Namespace: 'Test',
            Threshold: 100,
        });
    });
    test('step scaling with evaluation period configured', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const target = (0, util_1.createScalableTarget)(stack);
        // WHEN
        target.scaleOnMetric('Tracking', {
            metric: new cloudwatch.Metric({ namespace: 'Test', metricName: 'Metric', statistic: 'p99' }),
            scalingSteps: [
                { upper: 0, change: -1 },
                { lower: 100, change: +1 },
                { lower: 500, change: +5 },
            ],
            evaluationPeriods: 10,
            metricAggregationType: appscaling.MetricAggregationType.MAXIMUM,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApplicationAutoScaling::ScalingPolicy', {
            PolicyType: 'StepScaling',
            StepScalingPolicyConfiguration: {
                AdjustmentType: 'ChangeInCapacity',
                MetricAggregationType: 'Maximum',
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Alarm', {
            ComparisonOperator: 'GreaterThanOrEqualToThreshold',
            EvaluationPeriods: 10,
            ExtendedStatistic: 'p99',
            MetricName: 'Metric',
            Namespace: 'Test',
            Threshold: 100,
        });
    });
    test('step scaling with evaluation period & data points to alarm configured', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const target = (0, util_1.createScalableTarget)(stack);
        // WHEN
        target.scaleOnMetric('Tracking', {
            metric: new cloudwatch.Metric({ namespace: 'Test', metricName: 'Metric', statistic: 'p99' }),
            scalingSteps: [
                { upper: 0, change: -1 },
                { lower: 100, change: +1 },
                { lower: 500, change: +5 },
            ],
            evaluationPeriods: 10,
            datapointsToAlarm: 6,
            metricAggregationType: appscaling.MetricAggregationType.MAXIMUM,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApplicationAutoScaling::ScalingPolicy', {
            PolicyType: 'StepScaling',
            StepScalingPolicyConfiguration: {
                AdjustmentType: 'ChangeInCapacity',
                MetricAggregationType: 'Maximum',
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Alarm', {
            ComparisonOperator: 'GreaterThanOrEqualToThreshold',
            EvaluationPeriods: 10,
            DatapointsToAlarm: 6,
            ExtendedStatistic: 'p99',
            MetricName: 'Metric',
            Namespace: 'Test',
            Threshold: 100,
        });
    });
    test('step scaling with invalid datapointsToAlarm throws error', () => {
        const stack = new cdk.Stack();
        const target = (0, util_1.createScalableTarget)(stack);
        expect(() => {
            target.scaleOnMetric('Tracking', {
                metric: new cloudwatch.Metric({ namespace: 'Test', metricName: 'Metric', statistic: 'p99' }),
                scalingSteps: [
                    { upper: 0, change: -1 },
                    { lower: 100, change: +1 },
                    { lower: 500, change: +5 },
                ],
                evaluationPeriods: 10,
                datapointsToAlarm: 0,
                metricAggregationType: appscaling.MetricAggregationType.MAXIMUM,
            });
        }).toThrow('datapointsToAlarm cannot be less than 1, got: 0');
    });
});
/**
 * Synthesize the given step scaling setup to a template
 */
function setupStepScaling(intervals) {
    const stack = new cdk.Stack();
    const target = (0, util_1.createScalableTarget)(stack);
    target.scaleOnMetric('ScaleInterval', {
        metric: new cloudwatch.Metric({ namespace: 'Test', metricName: 'Success' }),
        scalingSteps: intervals,
    });
    return new ScalingStackTemplate(assertions_1.Template.fromStack(stack).toJSON());
}
class ScalingStackTemplate {
    constructor(template) {
        this.template = template;
        this.lowerPolicy = 'TargetScaleIntervalLowerPolicy6F26D597';
        this.lowerAlarm = 'TargetScaleIntervalLowerAlarm4B5CE869';
        this.upperPolicy = 'TargetScaleIntervalUpperPolicy7C751132';
        this.upperAlarm = 'TargetScaleIntervalUpperAlarm69FD1BBB';
    }
    get lowerThreshold() {
        return this.threshold(this.lowerAlarm);
    }
    get upperThreshold() {
        return this.threshold(this.upperAlarm);
    }
    get lowerSteps() {
        return this.steps(this.lowerPolicy);
    }
    get upperSteps() {
        return this.steps(this.upperPolicy);
    }
    allStepsAbsolute() {
        const ret = new Array();
        const lowerThreshold = this.lowerThreshold;
        if (lowerThreshold !== undefined) {
            ret.push(...this.lowerSteps.map(x => makeAbsolute(lowerThreshold, x)));
        }
        const upperThreshold = this.upperThreshold;
        if (upperThreshold !== undefined) {
            ret.push(...this.upperSteps.map(x => makeAbsolute(upperThreshold, x)));
        }
        return ret;
    }
    resource(id) {
        return this.template.Resources[id];
    }
    threshold(id) {
        return apply(this.resource(id), x => x.Properties.Threshold);
    }
    steps(id) {
        return apply(this.resource(id), x => x.Properties.StepScalingPolicyConfiguration.StepAdjustments);
    }
}
function makeAbsolute(threshold, step) {
    return concrete({
        MetricIntervalLowerBound: apply(step.MetricIntervalLowerBound, x => x + threshold),
        MetricIntervalUpperBound: apply(step.MetricIntervalUpperBound, x => x + threshold),
        ScalingAdjustment: step.ScalingAdjustment,
    });
}
function overlaps(a, b) {
    return (a.MetricIntervalLowerBound < b.MetricIntervalUpperBound
        && a.MetricIntervalUpperBound > b.MetricIntervalLowerBound);
}
function concrete(step) {
    return {
        MetricIntervalLowerBound: ifUndefined(step.MetricIntervalLowerBound, -Infinity),
        MetricIntervalUpperBound: ifUndefined(step.MetricIntervalUpperBound, Infinity),
        ScalingAdjustment: step.ScalingAdjustment,
    };
}
function ifUndefined(x, def) {
    return x !== undefined ? x : def;
}
function apply(x, f) {
    if (x === undefined) {
        return undefined;
    }
    return f(x);
}
/**
 * Helper function to print variables in case of a failing property check
 */
function reportFalse(cond, ...repr) {
    if (!cond) {
        // eslint-disable-next-line no-console
        console.error('PROPERTY FAILS ON:', ...repr);
    }
    return cond;
}
//# sourceMappingURL=data:application/json;base64,