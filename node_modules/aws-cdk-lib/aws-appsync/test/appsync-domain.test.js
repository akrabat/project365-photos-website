"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const assertions_1 = require("../../assertions");
const aws_certificatemanager_1 = require("../../aws-certificatemanager");
const cdk = require("../../core");
const appsync = require("../lib");
// GLOBAL GIVEN
let stack;
let certificate;
beforeEach(() => {
    stack = new cdk.Stack();
    certificate = new aws_certificatemanager_1.Certificate(stack, 'certificate', {
        domainName: 'aws.amazon.com',
    });
});
describe('Tests of AppSync Domain Name', () => {
    test('DomainNameAssociation depends on DomainName construct', () => {
        new appsync.GraphqlApi(stack, 'baseApi', {
            name: 'api',
            schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'appsync.test.graphql')),
            domainName: {
                certificate,
                domainName: 'aws.amazon.com',
            },
        });
        const domainName = assertions_1.Template.fromStack(stack).findResources('AWS::AppSync::DomainName');
        assertions_1.Template.fromStack(stack).hasResource('AWS::AppSync::DomainNameApiAssociation', {
            DependsOn: [Object.keys(domainName)[0]],
        });
    });
    test('appSyncDomainName exposes the domain of the associated AWS::AppSync::DomainName', () => {
        const api = new appsync.GraphqlApi(stack, 'baseApi', {
            name: 'api',
            schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'appsync.test.graphql')),
            domainName: {
                certificate,
                domainName: 'aws.amazon.com',
            },
        });
        expect(stack.resolve(api.appSyncDomainName)).toEqual({ 'Fn::GetAtt': ['baseApiDomainName52E3D63D', 'AppSyncDomainName'] });
    });
    test('appSyncDomainName should throw an error when no custom domain has been configured', () => {
        const api = new appsync.GraphqlApi(stack, 'baseApi', {
            name: 'api',
            schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'appsync.test.graphql')),
        });
        expect(() => api.appSyncDomainName).toThrow('Cannot retrieve the appSyncDomainName without a domainName configuration');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwc3luYy1kb21haW4udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcHN5bmMtZG9tYWluLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFDN0IsaURBQTRDO0FBRTVDLHlFQUEyRDtBQUMzRCxrQ0FBa0M7QUFDbEMsa0NBQWtDO0FBRWxDLGVBQWU7QUFDZixJQUFJLEtBQWdCLENBQUM7QUFDckIsSUFBSSxXQUE0QixDQUFDO0FBRWpDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDZCxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsV0FBVyxHQUFHLElBQUksb0NBQVcsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO1FBQ2xELFVBQVUsRUFBRSxnQkFBZ0I7S0FDN0IsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO0lBQzVDLElBQUksQ0FBQyx1REFBdUQsRUFBRSxHQUFHLEVBQUU7UUFDakUsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7WUFDdkMsSUFBSSxFQUFFLEtBQUs7WUFDWCxNQUFNLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHNCQUFzQixDQUFDLENBQzdDO1lBQ0QsVUFBVSxFQUFFO2dCQUNWLFdBQVc7Z0JBQ1gsVUFBVSxFQUFFLGdCQUFnQjthQUM3QjtTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sVUFBVSxHQUFHLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLGFBQWEsQ0FDeEQsMEJBQTBCLENBQzNCLENBQUM7UUFFRixxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQ25DLHdDQUF3QyxFQUN4QztZQUNFLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeEMsQ0FDRixDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsaUZBQWlGLEVBQUUsR0FBRyxFQUFFO1FBQzNGLE1BQU0sR0FBRyxHQUFHLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQ25ELElBQUksRUFBRSxLQUFLO1lBQ1gsTUFBTSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxzQkFBc0IsQ0FBQyxDQUM3QztZQUNELFVBQVUsRUFBRTtnQkFDVixXQUFXO2dCQUNYLFVBQVUsRUFBRSxnQkFBZ0I7YUFDN0I7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFlBQVksRUFBRSxDQUFDLDJCQUEyQixFQUFFLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdILENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG1GQUFtRixFQUFFLEdBQUcsRUFBRTtRQUM3RixNQUFNLEdBQUcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUNuRCxJQUFJLEVBQUUsS0FBSztZQUNYLE1BQU0sRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsQ0FDN0M7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLDBFQUEwRSxDQUFDLENBQUM7SUFDMUgsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0ICogYXMgYWNtIGZyb20gJy4uLy4uL2F3cy1jZXJ0aWZpY2F0ZW1hbmFnZXInO1xuaW1wb3J0IHsgQ2VydGlmaWNhdGUgfSBmcm9tICcuLi8uLi9hd3MtY2VydGlmaWNhdGVtYW5hZ2VyJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIGFwcHN5bmMgZnJvbSAnLi4vbGliJztcblxuLy8gR0xPQkFMIEdJVkVOXG5sZXQgc3RhY2s6IGNkay5TdGFjaztcbmxldCBjZXJ0aWZpY2F0ZTogYWNtLkNlcnRpZmljYXRlO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNlcnRpZmljYXRlID0gbmV3IENlcnRpZmljYXRlKHN0YWNrLCAnY2VydGlmaWNhdGUnLCB7XG4gICAgZG9tYWluTmFtZTogJ2F3cy5hbWF6b24uY29tJyxcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ1Rlc3RzIG9mIEFwcFN5bmMgRG9tYWluIE5hbWUnLCAoKSA9PiB7XG4gIHRlc3QoJ0RvbWFpbk5hbWVBc3NvY2lhdGlvbiBkZXBlbmRzIG9uIERvbWFpbk5hbWUgY29uc3RydWN0JywgKCkgPT4ge1xuICAgIG5ldyBhcHBzeW5jLkdyYXBocWxBcGkoc3RhY2ssICdiYXNlQXBpJywge1xuICAgICAgbmFtZTogJ2FwaScsXG4gICAgICBzY2hlbWE6IGFwcHN5bmMuU2NoZW1hRmlsZS5mcm9tQXNzZXQoXG4gICAgICAgIHBhdGguam9pbihfX2Rpcm5hbWUsICdhcHBzeW5jLnRlc3QuZ3JhcGhxbCcpLFxuICAgICAgKSxcbiAgICAgIGRvbWFpbk5hbWU6IHtcbiAgICAgICAgY2VydGlmaWNhdGUsXG4gICAgICAgIGRvbWFpbk5hbWU6ICdhd3MuYW1hem9uLmNvbScsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgY29uc3QgZG9tYWluTmFtZSA9IFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuZmluZFJlc291cmNlcyhcbiAgICAgICdBV1M6OkFwcFN5bmM6OkRvbWFpbk5hbWUnLFxuICAgICk7XG5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlKFxuICAgICAgJ0FXUzo6QXBwU3luYzo6RG9tYWluTmFtZUFwaUFzc29jaWF0aW9uJyxcbiAgICAgIHtcbiAgICAgICAgRGVwZW5kc09uOiBbT2JqZWN0LmtleXMoZG9tYWluTmFtZSlbMF1dLFxuICAgICAgfSxcbiAgICApO1xuICB9KTtcblxuICB0ZXN0KCdhcHBTeW5jRG9tYWluTmFtZSBleHBvc2VzIHRoZSBkb21haW4gb2YgdGhlIGFzc29jaWF0ZWQgQVdTOjpBcHBTeW5jOjpEb21haW5OYW1lJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwaSA9IG5ldyBhcHBzeW5jLkdyYXBocWxBcGkoc3RhY2ssICdiYXNlQXBpJywge1xuICAgICAgbmFtZTogJ2FwaScsXG4gICAgICBzY2hlbWE6IGFwcHN5bmMuU2NoZW1hRmlsZS5mcm9tQXNzZXQoXG4gICAgICAgIHBhdGguam9pbihfX2Rpcm5hbWUsICdhcHBzeW5jLnRlc3QuZ3JhcGhxbCcpLFxuICAgICAgKSxcbiAgICAgIGRvbWFpbk5hbWU6IHtcbiAgICAgICAgY2VydGlmaWNhdGUsXG4gICAgICAgIGRvbWFpbk5hbWU6ICdhd3MuYW1hem9uLmNvbScsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KHN0YWNrLnJlc29sdmUoYXBpLmFwcFN5bmNEb21haW5OYW1lKSkudG9FcXVhbCh7ICdGbjo6R2V0QXR0JzogWydiYXNlQXBpRG9tYWluTmFtZTUyRTNENjNEJywgJ0FwcFN5bmNEb21haW5OYW1lJ10gfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2FwcFN5bmNEb21haW5OYW1lIHNob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIG5vIGN1c3RvbSBkb21haW4gaGFzIGJlZW4gY29uZmlndXJlZCcsICgpID0+IHtcbiAgICBjb25zdCBhcGkgPSBuZXcgYXBwc3luYy5HcmFwaHFsQXBpKHN0YWNrLCAnYmFzZUFwaScsIHtcbiAgICAgIG5hbWU6ICdhcGknLFxuICAgICAgc2NoZW1hOiBhcHBzeW5jLlNjaGVtYUZpbGUuZnJvbUFzc2V0KFxuICAgICAgICBwYXRoLmpvaW4oX19kaXJuYW1lLCAnYXBwc3luYy50ZXN0LmdyYXBocWwnKSxcbiAgICAgICksXG4gICAgfSk7XG5cbiAgICBleHBlY3QoKCkgPT4gYXBpLmFwcFN5bmNEb21haW5OYW1lKS50b1Rocm93KCdDYW5ub3QgcmV0cmlldmUgdGhlIGFwcFN5bmNEb21haW5OYW1lIHdpdGhvdXQgYSBkb21haW5OYW1lIGNvbmZpZ3VyYXRpb24nKTtcbiAgfSk7XG59KTtcbiJdfQ==