"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const assertions_1 = require("../../assertions");
const es = require("../../aws-elasticsearch");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const cdk = require("../../core");
const appsync = require("../lib");
// GLOBAL GIVEN
let stack;
let api;
let domain;
(0, cdk_build_tools_1.describeDeprecated)('Appsync Elasticsearch integration', () => {
    beforeEach(() => {
        stack = new cdk.Stack();
        api = new appsync.GraphqlApi(stack, 'baseApi', {
            name: 'api',
            schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'appsync.test.graphql')),
        });
        domain = new es.Domain(stack, 'EsDomain', {
            version: es.ElasticsearchVersion.V7_10,
        });
    });
    describe('Elasticsearch Data Source Configuration', () => {
        test('Elasticsearch configure properly', () => {
            // WHEN
            api.addElasticsearchDataSource('ds', domain);
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                PolicyDocument: {
                    Version: '2012-10-17',
                    Statement: [{
                            Action: [
                                'es:ESHttpGet',
                                'es:ESHttpHead',
                                'es:ESHttpDelete',
                                'es:ESHttpPost',
                                'es:ESHttpPut',
                                'es:ESHttpPatch',
                            ],
                            Effect: 'Allow',
                            Resource: [{
                                    'Fn::GetAtt': ['EsDomain1213C634', 'Arn'],
                                },
                                {
                                    'Fn::Join': ['', [{
                                                'Fn::GetAtt': ['EsDomain1213C634', 'Arn'],
                                            }, '/*']],
                                }],
                        }],
                },
            });
        });
        test('Elastic search configuration contains fully qualified url', () => {
            // WHEN
            api.addElasticsearchDataSource('ds', domain);
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::DataSource', {
                ElasticsearchConfig: {
                    Endpoint: {
                        'Fn::Join': ['', ['https://', {
                                    'Fn::GetAtt': ['EsDomain1213C634', 'DomainEndpoint'],
                                }]],
                    },
                },
            });
        });
        test('default configuration produces name identical to the id', () => {
            // WHEN
            api.addElasticsearchDataSource('ds', domain);
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::DataSource', {
                Type: 'AMAZON_ELASTICSEARCH',
                Name: 'ds',
            });
        });
        test('appsync configures name correctly', () => {
            // WHEN
            api.addElasticsearchDataSource('ds', domain, {
                name: 'custom',
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::DataSource', {
                Type: 'AMAZON_ELASTICSEARCH',
                Name: 'custom',
            });
        });
        test('appsync configures name and description correctly', () => {
            // WHEN
            api.addElasticsearchDataSource('ds', domain, {
                name: 'custom',
                description: 'custom description',
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::DataSource', {
                Type: 'AMAZON_ELASTICSEARCH',
                Name: 'custom',
                Description: 'custom description',
            });
        });
        test('appsync errors when creating multiple elasticsearch data sources with no configuration', () => {
            // WHEN
            const when = () => {
                api.addElasticsearchDataSource('ds', domain);
                api.addElasticsearchDataSource('ds', domain);
            };
            // THEN
            expect(when).toThrow('There is already a Construct with name \'ds\' in GraphqlApi [baseApi]');
        });
    });
    describe('adding elasticsearch data source from imported api', () => {
        test('imported api can add ElasticsearchDataSource from id', () => {
            // WHEN
            const importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(stack, 'importedApi', {
                graphqlApiId: api.apiId,
            });
            importedApi.addElasticsearchDataSource('ds', domain);
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::DataSource', {
                Type: 'AMAZON_ELASTICSEARCH',
                ApiId: { 'Fn::GetAtt': ['baseApiCDA4D43A', 'ApiId'] },
            });
        });
        test('imported api can add ElasticsearchDataSource from attributes', () => {
            // WHEN
            const importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(stack, 'importedApi', {
                graphqlApiId: api.apiId,
                graphqlApiArn: api.arn,
            });
            importedApi.addElasticsearchDataSource('ds', domain);
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::DataSource', {
                Type: 'AMAZON_ELASTICSEARCH',
                ApiId: { 'Fn::GetAtt': ['baseApiCDA4D43A', 'ApiId'] },
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwc3luYy1lbGFzdGljc2VhcmNoLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHBzeW5jLWVsYXN0aWNzZWFyY2gudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3QixpREFBNEM7QUFDNUMsOENBQThDO0FBQzlDLDhEQUE4RDtBQUM5RCxrQ0FBa0M7QUFDbEMsa0NBQWtDO0FBRWxDLGVBQWU7QUFDZixJQUFJLEtBQWdCLENBQUM7QUFDckIsSUFBSSxHQUF1QixDQUFDO0FBQzVCLElBQUksTUFBaUIsQ0FBQztBQUV0QixJQUFBLG9DQUFrQixFQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtJQUMzRCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3hCLEdBQUcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUM3QyxJQUFJLEVBQUUsS0FBSztZQUNYLE1BQU0sRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1NBQ25GLENBQUMsQ0FBQztRQUNILE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtZQUN4QyxPQUFPLEVBQUUsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEtBQUs7U0FDdkMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMseUNBQXlDLEVBQUUsR0FBRyxFQUFFO1FBQ3ZELElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7WUFDNUMsT0FBTztZQUNQLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFN0MsT0FBTztZQUNQLHFCQUFRLENBQUMs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QUMsMEJBQTBCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRXJELE9BQU87WUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQywwQkFBMEIsRUFBRTtnQkFDMUUsSUFBSSxFQUFFLHNCQUFzQjtnQkFDNUIsS0FBSyxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLEVBQUU7YUFDdEQsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vYXNzZXJ0aW9ucyc7XG5pbXBvcnQgKiBhcyBlcyBmcm9tICcuLi8uLi9hd3MtZWxhc3RpY3NlYXJjaCc7XG5pbXBvcnQgeyBkZXNjcmliZURlcHJlY2F0ZWQgfSBmcm9tICdAYXdzLWNkay9jZGstYnVpbGQtdG9vbHMnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgYXBwc3luYyBmcm9tICcuLi9saWInO1xuXG4vLyBHTE9CQUwgR0lWRU5cbmxldCBzdGFjazogY2RrLlN0YWNrO1xubGV0IGFwaTogYXBwc3luYy5HcmFwaHFsQXBpO1xubGV0IGRvbWFpbjogZXMuRG9tYWluO1xuXG5kZXNjcmliZURlcHJlY2F0ZWQoJ0FwcHN5bmMgRWxhc3RpY3NlYXJjaCBpbnRlZ3JhdGlvbicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgYXBpID0gbmV3IGFwcHN5bmMuR3JhcGhxbEFwaShzdGFjaywgJ2Jhc2VBcGknLCB7XG4gICAgICBuYW1lOiAnYXBpJyxcbiAgICAgIHNjaGVtYTogYXBwc3luYy5TY2hlbWFGaWxlLmZyb21Bc3NldChwYXRoLmpvaW4oX19kaXJuYW1lLCAnYXBwc3luYy50ZXN0LmdyYXBocWwnKSksXG4gICAgfSk7XG4gICAgZG9tYWluID0gbmV3IGVzLkRvbWFpbihzdGFjaywgJ0VzRG9tYWluJywge1xuICAgICAgdmVyc2lvbjogZXMuRWxhc3RpY3NlYXJjaFZlcnNpb24uVjdfMTAsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFbGFzdGljc2VhcmNoIERhdGEgU291cmNlIENvbmZpZ3VyYXRpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgnRWxhc3RpY3NlYXJjaCBjb25maWd1cmUgcHJvcGVybHknLCAoKSA9PiB7XG4gICAgICAvLyBXSEVOXG4gICAgICBhcGkuYWRkRWxhc3RpY3NlYXJjaERhdGFTb3VyY2UoJ2RzJywgZG9tYWluKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6SUFNOjpQb2xpY3knLCB7XG4gICAgICAgIFBvbGljeURvY3VtZW50OiB7XG4gICAgICAgICAgVmVyc2lvbjogJzIwMTItMTAtMTcnLFxuICAgICAgICAgIFN0YXRlbWVudDogW3tcbiAgICAgICAgICAgIEFjdGlvbjogW1xuICAgICAgICAgICAgICAnZXM6RVNIdHRwR2V0JyxcbiAgICAgICAgICAgICAgJ2VzOkVTSHR0cEhlYWQnLFxuICAgICAgICAgICAgICAnZXM6RVNIdHRwRGVsZXRlJyxcbiAgICAgICAgICAgICAgJ2VzOkVTSHR0cFBvc3QnLFxuICAgICAgICAgICAgICAnZXM6RVNIdHRwUHV0JyxcbiAgICAgICAgICAgICAgJ2VzOkVTSHR0cFBhdGNoJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBFZmZlY3Q6ICdBbGxvdycsXG4gICAgICAgICAgICBSZXNvdXJjZTogW3tcbiAgICAgICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbJ0VzRG9tYWluMTIxM0M2MzQnLCAnQXJuJ10sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFt7XG4gICAgICAgICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbJ0VzRG9tYWluMTIxM0M2MzQnLCAnQXJuJ10sXG4gICAgICAgICAgICAgIH0sICcvKiddXSxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgIH1dLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdFbGFzdGljIHNlYXJjaCBjb25maWd1cmF0aW9uIGNvbnRhaW5zIGZ1bGx5IHF1YWxpZmllZCB1cmwnLCAoKSA9PiB7XG4gICAgICAvLyBXSEVOXG4gICAgICBhcGkuYWRkRWxhc3RpY3NlYXJjaERhdGFTb3VyY2UoJ2RzJywgZG9tYWluKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6QXBwU3luYzo6RGF0YVNvdXJjZScsIHtcbiAgICAgICAgRWxhc3RpY3NlYXJjaENvbmZpZzoge1xuICAgICAgICAgIEVuZHBvaW50OiB7XG4gICAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFsnaHR0cHM6Ly8nLCB7XG4gICAgICAgICAgICAgICdGbjo6R2V0QXR0JzogWydFc0RvbWFpbjEyMTNDNjM0JywgJ0RvbWFpbkVuZHBvaW50J10sXG4gICAgICAgICAgICB9XV0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnZGVmYXVsdCBjb25maWd1cmF0aW9uIHByb2R1Y2VzIG5hbWUgaWRlbnRpY2FsIHRvIHRoZSBpZCcsICgpID0+IHtcbiAgICAgIC8vIFdIRU5cbiAgICAgIGFwaS5hZGRFbGFzdGljc2VhcmNoRGF0YVNvdXJjZSgnZHMnLCBkb21haW4pO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpBcHBTeW5jOjpEYXRhU291cmNlJywge1xuICAgICAgICBUeXBlOiAnQU1BWk9OX0VMQVNUSUNTRUFSQ0gnLFxuICAgICAgICBOYW1lOiAnZHMnLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdhcHBzeW5jIGNvbmZpZ3VyZXMgbmFtZSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAvLyBXSEVOXG4gICAgICBhcGkuYWRkRWxhc3RpY3NlYXJjaERhdGFTb3VyY2UoJ2RzJywgZG9tYWluLCB7XG4gICAgICAgIG5hbWU6ICdjdXN0b20nLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkFwcFN5bmM6OkRhdGFTb3VyY2UnLCB7XG4gICAgICAgIFR5cGU6ICdBTUFaT05fRUxBU1RJQ1NFQVJDSCcsXG4gICAgICAgIE5hbWU6ICdjdXN0b20nLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdhcHBzeW5jIGNvbmZpZ3VyZXMgbmFtZSBhbmQgZGVzY3JpcHRpb24gY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgLy8gV0hFTlxuICAgICAgYXBpLmFkZEVsYXN0aWNzZWFyY2hEYXRhU291cmNlKCdkcycsIGRvbWFpbiwge1xuICAgICAgICBuYW1lOiAnY3VzdG9tJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdjdXN0b20gZGVzY3JpcHRpb24nLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkFwcFN5bmM6OkRhdGFTb3VyY2UnLCB7XG4gICAgICAgIFR5cGU6ICdBTUFaT05fRUxBU1RJQ1NFQVJDSCcsXG4gICAgICAgIE5hbWU6ICdjdXN0b20nLFxuICAgICAgICBEZXNjcmlwdGlvbjogJ2N1c3RvbSBkZXNjcmlwdGlvbicsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2FwcHN5bmMgZXJyb3JzIHdoZW4gY3JlYXRpbmcgbXVsdGlwbGUgZWxhc3RpY3NlYXJjaCBkYXRhIHNvdXJjZXMgd2l0aCBubyBjb25maWd1cmF0aW9uJywgKCkgPT4ge1xuICAgICAgLy8gV0hFTlxuICAgICAgY29uc3Qgd2hlbiA9ICgpID0+IHtcbiAgICAgICAgYXBpLmFkZEVsYXN0aWNzZWFyY2hEYXRhU291cmNlKCdkcycsIGRvbWFpbik7XG4gICAgICAgIGFwaS5hZGRFbGFzdGljc2VhcmNoRGF0YVNvdXJjZSgnZHMnLCBkb21haW4pO1xuICAgICAgfTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KHdoZW4pLnRvVGhyb3coJ1RoZXJlIGlzIGFscmVhZHkgYSBDb25zdHJ1Y3Qgd2l0aCBuYW1lIFxcJ2RzXFwnIGluIEdyYXBocWxBcGkgW2Jhc2VBcGldJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdhZGRpbmcgZWxhc3RpY3NlYXJjaCBkYXRhIHNvdXJjZSBmcm9tIGltcG9ydGVkIGFwaScsICgpID0+IHtcbiAgICB0ZXN0KCdpbXBvcnRlZCBhcGkgY2FuIGFkZCBFbGFzdGljc2VhcmNoRGF0YVNvdXJjZSBmcm9tIGlkJywgKCkgPT4ge1xuICAgICAgLy8gV0hFTlxuICAgICAgY29uc3QgaW1wb3J0ZWRBcGkgPSBhcHBzeW5jLkdyYXBocWxBcGkuZnJvbUdyYXBocWxBcGlBdHRyaWJ1dGVzKHN0YWNrLCAnaW1wb3J0ZWRBcGknLCB7XG4gICAgICAgIGdyYXBocWxBcGlJZDogYXBpLmFwaUlkLFxuICAgICAgfSk7XG4gICAgICBpbXBvcnRlZEFwaS5hZGRFbGFzdGljc2VhcmNoRGF0YVNvdXJjZSgnZHMnLCBkb21haW4pO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpBcHBTeW5jOjpEYXRhU291cmNlJywge1xuICAgICAgICBUeXBlOiAnQU1BWk9OX0VMQVNUSUNTRUFSQ0gnLFxuICAgICAgICBBcGlJZDogeyAnRm46OkdldEF0dCc6IFsnYmFzZUFwaUNEQTRENDNBJywgJ0FwaUlkJ10gfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnaW1wb3J0ZWQgYXBpIGNhbiBhZGQgRWxhc3RpY3NlYXJjaERhdGFTb3VyY2UgZnJvbSBhdHRyaWJ1dGVzJywgKCkgPT4ge1xuICAgICAgLy8gV0hFTlxuICAgICAgY29uc3QgaW1wb3J0ZWRBcGkgPSBhcHBzeW5jLkdyYXBocWxBcGkuZnJvbUdyYXBocWxBcGlBdHRyaWJ1dGVzKHN0YWNrLCAnaW1wb3J0ZWRBcGknLCB7XG4gICAgICAgIGdyYXBocWxBcGlJZDogYXBpLmFwaUlkLFxuICAgICAgICBncmFwaHFsQXBpQXJuOiBhcGkuYXJuLFxuICAgICAgfSk7XG4gICAgICBpbXBvcnRlZEFwaS5hZGRFbGFzdGljc2VhcmNoRGF0YVNvdXJjZSgnZHMnLCBkb21haW4pO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpBcHBTeW5jOjpEYXRhU291cmNlJywge1xuICAgICAgICBUeXBlOiAnQU1BWk9OX0VMQVNUSUNTRUFSQ0gnLFxuICAgICAgICBBcGlJZDogeyAnRm46OkdldEF0dCc6IFsnYmFzZUFwaUNEQTRENDNBJywgJ0FwaUlkJ10gfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdfQ==