"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const assertions_1 = require("../../assertions");
const lambda = require("../../aws-lambda");
const cdk = require("../../core");
const appsync = require("../lib");
let stack;
let api;
beforeEach(() => {
    // GIVEN
    stack = new cdk.Stack();
    api = new appsync.GraphqlApi(stack, 'api', {
        name: 'api',
        schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'appsync.lambda.graphql')),
    });
});
describe('Lambda Mapping Templates', () => {
    // GIVEN
    let func;
    const invokeMT = '{"version": "2017-02-28", "operation": "Invoke", "payload": $util.toJson($ctx)}';
    const batchMT = '{"version": "2017-02-28", "operation": "BatchInvoke", "payload": $util.toJson($ctx)}';
    beforeEach(() => {
        func = new lambda.Function(stack, 'func', {
            code: lambda.Code.fromAsset(path.join(__dirname, 'verify/lambda-tutorial')),
            handler: 'lambda-tutorial.handler',
            runtime: lambda.Runtime.NODEJS_14_X,
        });
    });
    test('Lambda request default operation is "Invoke"', () => {
        // WHEN
        const lambdaDS = api.addLambdaDataSource('LambdaDS', func);
        lambdaDS.createResolver('QueryAllPosts', {
            typeName: 'Query',
            fieldName: 'allPosts',
            requestMappingTemplate: appsync.MappingTemplate.lambdaRequest(),
            responseMappingTemplate: appsync.MappingTemplate.lambdaResult(),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::Resolver', {
            FieldName: 'allPosts',
            RequestMappingTemplate: invokeMT,
        });
    });
    test('Lambda request supports "BatchInvoke" through custom operation', () => {
        // WHEN
        const lambdaDS = api.addLambdaDataSource('LambdaDS', func);
        lambdaDS.createResolver('PostRelatedPosts', {
            typeName: 'Post',
            fieldName: 'relatedPosts',
            requestMappingTemplate: appsync.MappingTemplate.lambdaRequest('$util.toJson($ctx)', 'BatchInvoke'),
            responseMappingTemplate: appsync.MappingTemplate.lambdaResult(),
            maxBatchSize: 10,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::Resolver', {
            FieldName: 'relatedPosts',
            RequestMappingTemplate: batchMT,
            MaxBatchSize: 10,
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwc3luYy1tYXBwaW5nLXRlbXBsYXRlLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHBzeW5jLW1hcHBpbmctdGVtcGxhdGUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3QixpREFBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLGtDQUFrQztBQUNsQyxrQ0FBa0M7QUFFbEMsSUFBSSxLQUFnQixDQUFDO0FBQ3JCLElBQUksR0FBdUIsQ0FBQztBQUU1QixVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsUUFBUTtJQUNSLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN4QixHQUFHLEdBQUcsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDekMsSUFBSSxFQUFFLEtBQUs7UUFDWCxNQUFNLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztLQUNyRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7SUFDeEMsUUFBUTtJQUNSLElBQUksSUFBcUIsQ0FBQztJQUMxQixNQUFNLFFBQVEsR0FBRyxpRkFBaUYsQ0FBQztJQUNuRyxNQUFNLE9BQU8sR0FBRyxzRkFBc0YsQ0FBQztJQUV2RyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsSUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO1lBQ3hDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1lBQzNFLE9BQU8sRUFBRSx5QkFBeUI7WUFDbEMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztTQUNwQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw4Q0FBOEMsRUFBRSxHQUFHLEVBQUU7UUFDeEQsT0FBTztRQUNQLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFM0QsUUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUU7WUFDdkMsUUFBUSxFQUFFLE9BQU87WUFDakIsU0FBUyxFQUFFLFVBQVU7WUFDckIsc0JBQXNCLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUU7WUFDL0QsdUJBQXVCLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUU7U0FDaEUsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLHdCQUF3QixFQUFFO1lBQ3hFLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLHNCQUFzQixFQUFFLFFBQVE7U0FDakMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsZ0VBQWdFLEVBQUUsR0FBRyxFQUFFO1FBQzFFLE9BQU87UUFDUCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsbUJBQW1CLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTNELFFBQVEsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLEVBQUU7WUFDMUMsUUFBUSxFQUFFLE1BQU07WUFDaEIsU0FBUyxFQUFFLGNBQWM7WUFDekIsc0JBQXNCLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLEVBQUUsYUFBYSxDQUFDO1lBQ2xHLHVCQUF1QixFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFO1lBQy9ELFlBQVksRUFBRSxFQUFFO1NBQ2pCLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyx3QkFBd0IsRUFBRTtZQUN4RSxTQUFTLEVBQUUsY0FBYztZQUN6QixzQkFBc0IsRUFBRSxPQUFPO1lBQy9CLFlBQVksRUFBRSxFQUFFO1NBQ2pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICcuLi8uLi9hd3MtbGFtYmRhJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIGFwcHN5bmMgZnJvbSAnLi4vbGliJztcblxubGV0IHN0YWNrOiBjZGsuU3RhY2s7XG5sZXQgYXBpOiBhcHBzeW5jLkdyYXBocWxBcGk7XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICAvLyBHSVZFTlxuICBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgYXBpID0gbmV3IGFwcHN5bmMuR3JhcGhxbEFwaShzdGFjaywgJ2FwaScsIHtcbiAgICBuYW1lOiAnYXBpJyxcbiAgICBzY2hlbWE6IGFwcHN5bmMuU2NoZW1hRmlsZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJ2FwcHN5bmMubGFtYmRhLmdyYXBocWwnKSksXG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdMYW1iZGEgTWFwcGluZyBUZW1wbGF0ZXMnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGxldCBmdW5jOiBsYW1iZGEuRnVuY3Rpb247XG4gIGNvbnN0IGludm9rZU1UID0gJ3tcInZlcnNpb25cIjogXCIyMDE3LTAyLTI4XCIsIFwib3BlcmF0aW9uXCI6IFwiSW52b2tlXCIsIFwicGF5bG9hZFwiOiAkdXRpbC50b0pzb24oJGN0eCl9JztcbiAgY29uc3QgYmF0Y2hNVCA9ICd7XCJ2ZXJzaW9uXCI6IFwiMjAxNy0wMi0yOFwiLCBcIm9wZXJhdGlvblwiOiBcIkJhdGNoSW52b2tlXCIsIFwicGF5bG9hZFwiOiAkdXRpbC50b0pzb24oJGN0eCl9JztcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBmdW5jID0gbmV3IGxhbWJkYS5GdW5jdGlvbihzdGFjaywgJ2Z1bmMnLCB7XG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJ3ZlcmlmeS9sYW1iZGEtdHV0b3JpYWwnKSksXG4gICAgICBoYW5kbGVyOiAnbGFtYmRhLXR1dG9yaWFsLmhhbmRsZXInLFxuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE0X1gsXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ0xhbWJkYSByZXF1ZXN0IGRlZmF1bHQgb3BlcmF0aW9uIGlzIFwiSW52b2tlXCInLCAoKSA9PiB7XG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGxhbWJkYURTID0gYXBpLmFkZExhbWJkYURhdGFTb3VyY2UoJ0xhbWJkYURTJywgZnVuYyk7XG5cbiAgICBsYW1iZGFEUy5jcmVhdGVSZXNvbHZlcignUXVlcnlBbGxQb3N0cycsIHtcbiAgICAgIHR5cGVOYW1lOiAnUXVlcnknLFxuICAgICAgZmllbGROYW1lOiAnYWxsUG9zdHMnLFxuICAgICAgcmVxdWVzdE1hcHBpbmdUZW1wbGF0ZTogYXBwc3luYy5NYXBwaW5nVGVtcGxhdGUubGFtYmRhUmVxdWVzdCgpLFxuICAgICAgcmVzcG9uc2VNYXBwaW5nVGVtcGxhdGU6IGFwcHN5bmMuTWFwcGluZ1RlbXBsYXRlLmxhbWJkYVJlc3VsdCgpLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkFwcFN5bmM6OlJlc29sdmVyJywge1xuICAgICAgRmllbGROYW1lOiAnYWxsUG9zdHMnLFxuICAgICAgUmVxdWVzdE1hcHBpbmdUZW1wbGF0ZTogaW52b2tlTVQsXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ0xhbWJkYSByZXF1ZXN0IHN1cHBvcnRzIFwiQmF0Y2hJbnZva2VcIiB0aHJvdWdoIGN1c3RvbSBvcGVyYXRpb24nLCAoKSA9PiB7XG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGxhbWJkYURTID0gYXBpLmFkZExhbWJkYURhdGFTb3VyY2UoJ0xhbWJkYURTJywgZnVuYyk7XG5cbiAgICBsYW1iZGFEUy5jcmVhdGVSZXNvbHZlcignUG9zdFJlbGF0ZWRQb3N0cycsIHtcbiAgICAgIHR5cGVOYW1lOiAnUG9zdCcsXG4gICAgICBmaWVsZE5hbWU6ICdyZWxhdGVkUG9zdHMnLFxuICAgICAgcmVxdWVzdE1hcHBpbmdUZW1wbGF0ZTogYXBwc3luYy5NYXBwaW5nVGVtcGxhdGUubGFtYmRhUmVxdWVzdCgnJHV0aWwudG9Kc29uKCRjdHgpJywgJ0JhdGNoSW52b2tlJyksXG4gICAgICByZXNwb25zZU1hcHBpbmdUZW1wbGF0ZTogYXBwc3luYy5NYXBwaW5nVGVtcGxhdGUubGFtYmRhUmVzdWx0KCksXG4gICAgICBtYXhCYXRjaFNpemU6IDEwLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkFwcFN5bmM6OlJlc29sdmVyJywge1xuICAgICAgRmllbGROYW1lOiAncmVsYXRlZFBvc3RzJyxcbiAgICAgIFJlcXVlc3RNYXBwaW5nVGVtcGxhdGU6IGJhdGNoTVQsXG4gICAgICBNYXhCYXRjaFNpemU6IDEwLFxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19