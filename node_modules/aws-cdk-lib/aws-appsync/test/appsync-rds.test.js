"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const assertions_1 = require("../../assertions");
const aws_ec2_1 = require("../../aws-ec2");
const aws_rds_1 = require("../../aws-rds");
const cdk = require("../../core");
const appsync = require("../lib");
// GLOBAL GIVEN
let stack;
let api;
beforeEach(() => {
    stack = new cdk.Stack();
    api = new appsync.GraphqlApi(stack, 'baseApi', {
        name: 'api',
        schema: new appsync.SchemaFile({
            filePath: path.join(__dirname, 'appsync.test.graphql'),
        }),
    });
});
describe('Rds Data Source configuration', () => {
    // GIVEN
    let secret;
    let cluster;
    beforeEach(() => {
        const vpc = new aws_ec2_1.Vpc(stack, 'Vpc', { maxAzs: 2 });
        const securityGroup = new aws_ec2_1.SecurityGroup(stack, 'AuroraSecurityGroup', {
            vpc,
            allowAllOutbound: true,
        });
        secret = new aws_rds_1.DatabaseSecret(stack, 'AuroraSecret', {
            username: 'clusteradmin',
        });
        cluster = new aws_rds_1.ServerlessCluster(stack, 'AuroraCluster', {
            engine: aws_rds_1.DatabaseClusterEngine.auroraMysql({ version: aws_rds_1.AuroraMysqlEngineVersion.VER_2_07_1 }),
            credentials: { username: 'clusteradmin' },
            clusterIdentifier: 'db-endpoint-test',
            vpc,
            vpcSubnets: { subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS },
            securityGroups: [securityGroup],
            defaultDatabaseName: 'Animals',
        });
    });
    test('appsync creates correct policy', () => {
        // WHEN
        api.addRdsDataSource('ds', cluster, secret);
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Version: '2012-10-17',
                Statement: [{
                        Action: [
                            'secretsmanager:GetSecretValue',
                            'secretsmanager:DescribeSecret',
                        ],
                        Effect: 'Allow',
                        Resource: { Ref: 'AuroraSecret41E6E877' },
                    },
                    {
                        Action: [
                            'rds-data:BatchExecuteStatement',
                            'rds-data:BeginTransaction',
                            'rds-data:CommitTransaction',
                            'rds-data:ExecuteStatement',
                            'rds-data:RollbackTransaction',
                        ],
                        Effect: 'Allow',
                        Resource: '*',
                    },
                    {
                        Action: [
                            'secretsmanager:GetSecretValue',
                            'secretsmanager:DescribeSecret',
                        ],
                        Effect: 'Allow',
                        Resource: { Ref: 'AuroraClusterSecretAttachmentDB8032DA' },
                    },
                    {
                        Action: [
                            'rds-data:DeleteItems',
                            'rds-data:ExecuteSql',
                            'rds-data:GetItems',
                            'rds-data:InsertItems',
                            'rds-data:UpdateItems',
                        ],
                        Effect: 'Allow',
                        Resource: [{
                                'Fn::Join': ['', ['arn:',
                                        { Ref: 'AWS::Partition' },
                                        ':rds:',
                                        { Ref: 'AWS::Region' },
                                        ':',
                                        { Ref: 'AWS::AccountId' },
                                        ':cluster:',
                                        { Ref: 'AuroraCluster23D869C0' }]],
                            },
                            {
                                'Fn::Join': ['', ['arn:',
                                        { Ref: 'AWS::Partition' },
                                        ':rds:',
                                        { Ref: 'AWS::Region' },
                                        ':',
                                        { Ref: 'AWS::AccountId' },
                                        ':cluster:',
                                        { Ref: 'AuroraCluster23D869C0' },
                                        ':*']],
                            }],
                    }],
            },
        });
    });
    test('rds cluster arn saved to RdsHttpEndpointConfig', () => {
        // WHEN
        api.addRdsDataSource('ds', cluster, secret);
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::DataSource', {
            Type: 'RELATIONAL_DATABASE',
            RelationalDatabaseConfig: {
                RdsHttpEndpointConfig: {
                    AwsRegion: { Ref: 'AWS::Region' },
                    AwsSecretStoreArn: { Ref: 'AuroraSecret41E6E877' },
                    DbClusterIdentifier: {
                        'Fn::Join': ['', ['arn:',
                                { Ref: 'AWS::Partition' },
                                ':rds:',
                                { Ref: 'AWS::Region' },
                                ':',
                                { Ref: 'AWS::AccountId' },
                                ':cluster:',
                                { Ref: 'AuroraCluster23D869C0' }]],
                    },
                },
            },
        });
    });
    test('databaseName saved to RdsHttpEndpointConfig', () => {
        // WHEN
        const testDatabaseName = 'testDatabaseName';
        api.addRdsDataSource('ds', cluster, secret, testDatabaseName);
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::DataSource', {
            Type: 'RELATIONAL_DATABASE',
            RelationalDatabaseConfig: {
                RdsHttpEndpointConfig: {
                    AwsRegion: { Ref: 'AWS::Region' },
                    AwsSecretStoreArn: { Ref: 'AuroraSecret41E6E877' },
                    DbClusterIdentifier: {
                        'Fn::Join': ['', ['arn:',
                                { Ref: 'AWS::Partition' },
                                ':rds:',
                                { Ref: 'AWS::Region' },
                                ':',
                                { Ref: 'AWS::AccountId' },
                                ':cluster:',
                                { Ref: 'AuroraCluster23D869C0' }]],
                    },
                    DatabaseName: testDatabaseName,
                },
            },
        });
    });
    test('default configuration produces name identical to the id', () => {
        // WHEN
        api.addRdsDataSource('ds', cluster, secret);
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::DataSource', {
            Type: 'RELATIONAL_DATABASE',
            Name: 'ds',
        });
    });
    test('appsync configures name correctly', () => {
        // WHEN
        api.addRdsDataSource('ds', cluster, secret, undefined, {
            name: 'custom',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::DataSource', {
            Type: 'RELATIONAL_DATABASE',
            Name: 'custom',
        });
    });
    test('appsync configures name and description correctly', () => {
        // WHEN
        api.addRdsDataSource('ds', cluster, secret, undefined, {
            name: 'custom',
            description: 'custom description',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::DataSource', {
            Type: 'RELATIONAL_DATABASE',
            Name: 'custom',
            Description: 'custom description',
        });
    });
    test('appsync errors when creating multiple rds data sources with no configuration', () => {
        // WHEN
        const when = () => {
            api.addRdsDataSource('ds', cluster, secret);
            api.addRdsDataSource('ds', cluster, secret);
        };
        // THEN
        expect(when).toThrow('There is already a Construct with name \'ds\' in GraphqlApi [baseApi]');
    });
});
describe('adding rds data source from imported api', () => {
    // GIVEN
    let secret;
    let cluster;
    beforeEach(() => {
        const vpc = new aws_ec2_1.Vpc(stack, 'Vpc', { maxAzs: 2 });
        const securityGroup = new aws_ec2_1.SecurityGroup(stack, 'AuroraSecurityGroup', {
            vpc,
            allowAllOutbound: true,
        });
        secret = new aws_rds_1.DatabaseSecret(stack, 'AuroraSecret', {
            username: 'clusteradmin',
        });
        cluster = new aws_rds_1.ServerlessCluster(stack, 'AuroraCluster', {
            engine: aws_rds_1.DatabaseClusterEngine.auroraMysql({ version: aws_rds_1.AuroraMysqlEngineVersion.VER_2_07_1 }),
            credentials: { username: 'clusteradmin' },
            clusterIdentifier: 'db-endpoint-test',
            vpc,
            vpcSubnets: { subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS },
            securityGroups: [securityGroup],
            defaultDatabaseName: 'Animals',
        });
    });
    test('imported api can add RdsDbDataSource from id', () => {
        // WHEN
        const importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(stack, 'importedApi', {
            graphqlApiId: api.apiId,
        });
        importedApi.addRdsDataSource('ds', cluster, secret);
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::DataSource', {
            Type: 'RELATIONAL_DATABASE',
            ApiId: { 'Fn::GetAtt': ['baseApiCDA4D43A', 'ApiId'] },
        });
    });
    test('imported api can add RdsDataSource from attributes', () => {
        // WHEN
        const importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(stack, 'importedApi', {
            graphqlApiId: api.apiId,
            graphqlApiArn: api.arn,
        });
        importedApi.addRdsDataSource('ds', cluster, secret);
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AppSync::DataSource', {
            Type: 'RELATIONAL_DATABASE',
            ApiId: { 'Fn::GetAtt': ['baseApiCDA4D43A', 'ApiId'] },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,