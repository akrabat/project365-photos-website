"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const autoscaling = require("../../aws-autoscaling");
const ec2 = require("../../aws-ec2");
const iam = require("../../aws-iam");
const kms = require("../../aws-kms");
const lambda = require("../../aws-lambda");
const sns = require("../../aws-sns");
const sqs = require("../../aws-sqs");
const core_1 = require("../../core");
const hooks = require("../lib");
describe('given an AutoScalingGroup and no role', () => {
    let stack;
    let asg;
    beforeEach(() => {
        stack = new core_1.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        asg = new autoscaling.AutoScalingGroup(stack, 'ASG', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: new ec2.AmazonLinuxImage(),
        });
    });
    afterEach(() => {
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            AssumeRolePolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: 'sts:AssumeRole',
                        Effect: 'Allow',
                        Principal: {
                            Service: 'autoscaling.amazonaws.com',
                        },
                    },
                ],
            },
        });
    });
    test('can use queue as hook target without providing a role', () => {
        // GIVEN
        const queue = new sqs.Queue(stack, 'Queue');
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.QueueHook(queue),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::LifecycleHook', { NotificationTargetARN: { 'Fn::GetAtt': ['Queue4A7E3555', 'Arn'] } });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: [
                            'sqs:SendMessage',
                            'sqs:GetQueueAttributes',
                            'sqs:GetQueueUrl',
                        ],
                        Effect: 'Allow',
                        Resource: {
                            'Fn::GetAtt': [
                                'Queue4A7E3555',
                                'Arn',
                            ],
                        },
                    },
                ],
                Version: '2012-10-17',
            },
            PolicyName: 'ASGLifecycleHookTransRoleDefaultPolicy43D7C82A',
            Roles: [
                {
                    Ref: 'ASGLifecycleHookTransRole71E0A219',
                },
            ],
        });
    });
    test('can use topic as hook target without providing a role', () => {
        // GIVEN
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.TopicHook(topic),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::LifecycleHook', { NotificationTargetARN: { Ref: 'TopicBFC7AF6E' } });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: 'sns:Publish',
                        Effect: 'Allow',
                        Resource: {
                            Ref: 'TopicBFC7AF6E',
                        },
                    },
                ],
                Version: '2012-10-17',
            },
            PolicyName: 'ASGLifecycleHookTransRoleDefaultPolicy43D7C82A',
            Roles: [
                {
                    Ref: 'ASGLifecycleHookTransRole71E0A219',
                },
            ],
        });
    });
    test('can use Lambda function as hook target without providing a role', () => {
        // GIVEN
        const fn = new lambda.Function(stack, 'Fn', {
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_14_X,
            handler: 'index.index',
        });
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.FunctionHook(fn),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::LifecycleHook', { NotificationTargetARN: { Ref: 'ASGLifecycleHookTransTopic9B0D4842' } });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SNS::Subscription', {
            Protocol: 'lambda',
            TopicArn: { Ref: 'ASGLifecycleHookTransTopic9B0D4842' },
            Endpoint: { 'Fn::GetAtt': ['Fn9270CBC0', 'Arn'] },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: 'sns:Publish',
                        Effect: 'Allow',
                        Resource: {
                            Ref: 'ASGLifecycleHookTransTopic9B0D4842',
                        },
                    },
                ],
                Version: '2012-10-17',
            },
            PolicyName: 'ASGLifecycleHookTransRoleDefaultPolicy43D7C82A',
            Roles: [
                {
                    Ref: 'ASGLifecycleHookTransRole71E0A219',
                },
            ],
        });
    });
    test('can use Lambda function as hook target with encrypted SNS', () => {
        // GIVEN
        const key = new kms.Key(stack, 'key');
        const fn = new lambda.Function(stack, 'Fn', {
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_14_X,
            handler: 'index.index',
        });
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.FunctionHook(fn, key),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SNS::Topic', {
            KmsMasterKeyId: {
                'Fn::GetAtt': [
                    'keyFEDD6EC0',
                    'Arn',
                ],
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([
                    {
                        Effect: 'Allow',
                        Action: [
                            'kms:Decrypt',
                            'kms:GenerateDataKey',
                        ],
                        Resource: {
                            'Fn::GetAtt': [
                                'keyFEDD6EC0',
                                'Arn',
                            ],
                        },
                    },
                ]),
            },
        });
    });
});
describe('given an AutoScalingGroup and a role', () => {
    let stack;
    let asg;
    beforeEach(() => {
        stack = new core_1.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        asg = new autoscaling.AutoScalingGroup(stack, 'ASG', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: new ec2.AmazonLinuxImage(),
        });
    });
    afterEach(() => {
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            AssumeRolePolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: 'sts:AssumeRole',
                        Effect: 'Allow',
                        Principal: {
                            Service: 'custom.role.domain.com',
                        },
                    },
                ],
            },
        });
    });
    test('can use queue as hook target with a role', () => {
        // GIVEN
        const queue = new sqs.Queue(stack, 'Queue');
        const myrole = new iam.Role(stack, 'MyRole', {
            assumedBy: new iam.ServicePrincipal('custom.role.domain.com'),
        });
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.QueueHook(queue),
            role: myrole,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::LifecycleHook', { NotificationTargetARN: { 'Fn::GetAtt': ['Queue4A7E3555', 'Arn'] } });
    });
    test('can use topic as hook target with a role', () => {
        // GIVEN
        const topic = new sns.Topic(stack, 'Topic');
        const myrole = new iam.Role(stack, 'MyRole', {
            assumedBy: new iam.ServicePrincipal('custom.role.domain.com'),
        });
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.TopicHook(topic),
            role: myrole,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::LifecycleHook', { NotificationTargetARN: { Ref: 'TopicBFC7AF6E' } });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: 'sns:Publish',
                        Effect: 'Allow',
                        Resource: {
                            Ref: 'TopicBFC7AF6E',
                        },
                    },
                ],
                Version: '2012-10-17',
            },
            PolicyName: 'MyRoleDefaultPolicyA36BE1DD',
            Roles: [
                {
                    Ref: 'MyRoleF48FFE04',
                },
            ],
        });
    });
    test('can use Lambda function as hook target with a role', () => {
        // GIVEN
        const fn = new lambda.Function(stack, 'Fn', {
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_14_X,
            handler: 'index.index',
        });
        const myrole = new iam.Role(stack, 'MyRole', {
            assumedBy: new iam.ServicePrincipal('custom.role.domain.com'),
        });
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.FunctionHook(fn),
            role: myrole,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::LifecycleHook', { NotificationTargetARN: { Ref: 'ASGLifecycleHookTransTopic9B0D4842' } });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SNS::Subscription', {
            Protocol: 'lambda',
            TopicArn: { Ref: 'ASGLifecycleHookTransTopic9B0D4842' },
            Endpoint: { 'Fn::GetAtt': ['Fn9270CBC0', 'Arn'] },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: 'sns:Publish',
                        Effect: 'Allow',
                        Resource: {
                            Ref: 'ASGLifecycleHookTransTopic9B0D4842',
                        },
                    },
                ],
                Version: '2012-10-17',
            },
            PolicyName: 'MyRoleDefaultPolicyA36BE1DD',
            Roles: [
                {
                    Ref: 'MyRoleF48FFE04',
                },
            ],
        });
    });
});
//# sourceMappingURL=data:application/json;base64,