"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const ec2 = require("../../../aws-ec2");
const cdk = require("../../../core");
const lib_1 = require("../../lib");
describe('AutoScalingGroupRequireImdsv2Aspect', () => {
    let app;
    let stack;
    let vpc;
    beforeEach(() => {
        app = new cdk.App();
        stack = new cdk.Stack(app, 'Stack');
        vpc = new ec2.Vpc(stack, 'Vpc');
    });
    test('warns when metadataOptions is a token', () => {
        // GIVEN
        const asg = new lib_1.AutoScalingGroup(stack, 'AutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: ec2.MachineImage.latestAmazonLinux(),
        });
        const launchConfig = asg.node.tryFindChild('LaunchConfig');
        launchConfig.metadataOptions = cdk.Token.asAny({
            httpEndpoint: 'https://bla.com',
        });
        const aspect = new lib_1.AutoScalingGroupRequireImdsv2Aspect();
        // WHEN
        cdk.Aspects.of(stack).add(aspect);
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::LaunchConfiguration', assertions_1.Match.not({
            MetadataOptions: {
                HttpTokens: 'required',
            },
        }));
        assertions_1.Annotations.fromStack(stack).hasWarning('/Stack/AutoScalingGroup', assertions_1.Match.stringLikeRegexp('.*CfnLaunchConfiguration.MetadataOptions field is a CDK token.'));
    });
    test('requires IMDSv2', () => {
        // GIVEN
        new lib_1.AutoScalingGroup(stack, 'AutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: ec2.MachineImage.latestAmazonLinux(),
        });
        const aspect = new lib_1.AutoScalingGroupRequireImdsv2Aspect();
        // WHEN
        cdk.Aspects.of(stack).add(aspect);
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::LaunchConfiguration', {
            MetadataOptions: {
                HttpTokens: 'required',
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWlyZS1pbWRzdjItYXNwZWN0LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZXF1aXJlLWltZHN2Mi1hc3BlY3QudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9EQUFtRTtBQUNuRSx3Q0FBd0M7QUFDeEMscUNBQXFDO0FBQ3JDLG1DQUltQjtBQUVuQixRQUFRLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO0lBQ25ELElBQUksR0FBWSxDQUFDO0lBQ2pCLElBQUksS0FBZ0IsQ0FBQztJQUNyQixJQUFJLEdBQVksQ0FBQztJQUVqQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtRQUNqRCxRQUFRO1FBQ1IsTUFBTSxHQUFHLEdBQUcsSUFBSSxzQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLEVBQUU7WUFDMUQsR0FBRztZQUNILFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO1lBQzlDLFlBQVksRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFO1NBQ25ELENBQUMsQ0FBQztRQUNILE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBMkIsQ0FBQztRQUNyRixZQUFZLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQzdDLFlBQVksRUFBRSxpQkFBaUI7U0FDa0IsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sTUFBTSxHQUFHLElBQUkseUNBQW1DLEVBQUUsQ0FBQztRQUV6RCxPQUFPO1FBQ1AsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWxDLE9BQU87UUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyx1Q0FBdUMsRUFBRSxrQkFBSyxDQUFDLEdBQUcsQ0FBQztZQUNqRyxlQUFlLEVBQUU7Z0JBQ2YsVUFBVSxFQUFFLFVBQVU7YUFDdkI7U0FDRixDQUFDLENBQUMsQ0FBQztRQUVKLHdCQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsRUFBRSxrQkFBSyxDQUFDLGdCQUFnQixDQUFDLGdFQUFnRSxDQUFDLENBQUMsQ0FBQztJQUMvSixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7UUFDM0IsUUFBUTtRQUNSLElBQUksc0JBQWdCLENBQUMsS0FBSyxFQUFFLGtCQUFrQixFQUFFO1lBQzlDLEdBQUc7WUFDSCxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztZQUM5QyxZQUFZLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRTtTQUNuRCxDQUFDLENBQUM7UUFDSCxNQUFNLE1BQU0sR0FBRyxJQUFJLHlDQUFtQyxFQUFFLENBQUM7UUFFekQsT0FBTztRQUNQLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVsQyxPQUFPO1FBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsdUNBQXVDLEVBQUU7WUFDdkYsZUFBZSxFQUFFO2dCQUNmLFVBQVUsRUFBRSxVQUFVO2FBQ3ZCO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFubm90YXRpb25zLCBNYXRjaCwgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIGVjMiBmcm9tICcuLi8uLi8uLi9hd3MtZWMyJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCB7XG4gIEF1dG9TY2FsaW5nR3JvdXAsXG4gIEF1dG9TY2FsaW5nR3JvdXBSZXF1aXJlSW1kc3YyQXNwZWN0LFxuICBDZm5MYXVuY2hDb25maWd1cmF0aW9uLFxufSBmcm9tICcuLi8uLi9saWInO1xuXG5kZXNjcmliZSgnQXV0b1NjYWxpbmdHcm91cFJlcXVpcmVJbWRzdjJBc3BlY3QnLCAoKSA9PiB7XG4gIGxldCBhcHA6IGNkay5BcHA7XG4gIGxldCBzdGFjazogY2RrLlN0YWNrO1xuICBsZXQgdnBjOiBlYzIuVnBjO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGFwcCA9IG5ldyBjZGsuQXBwKCk7XG4gICAgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ1N0YWNrJyk7XG4gICAgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWcGMnKTtcbiAgfSk7XG5cbiAgdGVzdCgnd2FybnMgd2hlbiBtZXRhZGF0YU9wdGlvbnMgaXMgYSB0b2tlbicsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFzZyA9IG5ldyBBdXRvU2NhbGluZ0dyb3VwKHN0YWNrLCAnQXV0b1NjYWxpbmdHcm91cCcsIHtcbiAgICAgIHZwYyxcbiAgICAgIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGUoJ3QyLm1pY3JvJyksXG4gICAgICBtYWNoaW5lSW1hZ2U6IGVjMi5NYWNoaW5lSW1hZ2UubGF0ZXN0QW1hem9uTGludXgoKSxcbiAgICB9KTtcbiAgICBjb25zdCBsYXVuY2hDb25maWcgPSBhc2cubm9kZS50cnlGaW5kQ2hpbGQoJ0xhdW5jaENvbmZpZycpIGFzIENmbkxhdW5jaENvbmZpZ3VyYXRpb247XG4gICAgbGF1bmNoQ29uZmlnLm1ldGFkYXRhT3B0aW9ucyA9IGNkay5Ub2tlbi5hc0FueSh7XG4gICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2JsYS5jb20nLFxuICAgIH0gYXMgQ2ZuTGF1bmNoQ29uZmlndXJhdGlvbi5NZXRhZGF0YU9wdGlvbnNQcm9wZXJ0eSk7XG4gICAgY29uc3QgYXNwZWN0ID0gbmV3IEF1dG9TY2FsaW5nR3JvdXBSZXF1aXJlSW1kc3YyQXNwZWN0KCk7XG5cbiAgICAvLyBXSEVOXG4gICAgY2RrLkFzcGVjdHMub2Yoc3RhY2spLmFkZChhc3BlY3QpO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkF1dG9TY2FsaW5nOjpMYXVuY2hDb25maWd1cmF0aW9uJywgTWF0Y2gubm90KHtcbiAgICAgIE1ldGFkYXRhT3B0aW9uczoge1xuICAgICAgICBIdHRwVG9rZW5zOiAncmVxdWlyZWQnLFxuICAgICAgfSxcbiAgICB9KSk7XG5cbiAgICBBbm5vdGF0aW9ucy5mcm9tU3RhY2soc3RhY2spLmhhc1dhcm5pbmcoJy9TdGFjay9BdXRvU2NhbGluZ0dyb3VwJywgTWF0Y2guc3RyaW5nTGlrZVJlZ2V4cCgnLipDZm5MYXVuY2hDb25maWd1cmF0aW9uLk1ldGFkYXRhT3B0aW9ucyBmaWVsZCBpcyBhIENESyB0b2tlbi4nKSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3JlcXVpcmVzIElNRFN2MicsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIG5ldyBBdXRvU2NhbGluZ0dyb3VwKHN0YWNrLCAnQXV0b1NjYWxpbmdHcm91cCcsIHtcbiAgICAgIHZwYyxcbiAgICAgIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGUoJ3QyLm1pY3JvJyksXG4gICAgICBtYWNoaW5lSW1hZ2U6IGVjMi5NYWNoaW5lSW1hZ2UubGF0ZXN0QW1hem9uTGludXgoKSxcbiAgICB9KTtcbiAgICBjb25zdCBhc3BlY3QgPSBuZXcgQXV0b1NjYWxpbmdHcm91cFJlcXVpcmVJbWRzdjJBc3BlY3QoKTtcblxuICAgIC8vIFdIRU5cbiAgICBjZGsuQXNwZWN0cy5vZihzdGFjaykuYWRkKGFzcGVjdCk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6QXV0b1NjYWxpbmc6OkxhdW5jaENvbmZpZ3VyYXRpb24nLCB7XG4gICAgICBNZXRhZGF0YU9wdGlvbnM6IHtcbiAgICAgICAgSHR0cFRva2VuczogJ3JlcXVpcmVkJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xufSk7Il19