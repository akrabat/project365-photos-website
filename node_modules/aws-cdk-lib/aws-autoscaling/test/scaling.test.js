"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const cloudwatch = require("../../aws-cloudwatch");
const ec2 = require("../../aws-ec2");
const elbv2 = require("../../aws-elasticloadbalancingv2");
const cdk = require("../../core");
const constructs_1 = require("constructs");
const autoscaling = require("../lib");
describe('scaling', () => {
    describe('target tracking policies', () => {
        test('cpu utilization', () => {
            // GIVEN
            const stack = new cdk.Stack();
            const fixture = new ASGFixture(stack, 'Fixture');
            // WHEN
            fixture.asg.scaleOnCpuUtilization('ScaleCpu', {
                targetUtilizationPercent: 30,
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::ScalingPolicy', {
                PolicyType: 'TargetTrackingScaling',
                TargetTrackingConfiguration: {
                    PredefinedMetricSpecification: { PredefinedMetricType: 'ASGAverageCPUUtilization' },
                    TargetValue: 30,
                },
            });
        });
        test('network ingress', () => {
            // GIVEN
            const stack = new cdk.Stack();
            const fixture = new ASGFixture(stack, 'Fixture');
            // WHEN
            fixture.asg.scaleOnIncomingBytes('ScaleNetwork', {
                targetBytesPerSecond: 100,
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::ScalingPolicy', {
                PolicyType: 'TargetTrackingScaling',
                TargetTrackingConfiguration: {
                    PredefinedMetricSpecification: { PredefinedMetricType: 'ASGAverageNetworkIn' },
                    TargetValue: 100,
                },
            });
        });
        test('network egress', () => {
            // GIVEN
            const stack = new cdk.Stack();
            const fixture = new ASGFixture(stack, 'Fixture');
            // WHEN
            fixture.asg.scaleOnOutgoingBytes('ScaleNetwork', {
                targetBytesPerSecond: 100,
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::ScalingPolicy', {
                PolicyType: 'TargetTrackingScaling',
                TargetTrackingConfiguration: {
                    PredefinedMetricSpecification: { PredefinedMetricType: 'ASGAverageNetworkOut' },
                    TargetValue: 100,
                },
            });
        });
        test('request count per second', () => {
            // GIVEN
            const stack = new cdk.Stack();
            const fixture = new ASGFixture(stack, 'Fixture');
            const alb = new elbv2.ApplicationLoadBalancer(stack, 'ALB', { vpc: fixture.vpc });
            const listener = alb.addListener('Listener', { port: 80 });
            listener.addTargets('Targets', {
                port: 80,
                targets: [fixture.asg],
            });
            // WHEN
            fixture.asg.scaleOnRequestCount('ScaleRequest', {
                targetRequestsPerSecond: 10,
            });
            // THEN
            const arnParts = {
                'Fn::Split': [
                    '/',
                    { Ref: 'ALBListener3B99FF85' },
                ],
            };
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::ScalingPolicy', {
                PolicyType: 'TargetTrackingScaling',
                TargetTrackingConfiguration: {
                    TargetValue: 600,
                    PredefinedMetricSpecification: {
                        PredefinedMetricType: 'ALBRequestCountPerTarget',
                        ResourceLabel: {
                            'Fn::Join': ['', [
                                    { 'Fn::Select': [1, arnParts] },
                                    '/',
                                    { 'Fn::Select': [2, arnParts] },
                                    '/',
                                    { 'Fn::Select': [3, arnParts] },
                                    '/',
                                    { 'Fn::GetAtt': ['ALBListenerTargetsGroup01D7716A', 'TargetGroupFullName'] },
                                ]],
                        },
                    },
                },
            });
        });
        test('request count per minute', () => {
            // GIVEN
            const stack = new cdk.Stack();
            const fixture = new ASGFixture(stack, 'Fixture');
            const alb = new elbv2.ApplicationLoadBalancer(stack, 'ALB', { vpc: fixture.vpc });
            const listener = alb.addListener('Listener', { port: 80 });
            listener.addTargets('Targets', {
                port: 80,
                targets: [fixture.asg],
            });
            // WHEN
            fixture.asg.scaleOnRequestCount('ScaleRequest', {
                targetRequestsPerMinute: 10,
            });
            // THEN
            const arnParts = {
                'Fn::Split': [
                    '/',
                    { Ref: 'ALBListener3B99FF85' },
                ],
            };
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::ScalingPolicy', {
                PolicyType: 'TargetTrackingScaling',
                TargetTrackingConfiguration: {
                    TargetValue: 10,
                    PredefinedMetricSpecification: {
                        PredefinedMetricType: 'ALBRequestCountPerTarget',
                        ResourceLabel: {
                            'Fn::Join': ['', [
                                    { 'Fn::Select': [1, arnParts] },
                                    '/',
                                    { 'Fn::Select': [2, arnParts] },
                                    '/',
                                    { 'Fn::Select': [3, arnParts] },
                                    '/',
                                    { 'Fn::GetAtt': ['ALBListenerTargetsGroup01D7716A', 'TargetGroupFullName'] },
                                ]],
                        },
                    },
                },
            });
        });
        test('custom metric', () => {
            // GIVEN
            const stack = new cdk.Stack();
            const fixture = new ASGFixture(stack, 'Fixture');
            // WHEN
            fixture.asg.scaleToTrackMetric('Metric', {
                metric: new cloudwatch.Metric({
                    metricName: 'Henk',
                    namespace: 'Test',
                    dimensionsMap: {
                        Mustache: 'Bushy',
                    },
                }),
                targetValue: 2,
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::ScalingPolicy', {
                PolicyType: 'TargetTrackingScaling',
                TargetTrackingConfiguration: {
                    CustomizedMetricSpecification: {
                        Dimensions: [{ Name: 'Mustache', Value: 'Bushy' }],
                        MetricName: 'Henk',
                        Namespace: 'Test',
                        Statistic: 'Average',
                    },
                    TargetValue: 2,
                },
            });
        });
    });
    test('step scaling', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const fixture = new ASGFixture(stack, 'Fixture');
        // WHEN
        fixture.asg.scaleOnMetric('Metric', {
            metric: new cloudwatch.Metric({
                metricName: 'Legs',
                namespace: 'Henk',
                dimensionsMap: { Mustache: 'Bushy' },
            }),
            estimatedInstanceWarmup: cdk.Duration.seconds(150),
            // Adjust the number of legs to be closer to 2
            scalingSteps: [
                { lower: 0, upper: 2, change: +1 },
                { lower: 3, upper: 5, change: -1 },
                { lower: 5, change: -2 }, // Must work harder to remove legs
            ],
        });
        // THEN: scaling in policy
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::ScalingPolicy', {
            MetricAggregationType: 'Average',
            PolicyType: 'StepScaling',
            StepAdjustments: [
                {
                    MetricIntervalLowerBound: 0,
                    MetricIntervalUpperBound: 2,
                    ScalingAdjustment: -1,
                },
                {
                    MetricIntervalLowerBound: 2,
                    ScalingAdjustment: -2,
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Alarm', {
            ComparisonOperator: 'GreaterThanOrEqualToThreshold',
            Threshold: 3,
            AlarmActions: [{ Ref: 'FixtureASGMetricUpperPolicyC464CAFB' }],
            AlarmDescription: 'Upper threshold scaling alarm',
        });
        // THEN: scaling out policy
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::ScalingPolicy', {
            MetricAggregationType: 'Average',
            PolicyType: 'StepScaling',
            EstimatedInstanceWarmup: 150,
            StepAdjustments: [
                {
                    MetricIntervalUpperBound: 0,
                    ScalingAdjustment: 1,
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Alarm', {
            ComparisonOperator: 'LessThanOrEqualToThreshold',
            Threshold: 2,
            AlarmActions: [{ Ref: 'FixtureASGMetricLowerPolicy4A1CDE42' }],
            AlarmDescription: 'Lower threshold scaling alarm',
        });
    });
});
test('step scaling from percentile metric', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const fixture = new ASGFixture(stack, 'Fixture');
    // WHEN
    fixture.asg.scaleOnMetric('Tracking', {
        metric: new cloudwatch.Metric({ namespace: 'Test', metricName: 'Metric', statistic: 'p99' }),
        scalingSteps: [
            { upper: 0, change: -1 },
            { lower: 100, change: +1 },
            { lower: 500, change: +5 },
        ],
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::ScalingPolicy', {
        PolicyType: 'StepScaling',
        MetricAggregationType: 'Average',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Alarm', {
        ComparisonOperator: 'GreaterThanOrEqualToThreshold',
        EvaluationPeriods: 1,
        AlarmActions: [
            { Ref: 'FixtureASGTrackingUpperPolicy27D4301F' },
        ],
        ExtendedStatistic: 'p99',
        MetricName: 'Metric',
        Namespace: 'Test',
        Threshold: 100,
    });
});
test('step scaling with evaluation period configured', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const fixture = new ASGFixture(stack, 'Fixture');
    // WHEN
    fixture.asg.scaleOnMetric('Tracking', {
        metric: new cloudwatch.Metric({ namespace: 'Test', metricName: 'Metric', statistic: 'p99' }),
        scalingSteps: [
            { upper: 0, change: -1 },
            { lower: 100, change: +1 },
            { lower: 500, change: +5 },
        ],
        evaluationPeriods: 10,
        metricAggregationType: autoscaling.MetricAggregationType.MAXIMUM,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::ScalingPolicy', {
        PolicyType: 'StepScaling',
        MetricAggregationType: 'Maximum',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Alarm', {
        ComparisonOperator: 'GreaterThanOrEqualToThreshold',
        EvaluationPeriods: 10,
        ExtendedStatistic: 'p99',
        MetricName: 'Metric',
        Namespace: 'Test',
        Threshold: 100,
    });
});
class ASGFixture extends constructs_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        this.vpc = new ec2.Vpc(this, 'VPC');
        this.asg = new autoscaling.AutoScalingGroup(this, 'ASG', {
            vpc: this.vpc,
            instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.MICRO),
            machineImage: new ec2.AmazonLinuxImage(),
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGluZy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2NhbGluZy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLG1EQUFtRDtBQUNuRCxxQ0FBcUM7QUFDckMsMERBQTBEO0FBQzFELGtDQUFrQztBQUNsQywyQ0FBdUM7QUFDdkMsc0NBQXNDO0FBRXRDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO0lBQ3ZCLFFBQVEsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7UUFDeEMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtZQUMzQixRQUFRO1lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsTUFBTSxPQUFPLEdBQUcsSUFBSSxVQUFVLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBRWpELE9BQU87WUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLFVBQVUsRUFBRTtnQkFDNUMsd0JBQXdCLEVBQUUsRUFBRTthQUM3QixDQUFDLENBQUM7WUFFSCxPQUFPO1lBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsaUNBQWlDLEVBQUU7Z0JBQ2pGLFVBQVUsRUFBRSx1QkFBdUI7Z0JBQ25DLDJCQUEyQixFQUFFO29CQUMzQiw2QkFBNkIsRUFBRSxFQUFFLG9CQUFvQixFQUFFLDBCQUEwQixFQUFFO29CQUNuRixXQUFXLEVBQUUsRUFBRTtpQkFDaEI7YUFDRixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7WUFDM0IsUUFBUTtZQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlCLE1BQU0sT0FBTyxHQUFHLElBQUksVUFBVSxDQUFDLEtBQUss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bSAnLi4vLi4vYXNzZXJ0aW9ucyc7XG5pbXBvcnQgKiBhcyBjbG91ZHdhdGNoIGZyb20gJy4uLy4uL2F3cy1jbG91ZHdhdGNoJztcbmltcG9ydCAqIGFzIGVjMiBmcm9tICcuLi8uLi9hd3MtZWMyJztcbmltcG9ydCAqIGFzIGVsYnYyIGZyb20gJy4uLy4uL2F3cy1lbGFzdGljbG9hZGJhbGFuY2luZ3YyJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgYXV0b3NjYWxpbmcgZnJvbSAnLi4vbGliJztcblxuZGVzY3JpYmUoJ3NjYWxpbmcnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCd0YXJnZXQgdHJhY2tpbmcgcG9saWNpZXMnLCAoKSA9PiB7XG4gICAgdGVzdCgnY3B1IHV0aWxpemF0aW9uJywgKCkgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgY29uc3QgZml4dHVyZSA9IG5ldyBBU0dGaXh0dXJlKHN0YWNrLCAnRml4dHVyZScpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBmaXh0dXJlLmFzZy5zY2FsZU9uQ3B1VXRpbGl6YXRpb24oJ1NjYWxlQ3B1Jywge1xuICAgICAgICB0YXJnZXRVdGlsaXphdGlvblBlcmNlbnQ6IDMwLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkF1dG9TY2FsaW5nOjpTY2FsaW5nUG9saWN5Jywge1xuICAgICAgICBQb2xpY3lUeXBlOiAnVGFyZ2V0VHJhY2tpbmdTY2FsaW5nJyxcbiAgICAgICAgVGFyZ2V0VHJhY2tpbmdDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgUHJlZGVmaW5lZE1ldHJpY1NwZWNpZmljYXRpb246IHsgUHJlZGVmaW5lZE1ldHJpY1R5cGU6ICdBU0dBdmVyYWdlQ1BVVXRpbGl6YXRpb24nIH0sXG4gICAgICAgICAgVGFyZ2V0VmFsdWU6IDMwLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCduZXR3b3JrIGluZ3Jlc3MnLCAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBjb25zdCBmaXh0dXJlID0gbmV3IEFTR0ZpeHR1cmUoc3RhY2ssICdGaXh0dXJlJyk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGZpeHR1cmUuYXNnLnNjYWxlT25JbmNvbWluZ0J5dGVzKCdTY2FsZU5ldHdvcmsnLCB7XG4gICAgICAgIHRhcmdldEJ5dGVzUGVyU2Vjb25kOiAxMDAsXG4gICAgICB9KTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6QXV0b1NjYWxpbmc6OlNjYWxpbmdQb2xpY3knLCB7XG4gICAgICAgIFBvbGljeVR5cGU6ICdUYXJnZXRUcmFja2luZ1NjYWxpbmcnLFxuICAgICAgICBUYXJnZXRUcmFja2luZ0NvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICBQcmVkZWZpbmVkTWV0cmljU3BlY2lmaWNhdGlvbjogeyBQcmVkZWZpbmVkTWV0cmljVHlwZTogJ0FTR0F2ZXJhZ2VOZXR3b3JrSW4nIH0sXG4gICAgICAgICAgVGFyZ2V0VmFsdWU6IDEwMCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnbmV0d29yayBlZ3Jlc3MnLCAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBjb25zdCBmaXh0dXJlID0gbmV3IEFTR0ZpeHR1cmUoc3RhY2ssICdGaXh0dXJlJyk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGZpeHR1cmUuYXNnLnNjYWxlT25PdXRnb2luZ0J5dGVzKCdTY2FsZU5ldHdvcmsnLCB7XG4gICAgICAgIHRhcmdldEJ5dGVzUGVyU2Vjb25kOiAxMDAsXG4gICAgICB9KTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6QXV0b1NjYWxpbmc6OlNjYWxpbmdQb2xpY3knLCB7XG4gICAgICAgIFBvbGljeVR5cGU6ICdUYXJnZXRUcmFja2luZ1NjYWxpbmcnLFxuICAgICAgICBUYXJnZXRUcmFja2luZ0NvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICBQcmVkZWZpbmVkTWV0cmljU3BlY2lmaWNhdGlvbjogeyBQcmVkZWZpbmVkTWV0cmljVHlwZTogJ0FTR0F2ZXJhZ2VOZXR3b3JrT3V0JyB9LFxuICAgICAgICAgIFRhcmdldFZhbHVlOiAxMDAsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3JlcXVlc3QgY291bnQgcGVyIHNlY29uZCcsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IGZpeHR1cmUgPSBuZXcgQVNHRml4dHVyZShzdGFjaywgJ0ZpeHR1cmUnKTtcbiAgICAgIGNvbnN0IGFsYiA9IG5ldyBlbGJ2Mi5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlcihzdGFjaywgJ0FMQicsIHsgdnBjOiBmaXh0dXJlLnZwYyB9KTtcbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gYWxiLmFkZExpc3RlbmVyKCdMaXN0ZW5lcicsIHsgcG9ydDogODAgfSk7XG4gICAgICBsaXN0ZW5lci5hZGRUYXJnZXRzKCdUYXJnZXRzJywge1xuICAgICAgICBwb3J0OiA4MCxcbiAgICAgICAgdGFyZ2V0czogW2ZpeHR1cmUuYXNnXSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBmaXh0dXJlLmFzZy5zY2FsZU9uUmVxdWVzdENvdW50KCdTY2FsZVJlcXVlc3QnLCB7XG4gICAgICAgIHRhcmdldFJlcXVlc3RzUGVyU2Vjb25kOiAxMCxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBjb25zdCBhcm5QYXJ0cyA9IHtcbiAgICAgICAgJ0ZuOjpTcGxpdCc6IFtcbiAgICAgICAgICAnLycsXG4gICAgICAgICAgeyBSZWY6ICdBTEJMaXN0ZW5lcjNCOTlGRjg1JyB9LFxuICAgICAgICBdLFxuICAgICAgfTtcblxuICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6QXV0b1NjYWxpbmc6OlNjYWxpbmdQb2xpY3knLCB7XG4gICAgICAgIFBvbGljeVR5cGU6ICdUYXJnZXRUcmFja2luZ1NjYWxpbmcnLFxuICAgICAgICBUYXJnZXRUcmFja2luZ0NvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICBUYXJnZXRWYWx1ZTogNjAwLFxuICAgICAgICAgIFByZWRlZmluZWRNZXRyaWNTcGVjaWZpY2F0aW9uOiB7XG4gICAgICAgICAgICBQcmVkZWZpbmVkTWV0cmljVHlwZTogJ0FMQlJlcXVlc3RDb3VudFBlclRhcmdldCcsXG4gICAgICAgICAgICBSZXNvdXJjZUxhYmVsOiB7XG4gICAgICAgICAgICAgICdGbjo6Sm9pbic6IFsnJywgW1xuICAgICAgICAgICAgICAgIHsgJ0ZuOjpTZWxlY3QnOiBbMSwgYXJuUGFydHNdIH0sXG4gICAgICAgICAgICAgICAgJy8nLFxuICAgICAgICAgICAgICAgIHsgJ0ZuOjpTZWxlY3QnOiBbMiwgYXJuUGFydHNdIH0sXG4gICAgICAgICAgICAgICAgJy8nLFxuICAgICAgICAgICAgICAgIHsgJ0ZuOjpTZWxlY3QnOiBbMywgYXJuUGFydHNdIH0sXG4gICAgICAgICAgICAgICAgJy8nLFxuICAgICAgICAgICAgICAgIHsgJ0ZuOjpHZXRBdHQnOiBbJ0FMQkxpc3RlbmVyVGFyZ2V0c0dyb3VwMDFENzcxNkEnLCAnVGFyZ2V0R3JvdXBGdWxsTmFtZSddIH0sXG4gICAgICAgICAgICAgIF1dLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdyZXF1ZXN0IGNvdW50IHBlciBtaW51dGUnLCAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBjb25zdCBmaXh0dXJlID0gbmV3IEFTR0ZpeHR1cmUoc3RhY2ssICdGaXh0dXJlJyk7XG4gICAgICBjb25zdCBhbGIgPSBuZXcgZWxidjIuQXBwbGljYXRpb25Mb2FkQmFsYW5jZXIoc3RhY2ssICdBTEInLCB7IHZwYzogZml4dHVyZS52cGMgfSk7XG4gICAgICBjb25zdCBsaXN0ZW5lciA9IGFsYi5hZGRMaXN0ZW5lcignTGlzdGVuZXInLCB7IHBvcnQ6IDgwIH0pO1xuICAgICAgbGlzdGVuZXIuYWRkVGFyZ2V0cygnVGFyZ2V0cycsIHtcbiAgICAgICAgcG9ydDogODAsXG4gICAgICAgIHRhcmdldHM6IFtmaXh0dXJlLmFzZ10sXG4gICAgICB9KTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgZml4dHVyZS5hc2cuc2NhbGVPblJlcXVlc3RDb3VudCgnU2NhbGVSZXF1ZXN0Jywge1xuICAgICAgICB0YXJnZXRSZXF1ZXN0c1Blck1pbnV0ZTogMTAsXG4gICAgICB9KTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgY29uc3QgYXJuUGFydHMgPSB7XG4gICAgICAgICdGbjo6U3BsaXQnOiBbXG4gICAgICAgICAgJy8nLFxuICAgICAgICAgIHsgUmVmOiAnQUxCTGlzdGVuZXIzQjk5RkY4NScgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkF1dG9TY2FsaW5nOjpTY2FsaW5nUG9saWN5Jywge1xuICAgICAgICBQb2xpY3lUeXBlOiAnVGFyZ2V0VHJhY2tpbmdTY2FsaW5nJyxcbiAgICAgICAgVGFyZ2V0VHJhY2tpbmdDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgVGFyZ2V0VmFsdWU6IDEwLFxuICAgICAgICAgIFByZWRlZmluZWRNZXRyaWNTcGVjaWZpY2F0aW9uOiB7XG4gICAgICAgICAgICBQcmVkZWZpbmVkTWV0cmljVHlwZTogJ0FMQlJlcXVlc3RDb3VudFBlclRhcmdldCcsXG4gICAgICAgICAgICBSZXNvdXJjZUxhYmVsOiB7XG4gICAgICAgICAgICAgICdGbjo6Sm9pbic6IFsnJywgW1xuICAgICAgICAgICAgICAgIHsgJ0ZuOjpTZWxlY3QnOiBbMSwgYXJuUGFydHNdIH0sXG4gICAgICAgICAgICAgICAgJy8nLFxuICAgICAgICAgICAgICAgIHsgJ0ZuOjpTZWxlY3QnOiBbMiwgYXJuUGFydHNdIH0sXG4gICAgICAgICAgICAgICAgJy8nLFxuICAgICAgICAgICAgICAgIHsgJ0ZuOjpTZWxlY3QnOiBbMywgYXJuUGFydHNdIH0sXG4gICAgICAgICAgICAgICAgJy8nLFxuICAgICAgICAgICAgICAgIHsgJ0ZuOjpHZXRBdHQnOiBbJ0FMQkxpc3RlbmVyVGFyZ2V0c0dyb3VwMDFENzcxNkEnLCAnVGFyZ2V0R3JvdXBGdWxsTmFtZSddIH0sXG4gICAgICAgICAgICAgIF1dLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdjdXN0b20gbWV0cmljJywgKCkgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgY29uc3QgZml4dHVyZSA9IG5ldyBBU0dGaXh0dXJlKHN0YWNrLCAnRml4dHVyZScpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBmaXh0dXJlLmFzZy5zY2FsZVRvVHJhY2tNZXRyaWMoJ01ldHJpYycsIHtcbiAgICAgICAgbWV0cmljOiBuZXcgY2xvdWR3YXRjaC5NZXRyaWMoe1xuICAgICAgICAgIG1ldHJpY05hbWU6ICdIZW5rJyxcbiAgICAgICAgICBuYW1lc3BhY2U6ICdUZXN0JyxcbiAgICAgICAgICBkaW1lbnNpb25zTWFwOiB7XG4gICAgICAgICAgICBNdXN0YWNoZTogJ0J1c2h5JyxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgdGFyZ2V0VmFsdWU6IDIsXG4gICAgICB9KTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6QXV0b1NjYWxpbmc6OlNjYWxpbmdQb2xpY3knLCB7XG4gICAgICAgIFBvbGljeVR5cGU6ICdUYXJnZXRUcmFja2luZ1NjYWxpbmcnLFxuICAgICAgICBUYXJnZXRUcmFja2luZ0NvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICBDdXN0b21pemVkTWV0cmljU3BlY2lmaWNhdGlvbjoge1xuICAgICAgICAgICAgRGltZW5zaW9uczogW3sgTmFtZTogJ011c3RhY2hlJywgVmFsdWU6ICdCdXNoeScgfV0sXG4gICAgICAgICAgICBNZXRyaWNOYW1lOiAnSGVuaycsXG4gICAgICAgICAgICBOYW1lc3BhY2U6ICdUZXN0JyxcbiAgICAgICAgICAgIFN0YXRpc3RpYzogJ0F2ZXJhZ2UnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgVGFyZ2V0VmFsdWU6IDIsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnc3RlcCBzY2FsaW5nJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgZml4dHVyZSA9IG5ldyBBU0dGaXh0dXJlKHN0YWNrLCAnRml4dHVyZScpO1xuXG4gICAgLy8gV0hFTlxuICAgIGZpeHR1cmUuYXNnLnNjYWxlT25NZXRyaWMoJ01ldHJpYycsIHtcbiAgICAgIG1ldHJpYzogbmV3IGNsb3Vkd2F0Y2guTWV0cmljKHtcbiAgICAgICAgbWV0cmljTmFtZTogJ0xlZ3MnLFxuICAgICAgICBuYW1lc3BhY2U6ICdIZW5rJyxcbiAgICAgICAgZGltZW5zaW9uc01hcDogeyBNdXN0YWNoZTogJ0J1c2h5JyB9LFxuICAgICAgfSksXG4gICAgICBlc3RpbWF0ZWRJbnN0YW5jZVdhcm11cDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMTUwKSxcbiAgICAgIC8vIEFkanVzdCB0aGUgbnVtYmVyIG9mIGxlZ3MgdG8gYmUgY2xvc2VyIHRvIDJcbiAgICAgIHNjYWxpbmdTdGVwczogW1xuICAgICAgICB7IGxvd2VyOiAwLCB1cHBlcjogMiwgY2hhbmdlOiArMSB9LFxuICAgICAgICB7IGxvd2VyOiAzLCB1cHBlcjogNSwgY2hhbmdlOiAtMSB9LFxuICAgICAgICB7IGxvd2VyOiA1LCBjaGFuZ2U6IC0yIH0sIC8vIE11c3Qgd29yayBoYXJkZXIgdG8gcmVtb3ZlIGxlZ3NcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOOiBzY2FsaW5nIGluIHBvbGljeVxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkF1dG9TY2FsaW5nOjpTY2FsaW5nUG9saWN5Jywge1xuICAgICAgTWV0cmljQWdncmVnYXRpb25UeXBlOiAnQXZlcmFnZScsXG4gICAgICBQb2xpY3lUeXBlOiAnU3RlcFNjYWxpbmcnLFxuICAgICAgU3RlcEFkanVzdG1lbnRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBNZXRyaWNJbnRlcnZhbExvd2VyQm91bmQ6IDAsXG4gICAgICAgICAgTWV0cmljSW50ZXJ2YWxVcHBlckJvdW5kOiAyLFxuICAgICAgICAgIFNjYWxpbmdBZGp1c3RtZW50OiAtMSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIE1ldHJpY0ludGVydmFsTG93ZXJCb3VuZDogMixcbiAgICAgICAgICBTY2FsaW5nQWRqdXN0bWVudDogLTIsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q2xvdWRXYXRjaDo6QWxhcm0nLCB7XG4gICAgICBDb21wYXJpc29uT3BlcmF0b3I6ICdHcmVhdGVyVGhhbk9yRXF1YWxUb1RocmVzaG9sZCcsXG4gICAgICBUaHJlc2hvbGQ6IDMsXG4gICAgICBBbGFybUFjdGlvbnM6IFt7IFJlZjogJ0ZpeHR1cmVBU0dNZXRyaWNVcHBlclBvbGljeUM0NjRDQUZCJyB9XSxcbiAgICAgIEFsYXJtRGVzY3JpcHRpb246ICdVcHBlciB0aHJlc2hvbGQgc2NhbGluZyBhbGFybScsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOOiBzY2FsaW5nIG91dCBwb2xpY3lcbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpBdXRvU2NhbGluZzo6U2NhbGluZ1BvbGljeScsIHtcbiAgICAgIE1ldHJpY0FnZ3JlZ2F0aW9uVHlwZTogJ0F2ZXJhZ2UnLFxuICAgICAgUG9saWN5VHlwZTogJ1N0ZXBTY2FsaW5nJyxcbiAgICAgIEVzdGltYXRlZEluc3RhbmNlV2FybXVwOiAxNTAsXG4gICAgICBTdGVwQWRqdXN0bWVudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIE1ldHJpY0ludGVydmFsVXBwZXJCb3VuZDogMCxcbiAgICAgICAgICBTY2FsaW5nQWRqdXN0bWVudDogMSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpDbG91ZFdhdGNoOjpBbGFybScsIHtcbiAgICAgIENvbXBhcmlzb25PcGVyYXRvcjogJ0xlc3NUaGFuT3JFcXVhbFRvVGhyZXNob2xkJyxcbiAgICAgIFRocmVzaG9sZDogMixcbiAgICAgIEFsYXJtQWN0aW9uczogW3sgUmVmOiAnRml4dHVyZUFTR01ldHJpY0xvd2VyUG9saWN5NEExQ0RFNDInIH1dLFxuICAgICAgQWxhcm1EZXNjcmlwdGlvbjogJ0xvd2VyIHRocmVzaG9sZCBzY2FsaW5nIGFsYXJtJyxcbiAgICB9KTtcbiAgfSk7XG59KTtcblxudGVzdCgnc3RlcCBzY2FsaW5nIGZyb20gcGVyY2VudGlsZSBtZXRyaWMnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICBjb25zdCBmaXh0dXJlID0gbmV3IEFTR0ZpeHR1cmUoc3RhY2ssICdGaXh0dXJlJyk7XG5cbiAgLy8gV0hFTlxuICBmaXh0dXJlLmFzZy5zY2FsZU9uTWV0cmljKCdUcmFja2luZycsIHtcbiAgICBtZXRyaWM6IG5ldyBjbG91ZHdhdGNoLk1ldHJpYyh7IG5hbWVzcGFjZTogJ1Rlc3QnLCBtZXRyaWNOYW1lOiAnTWV0cmljJywgc3RhdGlzdGljOiAncDk5JyB9KSxcbiAgICBzY2FsaW5nU3RlcHM6IFtcbiAgICAgIHsgdXBwZXI6IDAsIGNoYW5nZTogLTEgfSxcbiAgICAgIHsgbG93ZXI6IDEwMCwgY2hhbmdlOiArMSB9LFxuICAgICAgeyBsb3dlcjogNTAwLCBjaGFuZ2U6ICs1IH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpBdXRvU2NhbGluZzo6U2NhbGluZ1BvbGljeScsIHtcbiAgICBQb2xpY3lUeXBlOiAnU3RlcFNjYWxpbmcnLFxuICAgIE1ldHJpY0FnZ3JlZ2F0aW9uVHlwZTogJ0F2ZXJhZ2UnLFxuICB9KTtcblxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpDbG91ZFdhdGNoOjpBbGFybScsIHtcbiAgICBDb21wYXJpc29uT3BlcmF0b3I6ICdHcmVhdGVyVGhhbk9yRXF1YWxUb1RocmVzaG9sZCcsXG4gICAgRXZhbHVhdGlvblBlcmlvZHM6IDEsXG4gICAgQWxhcm1BY3Rpb25zOiBbXG4gICAgICB7IFJlZjogJ0ZpeHR1cmVBU0dUcmFja2luZ1VwcGVyUG9saWN5MjdENDMwMUYnIH0sXG4gICAgXSxcbiAgICBFeHRlbmRlZFN0YXRpc3RpYzogJ3A5OScsXG4gICAgTWV0cmljTmFtZTogJ01ldHJpYycsXG4gICAgTmFtZXNwYWNlOiAnVGVzdCcsXG4gICAgVGhyZXNob2xkOiAxMDAsXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3N0ZXAgc2NhbGluZyB3aXRoIGV2YWx1YXRpb24gcGVyaW9kIGNvbmZpZ3VyZWQnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICBjb25zdCBmaXh0dXJlID0gbmV3IEFTR0ZpeHR1cmUoc3RhY2ssICdGaXh0dXJlJyk7XG5cbiAgLy8gV0hFTlxuICBmaXh0dXJlLmFzZy5zY2FsZU9uTWV0cmljKCdUcmFja2luZycsIHtcbiAgICBtZXRyaWM6IG5ldyBjbG91ZHdhdGNoLk1ldHJpYyh7IG5hbWVzcGFjZTogJ1Rlc3QnLCBtZXRyaWNOYW1lOiAnTWV0cmljJywgc3RhdGlzdGljOiAncDk5JyB9KSxcbiAgICBzY2FsaW5nU3RlcHM6IFtcbiAgICAgIHsgdXBwZXI6IDAsIGNoYW5nZTogLTEgfSxcbiAgICAgIHsgbG93ZXI6IDEwMCwgY2hhbmdlOiArMSB9LFxuICAgICAgeyBsb3dlcjogNTAwLCBjaGFuZ2U6ICs1IH0sXG4gICAgXSxcbiAgICBldmFsdWF0aW9uUGVyaW9kczogMTAsXG4gICAgbWV0cmljQWdncmVnYXRpb25UeXBlOiBhdXRvc2NhbGluZy5NZXRyaWNBZ2dyZWdhdGlvblR5cGUuTUFYSU1VTSxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpBdXRvU2NhbGluZzo6U2NhbGluZ1BvbGljeScsIHtcbiAgICBQb2xpY3lUeXBlOiAnU3RlcFNjYWxpbmcnLFxuICAgIE1ldHJpY0FnZ3JlZ2F0aW9uVHlwZTogJ01heGltdW0nLFxuICB9KTtcblxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpDbG91ZFdhdGNoOjpBbGFybScsIHtcbiAgICBDb21wYXJpc29uT3BlcmF0b3I6ICdHcmVhdGVyVGhhbk9yRXF1YWxUb1RocmVzaG9sZCcsXG4gICAgRXZhbHVhdGlvblBlcmlvZHM6IDEwLFxuICAgIEV4dGVuZGVkU3RhdGlzdGljOiAncDk5JyxcbiAgICBNZXRyaWNOYW1lOiAnTWV0cmljJyxcbiAgICBOYW1lc3BhY2U6ICdUZXN0JyxcbiAgICBUaHJlc2hvbGQ6IDEwMCxcbiAgfSk7XG59KTtcblxuY2xhc3MgQVNHRml4dHVyZSBleHRlbmRzIENvbnN0cnVjdCB7XG4gIHB1YmxpYyByZWFkb25seSB2cGM6IGVjMi5WcGM7XG4gIHB1YmxpYyByZWFkb25seSBhc2c6IGF1dG9zY2FsaW5nLkF1dG9TY2FsaW5nR3JvdXA7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICB0aGlzLnZwYyA9IG5ldyBlYzIuVnBjKHRoaXMsICdWUEMnKTtcbiAgICB0aGlzLmFzZyA9IG5ldyBhdXRvc2NhbGluZy5BdXRvU2NhbGluZ0dyb3VwKHRoaXMsICdBU0cnLCB7XG4gICAgICB2cGM6IHRoaXMudnBjLFxuICAgICAgaW5zdGFuY2VUeXBlOiBlYzIuSW5zdGFuY2VUeXBlLm9mKGVjMi5JbnN0YW5jZUNsYXNzLk00LCBlYzIuSW5zdGFuY2VTaXplLk1JQ1JPKSxcbiAgICAgIG1hY2hpbmVJbWFnZTogbmV3IGVjMi5BbWF6b25MaW51eEltYWdlKCksXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==