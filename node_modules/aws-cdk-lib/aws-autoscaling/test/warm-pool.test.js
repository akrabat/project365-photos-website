"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const ec2 = require("../../aws-ec2");
const cdk = require("../../core");
const autoscaling = require("../lib");
describe('warm pool', () => {
    test('we can add a warm pool without properties', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const asg = newASG(stack);
        // WHEN
        asg.addWarmPool();
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::WarmPool', {
            AutoScalingGroupName: {
                Ref: 'ASG46ED3070',
            },
        });
    });
    test('we can add a warm pool with all optional properties', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const asg = newASG(stack);
        // WHEN
        asg.addWarmPool({
            reuseOnScaleIn: true,
            maxGroupPreparedCapacity: 5,
            minSize: 2,
            poolState: autoscaling.PoolState.HIBERNATED,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::AutoScaling::WarmPool', {
            AutoScalingGroupName: {
                Ref: 'ASG46ED3070',
            },
            InstanceReusePolicy: {
                ReuseOnScaleIn: true,
            },
            MaxGroupPreparedCapacity: 5,
            MinSize: 2,
            PoolState: 'Hibernated',
        });
    });
});
test('adding a warm pool with maxGroupPreparedCapacity smaller than -1 throws an error', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const asg = newASG(stack);
    // WHEN
    expect(() => {
        asg.addWarmPool({
            maxGroupPreparedCapacity: -42,
        });
    }).toThrow(/'maxGroupPreparedCapacity' parameter should be greater than or equal to -1/);
});
test('adding a warm pool with negative minSize throws an error', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const asg = newASG(stack);
    // WHEN
    expect(() => {
        asg.addWarmPool({
            minSize: -1,
        });
    }).toThrow(/'minSize' parameter should be greater than or equal to 0/);
});
function newASG(stack) {
    const vpc = new ec2.Vpc(stack, 'VPC');
    return new autoscaling.AutoScalingGroup(stack, 'ASG', {
        vpc,
        instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.MICRO),
        machineImage: new ec2.AmazonLinuxImage(),
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FybS1wb29sLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3YXJtLXBvb2wudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUE0QztBQUM1QyxxQ0FBcUM7QUFDckMsa0NBQWtDO0FBQ2xDLHNDQUFzQztBQUV0QyxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUN6QixJQUFJLENBQUMsMkNBQTJDLEVBQUUsR0FBRyxFQUFFO1FBQ3JELFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUIsT0FBTztRQUNQLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVsQixPQUFPO1FBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsNEJBQTRCLEVBQUU7WUFDNUUsb0JBQW9CLEVBQUU7Z0JBQ3BCLEdBQUcsRUFBRSxhQUFhO2FBQ25CO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMscURBQXFELEVBQUUsR0FBRyxFQUFFO1FBQy9ELFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUIsT0FBTztRQUNQLEdBQUcsQ0FBQyxXQUFXLENBQUM7WUFDZCxjQUFjLEVBQUUsSUFBSTtZQUNwQix3QkFBd0IsRUFBRSxDQUFDO1lBQzNCLE9BQU8sRUFBRSxDQUFDO1lBQ1YsU0FBUyxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsVUFBVTtTQUM1QyxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsNEJBQTRCLEVBQUU7WUFDNUUsb0JBQW9CLEVBQUU7Z0JBQ3BCLEdBQUcsRUFBRSxhQUFhO2FBQ25CO1lBQ0QsbUJBQW1CLEVBQUU7Z0JBQ25CLGNBQWMsRUFBRSxJQUFJO2FBQ3JCO1lBQ0Qsd0JBQXdCLEVBQUUsQ0FBQztZQUMzQixPQUFPLEVBQUUsQ0FBQztZQUNWLFNBQVMsRUFBRSxZQUFZO1NBQ3hCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsa0ZBQWtGLEVBQUUsR0FBRyxFQUFFO0lBQzVGLFFBQVE7SUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM5QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFMUIsT0FBTztJQUNQLE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDVixHQUFHLENBQUMsV0FBVyxDQUFDO1lBQ2Qsd0JBQXdCLEVBQUUsQ0FBQyxFQUFFO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyw0RUFBNEUsQ0FBQyxDQUFDO0FBQzNGLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDBEQUEwRCxFQUFFLEdBQUcsRUFBRTtJQUNwRSxRQUFRO0lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDOUIsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTFCLE9BQU87SUFDUCxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsR0FBRyxDQUFDLFdBQVcsQ0FBQztZQUNkLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDWixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsMERBQTBELENBQUMsQ0FBQztBQUN6RSxDQUFDLENBQUMsQ0FBQztBQUVILFNBQVMsTUFBTSxDQUFDLEtBQWdCO0lBQzlCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFdEMsT0FBTyxJQUFJLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO1FBQ3BELEdBQUc7UUFDSCxZQUFZLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7UUFDL0UsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixFQUFFO0tBQ3pDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJy4uLy4uL2F3cy1lYzInO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgYXV0b3NjYWxpbmcgZnJvbSAnLi4vbGliJztcblxuZGVzY3JpYmUoJ3dhcm0gcG9vbCcsICgpID0+IHtcbiAgdGVzdCgnd2UgY2FuIGFkZCBhIHdhcm0gcG9vbCB3aXRob3V0IHByb3BlcnRpZXMnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBhc2cgPSBuZXdBU0coc3RhY2spO1xuXG4gICAgLy8gV0hFTlxuICAgIGFzZy5hZGRXYXJtUG9vbCgpO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkF1dG9TY2FsaW5nOjpXYXJtUG9vbCcsIHtcbiAgICAgIEF1dG9TY2FsaW5nR3JvdXBOYW1lOiB7XG4gICAgICAgIFJlZjogJ0FTRzQ2RUQzMDcwJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3dlIGNhbiBhZGQgYSB3YXJtIHBvb2wgd2l0aCBhbGwgb3B0aW9uYWwgcHJvcGVydGllcycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IGFzZyA9IG5ld0FTRyhzdGFjayk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXNnLmFkZFdhcm1Qb29sKHtcbiAgICAgIHJldXNlT25TY2FsZUluOiB0cnVlLFxuICAgICAgbWF4R3JvdXBQcmVwYXJlZENhcGFjaXR5OiA1LFxuICAgICAgbWluU2l6ZTogMixcbiAgICAgIHBvb2xTdGF0ZTogYXV0b3NjYWxpbmcuUG9vbFN0YXRlLkhJQkVSTkFURUQsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6QXV0b1NjYWxpbmc6Oldhcm1Qb29sJywge1xuICAgICAgQXV0b1NjYWxpbmdHcm91cE5hbWU6IHtcbiAgICAgICAgUmVmOiAnQVNHNDZFRDMwNzAnLFxuICAgICAgfSxcbiAgICAgIEluc3RhbmNlUmV1c2VQb2xpY3k6IHtcbiAgICAgICAgUmV1c2VPblNjYWxlSW46IHRydWUsXG4gICAgICB9LFxuICAgICAgTWF4R3JvdXBQcmVwYXJlZENhcGFjaXR5OiA1LFxuICAgICAgTWluU2l6ZTogMixcbiAgICAgIFBvb2xTdGF0ZTogJ0hpYmVybmF0ZWQnLFxuICAgIH0pO1xuICB9KTtcbn0pO1xuXG50ZXN0KCdhZGRpbmcgYSB3YXJtIHBvb2wgd2l0aCBtYXhHcm91cFByZXBhcmVkQ2FwYWNpdHkgc21hbGxlciB0aGFuIC0xIHRocm93cyBhbiBlcnJvcicsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IGFzZyA9IG5ld0FTRyhzdGFjayk7XG5cbiAgLy8gV0hFTlxuICBleHBlY3QoKCkgPT4ge1xuICAgIGFzZy5hZGRXYXJtUG9vbCh7XG4gICAgICBtYXhHcm91cFByZXBhcmVkQ2FwYWNpdHk6IC00MixcbiAgICB9KTtcbiAgfSkudG9UaHJvdygvJ21heEdyb3VwUHJlcGFyZWRDYXBhY2l0eScgcGFyYW1ldGVyIHNob3VsZCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gLTEvKTtcbn0pO1xuXG50ZXN0KCdhZGRpbmcgYSB3YXJtIHBvb2wgd2l0aCBuZWdhdGl2ZSBtaW5TaXplIHRocm93cyBhbiBlcnJvcicsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IGFzZyA9IG5ld0FTRyhzdGFjayk7XG5cbiAgLy8gV0hFTlxuICBleHBlY3QoKCkgPT4ge1xuICAgIGFzZy5hZGRXYXJtUG9vbCh7XG4gICAgICBtaW5TaXplOiAtMSxcbiAgICB9KTtcbiAgfSkudG9UaHJvdygvJ21pblNpemUnIHBhcmFtZXRlciBzaG91bGQgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDAvKTtcbn0pO1xuXG5mdW5jdGlvbiBuZXdBU0coc3RhY2s6IGNkay5TdGFjaykge1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuXG4gIHJldHVybiBuZXcgYXV0b3NjYWxpbmcuQXV0b1NjYWxpbmdHcm91cChzdGFjaywgJ0FTRycsIHtcbiAgICB2cGMsXG4gICAgaW5zdGFuY2VUeXBlOiBlYzIuSW5zdGFuY2VUeXBlLm9mKGVjMi5JbnN0YW5jZUNsYXNzLk00LCBlYzIuSW5zdGFuY2VTaXplLk1JQ1JPKSxcbiAgICBtYWNoaW5lSW1hZ2U6IG5ldyBlYzIuQW1hem9uTGludXhJbWFnZSgpLFxuICB9KTtcbn1cbiJdfQ==