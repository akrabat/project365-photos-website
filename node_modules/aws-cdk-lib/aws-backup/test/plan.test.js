"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const events = require("../../aws-events");
const core_1 = require("../../core");
const lib_1 = require("../lib");
let stack;
beforeEach(() => {
    stack = new core_1.Stack();
});
test('create a plan and add rules', () => {
    // GIVEN
    const vault = new lib_1.BackupVault(stack, 'Vault');
    const otherVault = new lib_1.BackupVault(stack, 'OtherVault');
    // WHEN
    const plan = new lib_1.BackupPlan(stack, 'Plan', {
        backupVault: vault,
        backupPlanRules: [
            new lib_1.BackupPlanRule({
                completionWindow: core_1.Duration.hours(2),
                startWindow: core_1.Duration.hours(1),
                scheduleExpression: events.Schedule.cron({
                    day: '15',
                    hour: '3',
                    minute: '30',
                }),
                moveToColdStorageAfter: core_1.Duration.days(30),
            }),
        ],
    });
    plan.addRule(lib_1.BackupPlanRule.monthly5Year(otherVault));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupPlan', {
        BackupPlan: {
            BackupPlanName: 'Plan',
            BackupPlanRule: [
                {
                    CompletionWindowMinutes: 120,
                    Lifecycle: {
                        MoveToColdStorageAfterDays: 30,
                    },
                    RuleName: 'PlanRule0',
                    ScheduleExpression: 'cron(30 3 15 * ? *)',
                    StartWindowMinutes: 60,
                    TargetBackupVault: {
                        'Fn::GetAtt': [
                            'Vault23237E5B',
                            'BackupVaultName',
                        ],
                    },
                },
                {
                    Lifecycle: {
                        DeleteAfterDays: 1825,
                        MoveToColdStorageAfterDays: 90,
                    },
                    RuleName: 'Monthly5Year',
                    ScheduleExpression: 'cron(0 5 1 * ? *)',
                    TargetBackupVault: {
                        'Fn::GetAtt': [
                            'OtherVault3C99BCE2',
                            'BackupVaultName',
                        ],
                    },
                },
            ],
        },
    });
});
test('create a plan with continuous backup option', () => {
    // GIVEN
    const vault = new lib_1.BackupVault(stack, 'Vault');
    // WHEN
    new lib_1.BackupPlan(stack, 'Plan', {
        backupVault: vault,
        backupPlanRules: [
            new lib_1.BackupPlanRule({
                enableContinuousBackup: true,
            }),
        ],
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupPlan', {
        BackupPlan: {
            BackupPlanName: 'Plan',
            BackupPlanRule: [
                {
                    EnableContinuousBackup: true,
                    Lifecycle: {
                        DeleteAfterDays: 35,
                    },
                    RuleName: 'PlanRule0',
                    TargetBackupVault: {
                        'Fn::GetAtt': [
                            'Vault23237E5B',
                            'BackupVaultName',
                        ],
                    },
                },
            ],
        },
    });
});
test('create a plan with continuous backup option and specify deleteAfter', () => {
    // GIVEN
    const vault = new lib_1.BackupVault(stack, 'Vault');
    // WHEN
    new lib_1.BackupPlan(stack, 'Plan', {
        backupVault: vault,
        backupPlanRules: [
            new lib_1.BackupPlanRule({
                enableContinuousBackup: true,
                deleteAfter: core_1.Duration.days(1),
            }),
        ],
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupPlan', {
        BackupPlan: {
            BackupPlanName: 'Plan',
            BackupPlanRule: [
                {
                    EnableContinuousBackup: true,
                    Lifecycle: {
                        DeleteAfterDays: 1,
                    },
                    RuleName: 'PlanRule0',
                    TargetBackupVault: {
                        'Fn::GetAtt': [
                            'Vault23237E5B',
                            'BackupVaultName',
                        ],
                    },
                },
            ],
        },
    });
});
test('create a plan and add rules - add BackupPlan.AdvancedBackupSettings.BackupOptions', () => {
    const vault = new lib_1.BackupVault(stack, 'Vault');
    const otherVault = new lib_1.BackupVault(stack, 'OtherVault');
    // WHEN
    const plan = new lib_1.BackupPlan(stack, 'Plan', {
        windowsVss: true,
        backupVault: vault,
        backupPlanRules: [
            new lib_1.BackupPlanRule({
                completionWindow: core_1.Duration.hours(2),
                startWindow: core_1.Duration.hours(1),
                scheduleExpression: events.Schedule.cron({
                    day: '15',
                    hour: '3',
                    minute: '30',
                }),
                moveToColdStorageAfter: core_1.Duration.days(30),
            }),
        ],
    });
    plan.addRule(lib_1.BackupPlanRule.monthly5Year(otherVault));
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupPlan', {
        BackupPlan: {
            AdvancedBackupSettings: [{ BackupOptions: { WindowsVSS: 'enabled' }, ResourceType: 'EC2' }],
        },
    });
});
test('daily35DayRetention', () => {
    // WHEN
    lib_1.BackupPlan.daily35DayRetention(stack, 'D35');
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupPlan', {
        BackupPlan: {
            BackupPlanName: 'D35',
            BackupPlanRule: [
                {
                    Lifecycle: {
                        DeleteAfterDays: 35,
                    },
                    RuleName: 'Daily',
                    ScheduleExpression: 'cron(0 5 * * ? *)',
                    TargetBackupVault: {
                        'Fn::GetAtt': [
                            'D35Vault2A9EB06F',
                            'BackupVaultName',
                        ],
                    },
                },
            ],
        },
    });
});
test('dailyWeeklyMonthly7YearRetention', () => {
    // WHEN
    lib_1.BackupPlan.dailyWeeklyMonthly7YearRetention(stack, 'DWM7');
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupPlan', {
        BackupPlan: {
            BackupPlanName: 'DWM7',
            BackupPlanRule: [
                {
                    Lifecycle: {
                        DeleteAfterDays: 35,
                    },
                    RuleName: 'Daily',
                    ScheduleExpression: 'cron(0 5 * * ? *)',
                    TargetBackupVault: {
                        'Fn::GetAtt': [
                            'DWM7Vault21F17E61',
                            'BackupVaultName',
                        ],
                    },
                },
                {
                    Lifecycle: {
                        DeleteAfterDays: 90,
                    },
                    RuleName: 'Weekly',
                    ScheduleExpression: 'cron(0 5 ? * SAT *)',
                    TargetBackupVault: {
                        'Fn::GetAtt': [
                            'DWM7Vault21F17E61',
                            'BackupVaultName',
                        ],
                    },
                },
                {
                    Lifecycle: {
                        DeleteAfterDays: 2555,
                        MoveToColdStorageAfterDays: 90,
                    },
                    RuleName: 'Monthly7Year',
                    ScheduleExpression: 'cron(0 5 1 * ? *)',
                    TargetBackupVault: {
                        'Fn::GetAtt': [
                            'DWM7Vault21F17E61',
                            'BackupVaultName',
                        ],
                    },
                },
            ],
        },
    });
});
test('automatically creates a new vault', () => {
    // GIVEN
    const plan = new lib_1.BackupPlan(stack, 'Plan');
    // WHEN
    plan.addRule(lib_1.BackupPlanRule.daily());
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupPlan', {
        BackupPlan: {
            BackupPlanName: 'Plan',
            BackupPlanRule: [
                {
                    Lifecycle: {
                        DeleteAfterDays: 35,
                    },
                    RuleName: 'Daily',
                    ScheduleExpression: 'cron(0 5 * * ? *)',
                    TargetBackupVault: {
                        'Fn::GetAtt': [
                            'PlanVault0284B0C2',
                            'BackupVaultName',
                        ],
                    },
                },
            ],
        },
    });
});
test('create a plan and add rule to copy to a different vault', () => {
    // GIVEN
    const primaryVault = new lib_1.BackupVault(stack, 'PrimaryVault');
    const secondaryVault = new lib_1.BackupVault(stack, 'SecondaryVault');
    // WHEN
    new lib_1.BackupPlan(stack, 'Plan', {
        backupVault: primaryVault,
        backupPlanRules: [
            new lib_1.BackupPlanRule({
                copyActions: [{
                        destinationBackupVault: secondaryVault,
                        deleteAfter: core_1.Duration.days(120),
                        moveToColdStorageAfter: core_1.Duration.days(30),
                    }],
            }),
        ],
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupPlan', {
        BackupPlan: {
            BackupPlanName: 'Plan',
            BackupPlanRule: [
                {
                    RuleName: 'PlanRule0',
                    TargetBackupVault: {
                        'Fn::GetAtt': [
                            'PrimaryVault9BBEBB0D',
                            'BackupVaultName',
                        ],
                    },
                    CopyActions: [{
                            DestinationBackupVaultArn: {
                                'Fn::GetAtt': [
                                    'SecondaryVault67665B5E',
                                    'BackupVaultArn',
                                ],
                            },
                            Lifecycle: {
                                DeleteAfterDays: 120,
                                MoveToColdStorageAfterDays: 30,
                            },
                        }],
                },
            ],
        },
    });
});
test('throws when deleteAfter is not greater than moveToColdStorageAfter', () => {
    expect(() => new lib_1.BackupPlanRule({
        deleteAfter: core_1.Duration.days(5),
        moveToColdStorageAfter: core_1.Duration.days(6),
    })).toThrow(/`deleteAfter` must be greater than `moveToColdStorageAfter`/);
});
test('throws when scheduleExpression is not of type cron', () => {
    expect(() => new lib_1.BackupPlanRule({
        scheduleExpression: events.Schedule.rate(core_1.Duration.hours(5)),
    })).toThrow(/`scheduleExpression` must be of type `cron`/);
});
test('synth fails when plan has no rules', () => {
    // GIVEN
    const app = new core_1.App();
    const myStack = new core_1.Stack(app, 'Stack');
    // WHEN
    new lib_1.BackupPlan(myStack, 'Plan');
    expect(() => app.synth()).toThrow(/A backup plan must have at least 1 rule/);
});
test('throws when moveToColdStorageAfter is used with enableContinuousBackup', () => {
    expect(() => new lib_1.BackupPlanRule({
        enableContinuousBackup: true,
        deleteAfter: core_1.Duration.days(30),
        moveToColdStorageAfter: core_1.Duration.days(10),
    })).toThrow(/`moveToColdStorageAfter` must not be specified if `enableContinuousBackup` is enabled/);
});
test('throws when deleteAfter is less than 1 in combination with enableContinuousBackup', () => {
    expect(() => new lib_1.BackupPlanRule({
        enableContinuousBackup: true,
        deleteAfter: core_1.Duration.days(0),
    })).toThrow(/'deleteAfter' must be between 1 and 35 days if 'enableContinuousBackup' is enabled, but got 0 days/);
});
test('throws when deleteAfter is greater than 35 in combination with enableContinuousBackup', () => {
    expect(() => new lib_1.BackupPlanRule({
        enableContinuousBackup: true,
        deleteAfter: core_1.Duration.days(36),
    })).toThrow(/'deleteAfter' must be between 1 and 35 days if 'enableContinuousBackup' is enabled, but got 36 days/);
});
test('throws when deleteAfter is not greater than moveToColdStorageAfter in a copy action', () => {
    expect(() => new lib_1.BackupPlanRule({
        copyActions: [{
                destinationBackupVault: new lib_1.BackupVault(stack, 'Vault'),
                deleteAfter: core_1.Duration.days(5),
                moveToColdStorageAfter: core_1.Duration.days(6),
            }],
    })).toThrow(/deleteAfter' must at least 90 days later than corresponding 'moveToColdStorageAfter'\nreceived 'deleteAfter: 5' and 'moveToColdStorageAfter: 6'/);
});
test('throws when deleteAfter is not greater than 90 days past moveToColdStorageAfter parameter in a copy action', () => {
    expect(() => new lib_1.BackupPlanRule({
        copyActions: [{
                destinationBackupVault: new lib_1.BackupVault(stack, 'Vault'),
                deleteAfter: core_1.Duration.days(45),
                moveToColdStorageAfter: core_1.Duration.days(30),
            }],
    })).toThrow(/'deleteAfter' must at least 90 days later than corresponding 'moveToColdStorageAfter'\nreceived 'deleteAfter: 45' and 'moveToColdStorageAfter: 30'/);
});
//# sourceMappingURL=data:application/json;base64,