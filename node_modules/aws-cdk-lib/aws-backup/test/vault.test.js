"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const iam = require("../../aws-iam");
const kms = require("../../aws-kms");
const sns = require("../../aws-sns");
const core_1 = require("../../core");
const lib_1 = require("../lib");
let stack;
beforeEach(() => {
    stack = new core_1.Stack();
});
test('create a vault', () => {
    // WHEN
    new lib_1.BackupVault(stack, 'Vault');
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupVault', {
        BackupVaultName: 'Vault',
    });
});
test('with access policy', () => {
    // GIVEN
    const accessPolicy = new iam.PolicyDocument({
        statements: [
            new iam.PolicyStatement({
                effect: iam.Effect.DENY,
                principals: [new iam.AnyPrincipal()],
                actions: ['backup:DeleteRecoveryPoint'],
                resources: ['*'],
                conditions: {
                    StringNotLike: {
                        'aws:userId': [
                            'user-arn',
                        ],
                    },
                },
            }),
        ],
    });
    // WHEN
    new lib_1.BackupVault(stack, 'Vault', {
        accessPolicy,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupVault', {
        AccessPolicy: {
            Version: '2012-10-17',
            Statement: [
                {
                    Effect: 'Deny',
                    Principal: { AWS: '*' },
                    Action: 'backup:DeleteRecoveryPoint',
                    Resource: '*',
                    Condition: {
                        StringNotLike: {
                            'aws:userId': [
                                'user-arn',
                            ],
                        },
                    },
                },
            ],
        },
    });
});
test('with blockRecoveryPointDeletion', () => {
    // WHEN
    new lib_1.BackupVault(stack, 'Vault', {
        blockRecoveryPointDeletion: true,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupVault', {
        AccessPolicy: {
            Version: '2012-10-17',
            Statement: [
                {
                    Effect: 'Deny',
                    Principal: {
                        AWS: '*',
                    },
                    Action: [
                        'backup:DeleteRecoveryPoint',
                        'backup:UpdateRecoveryPointLifecycle',
                    ],
                    Resource: '*',
                },
            ],
        },
    });
});
test('merges statements from accessPolicy and blockRecoveryPointDeletion', () => {
    // WHEN
    new lib_1.BackupVault(stack, 'Vault', {
        accessPolicy: new iam.PolicyDocument({
            statements: [
                new iam.PolicyStatement({
                    effect: iam.Effect.DENY,
                    principals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:role/MyRole')],
                    actions: ['backup:StartRestoreJob'],
                }),
            ],
        }),
        blockRecoveryPointDeletion: true,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupVault', {
        AccessPolicy: {
            Version: '2012-10-17',
            Statement: [
                {
                    Action: 'backup:StartRestoreJob',
                    Effect: 'Deny',
                    Principal: {
                        AWS: 'arn:aws:iam::123456789012:role/MyRole',
                    },
                },
                {
                    Effect: 'Deny',
                    Principal: {
                        AWS: '*',
                    },
                    Action: [
                        'backup:DeleteRecoveryPoint',
                        'backup:UpdateRecoveryPointLifecycle',
                    ],
                    Resource: '*',
                },
            ],
        },
    });
});
test('addToAccessPolicy()', () => {
    // GIVEN
    const vault = new lib_1.BackupVault(stack, 'Vault');
    // WHEN
    vault.addToAccessPolicy(new iam.PolicyStatement({
        effect: iam.Effect.DENY,
        principals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:role/MyRole')],
        actions: ['backup:StartRestoreJob'],
    }));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupVault', {
        AccessPolicy: {
            Version: '2012-10-17',
            Statement: [
                {
                    Action: 'backup:StartRestoreJob',
                    Effect: 'Deny',
                    Principal: {
                        AWS: 'arn:aws:iam::123456789012:role/MyRole',
                    },
                },
            ],
        },
    });
});
test('blockRecoveryPointDeletion()', () => {
    // GIVEN
    const vault = new lib_1.BackupVault(stack, 'Vault');
    // WHEN
    vault.blockRecoveryPointDeletion();
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupVault', {
        AccessPolicy: {
            Version: '2012-10-17',
            Statement: [
                {
                    Effect: 'Deny',
                    Principal: {
                        AWS: '*',
                    },
                    Action: [
                        'backup:DeleteRecoveryPoint',
                        'backup:UpdateRecoveryPointLifecycle',
                    ],
                    Resource: '*',
                },
            ],
        },
    });
});
test('with encryption key', () => {
    // GIVEN
    const encryptionKey = new kms.Key(stack, 'Key');
    // WHEN
    new lib_1.BackupVault(stack, 'Vault', {
        encryptionKey,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupVault', {
        EncryptionKeyArn: {
            'Fn::GetAtt': [
                'Key961B73FD',
                'Arn',
            ],
        },
    });
});
test('with notifications', () => {
    // GIVEN
    const topic = new sns.Topic(stack, 'Topic');
    // WHEN
    new lib_1.BackupVault(stack, 'Vault', {
        notificationTopic: topic,
        notificationEvents: [
            lib_1.BackupVaultEvents.BACKUP_JOB_COMPLETED,
            lib_1.BackupVaultEvents.COPY_JOB_FAILED,
        ],
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupVault', {
        Notifications: {
            BackupVaultEvents: [
                'BACKUP_JOB_COMPLETED',
                'COPY_JOB_FAILED',
            ],
            SNSTopicArn: {
                Ref: 'TopicBFC7AF6E',
            },
        },
    });
});
test('defaults to all notifications', () => {
    // GIVEN
    const topic = new sns.Topic(stack, 'Topic');
    // WHEN
    new lib_1.BackupVault(stack, 'Vault', {
        notificationTopic: topic,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupVault', {
        Notifications: {
            BackupVaultEvents: Object.values(lib_1.BackupVaultEvents),
            SNSTopicArn: {
                Ref: 'TopicBFC7AF6E',
            },
        },
    });
});
test('import from arn', () => {
    // WHEN
    const vaultArn = stack.formatArn({
        service: 'backup',
        resource: 'backup-vault',
        resourceName: 'myVaultName',
        arnFormat: core_1.ArnFormat.COLON_RESOURCE_NAME,
    });
    const vault = lib_1.BackupVault.fromBackupVaultArn(stack, 'Vault', vaultArn);
    // THEN
    expect(vault.backupVaultName).toEqual('myVaultName');
    expect(vault.backupVaultArn).toEqual(vaultArn);
});
test('import from name', () => {
    // WHEN
    const vaultName = 'myVaultName';
    const vault = lib_1.BackupVault.fromBackupVaultName(stack, 'Vault', vaultName);
    // THEN
    expect(vault.backupVaultName).toEqual(vaultName);
    expect(vault.backupVaultArn).toEqual(stack.formatArn({
        service: 'backup',
        resource: 'backup-vault',
        resourceName: 'myVaultName',
        arnFormat: core_1.ArnFormat.COLON_RESOURCE_NAME,
    }));
});
test('grant action', () => {
    // GIVEN
    const vaultName = 'myVaultName';
    const vault = lib_1.BackupVault.fromBackupVaultName(stack, 'Vault', vaultName);
    const role = new iam.Role(stack, 'role', { assumedBy: new iam.ServicePrincipal('lambda') });
    // WHEN
    vault.grant(role, 'backup:StartBackupJob');
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: 'backup:StartBackupJob',
                    Effect: 'Allow',
                    Resource: {
                        'Fn::Join': [
                            '',
                            [
                                'arn:',
                                {
                                    Ref: 'AWS::Partition',
                                },
                                ':backup:',
                                {
                                    Ref: 'AWS::Region',
                                },
                                ':',
                                {
                                    Ref: 'AWS::AccountId',
                                },
                                ':backup-vault:myVaultName',
                            ],
                        ],
                    },
                },
            ],
            Version: '2012-10-17',
        },
        PolicyName: 'roleDefaultPolicy7C980EBA',
        Roles: [
            {
                Ref: 'roleC7B7E775',
            },
        ],
    });
});
test('throw when grant action includes wildcard', () => {
    // GIVEN
    const vaultName = 'myVaultName';
    const vault = lib_1.BackupVault.fromBackupVaultName(stack, 'Vault', vaultName);
    const role = new iam.Role(stack, 'role', { assumedBy: new iam.ServicePrincipal('lambda') });
    // WHEN
    expect(() => vault.grant(role, 'backup:*')).toThrow(/AWS Backup access policies don't support a wildcard in the Action key\./);
});
test('throws with invalid name', () => {
    expect(() => new lib_1.BackupVault(stack, 'Vault', {
        backupVaultName: 'Hello!Inv@lid',
    })).toThrow(/Expected vault name to match pattern/);
});
test('throws with whitespace in name', () => {
    expect(() => new lib_1.BackupVault(stack, 'Vault', {
        backupVaultName: 'Hello Invalid',
    })).toThrow(/Expected vault name to match pattern/);
});
test('throws with too short name', () => {
    expect(() => new lib_1.BackupVault(stack, 'Vault', {
        backupVaultName: 'x',
    })).toThrow(/Expected vault name to match pattern/);
});
test('with lock configuration', () => {
    // WHEN
    new lib_1.BackupVault(stack, 'Vault', {
        lockConfiguration: {
            minRetention: core_1.Duration.days(30),
            maxRetention: core_1.Duration.days(365),
            changeableFor: core_1.Duration.days(7),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Backup::BackupVault', {
        LockConfiguration: {
            ChangeableForDays: 7,
            MaxRetentionDays: 365,
            MinRetentionDays: 30,
        },
    });
});
test('throws with incorrect lock configuration - min retention', () => {
    expect(() => new lib_1.BackupVault(stack, 'Vault', {
        lockConfiguration: {
            minRetention: core_1.Duration.hours(12),
        },
    })).toThrow(/The shortest minimum retention period you can specify is 1 day/);
});
test('throws with incorrect lock configuration - max retention', () => {
    expect(() => new lib_1.BackupVault(stack, 'Vault', {
        lockConfiguration: {
            minRetention: core_1.Duration.days(7),
            maxRetention: core_1.Duration.days(40000),
        },
    })).toThrow(/The longest maximum retention period you can specify is 36500 days/);
});
test('throws with incorrect lock configuration - max and min retention', () => {
    expect(() => new lib_1.BackupVault(stack, 'Vault', {
        lockConfiguration: {
            minRetention: core_1.Duration.days(7),
            maxRetention: core_1.Duration.days(4),
        },
    })).toThrow(/The maximum retention period \(4 days\) must be greater than the minimum retention period \(7 days\)/);
});
test('throws with incorrect lock configuration - changeable for', () => {
    expect(() => new lib_1.BackupVault(stack, 'Vault', {
        lockConfiguration: {
            minRetention: core_1.Duration.days(7),
            changeableFor: core_1.Duration.days(1),
        },
    })).toThrow(/AWS Backup enforces a 72-hour cooling-off period before Vault Lock takes effect and becomes immutable/);
});
//# sourceMappingURL=data:application/json;base64,