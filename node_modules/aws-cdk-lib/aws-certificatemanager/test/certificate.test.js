"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const route53 = require("../../aws-route53");
const core_1 = require("../../core");
const lib_1 = require("../lib");
test('apex domain selection by default', () => {
    const stack = new core_1.Stack();
    new lib_1.Certificate(stack, 'Certificate', {
        domainName: 'test.example.com',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
        DomainName: 'test.example.com',
        DomainValidationOptions: [{
                DomainName: 'test.example.com',
                ValidationDomain: 'example.com',
            }],
    });
});
test('metricDaysToExpiry', () => {
    const stack = new core_1.Stack();
    const certificate = new lib_1.Certificate(stack, 'Certificate', {
        domainName: 'test.example.com',
    });
    expect(stack.resolve(certificate.metricDaysToExpiry().toMetricConfig())).toEqual({
        metricStat: {
            dimensions: [{ name: 'CertificateArn', value: stack.resolve(certificate.certificateArn) }],
            metricName: 'DaysToExpiry',
            namespace: 'AWS/CertificateManager',
            period: core_1.Duration.days(1),
            statistic: 'Minimum',
        },
        renderingProperties: expect.anything(),
    });
});
test('validation domain can be overridden', () => {
    const stack = new core_1.Stack();
    new lib_1.Certificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        validation: lib_1.CertificateValidation.fromEmail({
            'test.example.com': 'test.example.com',
        }),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
        DomainValidationOptions: [{
                DomainName: 'test.example.com',
                ValidationDomain: 'test.example.com',
            }],
    });
});
test('export and import', () => {
    // GIVEN
    const stack = new core_1.Stack();
    // WHEN
    const c = lib_1.Certificate.fromCertificateArn(stack, 'Imported', 'cert-arn');
    // THEN
    expect(c.certificateArn).toBe('cert-arn');
});
test('can configure validation method', () => {
    const stack = new core_1.Stack();
    new lib_1.Certificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        validation: lib_1.CertificateValidation.fromDns(),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
        DomainName: 'test.example.com',
        ValidationMethod: 'DNS',
    });
});
test('throws when domain name is longer than 64 characters', () => {
    const stack = new core_1.Stack();
    expect(() => {
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'example.com'.repeat(7),
        });
    }).toThrow(/Domain name must be 64 characters or less/);
});
test('does not throw when domain name is longer than 64 characters with tokens', () => {
    const stack = new core_1.Stack();
    const embededToken = core_1.Aws.REGION;
    const baseDomain = 'a'.repeat(65 - embededToken.length);
    const domainName = `${embededToken}${baseDomain}`;
    new lib_1.Certificate(stack, 'Certificate', {
        domainName,
        validation: lib_1.CertificateValidation.fromEmail({
            [domainName]: 'example.com',
        }),
    });
    const domainNameJoin = {
        'Fn::Join': [
            '',
            [
                {
                    Ref: 'AWS::Region',
                },
                baseDomain,
            ],
        ],
    };
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
        DomainName: domainNameJoin,
        DomainValidationOptions: [{
                DomainName: domainNameJoin,
                ValidationDomain: 'example.com',
            }],
    });
});
test('needs validation domain supplied if domain contains a token', () => {
    const stack = new core_1.Stack();
    expect(() => {
        const domainName = core_1.Lazy.string({ produce: () => 'example.com' });
        new lib_1.Certificate(stack, 'Certificate', {
            domainName,
        });
    }).toThrow(/'validationDomains' needs to be supplied/);
});
test('validationdomains can be given for a Token', () => {
    const stack = new core_1.Stack();
    const domainName = core_1.Lazy.string({ produce: () => 'my.example.com' });
    new lib_1.Certificate(stack, 'Certificate', {
        domainName,
        validation: lib_1.CertificateValidation.fromEmail({
            [domainName]: 'example.com',
        }),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
        DomainName: 'my.example.com',
        DomainValidationOptions: [{
                DomainName: 'my.example.com',
                ValidationDomain: 'example.com',
            }],
    });
});
test('CertificateValidation.fromEmail', () => {
    const stack = new core_1.Stack();
    new lib_1.Certificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        subjectAlternativeNames: ['extra.example.com'],
        validation: lib_1.CertificateValidation.fromEmail({
            'test.example.com': 'example.com',
        }),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
        DomainName: 'test.example.com',
        SubjectAlternativeNames: ['extra.example.com'],
        DomainValidationOptions: [
            {
                DomainName: 'test.example.com',
                ValidationDomain: 'example.com',
            },
            {
                DomainName: 'extra.example.com',
                ValidationDomain: 'example.com',
            },
        ],
        ValidationMethod: 'EMAIL',
    });
});
describe('CertificateValidation.fromDns', () => {
    test('without a hosted zone', () => {
        const stack = new core_1.Stack();
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            subjectAlternativeNames: ['extra.example.com'],
            validation: lib_1.CertificateValidation.fromDns(),
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            SubjectAlternativeNames: ['extra.example.com'],
            ValidationMethod: 'DNS',
        });
    });
    test('with a hosted zone', () => {
        const stack = new core_1.Stack();
        const exampleCom = new route53.HostedZone(stack, 'ExampleCom', {
            zoneName: 'example.com',
        });
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            validation: lib_1.CertificateValidation.fromDns(exampleCom),
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            DomainValidationOptions: [
                {
                    DomainName: 'test.example.com',
                    HostedZoneId: {
                        Ref: 'ExampleCom20E1324B',
                    },
                },
            ],
            ValidationMethod: 'DNS',
        });
    });
    test('with an imported hosted zone', () => {
        const stack = new core_1.Stack();
        const exampleCom = route53.PublicHostedZone.fromHostedZoneId(stack, 'ExampleCom', 'sampleid');
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            validation: lib_1.CertificateValidation.fromDns(exampleCom),
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            DomainValidationOptions: [
                {
                    DomainName: 'test.example.com',
                    HostedZoneId: 'sampleid',
                },
            ],
            ValidationMethod: 'DNS',
        });
    });
    test('with hosted zone and a wildcard name', () => {
        const stack = new core_1.Stack();
        const exampleCom = new route53.HostedZone(stack, 'ExampleCom', {
            zoneName: 'example.com',
        });
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            validation: lib_1.CertificateValidation.fromDns(exampleCom),
            subjectAlternativeNames: ['*.test.example.com'],
        });
        //Wildcard domain names are de-duped.
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            DomainValidationOptions: [
                {
                    DomainName: 'test.example.com',
                    HostedZoneId: {
                        Ref: 'ExampleCom20E1324B',
                    },
                },
            ],
            ValidationMethod: 'DNS',
        });
    });
    test('with hosted zone and multiple wildcard names', () => {
        const stack = new core_1.Stack();
        const exampleCom = new route53.HostedZone(stack, 'ExampleCom', {
            zoneName: 'example.com',
        });
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            validation: lib_1.CertificateValidation.fromDns(exampleCom),
            subjectAlternativeNames: ['*.test.example.com', '*.foo.test.example.com', 'bar.test.example.com'],
        });
        //Wildcard domain names are de-duped.
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            DomainValidationOptions: [
                {
                    DomainName: 'test.example.com',
                    HostedZoneId: {
                        Ref: 'ExampleCom20E1324B',
                    },
                },
                {
                    DomainName: '*.foo.test.example.com',
                    HostedZoneId: {
                        Ref: 'ExampleCom20E1324B',
                    },
                },
                {
                    DomainName: 'bar.test.example.com',
                    HostedZoneId: {
                        Ref: 'ExampleCom20E1324B',
                    },
                },
            ],
            ValidationMethod: 'DNS',
        });
    });
});
test('CertificateValidation.fromDnsMultiZone', () => {
    const stack = new core_1.Stack();
    const exampleCom = new route53.HostedZone(stack, 'ExampleCom', {
        zoneName: 'example.com',
    });
    const exampleNet = new route53.HostedZone(stack, 'ExampleNet', {
        zoneName: 'example.com',
    });
    new lib_1.Certificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        subjectAlternativeNames: ['cool.example.com', 'test.example.net'],
        validation: lib_1.CertificateValidation.fromDnsMultiZone({
            'test.example.com': exampleCom,
            'cool.example.com': exampleCom,
            'test.example.net': exampleNet,
        }),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
        DomainName: 'test.example.com',
        DomainValidationOptions: [
            {
                DomainName: 'test.example.com',
                HostedZoneId: {
                    Ref: 'ExampleCom20E1324B',
                },
            },
            {
                DomainName: 'cool.example.com',
                HostedZoneId: {
                    Ref: 'ExampleCom20E1324B',
                },
            },
            {
                DomainName: 'test.example.net',
                HostedZoneId: {
                    Ref: 'ExampleNetF7CA40C9',
                },
            },
        ],
        ValidationMethod: 'DNS',
    });
});
describe('Transparency logging settings', () => {
    test('leaves transparency logging untouched by default', () => {
        const stack = new core_1.Stack();
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
        });
        const certificateNodes = assertions_1.Template.fromStack(stack).findResources('AWS::CertificateManager::Certificate');
        expect(certificateNodes.Certificate4E7ABB08).toBeDefined();
        expect(certificateNodes.Certificate4E7ABB08.CertificateTransparencyLoggingPreference).toBeUndefined();
    });
    test('can enable transparency logging', () => {
        const stack = new core_1.Stack();
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            transparencyLoggingEnabled: true,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            CertificateTransparencyLoggingPreference: 'ENABLED',
        });
    });
    test('can disable transparency logging', () => {
        const stack = new core_1.Stack();
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            transparencyLoggingEnabled: false,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            CertificateTransparencyLoggingPreference: 'DISABLED',
        });
    });
});
describe('Certifcate Name setting', () => {
    test('the Name tag is defaulted to path', () => {
        const stack = new core_1.Stack(undefined, 'TestStack');
        new lib_1.Certificate(stack, 'TheCertificate', {
            domainName: 'test.example.com',
        });
        assertions_1.Template.fromStack(stack).hasResource('AWS::CertificateManager::Certificate', hasTags([{ Key: 'Name', Value: 'TestStack/TheCertificate' }]));
    });
    test('Can provide a custom certificate name', () => {
        const stack = new core_1.Stack(undefined, 'TestStack');
        new lib_1.Certificate(stack, 'TheCertificate', {
            domainName: 'test.example.com',
            certificateName: 'Custom Certificate Name',
        });
        assertions_1.Template.fromStack(stack).hasResource('AWS::CertificateManager::Certificate', hasTags([{ Key: 'Name', Value: 'Custom Certificate Name' }]));
    });
});
function hasTags(expectedTags) {
    return {
        Properties: {
            Tags: assertions_1.Match.arrayWith(expectedTags),
        },
    };
}
//# sourceMappingURL=data:application/json;base64,