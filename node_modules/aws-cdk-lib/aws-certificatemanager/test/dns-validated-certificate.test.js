"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const iam = require("../../aws-iam");
const aws_route53_1 = require("../../aws-route53");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../core");
const dns_validated_certificate_1 = require("../lib/dns-validated-certificate");
(0, cdk_build_tools_1.testDeprecated)('creates CloudFormation Custom Resource', () => {
    const stack = new core_1.Stack();
    const exampleDotComZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
        zoneName: 'example.com',
    });
    new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        hostedZone: exampleDotComZone,
        subjectAlternativeNames: ['test2.example.com'],
        cleanupRoute53Records: true,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFormation::CustomResource', {
        DomainName: 'test.example.com',
        SubjectAlternativeNames: ['test2.example.com'],
        ServiceToken: {
            'Fn::GetAtt': [
                'CertificateCertificateRequestorFunction5E845413',
                'Arn',
            ],
        },
        HostedZoneId: {
            Ref: 'ExampleDotCom4D1B83AA',
        },
        CleanupRecords: 'true',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Function', {
        Handler: 'index.certificateRequestHandler',
        Runtime: 'nodejs14.x',
        Timeout: 900,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyName: 'CertificateCertificateRequestorFunctionServiceRoleDefaultPolicy3C8845BC',
        Roles: [
            {
                Ref: 'CertificateCertificateRequestorFunctionServiceRoleC04C13DA',
            },
        ],
        PolicyDocument: {
            Version: '2012-10-17',
            Statement: [
                {
                    Action: [
                        'acm:RequestCertificate',
                        'acm:DescribeCertificate',
                        'acm:DeleteCertificate',
                        'acm:AddTagsToCertificate',
                    ],
                    Effect: 'Allow',
                    Resource: '*',
                },
                {
                    Action: 'route53:GetChange',
                    Effect: 'Allow',
                    Resource: '*',
                },
                {
                    Action: 'route53:changeResourceRecordSets',
                    Effect: 'Allow',
                    Resource: {
                        'Fn::Join': [
                            '',
                            [
                                'arn:',
                                { Ref: 'AWS::Partition' },
                                ':route53:::hostedzone/',
                                { Ref: 'ExampleDotCom4D1B83AA' },
                            ],
                        ],
                    },
                    Condition: {
                        'ForAllValues:StringEquals': {
                            'route53:ChangeResourceRecordSetsRecordTypes': ['CNAME'],
                            'route53:ChangeResourceRecordSetsActions': ['UPSERT', 'DELETE'],
                        },
                        'ForAllValues:StringLike': {
                            'route53:ChangeResourceRecordSetsNormalizedRecordNames': [
                                '*.test.example.com',
                                '*.test2.example.com',
                            ],
                        },
                    },
                },
            ],
        },
    });
});
(0, cdk_build_tools_1.testDeprecated)('adds validation error on domain mismatch', () => {
    const stack = new core_1.Stack();
    const helloDotComZone = new aws_route53_1.PublicHostedZone(stack, 'HelloDotCom', {
        zoneName: 'hello.com',
    });
    new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
        domainName: 'example.com',
        hostedZone: helloDotComZone,
    });
    expect(() => {
        assertions_1.Template.fromStack(stack);
    }).toThrow(/DNS zone hello.com is not authoritative for certificate domain name example.com/);
});
(0, cdk_build_tools_1.testDeprecated)('does not try to validate unresolved tokens', () => {
    const stack = new core_1.Stack();
    const helloDotComZone = new aws_route53_1.PublicHostedZone(stack, 'HelloDotCom', {
        zoneName: core_1.Token.asString('hello.com'),
    });
    new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
        domainName: 'hello.com',
        hostedZone: helloDotComZone,
    });
    assertions_1.Template.fromStack(stack); // does not throw
});
(0, cdk_build_tools_1.testDeprecated)('test root certificate', () => {
    const stack = new core_1.Stack();
    const exampleDotComZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
        zoneName: 'example.com',
    });
    new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
        domainName: 'example.com',
        hostedZone: exampleDotComZone,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFormation::CustomResource', {
        ServiceToken: {
            'Fn::GetAtt': [
                'CertCertificateRequestorFunction98FDF273',
                'Arn',
            ],
        },
        DomainName: 'example.com',
        HostedZoneId: {
            Ref: 'ExampleDotCom4D1B83AA',
        },
    });
});
(0, cdk_build_tools_1.testDeprecated)('test tags are passed to customresource', () => {
    const stack = new core_1.Stack();
    core_1.Tags.of(stack).add('Key1', 'Value1');
    const exampleDotComZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
        zoneName: 'example.com',
    });
    new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
        domainName: 'example.com',
        hostedZone: exampleDotComZone,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFormation::CustomResource', {
        ServiceToken: {
            'Fn::GetAtt': [
                'CertCertificateRequestorFunction98FDF273',
                'Arn',
            ],
        },
        DomainName: 'example.com',
        HostedZoneId: {
            Ref: 'ExampleDotCom4D1B83AA',
        },
        Tags: {
            Key1: 'Value1',
        },
    });
});
(0, cdk_build_tools_1.testDeprecated)('works with imported zone', () => {
    // GIVEN
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'Stack', {
        env: { account: '12345678', region: 'us-blue-5' },
    });
    const imported = aws_route53_1.HostedZone.fromLookup(stack, 'ExampleDotCom', {
        domainName: 'mydomain.com',
    });
    // WHEN
    new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
        domainName: 'mydomain.com',
        hostedZone: imported,
        route53Endpoint: 'https://api.route53.xxx.com',
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFormation::CustomResource', {
        ServiceToken: {
            'Fn::GetAtt': [
                'CertCertificateRequestorFunction98FDF273',
                'Arn',
            ],
        },
        DomainName: 'mydomain.com',
        HostedZoneId: 'DUMMY',
        Route53Endpoint: 'https://api.route53.xxx.com',
    });
});
(0, cdk_build_tools_1.testDeprecated)('works with imported role', () => {
    // GIVEN
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'Stack', {
        env: { account: '12345678', region: 'us-blue-5' },
    });
    const helloDotComZone = new aws_route53_1.PublicHostedZone(stack, 'HelloDotCom', {
        zoneName: 'hello.com',
    });
    const role = iam.Role.fromRoleArn(stack, 'Role', 'arn:aws:iam::account-id:role/role-name');
    // WHEN
    new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
        domainName: 'hello.com',
        hostedZone: helloDotComZone,
        customResourceRole: role,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Function', {
        Role: 'arn:aws:iam::account-id:role/role-name',
    });
});
(0, cdk_build_tools_1.testDeprecated)('throws when domain name is longer than 64 characters', () => {
    const stack = new core_1.Stack();
    const exampleDotComZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
        zoneName: 'example.com',
    });
    expect(() => {
        new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
            domainName: 'example.com'.repeat(7),
            hostedZone: exampleDotComZone,
        });
    }).toThrow(/Domain name must be 64 characters or less/);
}),
    (0, cdk_build_tools_1.testDeprecated)('does not throw when domain name is longer than 64 characters with tokens', () => {
        const stack = new core_1.Stack();
        const zoneName = 'example.com';
        const exampleDotComZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
            zoneName,
        });
        const embededToken = core_1.Aws.REGION;
        const baseSubDomain = 'a'.repeat(65 - embededToken.length - 1 - zoneName.length);
        const domainName = `${embededToken}${baseSubDomain}.${zoneName}`;
        new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
            domainName,
            hostedZone: exampleDotComZone,
            transparencyLoggingEnabled: false,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFormation::CustomResource', {
            ServiceToken: {
                'Fn::GetAtt': [
                    'CertCertificateRequestorFunction98FDF273',
                    'Arn',
                ],
            },
            DomainName: {
                'Fn::Join': [
                    '',
                    [
                        {
                            Ref: 'AWS::Region',
                        },
                        `${baseSubDomain}.${zoneName}`,
                    ],
                ],
            },
            HostedZoneId: {
                Ref: 'ExampleDotCom4D1B83AA',
            },
            CertificateTransparencyLoggingPreference: 'DISABLED',
        });
    });
(0, cdk_build_tools_1.testDeprecated)('test transparency logging settings is passed to the custom resource', () => {
    const stack = new core_1.Stack();
    const exampleDotComZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
        zoneName: 'example.com',
    });
    new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
        domainName: 'example.com',
        hostedZone: exampleDotComZone,
        transparencyLoggingEnabled: false,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFormation::CustomResource', {
        ServiceToken: {
            'Fn::GetAtt': [
                'CertCertificateRequestorFunction98FDF273',
                'Arn',
            ],
        },
        DomainName: 'example.com',
        HostedZoneId: {
            Ref: 'ExampleDotCom4D1B83AA',
        },
        CertificateTransparencyLoggingPreference: 'DISABLED',
    });
});
(0, cdk_build_tools_1.testDeprecated)('can set removal policy', () => {
    const stack = new core_1.Stack();
    const exampleDotComZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
        zoneName: 'example.com',
    });
    const cert = new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        hostedZone: exampleDotComZone,
        subjectAlternativeNames: ['test2.example.com'],
        cleanupRoute53Records: true,
    });
    cert.applyRemovalPolicy(core_1.RemovalPolicy.RETAIN);
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFormation::CustomResource', {
        DomainName: 'test.example.com',
        SubjectAlternativeNames: ['test2.example.com'],
        RemovalPolicy: 'retain',
        ServiceToken: {
            'Fn::GetAtt': [
                'CertificateCertificateRequestorFunction5E845413',
                'Arn',
            ],
        },
        HostedZoneId: {
            Ref: 'ExampleDotCom4D1B83AA',
        },
        CleanupRecords: 'true',
    });
});
//# sourceMappingURL=data:application/json;base64,