"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const acmpca = require("../../aws-acmpca");
const core_1 = require("../../core");
const lib_1 = require("../lib");
test('private certificate authority', () => {
    const stack = new core_1.Stack();
    new lib_1.PrivateCertificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        certificateAuthority: acmpca.CertificateAuthority.fromCertificateAuthorityArn(stack, 'CA', 'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77'),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
        DomainName: 'test.example.com',
        CertificateAuthorityArn: 'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77',
    });
});
test('private certificate authority with subjectAlternativeNames', () => {
    const stack = new core_1.Stack();
    new lib_1.PrivateCertificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        subjectAlternativeNames: ['extra.example.com'],
        certificateAuthority: acmpca.CertificateAuthority.fromCertificateAuthorityArn(stack, 'CA', 'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77'),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
        DomainName: 'test.example.com',
        SubjectAlternativeNames: ['extra.example.com'],
        CertificateAuthorityArn: 'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77',
    });
});
test('private certificate authority with multiple subjectAlternativeNames', () => {
    const stack = new core_1.Stack();
    new lib_1.PrivateCertificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        subjectAlternativeNames: ['*.test.example.com', '*.foo.test.example.com', 'bar.test.example.com'],
        certificateAuthority: acmpca.CertificateAuthority.fromCertificateAuthorityArn(stack, 'CA', 'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77'),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
        DomainName: 'test.example.com',
        SubjectAlternativeNames: ['*.test.example.com', '*.foo.test.example.com', 'bar.test.example.com'],
        CertificateAuthorityArn: 'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77',
    });
});
test('private certificate authority with tokens', () => {
    const stack = new core_1.Stack();
    const certificateAuthority = core_1.Lazy.string({
        produce: () => 'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77',
    });
    const domainName = core_1.Lazy.string({
        produce: () => 'test.example.com',
    });
    const domainNameAlternative = core_1.Lazy.string({
        produce: () => 'extra.example.com',
    });
    new lib_1.PrivateCertificate(stack, 'Certificate', {
        domainName,
        subjectAlternativeNames: [domainNameAlternative],
        certificateAuthority: acmpca.CertificateAuthority.fromCertificateAuthorityArn(stack, 'CA', certificateAuthority),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
        DomainName: 'test.example.com',
        SubjectAlternativeNames: ['extra.example.com'],
        CertificateAuthorityArn: 'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77',
    });
});
test('metricDaysToExpiry', () => {
    const stack = new core_1.Stack();
    const certificate = new lib_1.PrivateCertificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        certificateAuthority: acmpca.CertificateAuthority.fromCertificateAuthorityArn(stack, 'CA', 'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77'),
    });
    expect(stack.resolve(certificate.metricDaysToExpiry().toMetricConfig())).toEqual({
        metricStat: {
            dimensions: [{ name: 'CertificateArn', value: stack.resolve(certificate.certificateArn) }],
            metricName: 'DaysToExpiry',
            namespace: 'AWS/CertificateManager',
            period: core_1.Duration.days(1),
            statistic: 'Minimum',
        },
        renderingProperties: expect.anything(),
    });
});
//# sourceMappingURL=data:application/json;base64,