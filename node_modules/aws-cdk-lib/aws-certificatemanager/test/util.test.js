"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_route53_1 = require("../../aws-route53");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../core");
const lib_1 = require("../lib");
const util_1 = require("../lib/util");
describe('apex domain', () => {
    test('returns right domain', () => {
        expect((0, util_1.apexDomain)('domain.com')).toEqual('domain.com');
        expect((0, util_1.apexDomain)('test.domain.com')).toEqual('domain.com');
    });
    test('understands eTLDs', () => {
        expect((0, util_1.apexDomain)('test.domain.co.uk')).toEqual('domain.co.uk');
    });
});
describe('isDnsValidatedCertificate', () => {
    (0, cdk_build_tools_1.testDeprecated)('new DnsValidatedCertificate is a DnsValidatedCertificate', () => {
        const stack = new core_1.Stack();
        const hostedZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
            zoneName: 'example.com',
        });
        const cert = new lib_1.DnsValidatedCertificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            hostedZone,
        });
        expect((0, util_1.isDnsValidatedCertificate)(cert)).toBeTruthy();
    });
    test('new Certificate is not a DnsValidatedCertificate', () => {
        const stack = new core_1.Stack();
        const cert = new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
        });
        expect((0, util_1.isDnsValidatedCertificate)(cert)).toBeFalsy();
    });
    test('fromCertificateArn is not a DnsValidatedCertificate', () => {
        const stack = new core_1.Stack();
        const cert = lib_1.Certificate.fromCertificateArn(stack, 'Certificate', 'cert-arn');
        expect((0, util_1.isDnsValidatedCertificate)(cert)).toBeFalsy();
    });
});
describe('getCertificateRegion', () => {
    test('from stack', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'RegionStack', { env: { region: 'eu-west-1' } });
        const certificate = new lib_1.Certificate(stack, 'TestCertificate', {
            domainName: 'www.example.com',
        });
        expect((0, util_1.getCertificateRegion)(certificate)).toEqual('eu-west-1');
    });
    (0, cdk_build_tools_1.testDeprecated)('from DnsValidatedCertificate region', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'RegionStack', { env: { region: 'eu-west-1' } });
        const hostedZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
            zoneName: 'example.com',
        });
        const certificate = new lib_1.DnsValidatedCertificate(stack, 'TestCertificate', {
            domainName: 'www.example.com',
            hostedZone,
            region: 'eu-west-3',
        });
        expect((0, util_1.getCertificateRegion)(certificate)).toEqual('eu-west-3');
    });
    test('fromCertificateArn', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'RegionStack', { env: { region: 'eu-west-1' } });
        const certificate = lib_1.Certificate.fromCertificateArn(stack, 'TestCertificate', 'arn:aws:acm:us-east-2:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d');
        expect((0, util_1.getCertificateRegion)(certificate)).toEqual('us-east-2');
    });
    test('region agnostic stack', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const certificate = new lib_1.Certificate(stack, 'TestCertificate', {
            domainName: 'www.example.com',
        });
        expect((0, util_1.getCertificateRegion)(certificate)).toEqual(core_1.Aws.REGION);
    });
});
//# sourceMappingURL=data:application/json;base64,