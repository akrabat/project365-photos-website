"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const assertions_1 = require("../../assertions");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../core");
const cxapi = require("../../cx-api");
const lib_1 = require("../lib");
describe('resource dependencies', () => {
    test('between two resources in a top-level stack', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Stack');
        const r1 = new core_1.CfnResource(stack, 'r1', { type: 'r1' });
        const r2 = new core_1.CfnResource(stack, 'r2', { type: 'r2' });
        // WHEN
        r1.addDependency(r2);
        // THEN
        expect(app.synth().getStackArtifact(stack.artifactId).template?.Resources).toEqual({
            r1: { Type: 'r1', DependsOn: ['r2'] }, r2: { Type: 'r2' },
        });
    });
    // eslint-disable-next-line jest/valid-describe
    (0, cdk_build_tools_1.describeDeprecated)('resource in nested stack depends on a resource in the parent stack', matrixForResourceDependencyTest((addDep) => {
        // GIVEN
        const parent = new core_1.Stack(undefined, 'root');
        const nested = new lib_1.NestedStack(parent, 'Nested');
        const resourceInParent = new core_1.CfnResource(parent, 'ResourceInParent', { type: 'PARENT' });
        const resourceInNested = new core_1.CfnResource(nested, 'ResourceInNested', { type: 'NESTED' });
        // WHEN
        addDep(resourceInNested, resourceInParent);
        // THEN: the dependency needs to transfer from the resource within the
        // nested stack to the nested stack resource itself so the nested stack
        // will only be deployed the dependent resource
        assertions_1.Template.fromStack(parent).hasResource('AWS::CloudFormation::Stack', { DependsOn: ['ResourceInParent'] });
        assertions_1.Template.fromStack(nested).templateMatches({ Resources: { ResourceInNested: { Type: 'NESTED' } } }); // no DependsOn for the actual resource
    }));
    // eslint-disable-next-line jest/valid-describe
    (0, cdk_build_tools_1.describeDeprecated)('resource in nested stack depends on a resource in a grandparent stack', matrixForResourceDependencyTest((addDep) => {
        // GIVEN
        const grantparent = new core_1.Stack(undefined, 'Grandparent');
        const parent = new lib_1.NestedStack(grantparent, 'Parent');
        const nested = new lib_1.NestedStack(parent, 'Nested');
        const resourceInGrandparent = new core_1.CfnResource(grantparent, 'ResourceInGrandparent', { type: 'GRANDPARENT' });
        const resourceInNested = new core_1.CfnResource(nested, 'ResourceInNested', { type: 'NESTED' });
        // WHEN
        addDep(resourceInNested, resourceInGrandparent);
        // THEN: the dependency needs to transfer from the resource within the
        // nested stack to the *parent* nested stack
        assertions_1.Template.fromStack(grantparent).hasResource('AWS::CloudFormation::Stack', { DependsOn: ['ResourceInGrandparent'] });
        assertions_1.Template.fromStack(nested).templateMatches({ Resources: { ResourceInNested: { Type: 'NESTED' } } }); // no DependsOn for the actual resource
    }));
    // eslint-disable-next-line jest/valid-describe
    (0, cdk_build_tools_1.describeDeprecated)('resource in parent stack depends on resource in nested stack', matrixForResourceDependencyTest((addDep) => {
        // GIVEN
        const parent = new core_1.Stack(undefined, 'root');
        const nested = new lib_1.NestedStack(parent, 'Nested');
        const resourceInParent = new core_1.CfnResource(parent, 'ResourceInParent', { type: 'PARENT' });
        const resourceInNested = new core_1.CfnResource(nested, 'ResourceInNested', { type: 'NESTED' });
        // WHEN
        addDep(resourceInParent, resourceInNested);
        // THEN: resource in parent needs to depend on the nested stack
        assertions_1.Template.fromStack(parent).hasResource('PARENT', {
            DependsOn: [parent.resolve(nested.nestedStackResource.logicalId)],
        });
    }));
    // eslint-disable-next-line jest/valid-describe
    (0, cdk_build_tools_1.describeDeprecated)('resource in grantparent stack depends on resource in nested stack', matrixForResourceDependencyTest((addDep) => {
        // GIVEN
        const grandparent = new core_1.Stack(undefined, 'Grandparent');
        const parent = new lib_1.NestedStack(grandparent, 'Parent');
        const nested = new lib_1.NestedStack(parent, 'Nested');
        const resourceInGrandparent = new core_1.CfnResource(grandparent, 'ResourceInGrandparent', { type: 'GRANDPARENT' });
        const resourceInNested = new core_1.CfnResource(nested, 'ResourceInNested', { type: 'NESTED' });
        // WHEN
        addDep(resourceInGrandparent, resourceInNested);
        // THEN: resource in grantparent needs to depend on the top-level nested stack
        assertions_1.Template.fromStack(grandparent).hasResource('GRANDPARENT', {
            DependsOn: [grandparent.resolve(parent.nestedStackResource.logicalId)],
        });
    }));
    // eslint-disable-next-line jest/valid-describe
    (0, cdk_build_tools_1.describeDeprecated)('resource in sibling stack depends on a resource in nested stack', matrixForResourceDependencyTest((addDep) => {
        // GIVEN
        const app = new core_1.App({ context: { [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false } });
        const stack1 = new core_1.Stack(app, 'Stack1');
        const nested1 = new lib_1.NestedStack(stack1, 'Nested1');
        const resourceInNested1 = new core_1.CfnResource(nested1, 'ResourceInNested', { type: 'NESTED' });
        const stack2 = new core_1.Stack(app, 'Stack2');
        const resourceInStack2 = new core_1.CfnResource(stack2, 'ResourceInSibling', { type: 'SIBLING' });
        // WHEN
        addDep(resourceInStack2, resourceInNested1);
        // THEN: stack2 should depend on stack1 and no "DependsOn" inside templates
        const assembly = app.synth();
        assertAssemblyDependency(assembly, stack1, []);
        assertAssemblyDependency(assembly, stack2, ['Stack1']);
        assertNoDependsOn(assembly, stack1);
        assertNoDependsOn(assembly, stack2);
        assertNoDependsOn(assembly, nested1);
    }));
    // eslint-disable-next-line jest/valid-describe
    (0, cdk_build_tools_1.describeDeprecated)('resource in nested stack depends on a resource in sibling stack', matrixForResourceDependencyTest((addDep) => {
        // GIVEN
        const app = new core_1.App({ context: { [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false } });
        const stack1 = new core_1.Stack(app, 'Stack1');
        const nested1 = new lib_1.NestedStack(stack1, 'Nested1');
        const resourceInNested1 = new core_1.CfnResource(nested1, 'ResourceInNested', { type: 'NESTED' });
        const stack2 = new core_1.Stack(app, 'Stack2');
        const resourceInStack2 = new core_1.CfnResource(stack2, 'ResourceInSibling', { type: 'SIBLING' });
        // WHEN
        addDep(resourceInNested1, resourceInStack2);
        // THEN: stack1 should depend on stack2 and no "DependsOn" inside templates
        const assembly = app.synth();
        assertAssemblyDependency(assembly, stack1, ['Stack2']);
        assertAssemblyDependency(assembly, stack2, []);
        assertNoDependsOn(assembly, stack1);
        assertNoDependsOn(assembly, stack2);
        assertNoDependsOn(assembly, nested1);
    }));
    // eslint-disable-next-line jest/valid-describe
    (0, cdk_build_tools_1.describeDeprecated)('resource in nested stack depends on a resource in nested sibling stack', matrixForResourceDependencyTest((addDep) => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Stack1');
        const nested1 = new lib_1.NestedStack(stack, 'Nested1');
        const nested2 = new lib_1.NestedStack(stack, 'Nested2');
        const resourceInNested1 = new core_1.CfnResource(nested1, 'ResourceInNested1', { type: 'NESTED1' });
        const resourceInNested2 = new core_1.CfnResource(nested2, 'ResourceInNested2', { type: 'NESTED2' });
        // WHEN
        addDep(resourceInNested1, resourceInNested2);
        // THEN: dependency transfered to nested stack resources
        assertions_1.Template.fromStack(stack).hasResource('AWS::CloudFormation::Stack', {
            DependsOn: [stack.resolve(nested2.nestedStackResource.logicalId)],
        });
        expect(assertions_1.Template.fromStack(stack).findResources('AWS::CloudFormation::Stack', {
            DependsOn: [stack.resolve(nested1.nestedStackResource.logicalId)],
        })).toEqual({});
    }));
});
describe('stack dependencies', () => {
    test('top level stack depends on itself', () => {
        // GIVEN
        const app = new core_1.App({ context: { [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false } });
        const stack = new core_1.Stack(app, 'Stack');
        // WHEN
        stack.addDependency(stack);
        // THEN
        const assembly = app.synth();
        assertAssemblyDependency(assembly, stack, []);
        assertNoDependsOn(assembly, stack);
    });
    (0, cdk_build_tools_1.testDeprecated)('nested stack depends on itself', () => {
        // GIVEN
        const app = new core_1.App();
        const parent = new core_1.Stack(app, 'Parent');
        const nested = new lib_1.NestedStack(parent, 'Nested');
        // WHEN
        nested.addDependency(nested);
        // THEN
        assertNoDependsOn(app.synth(), parent);
    });
    (0, cdk_build_tools_1.testDeprecated)('nested stack cannot depend on any of its parents', () => {
        // GIVEN
        const root = new core_1.Stack();
        const nested1 = new lib_1.NestedStack(root, 'Nested1');
        const nested2 = new lib_1.NestedStack(nested1, 'Nested2');
        // THEN
        expect(() => nested1.addDependency(root)).toThrow(/Nested stack 'Default\/Nested1' cannot depend on a parent stack 'Default'/);
        expect(() => nested2.addDependency(nested1)).toThrow(/Nested stack 'Default\/Nested1\/Nested2' cannot depend on a parent stack 'Default\/Nested1'/);
        expect(() => nested2.addDependency(root)).toThrow(/Nested stack 'Default\/Nested1\/Nested2' cannot depend on a parent stack 'Default'/);
    });
    (0, cdk_build_tools_1.testDeprecated)('any parent stack is by definition dependent on the nested stack so dependency is ignored', () => {
        // GIVEN
        const root = new core_1.Stack();
        const nested1 = new lib_1.NestedStack(root, 'Nested1');
        const nested2 = new lib_1.NestedStack(nested1, 'Nested2');
        // WHEN
        root.addDependency(nested1);
        root.addDependency(nested2);
        nested1.addDependency(nested2);
    });
    (0, cdk_build_tools_1.testDeprecated)('sibling nested stacks transfer to resources', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const nested1 = new lib_1.NestedStack(stack, 'Nested1');
        const nested2 = new lib_1.NestedStack(stack, 'Nested2');
        // WHEN
        nested1.addDependency(nested2);
        // THEN
        assertions_1.Template.fromStack(stack).hasResource('AWS::CloudFormation::Stack', {
            DependsOn: [stack.resolve(nested2.nestedStackResource.logicalId)],
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('nested stack depends on a deeply nested stack', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const nested1 = new lib_1.NestedStack(stack, 'Nested1');
        const nested2 = new lib_1.NestedStack(stack, 'Nested2');
        const nested21 = new lib_1.NestedStack(nested2, 'Nested21');
        // WHEN
        nested1.addDependency(nested21);
        // THEN: transfered to a resource dep between the resources in the common stack
        assertions_1.Template.fromStack(stack).hasResource('AWS::CloudFormation::Stack', {
            DependsOn: [stack.resolve(nested2.nestedStackResource.logicalId)],
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('deeply nested stack depends on a parent nested stack', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const nested1 = new lib_1.NestedStack(stack, 'Nested1');
        const nested2 = new lib_1.NestedStack(stack, 'Nested2');
        const nested21 = new lib_1.NestedStack(nested2, 'Nested21');
        // WHEN
        nested21.addDependency(nested1);
        // THEN: transfered to a resource dep between the resources in the common stack
        assertions_1.Template.fromStack(stack).hasResource('AWS::CloudFormation::Stack', {
            DependsOn: [stack.resolve(nested1.nestedStackResource.logicalId)],
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('top-level stack depends on a nested stack within a sibling', () => {
        // GIVEN
        const app = new core_1.App({ context: { [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false } });
        const stack1 = new core_1.Stack(app, 'Stack1');
        const nested1 = new lib_1.NestedStack(stack1, 'Nested1');
        const stack2 = new core_1.Stack(app, 'Stack2');
        // WHEN
        stack2.addDependency(nested1);
        // THEN: assembly-level dependency between stack2 and stack1
        const assembly = app.synth();
        assertAssemblyDependency(assembly, stack2, ['Stack1']);
        assertAssemblyDependency(assembly, stack1, []);
        assertNoDependsOn(assembly, stack1);
        assertNoDependsOn(assembly, stack2);
        assertNoDependsOn(assembly, nested1);
    });
    (0, cdk_build_tools_1.testDeprecated)('nested stack within a sibling depends on top-level stack', () => {
        // GIVEN
        const app = new core_1.App({ context: { [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false } });
        const stack1 = new core_1.Stack(app, 'Stack1');
        const nested1 = new lib_1.NestedStack(stack1, 'Nested1');
        const stack2 = new core_1.Stack(app, 'Stack2');
        // WHEN
        nested1.addDependency(stack2);
        // THEN: assembly-level dependency between stack2 and stack1
        const assembly = app.synth();
        assertAssemblyDependency(assembly, stack2, []);
        assertAssemblyDependency(assembly, stack1, ['Stack2']);
        assertNoDependsOn(assembly, stack1);
        assertNoDependsOn(assembly, stack2);
        assertNoDependsOn(assembly, nested1);
    });
});
/**
 * Given a test function which sets the stage and verifies a dependency scenario
 * between two CloudFormation resources, returns two tests which exercise both
 * "construct dependency" (i.e. node.addDependency) and "resource dependency"
 * (i.e. resource.addDependency).
 *
 * @param testFunction The test function
 */
function matrixForResourceDependencyTest(testFunction) {
    return () => {
        test('construct dependency', () => {
            testFunction((source, target) => source.node.addDependency(target));
        });
        test('resource dependency', () => {
            testFunction((source, target) => source.addDependency(target));
        });
    };
}
function assertAssemblyDependency(assembly, stack, expectedDeps) {
    const stack1Art = assembly.getStackArtifact(stack.artifactId);
    const stack1Deps = stack1Art.dependencies.map(x => x.id);
    expect(stack1Deps).toEqual(expectedDeps);
}
function assertNoDependsOn(assembly, stack) {
    let templateText;
    if (!(stack instanceof lib_1.NestedStack)) {
        templateText = JSON.stringify(assembly.getStackArtifact(stack.artifactId).template);
    }
    else {
        templateText = fs.readFileSync(path.join(assembly.directory, stack.templateFile), 'utf-8');
    }
    // verify templates do not have any "DependsOn"
    expect(templateText.includes('DependsOn')).toBeFalsy();
}
//# sourceMappingURL=data:application/json;base64,