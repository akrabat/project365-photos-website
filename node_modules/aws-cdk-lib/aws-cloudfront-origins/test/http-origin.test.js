"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloudfront = require("../../aws-cloudfront");
const core_1 = require("../../core");
const lib_1 = require("../lib");
let app;
let stack;
beforeEach(() => {
    app = new core_1.App();
    new core_1.Stack(app, 'Stack', {
        env: { account: '1234', region: 'testregion' },
    });
});
test('Renders minimal example with just a domain name', () => {
    const origin = new lib_1.HttpOrigin('www.example.com');
    const originBindConfig = origin.bind(stack, { originId: 'StackOrigin029E19582' });
    expect(originBindConfig.originProperty).toEqual({
        id: 'StackOrigin029E19582',
        domainName: 'www.example.com',
        originCustomHeaders: undefined,
        originPath: undefined,
        customOriginConfig: {
            originProtocolPolicy: 'https-only',
            originSslProtocols: [
                'TLSv1.2',
            ],
        },
    });
});
test('renders an example with all available props', () => {
    const origin = new lib_1.HttpOrigin('www.example.com', {
        originId: 'MyCustomOrigin',
        originPath: '/app',
        connectionTimeout: core_1.Duration.seconds(5),
        connectionAttempts: 2,
        customHeaders: { AUTH: 'NONE' },
        protocolPolicy: cloudfront.OriginProtocolPolicy.MATCH_VIEWER,
        httpPort: 8080,
        httpsPort: 8443,
        readTimeout: core_1.Duration.seconds(45),
        keepaliveTimeout: core_1.Duration.seconds(3),
        originSslProtocols: [cloudfront.OriginSslPolicy.TLS_V1_2],
    });
    const originBindConfig = origin.bind(stack, { originId: 'StackOrigin029E19582' });
    expect(originBindConfig.originProperty).toEqual({
        id: 'MyCustomOrigin',
        domainName: 'www.example.com',
        originPath: '/app',
        connectionTimeout: 5,
        connectionAttempts: 2,
        originCustomHeaders: [{
                headerName: 'AUTH',
                headerValue: 'NONE',
            }],
        customOriginConfig: {
            originProtocolPolicy: 'match-viewer',
            originSslProtocols: [
                'TLSv1.2',
            ],
            httpPort: 8080,
            httpsPort: 8443,
            originReadTimeout: 45,
            originKeepaliveTimeout: 3,
        },
    });
});
test.each([
    core_1.Duration.seconds(0),
    core_1.Duration.seconds(181),
    core_1.Duration.minutes(5),
])('validates readTimeout is an integer between 1 and 180 seconds - out of bounds', (readTimeout) => {
    expect(() => {
        new lib_1.HttpOrigin('www.example.com', {
            readTimeout,
        });
    }).toThrow(`readTimeout: Must be an int between 1 and 180 seconds (inclusive); received ${readTimeout.toSeconds()}.`);
});
test.each([
    core_1.Duration.seconds(0.5),
    core_1.Duration.seconds(60.5),
])('validates readTimeout is an integer between 1 and 180 seconds - not an int', (readTimeout) => {
    expect(() => {
        new lib_1.HttpOrigin('www.example.com', {
            readTimeout,
        });
    }).toThrow(/must be a whole number of/);
});
test.each([
    core_1.Duration.seconds(0),
    core_1.Duration.seconds(181),
    core_1.Duration.minutes(5),
])('validates keepaliveTimeout is an integer between 1 and 180 seconds - out of bounds', (keepaliveTimeout) => {
    expect(() => {
        new lib_1.HttpOrigin('www.example.com', {
            keepaliveTimeout,
        });
    }).toThrow(`keepaliveTimeout: Must be an int between 1 and 180 seconds (inclusive); received ${keepaliveTimeout.toSeconds()}.`);
});
test.each([
    core_1.Duration.seconds(0.5),
    core_1.Duration.seconds(60.5),
])('validates keepaliveTimeout is an integer between 1 and 180 seconds - not an int', (keepaliveTimeout) => {
    expect(() => {
        new lib_1.HttpOrigin('www.example.com', {
            keepaliveTimeout,
        });
    }).toThrow(/must be a whole number of/);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1vcmlnaW4udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImh0dHAtb3JpZ2luLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBbUQ7QUFDbkQscUNBQWtEO0FBQ2xELGdDQUFvQztBQUVwQyxJQUFJLEdBQVEsQ0FBQztBQUNiLElBQUksS0FBWSxDQUFDO0FBRWpCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDZCxHQUFHLEdBQUcsSUFBSSxVQUFHLEVBQUUsQ0FBQztJQUNoQixJQUFJLFlBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFO1FBQ3RCLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRTtLQUMvQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxpREFBaUQsRUFBRSxHQUFHLEVBQUU7SUFDM0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxnQkFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDakQsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxzQkFBc0IsRUFBRSxDQUFDLENBQUM7SUFFbEYsTUFBTSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUM5QyxFQUFFLEVBQUUsc0JBQXNCO1FBQzFCLFVBQVUsRUFBRSxpQkFBaUI7UUFDN0IsbUJBQW1CLEVBQUUsU0FBUztRQUM5QixVQUFVLEVBQUUsU0FBUztRQUNyQixrQkFBa0IsRUFBRTtZQUNsQixvQkFBb0IsRUFBRSxZQUFZO1lBQ2xDLGtCQUFrQixFQUFFO2dCQUNsQixTQUFTO2FBQ1Y7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDZDQUE2QyxFQUFFLEdBQUcsRUFBRTtJQUN2RCxNQUFNLE1BQU0sR0FBRyxJQUFJLGdCQUFVLENBQUMsaUJBQWlCLEVBQUU7UUFDL0MsUUFBUSxFQUFFLGdCQUFnQjtRQUMxQixVQUFVLEVBQUUsTUFBTTtRQUNsQixpQkFBaUIsRUFBRSxlQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN0QyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3JCLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7UUFDL0IsY0FBYyxFQUFFLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZO1FBQzVELFFBQVEsRUFBRSxJQUFJO1FBQ2QsU0FBUyxFQUFFLElBQUk7UUFDZixXQUFXLEVBQUUsZUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDakMsZ0JBQWdCLEVBQUUsZUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDckMsa0JBQWtCLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQztLQUMxRCxDQUFDLENBQUM7SUFDSCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQztJQUVsRixNQUFNLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQzlDLEVBQUUsRUFBRSxnQkFBZ0I7UUFDcEIsVUFBVSxFQUFFLGlCQUFpQjtRQUM3QixVQUFVLEVBQUUsTUFBTTtRQUNsQixpQkFBaUIsRUFBRSxDQUFDO1FBQ3BCLGtCQUFrQixFQUFFLENBQUM7UUFDckIsbUJBQW1CLEVBQUUsQ0FBQztnQkFDcEIsVUFBVSxFQUFFLE1BQU07Z0JBQ2xCLFdBQVcsRUFBRSxNQUFNO2FBQ3BCLENBQUM7UUFDRixrQkFBa0IsRUFBRTtZQUNsQixvQkFBb0IsRUFBRSxjQUFjO1lBQ3BDLGtCQUFrQixFQUFFO2dCQUNsQixTQUFTO2FBQ1Y7WUFDRCxRQUFRLEVBQUUsSUFBSTtZQUNkLFNBQVMsRUFBRSxJQUFJO1lBQ2YsaUJBQWlCLEVBQUUsRUFBRTtZQUNyQixzQkFBc0IsRUFBRSxDQUFDO1NBQzFCO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ1IsZUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbkIsZUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDckIsZUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Q0FDcEIsQ0FBQyxDQUFDLCtFQUErRSxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUU7SUFDbEcsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNWLElBQUksZ0JBQVUsQ0FBQyxpQkFBaUIsRUFBRTtZQUNoQyxXQUFXO1NBQ1osQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLCtFQUErRSxXQUFXLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3hILENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNSLGVBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBQ3JCLGVBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0NBQ3ZCLENBQUMsQ0FBQyw0RUFBNEUsRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFO0lBQy9GLE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDVixJQUFJLGdCQUFVLENBQUMsaUJBQWlCLEVBQUU7WUFDaEMsV0FBVztTQUNaLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzFDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNSLGVBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ25CLGVBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBQ3JCLGVBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0NBQ3BCLENBQUMsQ0FBQyxvRkFBb0YsRUFBRSxDQUFDLGdCQUFnQixFQUFFLEVBQUU7SUFDNUcsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNWLElBQUksZ0JBQVUsQ0FBQyxpQkFBaUIsRUFBRTtZQUNoQyxnQkFBZ0I7U0FDakIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLG9GQUFvRixnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDbEksQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ1IsZUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDckIsZUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7Q0FDdkIsQ0FBQyxDQUFDLGlGQUFpRixFQUFFLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtJQUN6RyxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsSUFBSSxnQkFBVSxDQUFDLGlCQUFpQixFQUFFO1lBQ2hDLGdCQUFnQjtTQUNqQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUMxQyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNsb3VkZnJvbnQgZnJvbSAnLi4vLi4vYXdzLWNsb3VkZnJvbnQnO1xuaW1wb3J0IHsgQXBwLCBEdXJhdGlvbiwgU3RhY2sgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IEh0dHBPcmlnaW4gfSBmcm9tICcuLi9saWInO1xuXG5sZXQgYXBwOiBBcHA7XG5sZXQgc3RhY2s6IFN0YWNrO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgYXBwID0gbmV3IEFwcCgpO1xuICBuZXcgU3RhY2soYXBwLCAnU3RhY2snLCB7XG4gICAgZW52OiB7IGFjY291bnQ6ICcxMjM0JywgcmVnaW9uOiAndGVzdHJlZ2lvbicgfSxcbiAgfSk7XG59KTtcblxudGVzdCgnUmVuZGVycyBtaW5pbWFsIGV4YW1wbGUgd2l0aCBqdXN0IGEgZG9tYWluIG5hbWUnLCAoKSA9PiB7XG4gIGNvbnN0IG9yaWdpbiA9IG5ldyBIdHRwT3JpZ2luKCd3d3cuZXhhbXBsZS5jb20nKTtcbiAgY29uc3Qgb3JpZ2luQmluZENvbmZpZyA9IG9yaWdpbi5iaW5kKHN0YWNrLCB7IG9yaWdpbklkOiAnU3RhY2tPcmlnaW4wMjlFMTk1ODInIH0pO1xuXG4gIGV4cGVjdChvcmlnaW5CaW5kQ29uZmlnLm9yaWdpblByb3BlcnR5KS50b0VxdWFsKHtcbiAgICBpZDogJ1N0YWNrT3JpZ2luMDI5RTE5NTgyJyxcbiAgICBkb21haW5OYW1lOiAnd3d3LmV4YW1wbGUuY29tJyxcbiAgICBvcmlnaW5DdXN0b21IZWFkZXJzOiB1bmRlZmluZWQsXG4gICAgb3JpZ2luUGF0aDogdW5kZWZpbmVkLFxuICAgIGN1c3RvbU9yaWdpbkNvbmZpZzoge1xuICAgICAgb3JpZ2luUHJvdG9jb2xQb2xpY3k6ICdodHRwcy1vbmx5JyxcbiAgICAgIG9yaWdpblNzbFByb3RvY29sczogW1xuICAgICAgICAnVExTdjEuMicsXG4gICAgICBdLFxuICAgIH0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3JlbmRlcnMgYW4gZXhhbXBsZSB3aXRoIGFsbCBhdmFpbGFibGUgcHJvcHMnLCAoKSA9PiB7XG4gIGNvbnN0IG9yaWdpbiA9IG5ldyBIdHRwT3JpZ2luKCd3d3cuZXhhbXBsZS5jb20nLCB7XG4gICAgb3JpZ2luSWQ6ICdNeUN1c3RvbU9yaWdpbicsXG4gICAgb3JpZ2luUGF0aDogJy9hcHAnLFxuICAgIGNvbm5lY3Rpb25UaW1lb3V0OiBEdXJhdGlvbi5zZWNvbmRzKDUpLFxuICAgIGNvbm5lY3Rpb25BdHRlbXB0czogMixcbiAgICBjdXN0b21IZWFkZXJzOiB7IEFVVEg6ICdOT05FJyB9LFxuICAgIHByb3RvY29sUG9saWN5OiBjbG91ZGZyb250Lk9yaWdpblByb3RvY29sUG9saWN5Lk1BVENIX1ZJRVdFUixcbiAgICBodHRwUG9ydDogODA4MCxcbiAgICBodHRwc1BvcnQ6IDg0NDMsXG4gICAgcmVhZFRpbWVvdXQ6IER1cmF0aW9uLnNlY29uZHMoNDUpLFxuICAgIGtlZXBhbGl2ZVRpbWVvdXQ6IER1cmF0aW9uLnNlY29uZHMoMyksXG4gICAgb3JpZ2luU3NsUHJvdG9jb2xzOiBbY2xvdWRmcm9udC5PcmlnaW5Tc2xQb2xpY3kuVExTX1YxXzJdLFxuICB9KTtcbiAgY29uc3Qgb3JpZ2luQmluZENvbmZpZyA9IG9yaWdpbi5iaW5kKHN0YWNrLCB7IG9yaWdpbklkOiAnU3RhY2tPcmlnaW4wMjlFMTk1ODInIH0pO1xuXG4gIGV4cGVjdChvcmlnaW5CaW5kQ29uZmlnLm9yaWdpblByb3BlcnR5KS50b0VxdWFsKHtcbiAgICBpZDogJ015Q3VzdG9tT3JpZ2luJyxcbiAgICBkb21haW5OYW1lOiAnd3d3LmV4YW1wbGUuY29tJyxcbiAgICBvcmlnaW5QYXRoOiAnL2FwcCcsXG4gICAgY29ubmVjdGlvblRpbWVvdXQ6IDUsXG4gICAgY29ubmVjdGlvbkF0dGVtcHRzOiAyLFxuICAgIG9yaWdpbkN1c3RvbUhlYWRlcnM6IFt7XG4gICAgICBoZWFkZXJOYW1lOiAnQVVUSCcsXG4gICAgICBoZWFkZXJWYWx1ZTogJ05PTkUnLFxuICAgIH1dLFxuICAgIGN1c3RvbU9yaWdpbkNvbmZpZzoge1xuICAgICAgb3JpZ2luUHJvdG9jb2xQb2xpY3k6ICdtYXRjaC12aWV3ZXInLFxuICAgICAgb3JpZ2luU3NsUHJvdG9jb2xzOiBbXG4gICAgICAgICdUTFN2MS4yJyxcbiAgICAgIF0sXG4gICAgICBodHRwUG9ydDogODA4MCxcbiAgICAgIGh0dHBzUG9ydDogODQ0MyxcbiAgICAgIG9yaWdpblJlYWRUaW1lb3V0OiA0NSxcbiAgICAgIG9yaWdpbktlZXBhbGl2ZVRpbWVvdXQ6IDMsXG4gICAgfSxcbiAgfSk7XG59KTtcblxudGVzdC5lYWNoKFtcbiAgRHVyYXRpb24uc2Vjb25kcygwKSxcbiAgRHVyYXRpb24uc2Vjb25kcygxODEpLFxuICBEdXJhdGlvbi5taW51dGVzKDUpLFxuXSkoJ3ZhbGlkYXRlcyByZWFkVGltZW91dCBpcyBhbiBpbnRlZ2VyIGJldHdlZW4gMSBhbmQgMTgwIHNlY29uZHMgLSBvdXQgb2YgYm91bmRzJywgKHJlYWRUaW1lb3V0KSA9PiB7XG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgbmV3IEh0dHBPcmlnaW4oJ3d3dy5leGFtcGxlLmNvbScsIHtcbiAgICAgIHJlYWRUaW1lb3V0LFxuICAgIH0pO1xuICB9KS50b1Rocm93KGByZWFkVGltZW91dDogTXVzdCBiZSBhbiBpbnQgYmV0d2VlbiAxIGFuZCAxODAgc2Vjb25kcyAoaW5jbHVzaXZlKTsgcmVjZWl2ZWQgJHtyZWFkVGltZW91dC50b1NlY29uZHMoKX0uYCk7XG59KTtcblxudGVzdC5lYWNoKFtcbiAgRHVyYXRpb24uc2Vjb25kcygwLjUpLFxuICBEdXJhdGlvbi5zZWNvbmRzKDYwLjUpLFxuXSkoJ3ZhbGlkYXRlcyByZWFkVGltZW91dCBpcyBhbiBpbnRlZ2VyIGJldHdlZW4gMSBhbmQgMTgwIHNlY29uZHMgLSBub3QgYW4gaW50JywgKHJlYWRUaW1lb3V0KSA9PiB7XG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgbmV3IEh0dHBPcmlnaW4oJ3d3dy5leGFtcGxlLmNvbScsIHtcbiAgICAgIHJlYWRUaW1lb3V0LFxuICAgIH0pO1xuICB9KS50b1Rocm93KC9tdXN0IGJlIGEgd2hvbGUgbnVtYmVyIG9mLyk7XG59KTtcblxudGVzdC5lYWNoKFtcbiAgRHVyYXRpb24uc2Vjb25kcygwKSxcbiAgRHVyYXRpb24uc2Vjb25kcygxODEpLFxuICBEdXJhdGlvbi5taW51dGVzKDUpLFxuXSkoJ3ZhbGlkYXRlcyBrZWVwYWxpdmVUaW1lb3V0IGlzIGFuIGludGVnZXIgYmV0d2VlbiAxIGFuZCAxODAgc2Vjb25kcyAtIG91dCBvZiBib3VuZHMnLCAoa2VlcGFsaXZlVGltZW91dCkgPT4ge1xuICBleHBlY3QoKCkgPT4ge1xuICAgIG5ldyBIdHRwT3JpZ2luKCd3d3cuZXhhbXBsZS5jb20nLCB7XG4gICAgICBrZWVwYWxpdmVUaW1lb3V0LFxuICAgIH0pO1xuICB9KS50b1Rocm93KGBrZWVwYWxpdmVUaW1lb3V0OiBNdXN0IGJlIGFuIGludCBiZXR3ZWVuIDEgYW5kIDE4MCBzZWNvbmRzIChpbmNsdXNpdmUpOyByZWNlaXZlZCAke2tlZXBhbGl2ZVRpbWVvdXQudG9TZWNvbmRzKCl9LmApO1xufSk7XG5cbnRlc3QuZWFjaChbXG4gIER1cmF0aW9uLnNlY29uZHMoMC41KSxcbiAgRHVyYXRpb24uc2Vjb25kcyg2MC41KSxcbl0pKCd2YWxpZGF0ZXMga2VlcGFsaXZlVGltZW91dCBpcyBhbiBpbnRlZ2VyIGJldHdlZW4gMSBhbmQgMTgwIHNlY29uZHMgLSBub3QgYW4gaW50JywgKGtlZXBhbGl2ZVRpbWVvdXQpID0+IHtcbiAgZXhwZWN0KCgpID0+IHtcbiAgICBuZXcgSHR0cE9yaWdpbignd3d3LmV4YW1wbGUuY29tJywge1xuICAgICAga2VlcGFsaXZlVGltZW91dCxcbiAgICB9KTtcbiAgfSkudG9UaHJvdygvbXVzdCBiZSBhIHdob2xlIG51bWJlciBvZi8pO1xufSk7XG4iXX0=