"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloudfront = require("../../aws-cloudfront");
const elbv2 = require("../../aws-elasticloadbalancingv2");
const core_1 = require("../../core");
const lib_1 = require("../lib");
let app;
let stack;
beforeEach(() => {
    app = new core_1.App();
    stack = new core_1.Stack(app, 'Stack', {
        env: { account: '1234', region: 'testregion' },
    });
});
test('Renders minimal example with just a load balancer', () => {
    const loadBalancer = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'elbv2', {
        loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/net/mylb/5d1b75f4f1cee11e',
        loadBalancerDnsName: 'mylb-5d1b75f4f1cee11e.elb.us-west-2.amazonaws.com',
    });
    const origin = new lib_1.LoadBalancerV2Origin(loadBalancer);
    const originBindConfig = origin.bind(stack, { originId: 'StackOrigin029E19582' });
    expect(originBindConfig.originProperty).toEqual({
        id: 'StackOrigin029E19582',
        domainName: loadBalancer.loadBalancerDnsName,
        customOriginConfig: {
            originProtocolPolicy: 'https-only',
            originSslProtocols: [
                'TLSv1.2',
            ],
        },
    });
});
test('Can customize properties of the origin', () => {
    const loadBalancer = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'elbv2', {
        loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/net/mylb/5d1b75f4f1cee11e',
        loadBalancerDnsName: 'mylb-5d1b75f4f1cee11e.elb.us-west-2.amazonaws.com',
    });
    const origin = new lib_1.LoadBalancerV2Origin(loadBalancer, {
        connectionAttempts: 3,
        connectionTimeout: core_1.Duration.seconds(5),
        protocolPolicy: cloudfront.OriginProtocolPolicy.MATCH_VIEWER,
        originId: 'MyCustomOrigin',
    });
    const originBindConfig = origin.bind(stack, { originId: 'StackOrigin029E19582' });
    expect(originBindConfig.originProperty).toEqual({
        id: 'MyCustomOrigin',
        domainName: loadBalancer.loadBalancerDnsName,
        connectionAttempts: 3,
        connectionTimeout: 5,
        customOriginConfig: {
            originProtocolPolicy: 'match-viewer',
            originSslProtocols: [
                'TLSv1.2',
            ],
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1iYWxhbmNlci1vcmlnaW4udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvYWQtYmFsYW5jZXItb3JpZ2luLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBbUQ7QUFDbkQsMERBQTBEO0FBQzFELHFDQUFrRDtBQUNsRCxnQ0FBOEM7QUFFOUMsSUFBSSxHQUFRLENBQUM7QUFDYixJQUFJLEtBQVksQ0FBQztBQUVqQixVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsR0FBRyxHQUFHLElBQUksVUFBRyxFQUFFLENBQUM7SUFDaEIsS0FBSyxHQUFHLElBQUksWUFBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUU7UUFDOUIsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFO0tBQy9DLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsRUFBRTtJQUM3RCxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsbUJBQW1CLENBQUMsaUNBQWlDLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtRQUMvRixlQUFlLEVBQUUsNEZBQTRGO1FBQzdHLG1CQUFtQixFQUFFLG1EQUFtRDtLQUN6RSxDQUFDLENBQUM7SUFFSCxNQUFNLE1BQU0sR0FBRyxJQUFJLDBCQUFvQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RELE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO0lBRWxGLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDOUMsRUFBRSxFQUFFLHNCQUFzQjtRQUMxQixVQUFVLEVBQUUsWUFBWSxDQUFDLG1CQUFtQjtRQUM1QyxrQkFBa0IsRUFBRTtZQUNsQixvQkFBb0IsRUFBRSxZQUFZO1lBQ2xDLGtCQUFrQixFQUFFO2dCQUNsQixTQUFTO2FBQ1Y7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLEdBQUcsRUFBRTtJQUNsRCxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsbUJBQW1CLENBQUMsaUNBQWlDLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtRQUMvRixlQUFlLEVBQUUsNEZBQTRGO1FBQzdHLG1CQUFtQixFQUFFLG1EQUFtRDtLQUN6RSxDQUFDLENBQUM7SUFFSCxNQUFNLE1BQU0sR0FBRyxJQUFJLDBCQUFvQixDQUFDLFlBQVksRUFBRTtRQUNwRCxrQkFBa0IsRUFBRSxDQUFDO1FBQ3JCLGlCQUFpQixFQUFFLGVBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLGNBQWMsRUFBRSxVQUFVLENBQUMsb0JBQW9CLENBQUMsWUFBWTtRQUM1RCxRQUFRLEVBQUUsZ0JBQWdCO0tBQzNCLENBQUMsQ0FBQztJQUNILE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO0lBRWxGLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDOUMsRUFBRSxFQUFFLGdCQUFnQjtRQUNwQixVQUFVLEVBQUUsWUFBWSxDQUFDLG1CQUFtQjtRQUM1QyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3JCLGlCQUFpQixFQUFFLENBQUM7UUFDcEIsa0JBQWtCLEVBQUU7WUFDbEIsb0JBQW9CLEVBQUUsY0FBYztZQUNwQyxrQkFBa0IsRUFBRTtnQkFDbEIsU0FBUzthQUNWO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNsb3VkZnJvbnQgZnJvbSAnLi4vLi4vYXdzLWNsb3VkZnJvbnQnO1xuaW1wb3J0ICogYXMgZWxidjIgZnJvbSAnLi4vLi4vYXdzLWVsYXN0aWNsb2FkYmFsYW5jaW5ndjInO1xuaW1wb3J0IHsgQXBwLCBEdXJhdGlvbiwgU3RhY2sgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IExvYWRCYWxhbmNlclYyT3JpZ2luIH0gZnJvbSAnLi4vbGliJztcblxubGV0IGFwcDogQXBwO1xubGV0IHN0YWNrOiBTdGFjaztcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIGFwcCA9IG5ldyBBcHAoKTtcbiAgc3RhY2sgPSBuZXcgU3RhY2soYXBwLCAnU3RhY2snLCB7XG4gICAgZW52OiB7IGFjY291bnQ6ICcxMjM0JywgcmVnaW9uOiAndGVzdHJlZ2lvbicgfSxcbiAgfSk7XG59KTtcblxudGVzdCgnUmVuZGVycyBtaW5pbWFsIGV4YW1wbGUgd2l0aCBqdXN0IGEgbG9hZCBiYWxhbmNlcicsICgpID0+IHtcbiAgY29uc3QgbG9hZEJhbGFuY2VyID0gZWxidjIuTmV0d29ya0xvYWRCYWxhbmNlci5mcm9tTmV0d29ya0xvYWRCYWxhbmNlckF0dHJpYnV0ZXMoc3RhY2ssICdlbGJ2MicsIHtcbiAgICBsb2FkQmFsYW5jZXJBcm46ICdhcm46YXdzOmVsYXN0aWNsb2FkYmFsYW5jaW5nOnVzLXdlc3QtMjoxMTExMTExMTExMTE6bG9hZGJhbGFuY2VyL25ldC9teWxiLzVkMWI3NWY0ZjFjZWUxMWUnLFxuICAgIGxvYWRCYWxhbmNlckRuc05hbWU6ICdteWxiLTVkMWI3NWY0ZjFjZWUxMWUuZWxiLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tJyxcbiAgfSk7XG5cbiAgY29uc3Qgb3JpZ2luID0gbmV3IExvYWRCYWxhbmNlclYyT3JpZ2luKGxvYWRCYWxhbmNlcik7XG4gIGNvbnN0IG9yaWdpbkJpbmRDb25maWcgPSBvcmlnaW4uYmluZChzdGFjaywgeyBvcmlnaW5JZDogJ1N0YWNrT3JpZ2luMDI5RTE5NTgyJyB9KTtcblxuICBleHBlY3Qob3JpZ2luQmluZENvbmZpZy5vcmlnaW5Qcm9wZXJ0eSkudG9FcXVhbCh7XG4gICAgaWQ6ICdTdGFja09yaWdpbjAyOUUxOTU4MicsXG4gICAgZG9tYWluTmFtZTogbG9hZEJhbGFuY2VyLmxvYWRCYWxhbmNlckRuc05hbWUsXG4gICAgY3VzdG9tT3JpZ2luQ29uZmlnOiB7XG4gICAgICBvcmlnaW5Qcm90b2NvbFBvbGljeTogJ2h0dHBzLW9ubHknLFxuICAgICAgb3JpZ2luU3NsUHJvdG9jb2xzOiBbXG4gICAgICAgICdUTFN2MS4yJyxcbiAgICAgIF0sXG4gICAgfSxcbiAgfSk7XG59KTtcblxudGVzdCgnQ2FuIGN1c3RvbWl6ZSBwcm9wZXJ0aWVzIG9mIHRoZSBvcmlnaW4nLCAoKSA9PiB7XG4gIGNvbnN0IGxvYWRCYWxhbmNlciA9IGVsYnYyLk5ldHdvcmtMb2FkQmFsYW5jZXIuZnJvbU5ldHdvcmtMb2FkQmFsYW5jZXJBdHRyaWJ1dGVzKHN0YWNrLCAnZWxidjInLCB7XG4gICAgbG9hZEJhbGFuY2VyQXJuOiAnYXJuOmF3czplbGFzdGljbG9hZGJhbGFuY2luZzp1cy13ZXN0LTI6MTExMTExMTExMTExOmxvYWRiYWxhbmNlci9uZXQvbXlsYi81ZDFiNzVmNGYxY2VlMTFlJyxcbiAgICBsb2FkQmFsYW5jZXJEbnNOYW1lOiAnbXlsYi01ZDFiNzVmNGYxY2VlMTFlLmVsYi51cy13ZXN0LTIuYW1hem9uYXdzLmNvbScsXG4gIH0pO1xuXG4gIGNvbnN0IG9yaWdpbiA9IG5ldyBMb2FkQmFsYW5jZXJWMk9yaWdpbihsb2FkQmFsYW5jZXIsIHtcbiAgICBjb25uZWN0aW9uQXR0ZW1wdHM6IDMsXG4gICAgY29ubmVjdGlvblRpbWVvdXQ6IER1cmF0aW9uLnNlY29uZHMoNSksXG4gICAgcHJvdG9jb2xQb2xpY3k6IGNsb3VkZnJvbnQuT3JpZ2luUHJvdG9jb2xQb2xpY3kuTUFUQ0hfVklFV0VSLFxuICAgIG9yaWdpbklkOiAnTXlDdXN0b21PcmlnaW4nLFxuICB9KTtcbiAgY29uc3Qgb3JpZ2luQmluZENvbmZpZyA9IG9yaWdpbi5iaW5kKHN0YWNrLCB7IG9yaWdpbklkOiAnU3RhY2tPcmlnaW4wMjlFMTk1ODInIH0pO1xuXG4gIGV4cGVjdChvcmlnaW5CaW5kQ29uZmlnLm9yaWdpblByb3BlcnR5KS50b0VxdWFsKHtcbiAgICBpZDogJ015Q3VzdG9tT3JpZ2luJyxcbiAgICBkb21haW5OYW1lOiBsb2FkQmFsYW5jZXIubG9hZEJhbGFuY2VyRG5zTmFtZSxcbiAgICBjb25uZWN0aW9uQXR0ZW1wdHM6IDMsXG4gICAgY29ubmVjdGlvblRpbWVvdXQ6IDUsXG4gICAgY3VzdG9tT3JpZ2luQ29uZmlnOiB7XG4gICAgICBvcmlnaW5Qcm90b2NvbFBvbGljeTogJ21hdGNoLXZpZXdlcicsXG4gICAgICBvcmlnaW5Tc2xQcm90b2NvbHM6IFtcbiAgICAgICAgJ1RMU3YxLjInLFxuICAgICAgXSxcbiAgICB9LFxuICB9KTtcbn0pO1xuIl19