"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe('CloudFront Function', () => {
    test('minimal example', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Stack', {
            env: { account: '123456789012', region: 'testregion' },
        });
        new lib_1.Function(stack, 'CF2', {
            code: lib_1.FunctionCode.fromInline('code'),
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                CF2D7241DD7: {
                    Type: 'AWS::CloudFront::Function',
                    Properties: {
                        Name: 'testregionStackCF2CE3F783F',
                        AutoPublish: true,
                        FunctionCode: 'code',
                        FunctionConfig: {
                            Comment: 'testregionStackCF2CE3F783F',
                            Runtime: 'cloudfront-js-1.0',
                        },
                    },
                },
            },
        });
    });
    test('minimal example in environment agnostic stack', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Stack');
        new lib_1.Function(stack, 'CF2', {
            code: lib_1.FunctionCode.fromInline('code'),
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                CF2D7241DD7: {
                    Type: 'AWS::CloudFront::Function',
                    Properties: {
                        Name: {
                            'Fn::Join': [
                                '',
                                [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'StackCF2CE3F783F',
                                ],
                            ],
                        },
                        AutoPublish: true,
                        FunctionCode: 'code',
                        FunctionConfig: {
                            Comment: {
                                'Fn::Join': [
                                    '',
                                    [
                                        {
                                            Ref: 'AWS::Region',
                                        },
                                        'StackCF2CE3F783F',
                                    ],
                                ],
                            },
                            Runtime: 'cloudfront-js-1.0',
                        },
                    },
                },
            },
        });
    });
    test('maximum example', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Stack', {
            env: { account: '123456789012', region: 'testregion' },
        });
        new lib_1.Function(stack, 'CF2', {
            code: lib_1.FunctionCode.fromInline('code'),
            comment: 'My super comment',
            functionName: 'FunctionName',
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                CF2D7241DD7: {
                    Type: 'AWS::CloudFront::Function',
                    Properties: {
                        Name: 'FunctionName',
                        AutoPublish: true,
                        FunctionCode: 'code',
                        FunctionConfig: {
                            Comment: 'My super comment',
                            Runtime: 'cloudfront-js-1.0',
                        },
                    },
                },
            },
        });
    });
    test('code from external file', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Stack', {
            env: { account: '123456789012', region: 'testregion' },
        });
        new lib_1.Function(stack, 'CF2', {
            code: lib_1.FunctionCode.fromFile({ filePath: path.join(__dirname, 'function-code.js') }),
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                CF2D7241DD7: {
                    Type: 'AWS::CloudFront::Function',
                    Properties: {
                        Name: 'testregionStackCF2CE3F783F',
                        AutoPublish: true,
                        FunctionCode: 'function handler(event) {\n  return event.request;\n}',
                        FunctionConfig: {
                            Comment: 'testregionStackCF2CE3F783F',
                            Runtime: 'cloudfront-js-1.0',
                        },
                    },
                },
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,