"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const cdk = require("../../core");
const lib_1 = require("../lib");
describe('Origin Access Identity', () => {
    test('With automatic comment', () => {
        const stack = new cdk.Stack();
        new lib_1.OriginAccessIdentity(stack, 'OAI');
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                OAIE1EFC67F: {
                    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity',
                    Properties: {
                        CloudFrontOriginAccessIdentityConfig: {
                            Comment: 'Allows CloudFront to reach the bucket',
                        },
                    },
                },
            },
        });
    });
    test('With provided comment', () => {
        const stack = new cdk.Stack();
        new lib_1.OriginAccessIdentity(stack, 'OAI', {
            comment: 'test comment',
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                OAIE1EFC67F: {
                    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity',
                    Properties: {
                        CloudFrontOriginAccessIdentityConfig: {
                            Comment: 'test comment',
                        },
                    },
                },
            },
        });
    });
    test('Truncates long comments', () => {
        const stack = new cdk.Stack();
        new lib_1.OriginAccessIdentity(stack, 'OAI', {
            comment: 'This is a really long comment. Auto-generated comments based on ids of origins might sometimes be this long or even longer and that will break',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::CloudFrontOriginAccessIdentity', {
            CloudFrontOriginAccessIdentityConfig: {
                Comment: 'This is a really long comment. Auto-generated comments based on ids of origins might sometimes be this long or even longer and t',
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('Builds ARN of CloudFront user for fromOriginAccessIdentityName', () => {
        const stack = new cdk.Stack();
        const oai = lib_1.OriginAccessIdentity.fromOriginAccessIdentityName(stack, 'OAI', 'OAITest');
        expect(oai.grantPrincipal.policyFragment.principalJson.AWS[0]).toMatch(/:iam::cloudfront:user\/CloudFront Origin Access Identity OAITest$/);
    });
    test('Builds ARN of CloudFront user for fromOriginAccessIdentityId', () => {
        const stack = new cdk.Stack();
        const oai = lib_1.OriginAccessIdentity.fromOriginAccessIdentityId(stack, 'OAI', 'OAITest');
        expect(oai.grantPrincipal.policyFragment.principalJson.AWS[0]).toMatch(/:iam::cloudfront:user\/CloudFront Origin Access Identity OAITest$/);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2FpLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJvYWkudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUE0QztBQUM1Qyw4REFBMEQ7QUFDMUQsa0NBQWtDO0FBQ2xDLGdDQUE4QztBQUU5QyxRQUFRLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ3RDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7UUFDbEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsSUFBSSwwQkFBb0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFdkMscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsZUFBZSxDQUN2QztZQUNFLFNBQVMsRUFBRTtnQkFDVCxXQUFXLEVBQUU7b0JBQ1gsSUFBSSxFQUFFLGlEQUFpRDtvQkFDdkQsVUFBVSxFQUFFO3dCQUNWLG9DQUFvQyxFQUFFOzRCQUNwQyxPQUFPLEVBQUUsdUNBQXVDO3lCQUNqRDtxQkFDRjtpQkFDRjthQUNGO1NBQ0YsQ0FDRixDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1FBQ2pDLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTlCLElBQUksMEJBQW9CLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtZQUNyQyxPQUFPLEVBQUUsY0FBYztTQUN4QixDQUFDLENBQUM7UUFFSCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQ3ZDO1lBQ0UsU0FBUyxFQUFFO2dCQUNULFdBQVcsRUFBRTtvQkFDWCxJQUFJLEVBQUUsaURBQWlEO29CQUN2RCxVQUFVLEVBQUU7d0JBQ1Ysb0NBQW9DLEVBQUU7NEJBQ3BDLE9BQU8sRUFBRSxjQUFjO3lCQUN4QjtxQkFDRjtpQkFDRjthQUNGO1NBQ0YsQ0FDRixDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO1FBQ25DLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTlCLElBQUksMEJBQW9CLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtZQUNyQyxPQUFPLEVBQUUsZ0pBQWdKO1NBQzFKLENBQUMsQ0FBQztRQUVILHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLGlEQUFpRCxFQUFFO1lBQ2pHLG9DQUFvQyxFQUFFO2dCQUNwQyxPQUFPLEVBQUUsa0lBQWtJO2FBQzVJO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLGdDQUFjLEVBQUMsZ0VBQWdFLEVBQUUsR0FBRyxFQUFFO1FBQ3BGLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTlCLE1BQU0sR0FBRyxHQUFHLDBCQUFvQixDQUFDLDRCQUE0QixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFdkYsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsbUVBQW1FLENBQUMsQ0FBQztJQUM5SSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw4REFBOEQsRUFBRSxHQUFHLEVBQUU7UUFDeEUsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsTUFBTSxHQUFHLEdBQUcsMEJBQW9CLENBQUMsMEJBQTBCLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVyRixNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO0lBQzlJLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0IHsgdGVzdERlcHJlY2F0ZWQgfSBmcm9tICdAYXdzLWNkay9jZGstYnVpbGQtdG9vbHMnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgT3JpZ2luQWNjZXNzSWRlbnRpdHkgfSBmcm9tICcuLi9saWInO1xuXG5kZXNjcmliZSgnT3JpZ2luIEFjY2VzcyBJZGVudGl0eScsICgpID0+IHtcbiAgdGVzdCgnV2l0aCBhdXRvbWF0aWMgY29tbWVudCcsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgIG5ldyBPcmlnaW5BY2Nlc3NJZGVudGl0eShzdGFjaywgJ09BSScpO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS50ZW1wbGF0ZU1hdGNoZXMoXG4gICAgICB7XG4gICAgICAgIFJlc291cmNlczoge1xuICAgICAgICAgIE9BSUUxRUZDNjdGOiB7XG4gICAgICAgICAgICBUeXBlOiAnQVdTOjpDbG91ZEZyb250OjpDbG91ZEZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHknLFxuICAgICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgICBDbG91ZEZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlDb25maWc6IHtcbiAgICAgICAgICAgICAgICBDb21tZW50OiAnQWxsb3dzIENsb3VkRnJvbnQgdG8gcmVhY2ggdGhlIGJ1Y2tldCcsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICk7XG4gIH0pO1xuXG4gIHRlc3QoJ1dpdGggcHJvdmlkZWQgY29tbWVudCcsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgIG5ldyBPcmlnaW5BY2Nlc3NJZGVudGl0eShzdGFjaywgJ09BSScsIHtcbiAgICAgIGNvbW1lbnQ6ICd0ZXN0IGNvbW1lbnQnLFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS50ZW1wbGF0ZU1hdGNoZXMoXG4gICAgICB7XG4gICAgICAgIFJlc291cmNlczoge1xuICAgICAgICAgIE9BSUUxRUZDNjdGOiB7XG4gICAgICAgICAgICBUeXBlOiAnQVdTOjpDbG91ZEZyb250OjpDbG91ZEZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHknLFxuICAgICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgICBDbG91ZEZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlDb25maWc6IHtcbiAgICAgICAgICAgICAgICBDb21tZW50OiAndGVzdCBjb21tZW50JyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgKTtcbiAgfSk7XG5cbiAgdGVzdCgnVHJ1bmNhdGVzIGxvbmcgY29tbWVudHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICBuZXcgT3JpZ2luQWNjZXNzSWRlbnRpdHkoc3RhY2ssICdPQUknLCB7XG4gICAgICBjb21tZW50OiAnVGhpcyBpcyBhIHJlYWxseSBsb25nIGNvbW1lbnQuIEF1dG8tZ2VuZXJhdGVkIGNvbW1lbnRzIGJhc2VkIG9uIGlkcyBvZiBvcmlnaW5zIG1pZ2h0IHNvbWV0aW1lcyBiZSB0aGlzIGxvbmcgb3IgZXZlbiBsb25nZXIgYW5kIHRoYXQgd2lsbCBicmVhaycsXG4gICAgfSk7XG5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpDbG91ZEZyb250OjpDbG91ZEZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHknLCB7XG4gICAgICBDbG91ZEZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlDb25maWc6IHtcbiAgICAgICAgQ29tbWVudDogJ1RoaXMgaXMgYSByZWFsbHkgbG9uZyBjb21tZW50LiBBdXRvLWdlbmVyYXRlZCBjb21tZW50cyBiYXNlZCBvbiBpZHMgb2Ygb3JpZ2lucyBtaWdodCBzb21ldGltZXMgYmUgdGhpcyBsb25nIG9yIGV2ZW4gbG9uZ2VyIGFuZCB0JyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3REZXByZWNhdGVkKCdCdWlsZHMgQVJOIG9mIENsb3VkRnJvbnQgdXNlciBmb3IgZnJvbU9yaWdpbkFjY2Vzc0lkZW50aXR5TmFtZScsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgIGNvbnN0IG9haSA9IE9yaWdpbkFjY2Vzc0lkZW50aXR5LmZyb21PcmlnaW5BY2Nlc3NJZGVudGl0eU5hbWUoc3RhY2ssICdPQUknLCAnT0FJVGVzdCcpO1xuXG4gICAgZXhwZWN0KG9haS5ncmFudFByaW5jaXBhbC5wb2xpY3lGcmFnbWVudC5wcmluY2lwYWxKc29uLkFXU1swXSkudG9NYXRjaCgvOmlhbTo6Y2xvdWRmcm9udDp1c2VyXFwvQ2xvdWRGcm9udCBPcmlnaW4gQWNjZXNzIElkZW50aXR5IE9BSVRlc3QkLyk7XG4gIH0pO1xuXG4gIHRlc3QoJ0J1aWxkcyBBUk4gb2YgQ2xvdWRGcm9udCB1c2VyIGZvciBmcm9tT3JpZ2luQWNjZXNzSWRlbnRpdHlJZCcsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgIGNvbnN0IG9haSA9IE9yaWdpbkFjY2Vzc0lkZW50aXR5LmZyb21PcmlnaW5BY2Nlc3NJZGVudGl0eUlkKHN0YWNrLCAnT0FJJywgJ09BSVRlc3QnKTtcblxuICAgIGV4cGVjdChvYWkuZ3JhbnRQcmluY2lwYWwucG9saWN5RnJhZ21lbnQucHJpbmNpcGFsSnNvbi5BV1NbMF0pLnRvTWF0Y2goLzppYW06OmNsb3VkZnJvbnQ6dXNlclxcL0Nsb3VkRnJvbnQgT3JpZ2luIEFjY2VzcyBJZGVudGl0eSBPQUlUZXN0JC8pO1xuICB9KTtcbn0pO1xuIl19