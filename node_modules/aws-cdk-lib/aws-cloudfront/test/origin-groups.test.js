"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const s3 = require("../../aws-s3");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const cdk = require("../../core");
const lib_1 = require("../lib");
describe('origin group', () => {
    (0, cdk_build_tools_1.testDeprecated)('Distribution with custom origin failover', () => {
        const stack = new cdk.Stack();
        new lib_1.CloudFrontWebDistribution(stack, 'ADistribution', {
            originConfigs: [
                {
                    originHeaders: {
                        'X-Custom-Header': 'somevalue',
                    },
                    customOriginSource: {
                        domainName: 'myorigin.com',
                    },
                    failoverCustomOriginSource: {
                        domainName: 'myoriginfallback.com',
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
            DistributionConfig: {
                OriginGroups: {
                    Items: [
                        {
                            FailoverCriteria: {
                                StatusCodes: {
                                    Items: [
                                        500,
                                        502,
                                        503,
                                        504,
                                    ],
                                    Quantity: 4,
                                },
                            },
                            Id: 'OriginGroup1',
                            Members: {
                                Items: [
                                    {
                                        OriginId: 'origin1',
                                    },
                                    {
                                        OriginId: 'originSecondary1',
                                    },
                                ],
                                Quantity: 2,
                            },
                        },
                    ],
                    Quantity: 1,
                },
                Origins: [
                    assertions_1.Match.objectLike({
                        CustomOriginConfig: {
                            HTTPPort: 80,
                            HTTPSPort: 443,
                            OriginKeepaliveTimeout: 5,
                            OriginProtocolPolicy: 'https-only',
                            OriginReadTimeout: 30,
                            OriginSSLProtocols: [
                                'TLSv1.2',
                            ],
                        },
                        DomainName: 'myoriginfallback.com',
                        Id: 'originSecondary1',
                        OriginCustomHeaders: [
                            {
                                HeaderName: 'X-Custom-Header',
                                HeaderValue: 'somevalue',
                            },
                        ],
                    }),
                    assertions_1.Match.objectLike({
                        CustomOriginConfig: {
                            HTTPPort: 80,
                            HTTPSPort: 443,
                            OriginKeepaliveTimeout: 5,
                            OriginProtocolPolicy: 'https-only',
                            OriginReadTimeout: 30,
                            OriginSSLProtocols: [
                                'TLSv1.2',
                            ],
                        },
                        DomainName: 'myorigin.com',
                        Id: 'origin1',
                        OriginCustomHeaders: [
                            {
                                HeaderName: 'X-Custom-Header',
                                HeaderValue: 'somevalue',
                            },
                        ],
                    }),
                ],
            },
        });
    });
    test('Distribution with s3 origin failover', () => {
        const stack = new cdk.Stack();
        new lib_1.CloudFrontWebDistribution(stack, 'ADistribution', {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: s3.Bucket.fromBucketName(stack, 'aBucket', 'myoriginbucket'),
                        originPath: '/',
                        originHeaders: {
                            myHeader: '42',
                        },
                    },
                    failoverS3OriginSource: {
                        s3BucketSource: s3.Bucket.fromBucketName(stack, 'aBucketFallback', 'myoriginbucketfallback'),
                        originPath: '/somwhere',
                        originHeaders: {
                            myHeader2: '21',
                        },
                    },
                    failoverCriteriaStatusCodes: [lib_1.FailoverStatusCode.INTERNAL_SERVER_ERROR],
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
            DistributionConfig: {
                OriginGroups: {
                    Items: [
                        {
                            FailoverCriteria: {
                                StatusCodes: {
                                    Items: [
                                        500,
                                    ],
                                    Quantity: 1,
                                },
                            },
                            Id: 'OriginGroup1',
                            Members: {
                                Items: [
                                    {
                                        OriginId: 'origin1',
                                    },
                                    {
                                        OriginId: 'originSecondary1',
                                    },
                                ],
                                Quantity: 2,
                            },
                        },
                    ],
                    Quantity: 1,
                },
                Origins: [
                    assertions_1.Match.objectLike({
                        DomainName: {
                            'Fn::Join': [
                                '',
                                [
                                    'myoriginbucketfallback.s3.',
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    '.',
                                    {
                                        Ref: 'AWS::URLSuffix',
                                    },
                                ],
                            ],
                        },
                        Id: 'originSecondary1',
                        OriginCustomHeaders: [
                            {
                                HeaderName: 'myHeader2',
                                HeaderValue: '21',
                            },
                        ],
                        OriginPath: '/somwhere',
                        S3OriginConfig: {},
                    }),
                    assertions_1.Match.objectLike({
                        DomainName: {
                            'Fn::Join': [
                                '',
                                [
                                    'myoriginbucket.s3.',
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    '.',
                                    {
                                        Ref: 'AWS::URLSuffix',
                                    },
                                ],
                            ],
                        },
                        Id: 'origin1',
                        OriginCustomHeaders: [
                            {
                                HeaderName: 'myHeader',
                                HeaderValue: '42',
                            },
                        ],
                        OriginPath: '/',
                        S3OriginConfig: {},
                    }),
                ],
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,