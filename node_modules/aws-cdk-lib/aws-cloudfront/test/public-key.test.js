"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const lib_1 = require("../lib");
const publicKey = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAudf8/iNkQgdvjEdm6xYS
JAyxd/kGTbJfQNg9YhInb7TSm0dGu0yx8yZ3fnpmxuRPqJIlaVr+fT4YRl71gEYa
dlhHmnVegyPNjP9dNqZ7zwNqMEPOPnS/NOHbJj1KYKpn1f8pPNycQ5MQCntKGnSj
6fc+nbcC0joDvGz80xuy1W4hLV9oC9c3GT26xfZb2jy9MVtA3cppNuTwqrFi3t6e
0iGpraxZlT5wewjZLpQkngqYr6s3aucPAZVsGTEYPo4nD5mswmtZOm+tgcOrivtD
/3sD/qZLQ6c5siqyS8aTraD6y+VXugujfarTU65IeZ6QAUbLMsWuZOIi5Jn8zAwx
NQIDAQAB
-----END PUBLIC KEY-----`;
describe('PublicKey', () => {
    let app;
    let stack;
    beforeEach(() => {
        app = new core_1.App();
        stack = new core_1.Stack(app, 'Stack', {
            env: { account: '123456789012', region: 'testregion' },
        });
    });
    test('import existing key group by id', () => {
        const publicKeyId = 'K36X4X2EO997HM';
        const pubKey = lib_1.PublicKey.fromPublicKeyId(stack, 'MyPublicKey', publicKeyId);
        expect(pubKey.publicKeyId).toEqual(publicKeyId);
    });
    test('minimal example', () => {
        new lib_1.PublicKey(stack, 'MyPublicKey', {
            encodedKey: publicKey,
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyPublicKey78071F3D: {
                    Type: 'AWS::CloudFront::PublicKey',
                    Properties: {
                        PublicKeyConfig: {
                            CallerReference: 'c872d91ae0d2943aad25d4b31f1304d0a62c658ace',
                            EncodedKey: publicKey,
                            Name: 'StackMyPublicKey36EDA6AB',
                        },
                    },
                },
            },
        });
    });
    test('maximum example', () => {
        new lib_1.PublicKey(stack, 'MyPublicKey', {
            publicKeyName: 'pub-key',
            encodedKey: publicKey,
            comment: 'Key expiring on 1/1/1984',
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyPublicKey78071F3D: {
                    Type: 'AWS::CloudFront::PublicKey',
                    Properties: {
                        PublicKeyConfig: {
                            CallerReference: 'c872d91ae0d2943aad25d4b31f1304d0a62c658ace',
                            Comment: 'Key expiring on 1/1/1984',
                            EncodedKey: publicKey,
                            Name: 'pub-key',
                        },
                    },
                },
            },
        });
    });
    test('bad key example', () => {
        expect(() => new lib_1.PublicKey(stack, 'MyPublicKey', {
            publicKeyName: 'pub-key',
            encodedKey: 'bad-key',
            comment: 'Key expiring on 1/1/1984',
        })).toThrow(/Public key must be in PEM format [(]with the BEGIN\/END PUBLIC KEY lines[)]; got (.*?)/);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljLWtleS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHVibGljLWtleS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLHFDQUF3QztBQUN4QyxnQ0FBbUM7QUFFbkMsTUFBTSxTQUFTLEdBQUc7Ozs7Ozs7O3lCQVFPLENBQUM7QUFFMUIsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDekIsSUFBSSxHQUFRLENBQUM7SUFDYixJQUFJLEtBQVksQ0FBQztJQUVqQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsR0FBRyxHQUFHLElBQUksVUFBRyxFQUFFLENBQUM7UUFDaEIsS0FBSyxHQUFHLElBQUksWUFBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUU7WUFDOUIsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFO1NBQ3ZELENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtRQUMzQyxNQUFNLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQztRQUNyQyxNQUFNLE1BQU0sR0FBRyxlQUFTLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDNUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO1FBQzNCLElBQUksZUFBUyxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUU7WUFDbEMsVUFBVSxFQUFFLFNBQVM7U0FDdEIsQ0FBQyxDQUFDO1FBRUgscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsZUFBZSxDQUFDO1lBQ3hDLFNBQVMsRUFBRTtnQkFDVCxtQkFBbUIsRUFBRTtvQkFDbkIsSUFBSSxFQUFFLDRCQUE0QjtvQkFDbEMsVUFBVSxFQUFFO3dCQUNWLGVBQWUsRUFBRTs0QkFDZixlQUFlLEVBQUUsNENBQTRDOzRCQUM3RCxVQUFVLEVBQUUsU0FBUzs0QkFDckIsSUFBSSxFQUFFLDBCQUEwQjt5QkFDakM7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtRQUMzQixJQUFJLGVBQVMsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO1lBQ2xDLGFBQWEsRUFBRSxTQUFTO1lBQ3hCLFVBQVUsRUFBRSxTQUFTO1lBQ3JCLE9BQU8sRUFBRSwwQkFBMEI7U0FDcEMsQ0FBQyxDQUFDO1FBRUgscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsZUFBZSxDQUFDO1lBQ3hDLFNBQVMsRUFBRTtnQkFDVCxtQkFBbUIsRUFBRTtvQkFDbkIsSUFBSSxFQUFFLDRCQUE0QjtvQkFDbEMsVUFBVSxFQUFFO3dCQUNWLGVBQWUsRUFBRTs0QkFDZixlQUFlLEVBQUUsNENBQTRDOzRCQUM3RCxPQUFPLEVBQUUsMEJBQTBCOzRCQUNuQyxVQUFVLEVBQUUsU0FBUzs0QkFDckIsSUFBSSxFQUFFLFNBQVM7eUJBQ2hCO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7UUFDM0IsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksZUFBUyxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUU7WUFDL0MsYUFBYSxFQUFFLFNBQVM7WUFDeEIsVUFBVSxFQUFFLFNBQVM7WUFDckIsT0FBTyxFQUFFLDBCQUEwQjtTQUNwQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsd0ZBQXdGLENBQUMsQ0FBQztJQUN4RyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCB7IEFwcCwgU3RhY2sgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IFB1YmxpY0tleSB9IGZyb20gJy4uL2xpYic7XG5cbmNvbnN0IHB1YmxpY0tleSA9IGAtLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLVxuTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF1ZGY4L2lOa1FnZHZqRWRtNnhZU1xuSkF5eGQva0dUYkpmUU5nOVloSW5iN1RTbTBkR3UweXg4eVozZm5wbXh1UlBxSklsYVZyK2ZUNFlSbDcxZ0VZYVxuZGxoSG1uVmVneVBOalA5ZE5xWjd6d05xTUVQT1BuUy9OT0hiSmoxS1lLcG4xZjhwUE55Y1E1TVFDbnRLR25TalxuNmZjK25iY0Mwam9Edkd6ODB4dXkxVzRoTFY5b0M5YzNHVDI2eGZaYjJqeTlNVnRBM2NwcE51VHdxckZpM3Q2ZVxuMGlHcHJheFpsVDV3ZXdqWkxwUWtuZ3FZcjZzM2F1Y1BBWlZzR1RFWVBvNG5ENW1zd210Wk9tK3RnY09yaXZ0RFxuLzNzRC9xWkxRNmM1c2lxeVM4YVRyYUQ2eStWWHVndWpmYXJUVTY1SWVaNlFBVWJMTXNXdVpPSWk1Sm44ekF3eFxuTlFJREFRQUJcbi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLWA7XG5cbmRlc2NyaWJlKCdQdWJsaWNLZXknLCAoKSA9PiB7XG4gIGxldCBhcHA6IEFwcDtcbiAgbGV0IHN0YWNrOiBTdGFjaztcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBhcHAgPSBuZXcgQXBwKCk7XG4gICAgc3RhY2sgPSBuZXcgU3RhY2soYXBwLCAnU3RhY2snLCB7XG4gICAgICBlbnY6IHsgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsIHJlZ2lvbjogJ3Rlc3RyZWdpb24nIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2ltcG9ydCBleGlzdGluZyBrZXkgZ3JvdXAgYnkgaWQnLCAoKSA9PiB7XG4gICAgY29uc3QgcHVibGljS2V5SWQgPSAnSzM2WDRYMkVPOTk3SE0nO1xuICAgIGNvbnN0IHB1YktleSA9IFB1YmxpY0tleS5mcm9tUHVibGljS2V5SWQoc3RhY2ssICdNeVB1YmxpY0tleScsIHB1YmxpY0tleUlkKTtcbiAgICBleHBlY3QocHViS2V5LnB1YmxpY0tleUlkKS50b0VxdWFsKHB1YmxpY0tleUlkKTtcbiAgfSk7XG5cbiAgdGVzdCgnbWluaW1hbCBleGFtcGxlJywgKCkgPT4ge1xuICAgIG5ldyBQdWJsaWNLZXkoc3RhY2ssICdNeVB1YmxpY0tleScsIHtcbiAgICAgIGVuY29kZWRLZXk6IHB1YmxpY0tleSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykudGVtcGxhdGVNYXRjaGVzKHtcbiAgICAgIFJlc291cmNlczoge1xuICAgICAgICBNeVB1YmxpY0tleTc4MDcxRjNEOiB7XG4gICAgICAgICAgVHlwZTogJ0FXUzo6Q2xvdWRGcm9udDo6UHVibGljS2V5JyxcbiAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBQdWJsaWNLZXlDb25maWc6IHtcbiAgICAgICAgICAgICAgQ2FsbGVyUmVmZXJlbmNlOiAnYzg3MmQ5MWFlMGQyOTQzYWFkMjVkNGIzMWYxMzA0ZDBhNjJjNjU4YWNlJyxcbiAgICAgICAgICAgICAgRW5jb2RlZEtleTogcHVibGljS2V5LFxuICAgICAgICAgICAgICBOYW1lOiAnU3RhY2tNeVB1YmxpY0tleTM2RURBNkFCJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ21heGltdW0gZXhhbXBsZScsICgpID0+IHtcbiAgICBuZXcgUHVibGljS2V5KHN0YWNrLCAnTXlQdWJsaWNLZXknLCB7XG4gICAgICBwdWJsaWNLZXlOYW1lOiAncHViLWtleScsXG4gICAgICBlbmNvZGVkS2V5OiBwdWJsaWNLZXksXG4gICAgICBjb21tZW50OiAnS2V5IGV4cGlyaW5nIG9uIDEvMS8xOTg0JyxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykudGVtcGxhdGVNYXRjaGVzKHtcbiAgICAgIFJlc291cmNlczoge1xuICAgICAgICBNeVB1YmxpY0tleTc4MDcxRjNEOiB7XG4gICAgICAgICAgVHlwZTogJ0FXUzo6Q2xvdWRGcm9udDo6UHVibGljS2V5JyxcbiAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBQdWJsaWNLZXlDb25maWc6IHtcbiAgICAgICAgICAgICAgQ2FsbGVyUmVmZXJlbmNlOiAnYzg3MmQ5MWFlMGQyOTQzYWFkMjVkNGIzMWYxMzA0ZDBhNjJjNjU4YWNlJyxcbiAgICAgICAgICAgICAgQ29tbWVudDogJ0tleSBleHBpcmluZyBvbiAxLzEvMTk4NCcsXG4gICAgICAgICAgICAgIEVuY29kZWRLZXk6IHB1YmxpY0tleSxcbiAgICAgICAgICAgICAgTmFtZTogJ3B1Yi1rZXknLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnYmFkIGtleSBleGFtcGxlJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiBuZXcgUHVibGljS2V5KHN0YWNrLCAnTXlQdWJsaWNLZXknLCB7XG4gICAgICBwdWJsaWNLZXlOYW1lOiAncHViLWtleScsXG4gICAgICBlbmNvZGVkS2V5OiAnYmFkLWtleScsXG4gICAgICBjb21tZW50OiAnS2V5IGV4cGlyaW5nIG9uIDEvMS8xOTg0JyxcbiAgICB9KSkudG9UaHJvdygvUHVibGljIGtleSBtdXN0IGJlIGluIFBFTSBmb3JtYXQgWyhdd2l0aCB0aGUgQkVHSU5cXC9FTkQgUFVCTElDIEtFWSBsaW5lc1spXTsgZ290ICguKj8pLyk7XG4gIH0pO1xufSk7XG4iXX0=