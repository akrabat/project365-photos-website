"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultOriginGroup = exports.defaultOrigin = exports.TestOriginGroup = exports.TestOrigin = void 0;
const lib_1 = require("../lib");
/** Used for testing common Origin functionality */
class TestOrigin extends lib_1.OriginBase {
    constructor(domainName, props = {}) { super(domainName, props); }
    renderCustomOriginConfig() {
        return { originProtocolPolicy: lib_1.OriginProtocolPolicy.HTTPS_ONLY };
    }
}
exports.TestOrigin = TestOrigin;
class TestOriginGroup {
    constructor(primaryDomainName, secondaryDomainName) {
        this.primaryDomainName = primaryDomainName;
        this.secondaryDomainName = secondaryDomainName;
    }
    /* eslint-disable @aws-cdk/no-core-construct */
    bind(scope, options) {
        const primaryOrigin = new TestOrigin(this.primaryDomainName);
        const secondaryOrigin = new TestOrigin(this.secondaryDomainName);
        const primaryOriginConfig = primaryOrigin.bind(scope, options);
        return {
            originProperty: primaryOriginConfig.originProperty,
            failoverConfig: {
                failoverOrigin: secondaryOrigin,
            },
        };
    }
}
exports.TestOriginGroup = TestOriginGroup;
function defaultOrigin(domainName, originId) {
    return new TestOrigin(domainName ?? 'www.example.com', {
        originId,
    });
}
exports.defaultOrigin = defaultOrigin;
function defaultOriginGroup() {
    return new TestOriginGroup('www.example.com', 'foo.example.com');
}
exports.defaultOriginGroup = defaultOriginGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1vcmlnaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LW9yaWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxnQ0FBc0k7QUFFdEksbURBQW1EO0FBQ25ELE1BQWEsVUFBVyxTQUFRLGdCQUFVO0lBQ3hDLFlBQVksVUFBa0IsRUFBRSxRQUFxQixFQUFFLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFO0lBQzVFLHdCQUF3QjtRQUNoQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsMEJBQW9CLENBQUMsVUFBVSxFQUFFLENBQUM7S0FDbEU7Q0FDRjtBQUxELGdDQUtDO0FBRUQsTUFBYSxlQUFlO0lBQzFCLFlBQTZCLGlCQUF5QixFQUFtQixtQkFBMkI7UUFBdkUsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFRO1FBQW1CLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBUTtLQUFLO0lBQ3pHLCtDQUErQztJQUN4QyxJQUFJLENBQUMsS0FBZ0IsRUFBRSxPQUEwQjtRQUN0RCxNQUFNLGFBQWEsR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM3RCxNQUFNLGVBQWUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUVqRSxNQUFNLG1CQUFtQixHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9ELE9BQU87WUFDTCxjQUFjLEVBQUUsbUJBQW1CLENBQUMsY0FBYztZQUNsRCxjQUFjLEVBQUU7Z0JBQ2QsY0FBYyxFQUFFLGVBQWU7YUFDaEM7U0FDRixDQUFDO0tBQ0g7Q0FDRjtBQWZELDBDQWVDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLFVBQW1CLEVBQUUsUUFBaUI7SUFDbEUsT0FBTyxJQUFJLFVBQVUsQ0FBQyxVQUFVLElBQUksaUJBQWlCLEVBQUU7UUFDckQsUUFBUTtLQUNULENBQUMsQ0FBQztBQUNMLENBQUM7QUFKRCxzQ0FJQztBQUVELFNBQWdCLGtCQUFrQjtJQUNoQyxPQUFPLElBQUksZUFBZSxDQUFDLGlCQUFpQixFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUZELGdEQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBDZm5EaXN0cmlidXRpb24sIElPcmlnaW4sIE9yaWdpbkJhc2UsIE9yaWdpbkJpbmRDb25maWcsIE9yaWdpbkJpbmRPcHRpb25zLCBPcmlnaW5Qcm9wcywgT3JpZ2luUHJvdG9jb2xQb2xpY3kgfSBmcm9tICcuLi9saWInO1xuXG4vKiogVXNlZCBmb3IgdGVzdGluZyBjb21tb24gT3JpZ2luIGZ1bmN0aW9uYWxpdHkgKi9cbmV4cG9ydCBjbGFzcyBUZXN0T3JpZ2luIGV4dGVuZHMgT3JpZ2luQmFzZSB7XG4gIGNvbnN0cnVjdG9yKGRvbWFpbk5hbWU6IHN0cmluZywgcHJvcHM6IE9yaWdpblByb3BzID0ge30pIHsgc3VwZXIoZG9tYWluTmFtZSwgcHJvcHMpOyB9XG4gIHByb3RlY3RlZCByZW5kZXJDdXN0b21PcmlnaW5Db25maWcoKTogQ2ZuRGlzdHJpYnV0aW9uLkN1c3RvbU9yaWdpbkNvbmZpZ1Byb3BlcnR5IHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4geyBvcmlnaW5Qcm90b2NvbFBvbGljeTogT3JpZ2luUHJvdG9jb2xQb2xpY3kuSFRUUFNfT05MWSB9O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUZXN0T3JpZ2luR3JvdXAgaW1wbGVtZW50cyBJT3JpZ2luIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBwcmltYXJ5RG9tYWluTmFtZTogc3RyaW5nLCBwcml2YXRlIHJlYWRvbmx5IHNlY29uZGFyeURvbWFpbk5hbWU6IHN0cmluZykgeyB9XG4gIC8qIGVzbGludC1kaXNhYmxlIEBhd3MtY2RrL25vLWNvcmUtY29uc3RydWN0ICovXG4gIHB1YmxpYyBiaW5kKHNjb3BlOiBDb25zdHJ1Y3QsIG9wdGlvbnM6IE9yaWdpbkJpbmRPcHRpb25zKTogT3JpZ2luQmluZENvbmZpZyB7XG4gICAgY29uc3QgcHJpbWFyeU9yaWdpbiA9IG5ldyBUZXN0T3JpZ2luKHRoaXMucHJpbWFyeURvbWFpbk5hbWUpO1xuICAgIGNvbnN0IHNlY29uZGFyeU9yaWdpbiA9IG5ldyBUZXN0T3JpZ2luKHRoaXMuc2Vjb25kYXJ5RG9tYWluTmFtZSk7XG5cbiAgICBjb25zdCBwcmltYXJ5T3JpZ2luQ29uZmlnID0gcHJpbWFyeU9yaWdpbi5iaW5kKHNjb3BlLCBvcHRpb25zKTtcbiAgICByZXR1cm4ge1xuICAgICAgb3JpZ2luUHJvcGVydHk6IHByaW1hcnlPcmlnaW5Db25maWcub3JpZ2luUHJvcGVydHksXG4gICAgICBmYWlsb3ZlckNvbmZpZzoge1xuICAgICAgICBmYWlsb3Zlck9yaWdpbjogc2Vjb25kYXJ5T3JpZ2luLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0T3JpZ2luKGRvbWFpbk5hbWU/OiBzdHJpbmcsIG9yaWdpbklkPzogc3RyaW5nKTogSU9yaWdpbiB7XG4gIHJldHVybiBuZXcgVGVzdE9yaWdpbihkb21haW5OYW1lID8/ICd3d3cuZXhhbXBsZS5jb20nLCB7XG4gICAgb3JpZ2luSWQsXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE9yaWdpbkdyb3VwKCk6IElPcmlnaW4ge1xuICByZXR1cm4gbmV3IFRlc3RPcmlnaW5Hcm91cCgnd3d3LmV4YW1wbGUuY29tJywgJ2Zvby5leGFtcGxlLmNvbScpO1xufVxuIl19