"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const certificatemanager = require("../../aws-certificatemanager");
const iam = require("../../aws-iam");
const lambda = require("../../aws-lambda");
const s3 = require("../../aws-s3");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const cdk = require("../../core");
const lib_1 = require("../lib");
/* eslint-disable quote-props */
const publicKey = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAudf8/iNkQgdvjEdm6xYS
JAyxd/kGTbJfQNg9YhInb7TSm0dGu0yx8yZ3fnpmxuRPqJIlaVr+fT4YRl71gEYa
dlhHmnVegyPNjP9dNqZ7zwNqMEPOPnS/NOHbJj1KYKpn1f8pPNycQ5MQCntKGnSj
6fc+nbcC0joDvGz80xuy1W4hLV9oC9c3GT26xfZb2jy9MVtA3cppNuTwqrFi3t6e
0iGpraxZlT5wewjZLpQkngqYr6s3aucPAZVsGTEYPo4nD5mswmtZOm+tgcOrivtD
/3sD/qZLQ6c5siqyS8aTraD6y+VXugujfarTU65IeZ6QAUbLMsWuZOIi5Jn8zAwx
NQIDAQAB
-----END PUBLIC KEY-----`;
describe('web distribution', () => {
    (0, cdk_build_tools_1.testDeprecated)('distribution with custom origin adds custom origin', () => {
        const stack = new cdk.Stack();
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    originHeaders: {
                        'X-Custom-Header': 'somevalue',
                    },
                    customOriginSource: {
                        domainName: 'myorigin.com',
                    },
                    originShieldRegion: 'us-east-1',
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'AnAmazingWebsiteProbablyCFDistribution47E3983B': {
                    'Type': 'AWS::CloudFront::Distribution',
                    'Properties': {
                        'DistributionConfig': {
                            'DefaultCacheBehavior': {
                                'AllowedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'CachedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'ForwardedValues': {
                                    'Cookies': {
                                        'Forward': 'none',
                                    },
                                    'QueryString': false,
                                },
                                'TargetOriginId': 'origin1',
                                'ViewerProtocolPolicy': 'redirect-to-https',
                                'Compress': true,
                            },
                            'DefaultRootObject': 'index.html',
                            'Enabled': true,
                            'HttpVersion': 'http2',
                            'IPV6Enabled': true,
                            'Origins': [
                                {
                                    'CustomOriginConfig': {
                                        'HTTPPort': 80,
                                        'HTTPSPort': 443,
                                        'OriginKeepaliveTimeout': 5,
                                        'OriginProtocolPolicy': 'https-only',
                                        'OriginReadTimeout': 30,
                                        'OriginSSLProtocols': [
                                            'TLSv1.2',
                                        ],
                                    },
                                    'ConnectionAttempts': 3,
                                    'ConnectionTimeout': 10,
                                    'DomainName': 'myorigin.com',
                                    'Id': 'origin1',
                                    'OriginCustomHeaders': [
                                        {
                                            'HeaderName': 'X-Custom-Header',
                                            'HeaderValue': 'somevalue',
                                        },
                                    ],
                                    'OriginShield': {
                                        'Enabled': true,
                                        'OriginShieldRegion': 'us-east-1',
                                    },
                                },
                            ],
                            'PriceClass': 'PriceClass_100',
                            'ViewerCertificate': {
                                'CloudFrontDefaultCertificate': true,
                            },
                        },
                    },
                },
            },
        });
    });
    test('most basic distribution', () => {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket,
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'Bucket83908E77': {
                    'Type': 'AWS::S3::Bucket',
                    'DeletionPolicy': 'Retain',
                    'UpdateReplacePolicy': 'Retain',
                },
                'AnAmazingWebsiteProbablyCFDistribution47E3983B': {
                    'Type': 'AWS::CloudFront::Distribution',
                    'Properties': {
                        'DistributionConfig': {
                            'DefaultRootObject': 'index.html',
                            'Origins': [
                                {
                                    'ConnectionAttempts': 3,
                                    'ConnectionTimeout': 10,
                                    'DomainName': {
                                        'Fn::GetAtt': [
                                            'Bucket83908E77',
                                            'RegionalDomainName',
                                        ],
                                    },
                                    'Id': 'origin1',
                                    'S3OriginConfig': {},
                                },
                            ],
                            'ViewerCertificate': {
                                'CloudFrontDefaultCertificate': true,
                            },
                            'PriceClass': 'PriceClass_100',
                            'DefaultCacheBehavior': {
                                'AllowedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'CachedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'TargetOriginId': 'origin1',
                                'ViewerProtocolPolicy': 'redirect-to-https',
                                'ForwardedValues': {
                                    'QueryString': false,
                                    'Cookies': { 'Forward': 'none' },
                                },
                                'Compress': true,
                            },
                            'Enabled': true,
                            'IPV6Enabled': true,
                            'HttpVersion': 'http2',
                        },
                    },
                },
            },
        });
    });
    test('can disable distribution', () => {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            enabled: false,
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket,
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'Bucket83908E77': {
                    'Type': 'AWS::S3::Bucket',
                    'DeletionPolicy': 'Retain',
                    'UpdateReplacePolicy': 'Retain',
                },
                'AnAmazingWebsiteProbablyCFDistribution47E3983B': {
                    'Type': 'AWS::CloudFront::Distribution',
                    'Properties': {
                        'DistributionConfig': {
                            'DefaultRootObject': 'index.html',
                            'Origins': [
                                {
                                    'ConnectionAttempts': 3,
                                    'ConnectionTimeout': 10,
                                    'DomainName': {
                                        'Fn::GetAtt': [
                                            'Bucket83908E77',
                                            'RegionalDomainName',
                                        ],
                                    },
                                    'Id': 'origin1',
                                    'S3OriginConfig': {},
                                },
                            ],
                            'ViewerCertificate': {
                                'CloudFrontDefaultCertificate': true,
                            },
                            'PriceClass': 'PriceClass_100',
                            'DefaultCacheBehavior': {
                                'AllowedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'CachedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'TargetOriginId': 'origin1',
                                'ViewerProtocolPolicy': 'redirect-to-https',
                                'ForwardedValues': {
                                    'QueryString': false,
                                    'Cookies': { 'Forward': 'none' },
                                },
                                'Compress': true,
                            },
                            'Enabled': false,
                            'IPV6Enabled': true,
                            'HttpVersion': 'http2',
                        },
                    },
                },
            },
        });
    });
    test('ensure long comments will not break the distribution', () => {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            comment: `Adding a comment longer than 128 characters should be trimmed and
added the ellipsis so a user would know there was more to read and everything beyond this point should not show up`,
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket,
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                Bucket83908E77: {
                    Type: 'AWS::S3::Bucket',
                    DeletionPolicy: 'Retain',
                    UpdateReplacePolicy: 'Retain',
                },
                AnAmazingWebsiteProbablyCFDistribution47E3983B: {
                    Type: 'AWS::CloudFront::Distribution',
                    Properties: {
                        DistributionConfig: {
                            DefaultRootObject: 'index.html',
                            Origins: [
                                {
                                    ConnectionAttempts: 3,
                                    ConnectionTimeout: 10,
                                    DomainName: {
                                        'Fn::GetAtt': ['Bucket83908E77', 'RegionalDomainName'],
                                    },
                                    Id: 'origin1',
                                    S3OriginConfig: {},
                                },
                            ],
                            ViewerCertificate: {
                                CloudFrontDefaultCertificate: true,
                            },
                            PriceClass: 'PriceClass_100',
                            DefaultCacheBehavior: {
                                AllowedMethods: ['GET', 'HEAD'],
                                CachedMethods: ['GET', 'HEAD'],
                                TargetOriginId: 'origin1',
                                ViewerProtocolPolicy: 'redirect-to-https',
                                ForwardedValues: {
                                    QueryString: false,
                                    Cookies: { Forward: 'none' },
                                },
                                Compress: true,
                            },
                            Comment: `Adding a comment longer than 128 characters should be trimmed and
added the ellipsis so a user would know there was more to r...`,
                            Enabled: true,
                            IPV6Enabled: true,
                            HttpVersion: 'http2',
                        },
                    },
                },
            },
        });
    });
    test('distribution with bucket and OAI', () => {
        const stack = new cdk.Stack();
        const s3BucketSource = new s3.Bucket(stack, 'Bucket');
        const originAccessIdentity = new lib_1.OriginAccessIdentity(stack, 'OAI');
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [{
                    s3OriginSource: { s3BucketSource, originAccessIdentity },
                    behaviors: [{ isDefaultBehavior: true }],
                }],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
            DistributionConfig: {
                Origins: [
                    {
                        ConnectionAttempts: 3,
                        ConnectionTimeout: 10,
                        DomainName: {
                            'Fn::GetAtt': [
                                'Bucket83908E77',
                                'RegionalDomainName',
                            ],
                        },
                        Id: 'origin1',
                        S3OriginConfig: {
                            OriginAccessIdentity: {
                                'Fn::Join': ['', ['origin-access-identity/cloudfront/', { Ref: 'OAIE1EFC67F' }]],
                            },
                        },
                    },
                ],
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::BucketPolicy', {
            PolicyDocument: {
                Statement: [{
                        Action: 's3:GetObject',
                        Effect: 'Allow',
                        Principal: {
                            CanonicalUser: { 'Fn::GetAtt': ['OAIE1EFC67F', 'S3CanonicalUserId'] },
                        },
                        Resource: {
                            'Fn::Join': ['', [{ 'Fn::GetAtt': ['Bucket83908E77', 'Arn'] }, '/*']],
                        },
                    }],
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('distribution with trusted signers on default distribution', () => {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        const pubKey = new lib_1.PublicKey(stack, 'MyPubKey', {
            encodedKey: publicKey,
        });
        const keyGroup = new lib_1.KeyGroup(stack, 'MyKeyGroup', {
            items: [
                pubKey,
            ],
        });
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket,
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                            trustedSigners: ['1234'],
                            trustedKeyGroups: [
                                keyGroup,
                            ],
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'Bucket83908E77': {
                    'Type': 'AWS::S3::Bucket',
                    'DeletionPolicy': 'Retain',
                    'UpdateReplacePolicy': 'Retain',
                },
                'MyPubKey6ADA4CF5': {
                    'Type': 'AWS::CloudFront::PublicKey',
                    'Properties': {
                        'PublicKeyConfig': {
                            'CallerReference': 'c8141e732ea37b19375d4cbef2b2d2c6f613f0649a',
                            'EncodedKey': publicKey,
                            'Name': 'MyPubKey',
                        },
                    },
                },
                'MyKeyGroupAF22FD35': {
                    'Type': 'AWS::CloudFront::KeyGroup',
                    'Properties': {
                        'KeyGroupConfig': {
                            'Items': [
                                {
                                    'Ref': 'MyPubKey6ADA4CF5',
                                },
                            ],
                            'Name': 'MyKeyGroup',
                        },
                    },
                },
                'AnAmazingWebsiteProbablyCFDistribution47E3983B': {
                    'Type': 'AWS::CloudFront::Distribution',
                    'Properties': {
                        'DistributionConfig': {
                            'DefaultRootObject': 'index.html',
                            'Origins': [
                                {
                                    'ConnectionAttempts': 3,
                                    'ConnectionTimeout': 10,
                                    'DomainName': {
                                        'Fn::GetAtt': [
                                            'Bucket83908E77',
                                            'RegionalDomainName',
                                        ],
                                    },
                                    'Id': 'origin1',
                                    'S3OriginConfig': {},
                                },
                            ],
                            'ViewerCertificate': {
                                'CloudFrontDefaultCertificate': true,
                            },
                            'PriceClass': 'PriceClass_100',
                            'DefaultCacheBehavior': {
                                'AllowedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'CachedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'TargetOriginId': 'origin1',
                                'ViewerProtocolPolicy': 'redirect-to-https',
                                'ForwardedValues': {
                                    'QueryString': false,
                                    'Cookies': { 'Forward': 'none' },
                                },
                                'TrustedKeyGroups': [
                                    {
                                        'Ref': 'MyKeyGroupAF22FD35',
                                    },
                                ],
                                'TrustedSigners': ['1234'],
                                'Compress': true,
                            },
                            'Enabled': true,
                            'IPV6Enabled': true,
                            'HttpVersion': 'http2',
                        },
                    },
                },
            },
        });
    });
    test('distribution with ViewerProtocolPolicy set to a non-default value', () => {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            viewerProtocolPolicy: lib_1.ViewerProtocolPolicy.ALLOW_ALL,
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket,
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'Bucket83908E77': {
                    'Type': 'AWS::S3::Bucket',
                    'DeletionPolicy': 'Retain',
                    'UpdateReplacePolicy': 'Retain',
                },
                'AnAmazingWebsiteProbablyCFDistribution47E3983B': {
                    'Type': 'AWS::CloudFront::Distribution',
                    'Properties': {
                        'DistributionConfig': {
                            'DefaultRootObject': 'index.html',
                            'Origins': [
                                {
                                    'ConnectionAttempts': 3,
                                    'ConnectionTimeout': 10,
                                    'DomainName': {
                                        'Fn::GetAtt': [
                                            'Bucket83908E77',
                                            'RegionalDomainName',
                                        ],
                                    },
                                    'Id': 'origin1',
                                    'S3OriginConfig': {},
                                },
                            ],
                            'ViewerCertificate': {
                                'CloudFrontDefaultCertificate': true,
                            },
                            'PriceClass': 'PriceClass_100',
                            'DefaultCacheBehavior': {
                                'AllowedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'CachedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'TargetOriginId': 'origin1',
                                'ViewerProtocolPolicy': 'allow-all',
                                'ForwardedValues': {
                                    'QueryString': false,
                                    'Cookies': { 'Forward': 'none' },
                                },
                                'Compress': true,
                            },
                            'Enabled': true,
                            'IPV6Enabled': true,
                            'HttpVersion': 'http2',
                        },
                    },
                },
            },
        });
    });
    test('distribution with ViewerProtocolPolicy overridden in Behavior', () => {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            viewerProtocolPolicy: lib_1.ViewerProtocolPolicy.ALLOW_ALL,
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket,
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                        },
                        {
                            pathPattern: '/test/*',
                            viewerProtocolPolicy: lib_1.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'Bucket83908E77': {
                    'Type': 'AWS::S3::Bucket',
                    'DeletionPolicy': 'Retain',
                    'UpdateReplacePolicy': 'Retain',
                },
                'AnAmazingWebsiteProbablyCFDistribution47E3983B': {
                    'Type': 'AWS::CloudFront::Distribution',
                    'Properties': {
                        'DistributionConfig': {
                            'CacheBehaviors': [
                                {
                                    'AllowedMethods': [
                                        'GET',
                                        'HEAD',
                                    ],
                                    'CachedMethods': [
                                        'GET',
                                        'HEAD',
                                    ],
                                    'Compress': true,
                                    'ForwardedValues': {
                                        'Cookies': {
                                            'Forward': 'none',
                                        },
                                        'QueryString': false,
                                    },
                                    'PathPattern': '/test/*',
                                    'TargetOriginId': 'origin1',
                                    'ViewerProtocolPolicy': 'redirect-to-https',
                                },
                            ],
                            'DefaultRootObject': 'index.html',
                            'Origins': [
                                {
                                    'ConnectionAttempts': 3,
                                    'ConnectionTimeout': 10,
                                    'DomainName': {
                                        'Fn::GetAtt': [
                                            'Bucket83908E77',
                                            'RegionalDomainName',
                                        ],
                                    },
                                    'Id': 'origin1',
                                    'S3OriginConfig': {},
                                },
                            ],
                            'ViewerCertificate': {
                                'CloudFrontDefaultCertificate': true,
                            },
                            'PriceClass': 'PriceClass_100',
                            'DefaultCacheBehavior': {
                                'AllowedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'CachedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'TargetOriginId': 'origin1',
                                'ViewerProtocolPolicy': 'allow-all',
                                'ForwardedValues': {
                                    'QueryString': false,
                                    'Cookies': { 'Forward': 'none' },
                                },
                                'Compress': true,
                            },
                            'Enabled': true,
                            'IPV6Enabled': true,
                            'HttpVersion': 'http2',
                        },
                    },
                },
            },
        });
    });
    test('distribution with disabled compression', () => {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket,
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                            compress: false,
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'Bucket83908E77': {
                    'Type': 'AWS::S3::Bucket',
                    'DeletionPolicy': 'Retain',
                    'UpdateReplacePolicy': 'Retain',
                },
                'AnAmazingWebsiteProbablyCFDistribution47E3983B': {
                    'Type': 'AWS::CloudFront::Distribution',
                    'Properties': {
                        'DistributionConfig': {
                            'DefaultRootObject': 'index.html',
                            'Origins': [
                                {
                                    'ConnectionAttempts': 3,
                                    'ConnectionTimeout': 10,
                                    'DomainName': {
                                        'Fn::GetAtt': [
                                            'Bucket83908E77',
                                            'RegionalDomainName',
                                        ],
                                    },
                                    'Id': 'origin1',
                                    'S3OriginConfig': {},
                                },
                            ],
                            'ViewerCertificate': {
                                'CloudFrontDefaultCertificate': true,
                            },
                            'PriceClass': 'PriceClass_100',
                            'DefaultCacheBehavior': {
                                'AllowedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'CachedMethods': [
                                    'GET',
                                    'HEAD',
                                ],
                                'TargetOriginId': 'origin1',
                                'ViewerProtocolPolicy': 'redirect-to-https',
                                'ForwardedValues': {
                                    'QueryString': false,
                                    'Cookies': { 'Forward': 'none' },
                                },
                                'Compress': false,
                            },
                            'Enabled': true,
                            'IPV6Enabled': true,
                            'HttpVersion': 'http2',
                        },
                    },
                },
            },
        });
    });
    test('distribution with CloudFront function-association', () => {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket,
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                            functionAssociations: [{
                                    eventType: lib_1.FunctionEventType.VIEWER_REQUEST,
                                    function: new lib_1.Function(stack, 'TestFunction', {
                                        code: lib_1.FunctionCode.fromInline('foo'),
                                    }),
                                }],
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
            'DistributionConfig': {
                'DefaultCacheBehavior': {
                    'FunctionAssociations': [
                        {
                            'EventType': 'viewer-request',
                            'FunctionARN': {
                                'Fn::GetAtt': [
                                    'TestFunction22AD90FC',
                                    'FunctionARN',
                                ],
                            },
                        },
                    ],
                },
            },
        });
    });
    test('distribution with resolvable lambda-association', () => {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        const lambdaFunction = new lambda.Function(stack, 'Lambda', {
            code: lambda.Code.fromInline('foo'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS_14_X,
        });
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket,
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                            lambdaFunctionAssociations: [{
                                    eventType: lib_1.LambdaEdgeEventType.ORIGIN_REQUEST,
                                    lambdaFunction: lambdaFunction.currentVersion,
                                    includeBody: true,
                                }],
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
            'DistributionConfig': {
                'DefaultCacheBehavior': {
                    'LambdaFunctionAssociations': [
                        {
                            'EventType': 'origin-request',
                            'IncludeBody': true,
                            'LambdaFunctionARN': {
                                'Ref': 'LambdaCurrentVersionDF706F6A9a632a294ae3a9cd4d550f1c4e26619d',
                            },
                        },
                    ],
                },
            },
        });
    });
    test('associate a lambda with removable env vars', () => {
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'Stack');
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        const lambdaFunction = new lambda.Function(stack, 'Lambda', {
            code: lambda.Code.fromInline('foo'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS_14_X,
        });
        lambdaFunction.addEnvironment('KEY', 'value', { removeInEdge: true });
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket,
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                            lambdaFunctionAssociations: [{
                                    eventType: lib_1.LambdaEdgeEventType.ORIGIN_REQUEST,
                                    lambdaFunction: lambdaFunction.currentVersion,
                                }],
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Function', {
            Environment: assertions_1.Match.absent(),
        });
    });
    test('throws when associating a lambda with incompatible env vars', () => {
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'Stack');
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        const lambdaFunction = new lambda.Function(stack, 'Lambda', {
            code: lambda.Code.fromInline('foo'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS_14_X,
            environment: {
                KEY: 'value',
            },
        });
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket,
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                            lambdaFunctionAssociations: [{
                                    eventType: lib_1.LambdaEdgeEventType.ORIGIN_REQUEST,
                                    lambdaFunction: lambdaFunction.currentVersion,
                                }],
                        },
                    ],
                },
            ],
        });
        expect(() => app.synth()).toThrow(/KEY/);
    });
    test('throws when associating a lambda with includeBody and a response event type', () => {
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'Stack');
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        const fnVersion = lambda.Version.fromVersionArn(stack, 'Version', 'arn:aws:lambda:testregion:111111111111:function:myTestFun:v1');
        expect(() => {
            new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
                originConfigs: [
                    {
                        s3OriginSource: {
                            s3BucketSource: sourceBucket,
                        },
                        behaviors: [
                            {
                                isDefaultBehavior: true,
                                lambdaFunctionAssociations: [{
                                        eventType: lib_1.LambdaEdgeEventType.VIEWER_RESPONSE,
                                        includeBody: true,
                                        lambdaFunction: fnVersion,
                                    }],
                            },
                        ],
                    },
                ],
            });
        }).toThrow(/'includeBody' can only be true for ORIGIN_REQUEST or VIEWER_REQUEST event types./);
    });
    test('distribution has a defaultChild', () => {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        const distribution = new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket,
                    },
                    behaviors: [{ isDefaultBehavior: true }],
                },
            ],
        });
        expect(distribution.node.defaultChild instanceof lib_1.CfnDistribution).toEqual(true);
    });
    (0, cdk_build_tools_1.testDeprecated)('allows multiple aliasConfiguration CloudFrontWebDistribution per stack', () => {
        const stack = new cdk.Stack();
        const s3BucketSource = new s3.Bucket(stack, 'Bucket');
        const originConfigs = [{
                s3OriginSource: { s3BucketSource },
                behaviors: [{ isDefaultBehavior: true }],
            }];
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs,
            aliasConfiguration: { acmCertRef: 'acm_ref', names: ['www.example.com'] },
        });
        new lib_1.CloudFrontWebDistribution(stack, 'AnotherAmazingWebsiteProbably', {
            originConfigs,
            aliasConfiguration: { acmCertRef: 'another_acm_ref', names: ['ftp.example.com'] },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
            'DistributionConfig': {
                'Aliases': ['www.example.com'],
                'ViewerCertificate': {
                    'AcmCertificateArn': 'acm_ref',
                    'SslSupportMethod': 'sni-only',
                },
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
            'DistributionConfig': {
                'Aliases': ['ftp.example.com'],
                'ViewerCertificate': {
                    'AcmCertificateArn': 'another_acm_ref',
                    'SslSupportMethod': 'sni-only',
                },
            },
        });
    });
    describe('viewerCertificate', () => {
        describe('acmCertificate', () => {
            test('base usage', () => {
                const stack = new cdk.Stack();
                const sourceBucket = new s3.Bucket(stack, 'Bucket');
                const certificate = new certificatemanager.Certificate(stack, 'cert', {
                    domainName: 'example.com',
                });
                new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
                    originConfigs: [{
                            s3OriginSource: { s3BucketSource: sourceBucket },
                            behaviors: [{ isDefaultBehavior: true }],
                        }],
                    viewerCertificate: lib_1.ViewerCertificate.fromAcmCertificate(certificate),
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
                    'DistributionConfig': {
                        'Aliases': [],
                        'ViewerCertificate': {
                            'AcmCertificateArn': {
                                'Ref': 'cert56CA94EB',
                            },
                            'SslSupportMethod': 'sni-only',
                        },
                    },
                });
            });
            test('imported certificate fromCertificateArn', () => {
                const stack = new cdk.Stack();
                const sourceBucket = new s3.Bucket(stack, 'Bucket');
                const certificate = certificatemanager.Certificate.fromCertificateArn(stack, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d');
                new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
                    originConfigs: [{
                            s3OriginSource: { s3BucketSource: sourceBucket },
                            behaviors: [{ isDefaultBehavior: true }],
                        }],
                    viewerCertificate: lib_1.ViewerCertificate.fromAcmCertificate(certificate),
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
                    'DistributionConfig': {
                        'Aliases': [],
                        'ViewerCertificate': {
                            'AcmCertificateArn': 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d',
                            'SslSupportMethod': 'sni-only',
                        },
                    },
                });
            });
            test('advanced usage', () => {
                const stack = new cdk.Stack();
                const sourceBucket = new s3.Bucket(stack, 'Bucket');
                const certificate = new certificatemanager.Certificate(stack, 'cert', {
                    domainName: 'example.com',
                });
                new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
                    originConfigs: [{
                            s3OriginSource: { s3BucketSource: sourceBucket },
                            behaviors: [{ isDefaultBehavior: true }],
                        }],
                    viewerCertificate: lib_1.ViewerCertificate.fromAcmCertificate(certificate, {
                        securityPolicy: lib_1.SecurityPolicyProtocol.SSL_V3,
                        sslMethod: lib_1.SSLMethod.VIP,
                        aliases: ['example.com', 'www.example.com'],
                    }),
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
                    'DistributionConfig': {
                        'Aliases': ['example.com', 'www.example.com'],
                        'ViewerCertificate': {
                            'AcmCertificateArn': {
                                'Ref': 'cert56CA94EB',
                            },
                            'MinimumProtocolVersion': 'SSLv3',
                            'SslSupportMethod': 'vip',
                        },
                    },
                });
            });
        });
        describe('iamCertificate', () => {
            test('base usage', () => {
                const stack = new cdk.Stack();
                const sourceBucket = new s3.Bucket(stack, 'Bucket');
                new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
                    originConfigs: [{
                            s3OriginSource: { s3BucketSource: sourceBucket },
                            behaviors: [{ isDefaultBehavior: true }],
                        }],
                    viewerCertificate: lib_1.ViewerCertificate.fromIamCertificate('test'),
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
                    'DistributionConfig': {
                        'Aliases': [],
                        'ViewerCertificate': {
                            'IamCertificateId': 'test',
                            'SslSupportMethod': 'sni-only',
                        },
                    },
                });
            });
            test('advanced usage', () => {
                const stack = new cdk.Stack();
                const sourceBucket = new s3.Bucket(stack, 'Bucket');
                new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
                    originConfigs: [{
                            s3OriginSource: { s3BucketSource: sourceBucket },
                            behaviors: [{ isDefaultBehavior: true }],
                        }],
                    viewerCertificate: lib_1.ViewerCertificate.fromIamCertificate('test', {
                        securityPolicy: lib_1.SecurityPolicyProtocol.TLS_V1,
                        sslMethod: lib_1.SSLMethod.VIP,
                        aliases: ['example.com'],
                    }),
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
                    'DistributionConfig': {
                        'Aliases': ['example.com'],
                        'ViewerCertificate': {
                            'IamCertificateId': 'test',
                            'MinimumProtocolVersion': 'TLSv1',
                            'SslSupportMethod': 'vip',
                        },
                    },
                });
            });
        });
        describe('cloudFrontDefaultCertificate', () => {
            test('base usage', () => {
                const stack = new cdk.Stack();
                const sourceBucket = new s3.Bucket(stack, 'Bucket');
                new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
                    originConfigs: [{
                            s3OriginSource: { s3BucketSource: sourceBucket },
                            behaviors: [{ isDefaultBehavior: true }],
                        }],
                    viewerCertificate: lib_1.ViewerCertificate.fromCloudFrontDefaultCertificate(),
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
                    'DistributionConfig': {
                        'Aliases': [],
                        'ViewerCertificate': {
                            'CloudFrontDefaultCertificate': true,
                        },
                    },
                });
            });
            test('aliases are set', () => {
                const stack = new cdk.Stack();
                const sourceBucket = new s3.Bucket(stack, 'Bucket');
                new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
                    originConfigs: [{
                            s3OriginSource: { s3BucketSource: sourceBucket },
                            behaviors: [{ isDefaultBehavior: true }],
                        }],
                    viewerCertificate: lib_1.ViewerCertificate.fromCloudFrontDefaultCertificate('example.com', 'www.example.com'),
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
                    'DistributionConfig': {
                        'Aliases': ['example.com', 'www.example.com'],
                        'ViewerCertificate': {
                            'CloudFrontDefaultCertificate': true,
                        },
                    },
                });
            });
        });
        describe('errors', () => {
            (0, cdk_build_tools_1.testDeprecated)('throws if both deprecated aliasConfiguration and viewerCertificate', () => {
                const stack = new cdk.Stack();
                const sourceBucket = new s3.Bucket(stack, 'Bucket');
                expect(() => {
                    new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
                        originConfigs: [{
                                s3OriginSource: { s3BucketSource: sourceBucket },
                                behaviors: [{ isDefaultBehavior: true }],
                            }],
                        aliasConfiguration: { acmCertRef: 'test', names: ['ftp.example.com'] },
                        viewerCertificate: lib_1.ViewerCertificate.fromCloudFrontDefaultCertificate('example.com', 'www.example.com'),
                    });
                }).toThrow(/You cannot set both aliasConfiguration and viewerCertificate properties/);
            });
            test('throws if invalid security policy for SSL method', () => {
                const stack = new cdk.Stack();
                const sourceBucket = new s3.Bucket(stack, 'Bucket');
                expect(() => {
                    new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
                        originConfigs: [{
                                s3OriginSource: { s3BucketSource: sourceBucket },
                                behaviors: [{ isDefaultBehavior: true }],
                            }],
                        viewerCertificate: lib_1.ViewerCertificate.fromIamCertificate('test', {
                            securityPolicy: lib_1.SecurityPolicyProtocol.TLS_V1_1_2016,
                            sslMethod: lib_1.SSLMethod.VIP,
                        }),
                    });
                }).toThrow(/TLSv1.1_2016 is not compabtible with sslMethod vip./);
            });
            // FIXME https://github.com/aws/aws-cdk/issues/4724
            test('does not throw if acmCertificate explicitly not in us-east-1', () => {
                const stack = new cdk.Stack();
                const sourceBucket = new s3.Bucket(stack, 'Bucket');
                const certificate = certificatemanager.Certificate.fromCertificateArn(stack, 'cert', 'arn:aws:acm:eu-west-3:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d');
                new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
                    originConfigs: [{
                            s3OriginSource: { s3BucketSource: sourceBucket },
                            behaviors: [{ isDefaultBehavior: true }],
                        }],
                    viewerCertificate: lib_1.ViewerCertificate.fromAcmCertificate(certificate),
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
                    'DistributionConfig': {
                        'Aliases': [],
                        'ViewerCertificate': {
                            'AcmCertificateArn': 'arn:aws:acm:eu-west-3:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d',
                            'SslSupportMethod': 'sni-only',
                        },
                    },
                });
            });
        });
    });
    test('edgelambda.amazonaws.com is added to the trust policy of lambda', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        const fn = new lambda.Function(stack, 'Lambda', {
            code: lambda.Code.fromInline('foo'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS_14_X,
        });
        const lambdaVersion = new lambda.Version(stack, 'LambdaVersion', { lambda: fn });
        // WHEN
        new lib_1.CloudFrontWebDistribution(stack, 'MyDistribution', {
            originConfigs: [
                {
                    s3OriginSource: { s3BucketSource: sourceBucket },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                            lambdaFunctionAssociations: [
                                {
                                    eventType: lib_1.LambdaEdgeEventType.ORIGIN_REQUEST,
                                    lambdaFunction: lambdaVersion,
                                },
                            ],
                        },
                    ],
                },
            ],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            AssumeRolePolicyDocument: {
                'Statement': [
                    {
                        'Action': 'sts:AssumeRole',
                        'Effect': 'Allow',
                        'Principal': {
                            'Service': 'lambda.amazonaws.com',
                        },
                    },
                    {
                        'Action': 'sts:AssumeRole',
                        'Effect': 'Allow',
                        'Principal': {
                            'Service': 'edgelambda.amazonaws.com',
                        },
                    },
                ],
                'Version': '2012-10-17',
            },
        });
    });
    test('edgelambda.amazonaws.com is not added to lambda role for imported functions', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        const lambdaVersion = lambda.Version.fromVersionArn(stack, 'Version', 'arn:aws:lambda:function-region:111111111111:function:function-name');
        // WHEN
        new lib_1.CloudFrontWebDistribution(stack, 'MyDistribution', {
            originConfigs: [
                {
                    s3OriginSource: { s3BucketSource: sourceBucket },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                            lambdaFunctionAssociations: [
                                {
                                    eventType: lib_1.LambdaEdgeEventType.ORIGIN_REQUEST,
                                    lambdaFunction: lambdaVersion,
                                },
                            ],
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::IAM::Role', 0);
    });
    describe('geo restriction', () => {
        describe('success', () => {
            test('allowlist', () => {
                const stack = new cdk.Stack();
                const sourceBucket = new s3.Bucket(stack, 'Bucket');
                new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
                    originConfigs: [{
                            s3OriginSource: { s3BucketSource: sourceBucket },
                            behaviors: [{ isDefaultBehavior: true }],
                        }],
                    geoRestriction: lib_1.GeoRestriction.allowlist('US', 'UK'),
                });
                assertions_1.Template.fromStack(stack).templateMatches({
                    'Resources': {
                        'Bucket83908E77': {
                            'Type': 'AWS::S3::Bucket',
                            'DeletionPolicy': 'Retain',
                            'UpdateReplacePolicy': 'Retain',
                        },
                        'AnAmazingWebsiteProbablyCFDistribution47E3983B': {
                            'Type': 'AWS::CloudFront::Distribution',
                            'Properties': {
                                'DistributionConfig': {
                                    'DefaultRootObject': 'index.html',
                                    'Origins': [
                                        {
                                            'ConnectionAttempts': 3,
                                            'ConnectionTimeout': 10,
                                            'DomainName': {
                                                'Fn::GetAtt': [
                                                    'Bucket83908E77',
                                                    'RegionalDomainName',
                                                ],
                                            },
                                            'Id': 'origin1',
                                            'S3OriginConfig': {},
                                        },
                                    ],
                                    'ViewerCertificate': {
                                        'CloudFrontDefaultCertificate': true,
                                    },
                                    'PriceClass': 'PriceClass_100',
                                    'DefaultCacheBehavior': {
                                        'AllowedMethods': [
                                            'GET',
                                            'HEAD',
                                        ],
                                        'CachedMethods': [
                                            'GET',
                                            'HEAD',
                                        ],
                                        'TargetOriginId': 'origin1',
                                        'ViewerProtocolPolicy': 'redirect-to-https',
                                        'ForwardedValues': {
                                            'QueryString': false,
                                            'Cookies': { 'Forward': 'none' },
                                        },
                                        'Compress': true,
                                    },
                                    'Enabled': true,
                                    'IPV6Enabled': true,
                                    'HttpVersion': 'http2',
                                    'Restrictions': {
                                        'GeoRestriction': {
                                            'Locations': ['US', 'UK'],
                                            'RestrictionType': 'whitelist',
                                        },
                                    },
                                },
                            },
                        },
                    },
                });
            });
            test('denylist', () => {
                const stack = new cdk.Stack();
                const sourceBucket = new s3.Bucket(stack, 'Bucket');
                new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
                    originConfigs: [{
                            s3OriginSource: { s3BucketSource: sourceBucket },
                            behaviors: [{ isDefaultBehavior: true }],
                        }],
                    geoRestriction: lib_1.GeoRestriction.denylist('US'),
                });
                assertions_1.Template.fromStack(stack).templateMatches({
                    'Resources': {
                        'Bucket83908E77': {
                            'Type': 'AWS::S3::Bucket',
                            'DeletionPolicy': 'Retain',
                            'UpdateReplacePolicy': 'Retain',
                        },
                        'AnAmazingWebsiteProbablyCFDistribution47E3983B': {
                            'Type': 'AWS::CloudFront::Distribution',
                            'Properties': {
                                'DistributionConfig': {
                                    'DefaultRootObject': 'index.html',
                                    'Origins': [
                                        {
                                            'ConnectionAttempts': 3,
                                            'ConnectionTimeout': 10,
                                            'DomainName': {
                                                'Fn::GetAtt': [
                                                    'Bucket83908E77',
                                                    'RegionalDomainName',
                                                ],
                                            },
                                            'Id': 'origin1',
                                            'S3OriginConfig': {},
                                        },
                                    ],
                                    'ViewerCertificate': {
                                        'CloudFrontDefaultCertificate': true,
                                    },
                                    'PriceClass': 'PriceClass_100',
                                    'DefaultCacheBehavior': {
                                        'AllowedMethods': [
                                            'GET',
                                            'HEAD',
                                        ],
                                        'CachedMethods': [
                                            'GET',
                                            'HEAD',
                                        ],
                                        'TargetOriginId': 'origin1',
                                        'ViewerProtocolPolicy': 'redirect-to-https',
                                        'ForwardedValues': {
                                            'QueryString': false,
                                            'Cookies': { 'Forward': 'none' },
                                        },
                                        'Compress': true,
                                    },
                                    'Enabled': true,
                                    'IPV6Enabled': true,
                                    'HttpVersion': 'http2',
                                    'Restrictions': {
                                        'GeoRestriction': {
                                            'Locations': ['US'],
                                            'RestrictionType': 'blacklist',
                                        },
                                    },
                                },
                            },
                        },
                    },
                });
            });
        });
        describe('error', () => {
            test('throws if locations is empty array', () => {
                expect(() => {
                    lib_1.GeoRestriction.allowlist();
                }).toThrow(/Should provide at least 1 location/);
                expect(() => {
                    lib_1.GeoRestriction.denylist();
                }).toThrow(/Should provide at least 1 location/);
            });
            test('throws if locations format is wrong', () => {
                expect(() => {
                    lib_1.GeoRestriction.allowlist('us');
                }).toThrow(/Invalid location format for location: us, location should be two-letter and uppercase country ISO 3166-1-alpha-2 code/);
                expect(() => {
                    lib_1.GeoRestriction.denylist('us');
                }).toThrow(/Invalid location format for location: us, location should be two-letter and uppercase country ISO 3166-1-alpha-2 code/);
            });
        });
    });
    describe('Connection behaviors between CloudFront and your origin', () => {
        describe('success', () => {
            test('connectionAttempts = 1', () => {
                const stack = new cdk.Stack();
                expect(() => {
                    new lib_1.CloudFrontWebDistribution(stack, 'Distribution', {
                        originConfigs: [{
                                behaviors: [{ isDefaultBehavior: true }],
                                connectionAttempts: 1,
                                customOriginSource: { domainName: 'myorigin.com' },
                            }],
                    });
                }).not.toThrow(/connectionAttempts: You can specify 1, 2, or 3 as the number of attempts./);
            });
            test('3 = connectionAttempts', () => {
                const stack = new cdk.Stack();
                expect(() => {
                    new lib_1.CloudFrontWebDistribution(stack, 'Distribution', {
                        originConfigs: [{
                                behaviors: [{ isDefaultBehavior: true }],
                                connectionAttempts: 3,
                                customOriginSource: { domainName: 'myorigin.com' },
                            }],
                    });
                }).not.toThrow(/connectionAttempts: You can specify 1, 2, or 3 as the number of attempts./);
            });
            test('connectionTimeout = 1', () => {
                const stack = new cdk.Stack();
                expect(() => {
                    new lib_1.CloudFrontWebDistribution(stack, 'Distribution', {
                        originConfigs: [{
                                behaviors: [{ isDefaultBehavior: true }],
                                connectionTimeout: cdk.Duration.seconds(1),
                                customOriginSource: { domainName: 'myorigin.com' },
                            }],
                    });
                }).not.toThrow(/connectionTimeout: You can specify a number of seconds between 1 and 10 (inclusive)./);
            });
            test('10 = connectionTimeout', () => {
                const stack = new cdk.Stack();
                expect(() => {
                    new lib_1.CloudFrontWebDistribution(stack, 'Distribution', {
                        originConfigs: [{
                                behaviors: [{ isDefaultBehavior: true }],
                                connectionTimeout: cdk.Duration.seconds(10),
                                customOriginSource: { domainName: 'myorigin.com' },
                            }],
                    });
                }).not.toThrow(/connectionTimeout: You can specify a number of seconds between 1 and 10 (inclusive)./);
            });
        });
        describe('errors', () => {
            test('connectionAttempts = 1.1', () => {
                const stack = new cdk.Stack();
                expect(() => {
                    new lib_1.CloudFrontWebDistribution(stack, 'Distribution', {
                        originConfigs: [{
                                behaviors: [{ isDefaultBehavior: true }],
                                connectionAttempts: 1.1,
                                customOriginSource: { domainName: 'myorigin.com' },
                            }],
                    });
                }).toThrow(/connectionAttempts: You can specify 1, 2, or 3 as the number of attempts./);
            });
            test('connectionAttempts = -1', () => {
                const stack = new cdk.Stack();
                expect(() => {
                    new lib_1.CloudFrontWebDistribution(stack, 'Distribution', {
                        originConfigs: [{
                                behaviors: [{ isDefaultBehavior: true }],
                                connectionAttempts: -1,
                                customOriginSource: { domainName: 'myorigin.com' },
                            }],
                    });
                }).toThrow(/connectionAttempts: You can specify 1, 2, or 3 as the number of attempts./);
            });
            test('connectionAttempts < 1', () => {
                const stack = new cdk.Stack();
                expect(() => {
                    new lib_1.CloudFrontWebDistribution(stack, 'Distribution', {
                        originConfigs: [{
                                behaviors: [{ isDefaultBehavior: true }],
                                connectionAttempts: 0,
                                customOriginSource: { domainName: 'myorigin.com' },
                            }],
                    });
                }).toThrow(/connectionAttempts: You can specify 1, 2, or 3 as the number of attempts./);
            });
            test('3 < connectionAttempts', () => {
                const stack = new cdk.Stack();
                expect(() => {
                    new lib_1.CloudFrontWebDistribution(stack, 'Distribution', {
                        originConfigs: [{
                                behaviors: [{ isDefaultBehavior: true }],
                                connectionAttempts: 4,
                                customOriginSource: { domainName: 'myorigin.com' },
                            }],
                    });
                }).toThrow(/connectionAttempts: You can specify 1, 2, or 3 as the number of attempts./);
            });
            test('connectionTimeout = 1.1', () => {
                const stack = new cdk.Stack();
                expect(() => {
                    new lib_1.CloudFrontWebDistribution(stack, 'Distribution', {
                        originConfigs: [{
                                behaviors: [{ isDefaultBehavior: true }],
                                connectionTimeout: cdk.Duration.seconds(1.1),
                                customOriginSource: { domainName: 'myorigin.com' },
                            }],
                    });
                }).toThrow(/must be a whole number of/);
            });
            test('connectionTimeout < 1', () => {
                const stack = new cdk.Stack();
                expect(() => {
                    new lib_1.CloudFrontWebDistribution(stack, 'Distribution', {
                        originConfigs: [{
                                behaviors: [{ isDefaultBehavior: true }],
                                connectionTimeout: cdk.Duration.seconds(0),
                                customOriginSource: { domainName: 'myorigin.com' },
                            }],
                    });
                }).toThrow(/connectionTimeout: You can specify a number of seconds between 1 and 10 \(inclusive\)./);
            });
            test('10 < connectionTimeout', () => {
                const stack = new cdk.Stack();
                expect(() => {
                    new lib_1.CloudFrontWebDistribution(stack, 'Distribution', {
                        originConfigs: [{
                                behaviors: [{ isDefaultBehavior: true }],
                                connectionTimeout: cdk.Duration.seconds(11),
                                customOriginSource: { domainName: 'myorigin.com' },
                            }],
                    });
                }).toThrow(/connectionTimeout: You can specify a number of seconds between 1 and 10 \(inclusive\)./);
            });
        });
    });
    test('existing distributions can be imported', () => {
        const stack = new cdk.Stack();
        const dist = lib_1.CloudFrontWebDistribution.fromDistributionAttributes(stack, 'ImportedDist', {
            domainName: 'd111111abcdef8.cloudfront.net',
            distributionId: '012345ABCDEF',
        });
        expect(dist.distributionDomainName).toEqual('d111111abcdef8.cloudfront.net');
        expect(dist.distributionId).toEqual('012345ABCDEF');
    });
});
test('grants custom actions', () => {
    const stack = new cdk.Stack();
    const distribution = new lib_1.CloudFrontWebDistribution(stack, 'Distribution', {
        originConfigs: [{
                customOriginSource: { domainName: 'myorigin.com' },
                behaviors: [{ isDefaultBehavior: true }],
            }],
    });
    const role = new iam.Role(stack, 'Role', {
        assumedBy: new iam.AccountRootPrincipal(),
    });
    distribution.grant(role, 'cloudfront:ListInvalidations', 'cloudfront:GetInvalidation');
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: [
                        'cloudfront:ListInvalidations',
                        'cloudfront:GetInvalidation',
                    ],
                    Resource: {
                        'Fn::Join': [
                            '', [
                                'arn:', { Ref: 'AWS::Partition' }, ':cloudfront::', { Ref: 'AWS::AccountId' }, ':distribution/',
                                { Ref: 'DistributionCFDistribution882A7313' },
                            ],
                        ],
                    },
                },
            ],
        },
    });
});
test('grants createInvalidation', () => {
    const stack = new cdk.Stack();
    const distribution = new lib_1.CloudFrontWebDistribution(stack, 'Distribution', {
        originConfigs: [{
                customOriginSource: { domainName: 'myorigin.com' },
                behaviors: [{ isDefaultBehavior: true }],
            }],
    });
    const role = new iam.Role(stack, 'Role', {
        assumedBy: new iam.AccountRootPrincipal(),
    });
    distribution.grantCreateInvalidation(role);
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: 'cloudfront:CreateInvalidation',
                    Resource: {
                        'Fn::Join': [
                            '', [
                                'arn:', { Ref: 'AWS::Partition' }, ':cloudfront::', { Ref: 'AWS::AccountId' }, ':distribution/',
                                { Ref: 'DistributionCFDistribution882A7313' },
                            ],
                        ],
                    },
                },
            ],
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViLWRpc3RyaWJ1dGlvbi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2ViLWRpc3RyaWJ1dGlvbi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQW1EO0FBQ25ELG1FQUFtRTtBQUNuRSxxQ0FBcUM7QUFDckMsMkNBQTJDO0FBQzNDLG1DQUFtQztBQUNuQyw4REFBMEQ7QUFDMUQsa0NBQWtDO0FBQ2xDLGdDQWVnQjtBQUVoQixnQ0FBZ0M7QUFFaEMsTUFBTSxTQUFTLEdBQUc7Ozs7Ozs7O3lCQVFPLENBQUM7QUFFMUIsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtJQUVoQyxJQUFBLGdDQUFjLEVBQUMsb0RBQW9ELEVBQUUsR0FBRyxFQUFFO1FBQ3hFLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTlCLElBQUksK0JBQXlCLENBQUMsS0FBSyxFQUFFLDBCQUEwQixFQUFFO1lBQy9ELGFBQWEsRUFBRTtnQkFDYjtvQkFDRSxhQUFhLEVBQUU7d0JBQ2IsaUJBQWlCLEVBQUUsV0FBVztxQkFDL0I7b0JBQ0Qsa0JBQWtCLEVBQUU7d0JBQ2xCLFVBQVUsRUFBRSxjQUFjO3FCQUMzQjtvQkFDRCxrQkFBa0IsRUFBRSxXQUFXO29CQUMvQixTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsaUJBQWlCLEVBQUUsSUFBSTt5QkFDeEI7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLGVBQWUsQ0FDdkM7WUFDRSxXQUFXLEVBQUU7Z0JBQ1gsZ0RBQWdELEVBQUU7b0JBQ2hELE1BQU0sRUFBRSwrQkFBK0I7b0JBQ3ZDLFlBQVksRUFBRTt3QkFDWixvQkFBb0IsRUFBRTs0QkFDcEIsc0JBQXNCLEVBQUU7Z0NBQ3RCLGdCQUFnQixFQUFFO29DQUNoQixLQUFLO29DQUNMLE1BQU07aUNBQ1A7Z0NBQ0Qs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b25zJztcbmltcG9ydCAqIGFzIGNlcnRpZmljYXRlbWFuYWdlciBmcm9tICcuLi8uLi9hd3MtY2VydGlmaWNhdGVtYW5hZ2VyJztcbmltcG9ydCAqIGFzIGlhbSBmcm9tICcuLi8uLi9hd3MtaWFtJztcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICcuLi8uLi9hd3MtbGFtYmRhJztcbmltcG9ydCAqIGFzIHMzIGZyb20gJy4uLy4uL2F3cy1zMyc7XG5pbXBvcnQgeyB0ZXN0RGVwcmVjYXRlZCB9IGZyb20gJ0Bhd3MtY2RrL2Nkay1idWlsZC10b29scyc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQge1xuICBDZm5EaXN0cmlidXRpb24sXG4gIENsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24sXG4gIEZ1bmN0aW9uLFxuICBGdW5jdGlvbkNvZGUsXG4gIEZ1bmN0aW9uRXZlbnRUeXBlLFxuICBHZW9SZXN0cmljdGlvbixcbiAgS2V5R3JvdXAsXG4gIExhbWJkYUVkZ2VFdmVudFR5cGUsXG4gIE9yaWdpbkFjY2Vzc0lkZW50aXR5LFxuICBQdWJsaWNLZXksXG4gIFNlY3VyaXR5UG9saWN5UHJvdG9jb2wsXG4gIFNTTE1ldGhvZCxcbiAgVmlld2VyQ2VydGlmaWNhdGUsXG4gIFZpZXdlclByb3RvY29sUG9saWN5LFxufSBmcm9tICcuLi9saWInO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBxdW90ZS1wcm9wcyAqL1xuXG5jb25zdCBwdWJsaWNLZXkgPSBgLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS1cbk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdWRmOC9pTmtRZ2R2akVkbTZ4WVNcbkpBeXhkL2tHVGJKZlFOZzlZaEluYjdUU20wZEd1MHl4OHlaM2ZucG14dVJQcUpJbGFWcitmVDRZUmw3MWdFWWFcbmRsaEhtblZlZ3lQTmpQOWROcVo3endOcU1FUE9QblMvTk9IYkpqMUtZS3BuMWY4cFBOeWNRNU1RQ250S0duU2pcbjZmYytuYmNDMGpvRHZHejgweHV5MVc0aExWOW9DOWMzR1QyNnhmWmIyank5TVZ0QTNjcHBOdVR3cXJGaTN0NmVcbjBpR3ByYXhabFQ1d2V3alpMcFFrbmdxWXI2czNhdWNQQVpWc0dURVlQbzRuRDVtc3dtdFpPbSt0Z2NPcml2dERcbi8zc0QvcVpMUTZjNXNpcXlTOGFUcmFENnkrVlh1Z3VqZmFyVFU2NUllWjZRQVViTE1zV3VaT0lpNUpuOHpBd3hcbk5RSURBUUFCXG4tLS0tLUVORCBQVUJMSUMgS0VZLS0tLS1gO1xuXG5kZXNjcmliZSgnd2ViIGRpc3RyaWJ1dGlvbicsICgpID0+IHtcblxuICB0ZXN0RGVwcmVjYXRlZCgnZGlzdHJpYnV0aW9uIHdpdGggY3VzdG9tIG9yaWdpbiBhZGRzIGN1c3RvbSBvcmlnaW4nLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0FuQW1hemluZ1dlYnNpdGVQcm9iYWJseScsIHtcbiAgICAgIG9yaWdpbkNvbmZpZ3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIG9yaWdpbkhlYWRlcnM6IHtcbiAgICAgICAgICAgICdYLUN1c3RvbS1IZWFkZXInOiAnc29tZXZhbHVlJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGN1c3RvbU9yaWdpblNvdXJjZToge1xuICAgICAgICAgICAgZG9tYWluTmFtZTogJ215b3JpZ2luLmNvbScsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcmlnaW5TaGllbGRSZWdpb246ICd1cy1lYXN0LTEnLFxuICAgICAgICAgIGJlaGF2aW9yczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLnRlbXBsYXRlTWF0Y2hlcyhcbiAgICAgIHtcbiAgICAgICAgJ1Jlc291cmNlcyc6IHtcbiAgICAgICAgICAnQW5BbWF6aW5nV2Vic2l0ZVByb2JhYmx5Q0ZEaXN0cmlidXRpb240N0UzOTgzQic6IHtcbiAgICAgICAgICAgICdUeXBlJzogJ0FXUzo6Q2xvdWRGcm9udDo6RGlzdHJpYnV0aW9uJyxcbiAgICAgICAgICAgICdQcm9wZXJ0aWVzJzoge1xuICAgICAgICAgICAgICAnRGlzdHJpYnV0aW9uQ29uZmlnJzoge1xuICAgICAgICAgICAgICAgICdEZWZhdWx0Q2FjaGVCZWhhdmlvcic6IHtcbiAgICAgICAgICAgICAgICAgICdBbGxvd2VkTWV0aG9kcyc6IFtcbiAgICAgICAgICAgICAgICAgICAgJ0dFVCcsXG4gICAgICAgICAgICAgICAgICAgICdIRUFEJyxcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAnQ2FjaGVkTWV0aG9kcyc6IFtcbiAgICAgICAgICAgICAgICAgICAgJ0dFVCcsXG4gICAgICAgICAgICAgICAgICAgICdIRUFEJyxcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAnRm9yd2FyZGVkVmFsdWVzJzoge1xuICAgICAgICAgICAgICAgICAgICAnQ29va2llcyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAnRm9yd2FyZCc6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ1F1ZXJ5U3RyaW5nJzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgJ1RhcmdldE9yaWdpbklkJzogJ29yaWdpbjEnLFxuICAgICAgICAgICAgICAgICAgJ1ZpZXdlclByb3RvY29sUG9saWN5JzogJ3JlZGlyZWN0LXRvLWh0dHBzJyxcbiAgICAgICAgICAgICAgICAgICdDb21wcmVzcyc6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnRGVmYXVsdFJvb3RPYmplY3QnOiAnaW5kZXguaHRtbCcsXG4gICAgICAgICAgICAgICAgJ0VuYWJsZWQnOiB0cnVlLFxuICAgICAgICAgICAgICAgICdIdHRwVmVyc2lvbic6ICdodHRwMicsXG4gICAgICAgICAgICAgICAgJ0lQVjZFbmFibGVkJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAnT3JpZ2lucyc6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgJ0N1c3RvbU9yaWdpbkNvbmZpZyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAnSFRUUFBvcnQnOiA4MCxcbiAgICAgICAgICAgICAgICAgICAgICAnSFRUUFNQb3J0JzogNDQzLFxuICAgICAgICAgICAgICAgICAgICAgICdPcmlnaW5LZWVwYWxpdmVUaW1lb3V0JzogNSxcbiAgICAgICAgICAgICAgICAgICAgICAnT3JpZ2luUHJvdG9jb2xQb2xpY3knOiAnaHR0cHMtb25seScsXG4gICAgICAgICAgICAgICAgICAgICAgJ09yaWdpblJlYWRUaW1lb3V0JzogMzAsXG4gICAgICAgICAgICAgICAgICAgICAgJ09yaWdpblNTTFByb3RvY29scyc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdUTFN2MS4yJyxcbiAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnQ29ubmVjdGlvbkF0dGVtcHRzJzogMyxcbiAgICAgICAgICAgICAgICAgICAgJ0Nvbm5lY3Rpb25UaW1lb3V0JzogMTAsXG4gICAgICAgICAgICAgICAgICAgICdEb21haW5OYW1lJzogJ215b3JpZ2luLmNvbScsXG4gICAgICAgICAgICAgICAgICAgICdJZCc6ICdvcmlnaW4xJyxcbiAgICAgICAgICAgICAgICAgICAgJ09yaWdpbkN1c3RvbUhlYWRlcnMnOiBbXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0hlYWRlck5hbWUnOiAnWC1DdXN0b20tSGVhZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdIZWFkZXJWYWx1ZSc6ICdzb21ldmFsdWUnLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdPcmlnaW5TaGllbGQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgJ0VuYWJsZWQnOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICdPcmlnaW5TaGllbGRSZWdpb24nOiAndXMtZWFzdC0xJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAnUHJpY2VDbGFzcyc6ICdQcmljZUNsYXNzXzEwMCcsXG4gICAgICAgICAgICAgICAgJ1ZpZXdlckNlcnRpZmljYXRlJzoge1xuICAgICAgICAgICAgICAgICAgJ0Nsb3VkRnJvbnREZWZhdWx0Q2VydGlmaWNhdGUnOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICk7XG5cblxuICB9KTtcblxuICB0ZXN0KCdtb3N0IGJhc2ljIGRpc3RyaWJ1dGlvbicsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBzb3VyY2VCdWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG5cbiAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0FuQW1hemluZ1dlYnNpdGVQcm9iYWJseScsIHtcbiAgICAgIG9yaWdpbkNvbmZpZ3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIHMzT3JpZ2luU291cmNlOiB7XG4gICAgICAgICAgICBzM0J1Y2tldFNvdXJjZTogc291cmNlQnVja2V0LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmVoYXZpb3JzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykudGVtcGxhdGVNYXRjaGVzKHtcbiAgICAgICdSZXNvdXJjZXMnOiB7XG4gICAgICAgICdCdWNrZXQ4MzkwOEU3Nyc6IHtcbiAgICAgICAgICAnVHlwZSc6ICdBV1M6OlMzOjpCdWNrZXQnLFxuICAgICAgICAgICdEZWxldGlvblBvbGljeSc6ICdSZXRhaW4nLFxuICAgICAgICAgICdVcGRhdGVSZXBsYWNlUG9saWN5JzogJ1JldGFpbicsXG4gICAgICAgIH0sXG4gICAgICAgICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHlDRkRpc3RyaWJ1dGlvbjQ3RTM5ODNCJzoge1xuICAgICAgICAgICdUeXBlJzogJ0FXUzo6Q2xvdWRGcm9udDo6RGlzdHJpYnV0aW9uJyxcbiAgICAgICAgICAnUHJvcGVydGllcyc6IHtcbiAgICAgICAgICAgICdEaXN0cmlidXRpb25Db25maWcnOiB7XG4gICAgICAgICAgICAgICdEZWZhdWx0Um9vdE9iamVjdCc6ICdpbmRleC5odG1sJyxcbiAgICAgICAgICAgICAgJ09yaWdpbnMnOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgJ0Nvbm5lY3Rpb25BdHRlbXB0cyc6IDMsXG4gICAgICAgICAgICAgICAgICAnQ29ubmVjdGlvblRpbWVvdXQnOiAxMCxcbiAgICAgICAgICAgICAgICAgICdEb21haW5OYW1lJzoge1xuICAgICAgICAgICAgICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAnQnVja2V0ODM5MDhFNzcnLFxuICAgICAgICAgICAgICAgICAgICAgICdSZWdpb25hbERvbWFpbk5hbWUnLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICdJZCc6ICdvcmlnaW4xJyxcbiAgICAgICAgICAgICAgICAgICdTM09yaWdpbkNvbmZpZyc6IHt9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICdWaWV3ZXJDZXJ0aWZpY2F0ZSc6IHtcbiAgICAgICAgICAgICAgICAnQ2xvdWRGcm9udERlZmF1bHRDZXJ0aWZpY2F0ZSc6IHRydWUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICdQcmljZUNsYXNzJzogJ1ByaWNlQ2xhc3NfMTAwJyxcbiAgICAgICAgICAgICAgJ0RlZmF1bHRDYWNoZUJlaGF2aW9yJzoge1xuICAgICAgICAgICAgICAgICdBbGxvd2VkTWV0aG9kcyc6IFtcbiAgICAgICAgICAgICAgICAgICdHRVQnLFxuICAgICAgICAgICAgICAgICAgJ0hFQUQnLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgJ0NhY2hlZE1ldGhvZHMnOiBbXG4gICAgICAgICAgICAgICAgICAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICdIRUFEJyxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICdUYXJnZXRPcmlnaW5JZCc6ICdvcmlnaW4xJyxcbiAgICAgICAgICAgICAgICAnVmlld2VyUHJvdG9jb2xQb2xpY3knOiAncmVkaXJlY3QtdG8taHR0cHMnLFxuICAgICAgICAgICAgICAgICdGb3J3YXJkZWRWYWx1ZXMnOiB7XG4gICAgICAgICAgICAgICAgICAnUXVlcnlTdHJpbmcnOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICdDb29raWVzJzogeyAnRm9yd2FyZCc6ICdub25lJyB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ0NvbXByZXNzJzogdHJ1ZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ0VuYWJsZWQnOiB0cnVlLFxuICAgICAgICAgICAgICAnSVBWNkVuYWJsZWQnOiB0cnVlLFxuICAgICAgICAgICAgICAnSHR0cFZlcnNpb24nOiAnaHR0cDInLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICB9KTtcblxuICB0ZXN0KCdjYW4gZGlzYWJsZSBkaXN0cmlidXRpb24nLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3Qgc291cmNlQnVja2V0ID0gbmV3IHMzLkJ1Y2tldChzdGFjaywgJ0J1Y2tldCcpO1xuXG4gICAgbmV3IENsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24oc3RhY2ssICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHknLCB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIG9yaWdpbkNvbmZpZ3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIHMzT3JpZ2luU291cmNlOiB7XG4gICAgICAgICAgICBzM0J1Y2tldFNvdXJjZTogc291cmNlQnVja2V0LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmVoYXZpb3JzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykudGVtcGxhdGVNYXRjaGVzKHtcbiAgICAgICdSZXNvdXJjZXMnOiB7XG4gICAgICAgICdCdWNrZXQ4MzkwOEU3Nyc6IHtcbiAgICAgICAgICAnVHlwZSc6ICdBV1M6OlMzOjpCdWNrZXQnLFxuICAgICAgICAgICdEZWxldGlvblBvbGljeSc6ICdSZXRhaW4nLFxuICAgICAgICAgICdVcGRhdGVSZXBsYWNlUG9saWN5JzogJ1JldGFpbicsXG4gICAgICAgIH0sXG4gICAgICAgICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHlDRkRpc3RyaWJ1dGlvbjQ3RTM5ODNCJzoge1xuICAgICAgICAgICdUeXBlJzogJ0FXUzo6Q2xvdWRGcm9udDo6RGlzdHJpYnV0aW9uJyxcbiAgICAgICAgICAnUHJvcGVydGllcyc6IHtcbiAgICAgICAgICAgICdEaXN0cmlidXRpb25Db25maWcnOiB7XG4gICAgICAgICAgICAgICdEZWZhdWx0Um9vdE9iamVjdCc6ICdpbmRleC5odG1sJyxcbiAgICAgICAgICAgICAgJ09yaWdpbnMnOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgJ0Nvbm5lY3Rpb25BdHRlbXB0cyc6IDMsXG4gICAgICAgICAgICAgICAgICAnQ29ubmVjdGlvblRpbWVvdXQnOiAxMCxcbiAgICAgICAgICAgICAgICAgICdEb21haW5OYW1lJzoge1xuICAgICAgICAgICAgICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAnQnVja2V0ODM5MDhFNzcnLFxuICAgICAgICAgICAgICAgICAgICAgICdSZWdpb25hbERvbWFpbk5hbWUnLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICdJZCc6ICdvcmlnaW4xJyxcbiAgICAgICAgICAgICAgICAgICdTM09yaWdpbkNvbmZpZyc6IHt9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICdWaWV3ZXJDZXJ0aWZpY2F0ZSc6IHtcbiAgICAgICAgICAgICAgICAnQ2xvdWRGcm9udERlZmF1bHRDZXJ0aWZpY2F0ZSc6IHRydWUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICdQcmljZUNsYXNzJzogJ1ByaWNlQ2xhc3NfMTAwJyxcbiAgICAgICAgICAgICAgJ0RlZmF1bHRDYWNoZUJlaGF2aW9yJzoge1xuICAgICAgICAgICAgICAgICdBbGxvd2VkTWV0aG9kcyc6IFtcbiAgICAgICAgICAgICAgICAgICdHRVQnLFxuICAgICAgICAgICAgICAgICAgJ0hFQUQnLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgJ0NhY2hlZE1ldGhvZHMnOiBbXG4gICAgICAgICAgICAgICAgICAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICdIRUFEJyxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICdUYXJnZXRPcmlnaW5JZCc6ICdvcmlnaW4xJyxcbiAgICAgICAgICAgICAgICAnVmlld2VyUHJvdG9jb2xQb2xpY3knOiAncmVkaXJlY3QtdG8taHR0cHMnLFxuICAgICAgICAgICAgICAgICdGb3J3YXJkZWRWYWx1ZXMnOiB7XG4gICAgICAgICAgICAgICAgICAnUXVlcnlTdHJpbmcnOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICdDb29raWVzJzogeyAnRm9yd2FyZCc6ICdub25lJyB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ0NvbXByZXNzJzogdHJ1ZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ0VuYWJsZWQnOiBmYWxzZSxcbiAgICAgICAgICAgICAgJ0lQVjZFbmFibGVkJzogdHJ1ZSxcbiAgICAgICAgICAgICAgJ0h0dHBWZXJzaW9uJzogJ2h0dHAyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgfSk7XG5cbiAgdGVzdCgnZW5zdXJlIGxvbmcgY29tbWVudHMgd2lsbCBub3QgYnJlYWsgdGhlIGRpc3RyaWJ1dGlvbicsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBzb3VyY2VCdWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG5cbiAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0FuQW1hemluZ1dlYnNpdGVQcm9iYWJseScsIHtcbiAgICAgIGNvbW1lbnQ6IGBBZGRpbmcgYSBjb21tZW50IGxvbmdlciB0aGFuIDEyOCBjaGFyYWN0ZXJzIHNob3VsZCBiZSB0cmltbWVkIGFuZFxuYWRkZWQgdGhlIGVsbGlwc2lzIHNvIGEgdXNlciB3b3VsZCBrbm93IHRoZXJlIHdhcyBtb3JlIHRvIHJlYWQgYW5kIGV2ZXJ5dGhpbmcgYmV5b25kIHRoaXMgcG9pbnQgc2hvdWxkIG5vdCBzaG93IHVwYCxcbiAgICAgIG9yaWdpbkNvbmZpZ3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIHMzT3JpZ2luU291cmNlOiB7XG4gICAgICAgICAgICBzM0J1Y2tldFNvdXJjZTogc291cmNlQnVja2V0LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmVoYXZpb3JzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykudGVtcGxhdGVNYXRjaGVzKHtcbiAgICAgIFJlc291cmNlczoge1xuICAgICAgICBCdWNrZXQ4MzkwOEU3Nzoge1xuICAgICAgICAgIFR5cGU6ICdBV1M6OlMzOjpCdWNrZXQnLFxuICAgICAgICAgIERlbGV0aW9uUG9saWN5OiAnUmV0YWluJyxcbiAgICAgICAgICBVcGRhdGVSZXBsYWNlUG9saWN5OiAnUmV0YWluJyxcbiAgICAgICAgfSxcbiAgICAgICAgQW5BbWF6aW5nV2Vic2l0ZVByb2JhYmx5Q0ZEaXN0cmlidXRpb240N0UzOTgzQjoge1xuICAgICAgICAgIFR5cGU6ICdBV1M6OkNsb3VkRnJvbnQ6OkRpc3RyaWJ1dGlvbicsXG4gICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgRGlzdHJpYnV0aW9uQ29uZmlnOiB7XG4gICAgICAgICAgICAgIERlZmF1bHRSb290T2JqZWN0OiAnaW5kZXguaHRtbCcsXG4gICAgICAgICAgICAgIE9yaWdpbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBDb25uZWN0aW9uQXR0ZW1wdHM6IDMsXG4gICAgICAgICAgICAgICAgICBDb25uZWN0aW9uVGltZW91dDogMTAsXG4gICAgICAgICAgICAgICAgICBEb21haW5OYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgICdGbjo6R2V0QXR0JzogWydCdWNrZXQ4MzkwOEU3NycsICdSZWdpb25hbERvbWFpbk5hbWUnXSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBJZDogJ29yaWdpbjEnLFxuICAgICAgICAgICAgICAgICAgUzNPcmlnaW5Db25maWc6IHt9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFZpZXdlckNlcnRpZmljYXRlOiB7XG4gICAgICAgICAgICAgICAgQ2xvdWRGcm9udERlZmF1bHRDZXJ0aWZpY2F0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgUHJpY2VDbGFzczogJ1ByaWNlQ2xhc3NfMTAwJyxcbiAgICAgICAgICAgICAgRGVmYXVsdENhY2hlQmVoYXZpb3I6IHtcbiAgICAgICAgICAgICAgICBBbGxvd2VkTWV0aG9kczogWydHRVQnLCAnSEVBRCddLFxuICAgICAgICAgICAgICAgIENhY2hlZE1ldGhvZHM6IFsnR0VUJywgJ0hFQUQnXSxcbiAgICAgICAgICAgICAgICBUYXJnZXRPcmlnaW5JZDogJ29yaWdpbjEnLFxuICAgICAgICAgICAgICAgIFZpZXdlclByb3RvY29sUG9saWN5OiAncmVkaXJlY3QtdG8taHR0cHMnLFxuICAgICAgICAgICAgICAgIEZvcndhcmRlZFZhbHVlczoge1xuICAgICAgICAgICAgICAgICAgUXVlcnlTdHJpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgQ29va2llczogeyBGb3J3YXJkOiAnbm9uZScgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIENvbXByZXNzOiB0cnVlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBDb21tZW50OiBgQWRkaW5nIGEgY29tbWVudCBsb25nZXIgdGhhbiAxMjggY2hhcmFjdGVycyBzaG91bGQgYmUgdHJpbW1lZCBhbmRcbmFkZGVkIHRoZSBlbGxpcHNpcyBzbyBhIHVzZXIgd291bGQga25vdyB0aGVyZSB3YXMgbW9yZSB0byByLi4uYCxcbiAgICAgICAgICAgICAgRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgSVBWNkVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgIEh0dHBWZXJzaW9uOiAnaHR0cDInLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICB9KTtcblxuICB0ZXN0KCdkaXN0cmlidXRpb24gd2l0aCBidWNrZXQgYW5kIE9BSScsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBzM0J1Y2tldFNvdXJjZSA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdCdWNrZXQnKTtcbiAgICBjb25zdCBvcmlnaW5BY2Nlc3NJZGVudGl0eSA9IG5ldyBPcmlnaW5BY2Nlc3NJZGVudGl0eShzdGFjaywgJ09BSScpO1xuXG4gICAgbmV3IENsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24oc3RhY2ssICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHknLCB7XG4gICAgICBvcmlnaW5Db25maWdzOiBbe1xuICAgICAgICBzM09yaWdpblNvdXJjZTogeyBzM0J1Y2tldFNvdXJjZSwgb3JpZ2luQWNjZXNzSWRlbnRpdHkgfSxcbiAgICAgICAgYmVoYXZpb3JzOiBbeyBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSB9XSxcbiAgICAgIH1dLFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q2xvdWRGcm9udDo6RGlzdHJpYnV0aW9uJywge1xuICAgICAgRGlzdHJpYnV0aW9uQ29uZmlnOiB7XG4gICAgICAgIE9yaWdpbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBDb25uZWN0aW9uQXR0ZW1wdHM6IDMsXG4gICAgICAgICAgICBDb25uZWN0aW9uVGltZW91dDogMTAsXG4gICAgICAgICAgICBEb21haW5OYW1lOiB7XG4gICAgICAgICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgICAgICAgICdCdWNrZXQ4MzkwOEU3NycsXG4gICAgICAgICAgICAgICAgJ1JlZ2lvbmFsRG9tYWluTmFtZScsXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgSWQ6ICdvcmlnaW4xJyxcbiAgICAgICAgICAgIFMzT3JpZ2luQ29uZmlnOiB7XG4gICAgICAgICAgICAgIE9yaWdpbkFjY2Vzc0lkZW50aXR5OiB7XG4gICAgICAgICAgICAgICAgJ0ZuOjpKb2luJzogWycnLCBbJ29yaWdpbi1hY2Nlc3MtaWRlbnRpdHkvY2xvdWRmcm9udC8nLCB7IFJlZjogJ09BSUUxRUZDNjdGJyB9XV0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6UzM6OkJ1Y2tldFBvbGljeScsIHtcbiAgICAgIFBvbGljeURvY3VtZW50OiB7XG4gICAgICAgIFN0YXRlbWVudDogW3tcbiAgICAgICAgICBBY3Rpb246ICdzMzpHZXRPYmplY3QnLFxuICAgICAgICAgIEVmZmVjdDogJ0FsbG93JyxcbiAgICAgICAgICBQcmluY2lwYWw6IHtcbiAgICAgICAgICAgIENhbm9uaWNhbFVzZXI6IHsgJ0ZuOjpHZXRBdHQnOiBbJ09BSUUxRUZDNjdGJywgJ1MzQ2Fub25pY2FsVXNlcklkJ10gfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFJlc291cmNlOiB7XG4gICAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFt7ICdGbjo6R2V0QXR0JzogWydCdWNrZXQ4MzkwOEU3NycsICdBcm4nXSB9LCAnLyonXV0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfV0sXG4gICAgICB9LFxuICAgIH0pO1xuXG5cbiAgfSk7XG5cblxuICB0ZXN0RGVwcmVjYXRlZCgnZGlzdHJpYnV0aW9uIHdpdGggdHJ1c3RlZCBzaWduZXJzIG9uIGRlZmF1bHQgZGlzdHJpYnV0aW9uJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IHNvdXJjZUJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdCdWNrZXQnKTtcbiAgICBjb25zdCBwdWJLZXkgPSBuZXcgUHVibGljS2V5KHN0YWNrLCAnTXlQdWJLZXknLCB7XG4gICAgICBlbmNvZGVkS2V5OiBwdWJsaWNLZXksXG4gICAgfSk7XG4gICAgY29uc3Qga2V5R3JvdXAgPSBuZXcgS2V5R3JvdXAoc3RhY2ssICdNeUtleUdyb3VwJywge1xuICAgICAgaXRlbXM6IFtcbiAgICAgICAgcHViS2V5LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnQW5BbWF6aW5nV2Vic2l0ZVByb2JhYmx5Jywge1xuICAgICAgb3JpZ2luQ29uZmlnczogW1xuICAgICAgICB7XG4gICAgICAgICAgczNPcmlnaW5Tb3VyY2U6IHtcbiAgICAgICAgICAgIHMzQnVja2V0U291cmNlOiBzb3VyY2VCdWNrZXQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBiZWhhdmlvcnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaXNEZWZhdWx0QmVoYXZpb3I6IHRydWUsXG4gICAgICAgICAgICAgIHRydXN0ZWRTaWduZXJzOiBbJzEyMzQnXSxcbiAgICAgICAgICAgICAgdHJ1c3RlZEtleUdyb3VwczogW1xuICAgICAgICAgICAgICAgIGtleUdyb3VwLFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykudGVtcGxhdGVNYXRjaGVzKHtcbiAgICAgICdSZXNvdXJjZXMnOiB7XG4gICAgICAgICdCdWNrZXQ4MzkwOEU3Nyc6IHtcbiAgICAgICAgICAnVHlwZSc6ICdBV1M6OlMzOjpCdWNrZXQnLFxuICAgICAgICAgICdEZWxldGlvblBvbGljeSc6ICdSZXRhaW4nLFxuICAgICAgICAgICdVcGRhdGVSZXBsYWNlUG9saWN5JzogJ1JldGFpbicsXG4gICAgICAgIH0sXG4gICAgICAgICdNeVB1YktleTZBREE0Q0Y1Jzoge1xuICAgICAgICAgICdUeXBlJzogJ0FXUzo6Q2xvdWRGcm9udDo6UHVibGljS2V5JyxcbiAgICAgICAgICAnUHJvcGVydGllcyc6IHtcbiAgICAgICAgICAgICdQdWJsaWNLZXlDb25maWcnOiB7XG4gICAgICAgICAgICAgICdDYWxsZXJSZWZlcmVuY2UnOiAnYzgxNDFlNzMyZWEzN2IxOTM3NWQ0Y2JlZjJiMmQyYzZmNjEzZjA2NDlhJyxcbiAgICAgICAgICAgICAgJ0VuY29kZWRLZXknOiBwdWJsaWNLZXksXG4gICAgICAgICAgICAgICdOYW1lJzogJ015UHViS2V5JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgJ015S2V5R3JvdXBBRjIyRkQzNSc6IHtcbiAgICAgICAgICAnVHlwZSc6ICdBV1M6OkNsb3VkRnJvbnQ6OktleUdyb3VwJyxcbiAgICAgICAgICAnUHJvcGVydGllcyc6IHtcbiAgICAgICAgICAgICdLZXlHcm91cENvbmZpZyc6IHtcbiAgICAgICAgICAgICAgJ0l0ZW1zJzogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICdSZWYnOiAnTXlQdWJLZXk2QURBNENGNScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgJ05hbWUnOiAnTXlLZXlHcm91cCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHlDRkRpc3RyaWJ1dGlvbjQ3RTM5ODNCJzoge1xuICAgICAgICAgICdUeXBlJzogJ0FXUzo6Q2xvdWRGcm9udDo6RGlzdHJpYnV0aW9uJyxcbiAgICAgICAgICAnUHJvcGVydGllcyc6IHtcbiAgICAgICAgICAgICdEaXN0cmlidXRpb25Db25maWcnOiB7XG4gICAgICAgICAgICAgICdEZWZhdWx0Um9vdE9iamVjdCc6ICdpbmRleC5odG1sJyxcbiAgICAgICAgICAgICAgJ09yaWdpbnMnOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgJ0Nvbm5lY3Rpb25BdHRlbXB0cyc6IDMsXG4gICAgICAgICAgICAgICAgICAnQ29ubmVjdGlvblRpbWVvdXQnOiAxMCxcbiAgICAgICAgICAgICAgICAgICdEb21haW5OYW1lJzoge1xuICAgICAgICAgICAgICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAnQnVja2V0ODM5MDhFNzcnLFxuICAgICAgICAgICAgICAgICAgICAgICdSZWdpb25hbERvbWFpbk5hbWUnLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICdJZCc6ICdvcmlnaW4xJyxcbiAgICAgICAgICAgICAgICAgICdTM09yaWdpbkNvbmZpZyc6IHt9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICdWaWV3ZXJDZXJ0aWZpY2F0ZSc6IHtcbiAgICAgICAgICAgICAgICAnQ2xvdWRGcm9udERlZmF1bHRDZXJ0aWZpY2F0ZSc6IHRydWUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICdQcmljZUNsYXNzJzogJ1ByaWNlQ2xhc3NfMTAwJyxcbiAgICAgICAgICAgICAgJ0RlZmF1bHRDYWNoZUJlaGF2aW9yJzoge1xuICAgICAgICAgICAgICAgICdBbGxvd2VkTWV0aG9kcyc6IFtcbiAgICAgICAgICAgICAgICAgICdHRVQnLFxuICAgICAgICAgICAgICAgICAgJ0hFQUQnLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgJ0NhY2hlZE1ldGhvZHMnOiBbXG4gICAgICAgICAgICAgICAgICAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICdIRUFEJyxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICdUYXJnZXRPcmlnaW5JZCc6ICdvcmlnaW4xJyxcbiAgICAgICAgICAgICAgICAnVmlld2VyUHJvdG9jb2xQb2xpY3knOiAncmVkaXJlY3QtdG8taHR0cHMnLFxuICAgICAgICAgICAgICAgICdGb3J3YXJkZWRWYWx1ZXMnOiB7XG4gICAgICAgICAgICAgICAgICAnUXVlcnlTdHJpbmcnOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICdDb29raWVzJzogeyAnRm9yd2FyZCc6ICdub25lJyB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ1RydXN0ZWRLZXlHcm91cHMnOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICdSZWYnOiAnTXlLZXlHcm91cEFGMjJGRDM1JyxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAnVHJ1c3RlZFNpZ25lcnMnOiBbJzEyMzQnXSxcbiAgICAgICAgICAgICAgICAnQ29tcHJlc3MnOiB0cnVlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAnRW5hYmxlZCc6IHRydWUsXG4gICAgICAgICAgICAgICdJUFY2RW5hYmxlZCc6IHRydWUsXG4gICAgICAgICAgICAgICdIdHRwVmVyc2lvbic6ICdodHRwMicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gIH0pO1xuXG4gIHRlc3QoJ2Rpc3RyaWJ1dGlvbiB3aXRoIFZpZXdlclByb3RvY29sUG9saWN5IHNldCB0byBhIG5vbi1kZWZhdWx0IHZhbHVlJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IHNvdXJjZUJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdCdWNrZXQnKTtcblxuICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnQW5BbWF6aW5nV2Vic2l0ZVByb2JhYmx5Jywge1xuICAgICAgdmlld2VyUHJvdG9jb2xQb2xpY3k6IFZpZXdlclByb3RvY29sUG9saWN5LkFMTE9XX0FMTCxcbiAgICAgIG9yaWdpbkNvbmZpZ3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIHMzT3JpZ2luU291cmNlOiB7XG4gICAgICAgICAgICBzM0J1Y2tldFNvdXJjZTogc291cmNlQnVja2V0LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmVoYXZpb3JzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykudGVtcGxhdGVNYXRjaGVzKHtcbiAgICAgICdSZXNvdXJjZXMnOiB7XG4gICAgICAgICdCdWNrZXQ4MzkwOEU3Nyc6IHtcbiAgICAgICAgICAnVHlwZSc6ICdBV1M6OlMzOjpCdWNrZXQnLFxuICAgICAgICAgICdEZWxldGlvblBvbGljeSc6ICdSZXRhaW4nLFxuICAgICAgICAgICdVcGRhdGVSZXBsYWNlUG9saWN5JzogJ1JldGFpbicsXG4gICAgICAgIH0sXG4gICAgICAgICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHlDRkRpc3RyaWJ1dGlvbjQ3RTM5ODNCJzoge1xuICAgICAgICAgICdUeXBlJzogJ0FXUzo6Q2xvdWRGcm9udDo6RGlzdHJpYnV0aW9uJyxcbiAgICAgICAgICAnUHJvcGVydGllcyc6IHtcbiAgICAgICAgICAgICdEaXN0cmlidXRpb25Db25maWcnOiB7XG4gICAgICAgICAgICAgICdEZWZhdWx0Um9vdE9iamVjdCc6ICdpbmRleC5odG1sJyxcbiAgICAgICAgICAgICAgJ09yaWdpbnMnOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgJ0Nvbm5lY3Rpb25BdHRlbXB0cyc6IDMsXG4gICAgICAgICAgICAgICAgICAnQ29ubmVjdGlvblRpbWVvdXQnOiAxMCxcbiAgICAgICAgICAgICAgICAgICdEb21haW5OYW1lJzoge1xuICAgICAgICAgICAgICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAnQnVja2V0ODM5MDhFNzcnLFxuICAgICAgICAgICAgICAgICAgICAgICdSZWdpb25hbERvbWFpbk5hbWUnLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICdJZCc6ICdvcmlnaW4xJyxcbiAgICAgICAgICAgICAgICAgICdTM09yaWdpbkNvbmZpZyc6IHt9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICdWaWV3ZXJDZXJ0aWZpY2F0ZSc6IHtcbiAgICAgICAgICAgICAgICAnQ2xvdWRGcm9udERlZmF1bHRDZXJ0aWZpY2F0ZSc6IHRydWUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICdQcmljZUNsYXNzJzogJ1ByaWNlQ2xhc3NfMTAwJyxcbiAgICAgICAgICAgICAgJ0RlZmF1bHRDYWNoZUJlaGF2aW9yJzoge1xuICAgICAgICAgICAgICAgICdBbGxvd2VkTWV0aG9kcyc6IFtcbiAgICAgICAgICAgICAgICAgICdHRVQnLFxuICAgICAgICAgICAgICAgICAgJ0hFQUQnLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgJ0NhY2hlZE1ldGhvZHMnOiBbXG4gICAgICAgICAgICAgICAgICAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICdIRUFEJyxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICdUYXJnZXRPcmlnaW5JZCc6ICdvcmlnaW4xJyxcbiAgICAgICAgICAgICAgICAnVmlld2VyUHJvdG9jb2xQb2xpY3knOiAnYWxsb3ctYWxsJyxcbiAgICAgICAgICAgICAgICAnRm9yd2FyZGVkVmFsdWVzJzoge1xuICAgICAgICAgICAgICAgICAgJ1F1ZXJ5U3RyaW5nJzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAnQ29va2llcyc6IHsgJ0ZvcndhcmQnOiAnbm9uZScgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdDb21wcmVzcyc6IHRydWUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICdFbmFibGVkJzogdHJ1ZSxcbiAgICAgICAgICAgICAgJ0lQVjZFbmFibGVkJzogdHJ1ZSxcbiAgICAgICAgICAgICAgJ0h0dHBWZXJzaW9uJzogJ2h0dHAyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgfSk7XG5cbiAgdGVzdCgnZGlzdHJpYnV0aW9uIHdpdGggVmlld2VyUHJvdG9jb2xQb2xpY3kgb3ZlcnJpZGRlbiBpbiBCZWhhdmlvcicsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBzb3VyY2VCdWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG5cbiAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0FuQW1hemluZ1dlYnNpdGVQcm9iYWJseScsIHtcbiAgICAgIHZpZXdlclByb3RvY29sUG9saWN5OiBWaWV3ZXJQcm90b2NvbFBvbGljeS5BTExPV19BTEwsXG4gICAgICBvcmlnaW5Db25maWdzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzM09yaWdpblNvdXJjZToge1xuICAgICAgICAgICAgczNCdWNrZXRTb3VyY2U6IHNvdXJjZUJ1Y2tldCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGJlaGF2aW9yczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHBhdGhQYXR0ZXJuOiAnL3Rlc3QvKicsXG4gICAgICAgICAgICAgIHZpZXdlclByb3RvY29sUG9saWN5OiBWaWV3ZXJQcm90b2NvbFBvbGljeS5SRURJUkVDVF9UT19IVFRQUyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLnRlbXBsYXRlTWF0Y2hlcyh7XG4gICAgICAnUmVzb3VyY2VzJzoge1xuICAgICAgICAnQnVja2V0ODM5MDhFNzcnOiB7XG4gICAgICAgICAgJ1R5cGUnOiAnQVdTOjpTMzo6QnVja2V0JyxcbiAgICAgICAgICAnRGVsZXRpb25Qb2xpY3knOiAnUmV0YWluJyxcbiAgICAgICAgICAnVXBkYXRlUmVwbGFjZVBvbGljeSc6ICdSZXRhaW4nLFxuICAgICAgICB9LFxuICAgICAgICAnQW5BbWF6aW5nV2Vic2l0ZVByb2JhYmx5Q0ZEaXN0cmlidXRpb240N0UzOTgzQic6IHtcbiAgICAgICAgICAnVHlwZSc6ICdBV1M6OkNsb3VkRnJvbnQ6OkRpc3RyaWJ1dGlvbicsXG4gICAgICAgICAgJ1Byb3BlcnRpZXMnOiB7XG4gICAgICAgICAgICAnRGlzdHJpYnV0aW9uQ29uZmlnJzoge1xuICAgICAgICAgICAgICAnQ2FjaGVCZWhhdmlvcnMnOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgJ0FsbG93ZWRNZXRob2RzJzogW1xuICAgICAgICAgICAgICAgICAgICAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgJ0hFQUQnLFxuICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICdDYWNoZWRNZXRob2RzJzogW1xuICAgICAgICAgICAgICAgICAgICAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgJ0hFQUQnLFxuICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICdDb21wcmVzcyc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAnRm9yd2FyZGVkVmFsdWVzJzoge1xuICAgICAgICAgICAgICAgICAgICAnQ29va2llcyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAnRm9yd2FyZCc6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ1F1ZXJ5U3RyaW5nJzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgJ1BhdGhQYXR0ZXJuJzogJy90ZXN0LyonLFxuICAgICAgICAgICAgICAgICAgJ1RhcmdldE9yaWdpbklkJzogJ29yaWdpbjEnLFxuICAgICAgICAgICAgICAgICAgJ1ZpZXdlclByb3RvY29sUG9saWN5JzogJ3JlZGlyZWN0LXRvLWh0dHBzJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAnRGVmYXVsdFJvb3RPYmplY3QnOiAnaW5kZXguaHRtbCcsXG4gICAgICAgICAgICAgICdPcmlnaW5zJzogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICdDb25uZWN0aW9uQXR0ZW1wdHMnOiAzLFxuICAgICAgICAgICAgICAgICAgJ0Nvbm5lY3Rpb25UaW1lb3V0JzogMTAsXG4gICAgICAgICAgICAgICAgICAnRG9tYWluTmFtZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgJ0J1Y2tldDgzOTA4RTc3JyxcbiAgICAgICAgICAgICAgICAgICAgICAnUmVnaW9uYWxEb21haW5OYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAnSWQnOiAnb3JpZ2luMScsXG4gICAgICAgICAgICAgICAgICAnUzNPcmlnaW5Db25maWcnOiB7fSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAnVmlld2VyQ2VydGlmaWNhdGUnOiB7XG4gICAgICAgICAgICAgICAgJ0Nsb3VkRnJvbnREZWZhdWx0Q2VydGlmaWNhdGUnOiB0cnVlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAnUHJpY2VDbGFzcyc6ICdQcmljZUNsYXNzXzEwMCcsXG4gICAgICAgICAgICAgICdEZWZhdWx0Q2FjaGVCZWhhdmlvcic6IHtcbiAgICAgICAgICAgICAgICAnQWxsb3dlZE1ldGhvZHMnOiBbXG4gICAgICAgICAgICAgICAgICAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICdIRUFEJyxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICdDYWNoZWRNZXRob2RzJzogW1xuICAgICAgICAgICAgICAgICAgJ0dFVCcsXG4gICAgICAgICAgICAgICAgICAnSEVBRCcsXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAnVGFyZ2V0T3JpZ2luSWQnOiAnb3JpZ2luMScsXG4gICAgICAgICAgICAgICAgJ1ZpZXdlclByb3RvY29sUG9saWN5JzogJ2FsbG93LWFsbCcsXG4gICAgICAgICAgICAgICAgJ0ZvcndhcmRlZFZhbHVlcyc6IHtcbiAgICAgICAgICAgICAgICAgICdRdWVyeVN0cmluZyc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgJ0Nvb2tpZXMnOiB7ICdGb3J3YXJkJzogJ25vbmUnIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnQ29tcHJlc3MnOiB0cnVlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAnRW5hYmxlZCc6IHRydWUsXG4gICAgICAgICAgICAgICdJUFY2RW5hYmxlZCc6IHRydWUsXG4gICAgICAgICAgICAgICdIdHRwVmVyc2lvbic6ICdodHRwMicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdkaXN0cmlidXRpb24gd2l0aCBkaXNhYmxlZCBjb21wcmVzc2lvbicsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBzb3VyY2VCdWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG5cbiAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0FuQW1hemluZ1dlYnNpdGVQcm9iYWJseScsIHtcbiAgICAgIG9yaWdpbkNvbmZpZ3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIHMzT3JpZ2luU291cmNlOiB7XG4gICAgICAgICAgICBzM0J1Y2tldFNvdXJjZTogc291cmNlQnVja2V0LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmVoYXZpb3JzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlLFxuICAgICAgICAgICAgICBjb21wcmVzczogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS50ZW1wbGF0ZU1hdGNoZXMoe1xuICAgICAgJ1Jlc291cmNlcyc6IHtcbiAgICAgICAgJ0J1Y2tldDgzOTA4RTc3Jzoge1xuICAgICAgICAgICdUeXBlJzogJ0FXUzo6UzM6OkJ1Y2tldCcsXG4gICAgICAgICAgJ0RlbGV0aW9uUG9saWN5JzogJ1JldGFpbicsXG4gICAgICAgICAgJ1VwZGF0ZVJlcGxhY2VQb2xpY3knOiAnUmV0YWluJyxcbiAgICAgICAgfSxcbiAgICAgICAgJ0FuQW1hemluZ1dlYnNpdGVQcm9iYWJseUNGRGlzdHJpYnV0aW9uNDdFMzk4M0InOiB7XG4gICAgICAgICAgJ1R5cGUnOiAnQVdTOjpDbG91ZEZyb250OjpEaXN0cmlidXRpb24nLFxuICAgICAgICAgICdQcm9wZXJ0aWVzJzoge1xuICAgICAgICAgICAgJ0Rpc3RyaWJ1dGlvbkNvbmZpZyc6IHtcbiAgICAgICAgICAgICAgJ0RlZmF1bHRSb290T2JqZWN0JzogJ2luZGV4Lmh0bWwnLFxuICAgICAgICAgICAgICAnT3JpZ2lucyc6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAnQ29ubmVjdGlvbkF0dGVtcHRzJzogMyxcbiAgICAgICAgICAgICAgICAgICdDb25uZWN0aW9uVGltZW91dCc6IDEwLFxuICAgICAgICAgICAgICAgICAgJ0RvbWFpbk5hbWUnOiB7XG4gICAgICAgICAgICAgICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgICAgICAgICAgICAgICdCdWNrZXQ4MzkwOEU3NycsXG4gICAgICAgICAgICAgICAgICAgICAgJ1JlZ2lvbmFsRG9tYWluTmFtZScsXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgJ0lkJzogJ29yaWdpbjEnLFxuICAgICAgICAgICAgICAgICAgJ1MzT3JpZ2luQ29uZmlnJzoge30sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgJ1ZpZXdlckNlcnRpZmljYXRlJzoge1xuICAgICAgICAgICAgICAgICdDbG91ZEZyb250RGVmYXVsdENlcnRpZmljYXRlJzogdHJ1ZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ1ByaWNlQ2xhc3MnOiAnUHJpY2VDbGFzc18xMDAnLFxuICAgICAgICAgICAgICAnRGVmYXVsdENhY2hlQmVoYXZpb3InOiB7XG4gICAgICAgICAgICAgICAgJ0FsbG93ZWRNZXRob2RzJzogW1xuICAgICAgICAgICAgICAgICAgJ0dFVCcsXG4gICAgICAgICAgICAgICAgICAnSEVBRCcsXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAnQ2FjaGVkTWV0aG9kcyc6IFtcbiAgICAgICAgICAgICAgICAgICdHRVQnLFxuICAgICAgICAgICAgICAgICAgJ0hFQUQnLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgJ1RhcmdldE9yaWdpbklkJzogJ29yaWdpbjEnLFxuICAgICAgICAgICAgICAgICdWaWV3ZXJQcm90b2NvbFBvbGljeSc6ICdyZWRpcmVjdC10by1odHRwcycsXG4gICAgICAgICAgICAgICAgJ0ZvcndhcmRlZFZhbHVlcyc6IHtcbiAgICAgICAgICAgICAgICAgICdRdWVyeVN0cmluZyc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgJ0Nvb2tpZXMnOiB7ICdGb3J3YXJkJzogJ25vbmUnIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnQ29tcHJlc3MnOiBmYWxzZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ0VuYWJsZWQnOiB0cnVlLFxuICAgICAgICAgICAgICAnSVBWNkVuYWJsZWQnOiB0cnVlLFxuICAgICAgICAgICAgICAnSHR0cFZlcnNpb24nOiAnaHR0cDInLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICB9KTtcblxuICB0ZXN0KCdkaXN0cmlidXRpb24gd2l0aCBDbG91ZEZyb250IGZ1bmN0aW9uLWFzc29jaWF0aW9uJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IHNvdXJjZUJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdCdWNrZXQnKTtcblxuICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnQW5BbWF6aW5nV2Vic2l0ZVByb2JhYmx5Jywge1xuICAgICAgb3JpZ2luQ29uZmlnczogW1xuICAgICAgICB7XG4gICAgICAgICAgczNPcmlnaW5Tb3VyY2U6IHtcbiAgICAgICAgICAgIHMzQnVja2V0U291cmNlOiBzb3VyY2VCdWNrZXQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBiZWhhdmlvcnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaXNEZWZhdWx0QmVoYXZpb3I6IHRydWUsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uQXNzb2NpYXRpb25zOiBbe1xuICAgICAgICAgICAgICAgIGV2ZW50VHlwZTogRnVuY3Rpb25FdmVudFR5cGUuVklFV0VSX1JFUVVFU1QsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb246IG5ldyBGdW5jdGlvbihzdGFjaywgJ1Rlc3RGdW5jdGlvbicsIHtcbiAgICAgICAgICAgICAgICAgIGNvZGU6IEZ1bmN0aW9uQ29kZS5mcm9tSW5saW5lKCdmb28nKSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q2xvdWRGcm9udDo6RGlzdHJpYnV0aW9uJywge1xuICAgICAgJ0Rpc3RyaWJ1dGlvbkNvbmZpZyc6IHtcbiAgICAgICAgJ0RlZmF1bHRDYWNoZUJlaGF2aW9yJzoge1xuICAgICAgICAgICdGdW5jdGlvbkFzc29jaWF0aW9ucyc6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgJ0V2ZW50VHlwZSc6ICd2aWV3ZXItcmVxdWVzdCcsXG4gICAgICAgICAgICAgICdGdW5jdGlvbkFSTic6IHtcbiAgICAgICAgICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAgICAgICAgICdUZXN0RnVuY3Rpb24yMkFEOTBGQycsXG4gICAgICAgICAgICAgICAgICAnRnVuY3Rpb25BUk4nLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG5cbiAgfSk7XG5cbiAgdGVzdCgnZGlzdHJpYnV0aW9uIHdpdGggcmVzb2x2YWJsZSBsYW1iZGEtYXNzb2NpYXRpb24nLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3Qgc291cmNlQnVja2V0ID0gbmV3IHMzLkJ1Y2tldChzdGFjaywgJ0J1Y2tldCcpO1xuXG4gICAgY29uc3QgbGFtYmRhRnVuY3Rpb24gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHN0YWNrLCAnTGFtYmRhJywge1xuICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUlubGluZSgnZm9vJyksXG4gICAgICBoYW5kbGVyOiAnaW5kZXguaGFuZGxlcicsXG4gICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTRfWCxcbiAgICB9KTtcblxuICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnQW5BbWF6aW5nV2Vic2l0ZVByb2JhYmx5Jywge1xuICAgICAgb3JpZ2luQ29uZmlnczogW1xuICAgICAgICB7XG4gICAgICAgICAgczNPcmlnaW5Tb3VyY2U6IHtcbiAgICAgICAgICAgIHMzQnVja2V0U291cmNlOiBzb3VyY2VCdWNrZXQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBiZWhhdmlvcnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaXNEZWZhdWx0QmVoYXZpb3I6IHRydWUsXG4gICAgICAgICAgICAgIGxhbWJkYUZ1bmN0aW9uQXNzb2NpYXRpb25zOiBbe1xuICAgICAgICAgICAgICAgIGV2ZW50VHlwZTogTGFtYmRhRWRnZUV2ZW50VHlwZS5PUklHSU5fUkVRVUVTVCxcbiAgICAgICAgICAgICAgICBsYW1iZGFGdW5jdGlvbjogbGFtYmRhRnVuY3Rpb24uY3VycmVudFZlcnNpb24sXG4gICAgICAgICAgICAgICAgaW5jbHVkZUJvZHk6IHRydWUsXG4gICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkNsb3VkRnJvbnQ6OkRpc3RyaWJ1dGlvbicsIHtcbiAgICAgICdEaXN0cmlidXRpb25Db25maWcnOiB7XG4gICAgICAgICdEZWZhdWx0Q2FjaGVCZWhhdmlvcic6IHtcbiAgICAgICAgICAnTGFtYmRhRnVuY3Rpb25Bc3NvY2lhdGlvbnMnOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICdFdmVudFR5cGUnOiAnb3JpZ2luLXJlcXVlc3QnLFxuICAgICAgICAgICAgICAnSW5jbHVkZUJvZHknOiB0cnVlLFxuICAgICAgICAgICAgICAnTGFtYmRhRnVuY3Rpb25BUk4nOiB7XG4gICAgICAgICAgICAgICAgJ1JlZic6ICdMYW1iZGFDdXJyZW50VmVyc2lvbkRGNzA2RjZBOWE2MzJhMjk0YWUzYTljZDRkNTUwZjFjNGUyNjYxOWQnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuXG4gIH0pO1xuXG4gIHRlc3QoJ2Fzc29jaWF0ZSBhIGxhbWJkYSB3aXRoIHJlbW92YWJsZSBlbnYgdmFycycsICgpID0+IHtcbiAgICBjb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdTdGFjaycpO1xuICAgIGNvbnN0IHNvdXJjZUJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdCdWNrZXQnKTtcblxuICAgIGNvbnN0IGxhbWJkYUZ1bmN0aW9uID0gbmV3IGxhbWJkYS5GdW5jdGlvbihzdGFjaywgJ0xhbWJkYScsIHtcbiAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21JbmxpbmUoJ2ZvbycpLFxuICAgICAgaGFuZGxlcjogJ2luZGV4LmhhbmRsZXInLFxuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE0X1gsXG4gICAgfSk7XG4gICAgbGFtYmRhRnVuY3Rpb24uYWRkRW52aXJvbm1lbnQoJ0tFWScsICd2YWx1ZScsIHsgcmVtb3ZlSW5FZGdlOiB0cnVlIH0pO1xuXG4gICAgbmV3IENsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24oc3RhY2ssICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHknLCB7XG4gICAgICBvcmlnaW5Db25maWdzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzM09yaWdpblNvdXJjZToge1xuICAgICAgICAgICAgczNCdWNrZXRTb3VyY2U6IHNvdXJjZUJ1Y2tldCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGJlaGF2aW9yczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSxcbiAgICAgICAgICAgICAgbGFtYmRhRnVuY3Rpb25Bc3NvY2lhdGlvbnM6IFt7XG4gICAgICAgICAgICAgICAgZXZlbnRUeXBlOiBMYW1iZGFFZGdlRXZlbnRUeXBlLk9SSUdJTl9SRVFVRVNULFxuICAgICAgICAgICAgICAgIGxhbWJkYUZ1bmN0aW9uOiBsYW1iZGFGdW5jdGlvbi5jdXJyZW50VmVyc2lvbixcbiAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6TGFtYmRhOjpGdW5jdGlvbicsIHtcbiAgICAgIEVudmlyb25tZW50OiBNYXRjaC5hYnNlbnQoKSxcbiAgICB9KTtcblxuXG4gIH0pO1xuXG4gIHRlc3QoJ3Rocm93cyB3aGVuIGFzc29jaWF0aW5nIGEgbGFtYmRhIHdpdGggaW5jb21wYXRpYmxlIGVudiB2YXJzJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ1N0YWNrJyk7XG4gICAgY29uc3Qgc291cmNlQnVja2V0ID0gbmV3IHMzLkJ1Y2tldChzdGFjaywgJ0J1Y2tldCcpO1xuXG4gICAgY29uc3QgbGFtYmRhRnVuY3Rpb24gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHN0YWNrLCAnTGFtYmRhJywge1xuICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUlubGluZSgnZm9vJyksXG4gICAgICBoYW5kbGVyOiAnaW5kZXguaGFuZGxlcicsXG4gICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTRfWCxcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIEtFWTogJ3ZhbHVlJyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0FuQW1hemluZ1dlYnNpdGVQcm9iYWJseScsIHtcbiAgICAgIG9yaWdpbkNvbmZpZ3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIHMzT3JpZ2luU291cmNlOiB7XG4gICAgICAgICAgICBzM0J1Y2tldFNvdXJjZTogc291cmNlQnVja2V0LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmVoYXZpb3JzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlLFxuICAgICAgICAgICAgICBsYW1iZGFGdW5jdGlvbkFzc29jaWF0aW9uczogW3tcbiAgICAgICAgICAgICAgICBldmVudFR5cGU6IExhbWJkYUVkZ2VFdmVudFR5cGUuT1JJR0lOX1JFUVVFU1QsXG4gICAgICAgICAgICAgICAgbGFtYmRhRnVuY3Rpb246IGxhbWJkYUZ1bmN0aW9uLmN1cnJlbnRWZXJzaW9uLFxuICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBleHBlY3QoKCkgPT4gYXBwLnN5bnRoKCkpLnRvVGhyb3coL0tFWS8pO1xuXG5cbiAgfSk7XG5cbiAgdGVzdCgndGhyb3dzIHdoZW4gYXNzb2NpYXRpbmcgYSBsYW1iZGEgd2l0aCBpbmNsdWRlQm9keSBhbmQgYSByZXNwb25zZSBldmVudCB0eXBlJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ1N0YWNrJyk7XG4gICAgY29uc3Qgc291cmNlQnVja2V0ID0gbmV3IHMzLkJ1Y2tldChzdGFjaywgJ0J1Y2tldCcpO1xuXG4gICAgY29uc3QgZm5WZXJzaW9uID0gbGFtYmRhLlZlcnNpb24uZnJvbVZlcnNpb25Bcm4oc3RhY2ssICdWZXJzaW9uJywgJ2Fybjphd3M6bGFtYmRhOnRlc3RyZWdpb246MTExMTExMTExMTExOmZ1bmN0aW9uOm15VGVzdEZ1bjp2MScpO1xuXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnQW5BbWF6aW5nV2Vic2l0ZVByb2JhYmx5Jywge1xuICAgICAgICBvcmlnaW5Db25maWdzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgczNPcmlnaW5Tb3VyY2U6IHtcbiAgICAgICAgICAgICAgczNCdWNrZXRTb3VyY2U6IHNvdXJjZUJ1Y2tldCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiZWhhdmlvcnM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlLFxuICAgICAgICAgICAgICAgIGxhbWJkYUZ1bmN0aW9uQXNzb2NpYXRpb25zOiBbe1xuICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlOiBMYW1iZGFFZGdlRXZlbnRUeXBlLlZJRVdFUl9SRVNQT05TRSxcbiAgICAgICAgICAgICAgICAgIGluY2x1ZGVCb2R5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgbGFtYmRhRnVuY3Rpb246IGZuVmVyc2lvbixcbiAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0pO1xuICAgIH0pLnRvVGhyb3coLydpbmNsdWRlQm9keScgY2FuIG9ubHkgYmUgdHJ1ZSBmb3IgT1JJR0lOX1JFUVVFU1Qgb3IgVklFV0VSX1JFUVVFU1QgZXZlbnQgdHlwZXMuLyk7XG5cblxuICB9KTtcblxuICB0ZXN0KCdkaXN0cmlidXRpb24gaGFzIGEgZGVmYXVsdENoaWxkJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IHNvdXJjZUJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdCdWNrZXQnKTtcblxuICAgIGNvbnN0IGRpc3RyaWJ1dGlvbiA9IG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnQW5BbWF6aW5nV2Vic2l0ZVByb2JhYmx5Jywge1xuICAgICAgb3JpZ2luQ29uZmlnczogW1xuICAgICAgICB7XG4gICAgICAgICAgczNPcmlnaW5Tb3VyY2U6IHtcbiAgICAgICAgICAgIHMzQnVja2V0U291cmNlOiBzb3VyY2VCdWNrZXQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBiZWhhdmlvcnM6IFt7IGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlIH1dLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGV4cGVjdChkaXN0cmlidXRpb24ubm9kZS5kZWZhdWx0Q2hpbGQgaW5zdGFuY2VvZiBDZm5EaXN0cmlidXRpb24pLnRvRXF1YWwodHJ1ZSk7XG5cbiAgfSk7XG5cbiAgdGVzdERlcHJlY2F0ZWQoJ2FsbG93cyBtdWx0aXBsZSBhbGlhc0NvbmZpZ3VyYXRpb24gQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbiBwZXIgc3RhY2snLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgczNCdWNrZXRTb3VyY2UgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG5cbiAgICBjb25zdCBvcmlnaW5Db25maWdzID0gW3tcbiAgICAgIHMzT3JpZ2luU291cmNlOiB7IHMzQnVja2V0U291cmNlIH0sXG4gICAgICBiZWhhdmlvcnM6IFt7IGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlIH1dLFxuICAgIH1dO1xuXG4gICAgbmV3IENsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24oc3RhY2ssICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHknLCB7XG4gICAgICBvcmlnaW5Db25maWdzLFxuICAgICAgYWxpYXNDb25maWd1cmF0aW9uOiB7IGFjbUNlcnRSZWY6ICdhY21fcmVmJywgbmFtZXM6IFsnd3d3LmV4YW1wbGUuY29tJ10gfSxcbiAgICB9KTtcbiAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0Fub3RoZXJBbWF6aW5nV2Vic2l0ZVByb2JhYmx5Jywge1xuICAgICAgb3JpZ2luQ29uZmlncyxcbiAgICAgIGFsaWFzQ29uZmlndXJhdGlvbjogeyBhY21DZXJ0UmVmOiAnYW5vdGhlcl9hY21fcmVmJywgbmFtZXM6IFsnZnRwLmV4YW1wbGUuY29tJ10gfSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkNsb3VkRnJvbnQ6OkRpc3RyaWJ1dGlvbicsIHtcbiAgICAgICdEaXN0cmlidXRpb25Db25maWcnOiB7XG4gICAgICAgICdBbGlhc2VzJzogWyd3d3cuZXhhbXBsZS5jb20nXSxcbiAgICAgICAgJ1ZpZXdlckNlcnRpZmljYXRlJzoge1xuICAgICAgICAgICdBY21DZXJ0aWZpY2F0ZUFybic6ICdhY21fcmVmJyxcbiAgICAgICAgICAnU3NsU3VwcG9ydE1ldGhvZCc6ICdzbmktb25seScsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q2xvdWRGcm9udDo6RGlzdHJpYnV0aW9uJywge1xuICAgICAgJ0Rpc3RyaWJ1dGlvbkNvbmZpZyc6IHtcbiAgICAgICAgJ0FsaWFzZXMnOiBbJ2Z0cC5leGFtcGxlLmNvbSddLFxuICAgICAgICAnVmlld2VyQ2VydGlmaWNhdGUnOiB7XG4gICAgICAgICAgJ0FjbUNlcnRpZmljYXRlQXJuJzogJ2Fub3RoZXJfYWNtX3JlZicsXG4gICAgICAgICAgJ1NzbFN1cHBvcnRNZXRob2QnOiAnc25pLW9ubHknLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICB9KTtcblxuICBkZXNjcmliZSgndmlld2VyQ2VydGlmaWNhdGUnLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJ2FjbUNlcnRpZmljYXRlJywgKCkgPT4ge1xuICAgICAgdGVzdCgnYmFzZSB1c2FnZScsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICAgIGNvbnN0IHNvdXJjZUJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdCdWNrZXQnKTtcblxuICAgICAgICBjb25zdCBjZXJ0aWZpY2F0ZSA9IG5ldyBjZXJ0aWZpY2F0ZW1hbmFnZXIuQ2VydGlmaWNhdGUoc3RhY2ssICdjZXJ0Jywge1xuICAgICAgICAgIGRvbWFpbk5hbWU6ICdleGFtcGxlLmNvbScsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnQW5BbWF6aW5nV2Vic2l0ZVByb2JhYmx5Jywge1xuICAgICAgICAgIG9yaWdpbkNvbmZpZ3M6IFt7XG4gICAgICAgICAgICBzM09yaWdpblNvdXJjZTogeyBzM0J1Y2tldFNvdXJjZTogc291cmNlQnVja2V0IH0sXG4gICAgICAgICAgICBiZWhhdmlvcnM6IFt7IGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlIH1dLFxuICAgICAgICAgIH1dLFxuICAgICAgICAgIHZpZXdlckNlcnRpZmljYXRlOiBWaWV3ZXJDZXJ0aWZpY2F0ZS5mcm9tQWNtQ2VydGlmaWNhdGUoY2VydGlmaWNhdGUpLFxuICAgICAgICB9KTtcblxuICAgICAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpDbG91ZEZyb250OjpEaXN0cmlidXRpb24nLCB7XG4gICAgICAgICAgJ0Rpc3RyaWJ1dGlvbkNvbmZpZyc6IHtcbiAgICAgICAgICAgICdBbGlhc2VzJzogW10sXG4gICAgICAgICAgICAnVmlld2VyQ2VydGlmaWNhdGUnOiB7XG4gICAgICAgICAgICAgICdBY21DZXJ0aWZpY2F0ZUFybic6IHtcbiAgICAgICAgICAgICAgICAnUmVmJzogJ2NlcnQ1NkNBOTRFQicsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICdTc2xTdXBwb3J0TWV0aG9kJzogJ3NuaS1vbmx5JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cblxuICAgICAgfSk7XG4gICAgICB0ZXN0KCdpbXBvcnRlZCBjZXJ0aWZpY2F0ZSBmcm9tQ2VydGlmaWNhdGVBcm4nLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBjb25zdCBzb3VyY2VCdWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG5cbiAgICAgICAgY29uc3QgY2VydGlmaWNhdGUgPSBjZXJ0aWZpY2F0ZW1hbmFnZXIuQ2VydGlmaWNhdGUuZnJvbUNlcnRpZmljYXRlQXJuKFxuICAgICAgICAgIHN0YWNrLCAnY2VydCcsICdhcm46YXdzOmFjbTp1cy1lYXN0LTE6MTExMTExMTpjZXJ0aWZpY2F0ZS8xMS0zMzM2ZjEtNDQ0ODNkLWFkYzctOWNkMzc1YzUxNjlkJyxcbiAgICAgICAgKTtcblxuICAgICAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0FuQW1hemluZ1dlYnNpdGVQcm9iYWJseScsIHtcbiAgICAgICAgICBvcmlnaW5Db25maWdzOiBbe1xuICAgICAgICAgICAgczNPcmlnaW5Tb3VyY2U6IHsgczNCdWNrZXRTb3VyY2U6IHNvdXJjZUJ1Y2tldCB9LFxuICAgICAgICAgICAgYmVoYXZpb3JzOiBbeyBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSB9XSxcbiAgICAgICAgICB9XSxcbiAgICAgICAgICB2aWV3ZXJDZXJ0aWZpY2F0ZTogVmlld2VyQ2VydGlmaWNhdGUuZnJvbUFjbUNlcnRpZmljYXRlKGNlcnRpZmljYXRlKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q2xvdWRGcm9udDo6RGlzdHJpYnV0aW9uJywge1xuICAgICAgICAgICdEaXN0cmlidXRpb25Db25maWcnOiB7XG4gICAgICAgICAgICAnQWxpYXNlcyc6IFtdLFxuICAgICAgICAgICAgJ1ZpZXdlckNlcnRpZmljYXRlJzoge1xuICAgICAgICAgICAgICAnQWNtQ2VydGlmaWNhdGVBcm4nOiAnYXJuOmF3czphY206dXMtZWFzdC0xOjExMTExMTE6Y2VydGlmaWNhdGUvMTEtMzMzNmYxLTQ0NDgzZC1hZGM3LTljZDM3NWM1MTY5ZCcsXG4gICAgICAgICAgICAgICdTc2xTdXBwb3J0TWV0aG9kJzogJ3NuaS1vbmx5JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cblxuICAgICAgfSk7XG4gICAgICB0ZXN0KCdhZHZhbmNlZCB1c2FnZScsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICAgIGNvbnN0IHNvdXJjZUJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdCdWNrZXQnKTtcblxuICAgICAgICBjb25zdCBjZXJ0aWZpY2F0ZSA9IG5ldyBjZXJ0aWZpY2F0ZW1hbmFnZXIuQ2VydGlmaWNhdGUoc3RhY2ssICdjZXJ0Jywge1xuICAgICAgICAgIGRvbWFpbk5hbWU6ICdleGFtcGxlLmNvbScsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnQW5BbWF6aW5nV2Vic2l0ZVByb2JhYmx5Jywge1xuICAgICAgICAgIG9yaWdpbkNvbmZpZ3M6IFt7XG4gICAgICAgICAgICBzM09yaWdpblNvdXJjZTogeyBzM0J1Y2tldFNvdXJjZTogc291cmNlQnVja2V0IH0sXG4gICAgICAgICAgICBiZWhhdmlvcnM6IFt7IGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlIH1dLFxuICAgICAgICAgIH1dLFxuICAgICAgICAgIHZpZXdlckNlcnRpZmljYXRlOiBWaWV3ZXJDZXJ0aWZpY2F0ZS5mcm9tQWNtQ2VydGlmaWNhdGUoY2VydGlmaWNhdGUsIHtcbiAgICAgICAgICAgIHNlY3VyaXR5UG9saWN5OiBTZWN1cml0eVBvbGljeVByb3RvY29sLlNTTF9WMyxcbiAgICAgICAgICAgIHNzbE1ldGhvZDogU1NMTWV0aG9kLlZJUCxcbiAgICAgICAgICAgIGFsaWFzZXM6IFsnZXhhbXBsZS5jb20nLCAnd3d3LmV4YW1wbGUuY29tJ10sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkNsb3VkRnJvbnQ6OkRpc3RyaWJ1dGlvbicsIHtcbiAgICAgICAgICAnRGlzdHJpYnV0aW9uQ29uZmlnJzoge1xuICAgICAgICAgICAgJ0FsaWFzZXMnOiBbJ2V4YW1wbGUuY29tJywgJ3d3dy5leGFtcGxlLmNvbSddLFxuICAgICAgICAgICAgJ1ZpZXdlckNlcnRpZmljYXRlJzoge1xuICAgICAgICAgICAgICAnQWNtQ2VydGlmaWNhdGVBcm4nOiB7XG4gICAgICAgICAgICAgICAgJ1JlZic6ICdjZXJ0NTZDQTk0RUInLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAnTWluaW11bVByb3RvY29sVmVyc2lvbic6ICdTU0x2MycsXG4gICAgICAgICAgICAgICdTc2xTdXBwb3J0TWV0aG9kJzogJ3ZpcCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG5cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdpYW1DZXJ0aWZpY2F0ZScsICgpID0+IHtcbiAgICAgIHRlc3QoJ2Jhc2UgdXNhZ2UnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBjb25zdCBzb3VyY2VCdWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG5cbiAgICAgICAgbmV3IENsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24oc3RhY2ssICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHknLCB7XG4gICAgICAgICAgb3JpZ2luQ29uZmlnczogW3tcbiAgICAgICAgICAgIHMzT3JpZ2luU291cmNlOiB7IHMzQnVja2V0U291cmNlOiBzb3VyY2VCdWNrZXQgfSxcbiAgICAgICAgICAgIGJlaGF2aW9yczogW3sgaXNEZWZhdWx0QmVoYXZpb3I6IHRydWUgfV0sXG4gICAgICAgICAgfV0sXG4gICAgICAgICAgdmlld2VyQ2VydGlmaWNhdGU6IFZpZXdlckNlcnRpZmljYXRlLmZyb21JYW1DZXJ0aWZpY2F0ZSgndGVzdCcpLFxuICAgICAgICB9KTtcblxuICAgICAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpDbG91ZEZyb250OjpEaXN0cmlidXRpb24nLCB7XG4gICAgICAgICAgJ0Rpc3RyaWJ1dGlvbkNvbmZpZyc6IHtcbiAgICAgICAgICAgICdBbGlhc2VzJzogW10sXG4gICAgICAgICAgICAnVmlld2VyQ2VydGlmaWNhdGUnOiB7XG4gICAgICAgICAgICAgICdJYW1DZXJ0aWZpY2F0ZUlkJzogJ3Rlc3QnLFxuICAgICAgICAgICAgICAnU3NsU3VwcG9ydE1ldGhvZCc6ICdzbmktb25seScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG5cbiAgICAgIH0pO1xuICAgICAgdGVzdCgnYWR2YW5jZWQgdXNhZ2UnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBjb25zdCBzb3VyY2VCdWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG5cbiAgICAgICAgbmV3IENsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24oc3RhY2ssICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHknLCB7XG4gICAgICAgICAgb3JpZ2luQ29uZmlnczogW3tcbiAgICAgICAgICAgIHMzT3JpZ2luU291cmNlOiB7IHMzQnVja2V0U291cmNlOiBzb3VyY2VCdWNrZXQgfSxcbiAgICAgICAgICAgIGJlaGF2aW9yczogW3sgaXNEZWZhdWx0QmVoYXZpb3I6IHRydWUgfV0sXG4gICAgICAgICAgfV0sXG4gICAgICAgICAgdmlld2VyQ2VydGlmaWNhdGU6IFZpZXdlckNlcnRpZmljYXRlLmZyb21JYW1DZXJ0aWZpY2F0ZSgndGVzdCcsIHtcbiAgICAgICAgICAgIHNlY3VyaXR5UG9saWN5OiBTZWN1cml0eVBvbGljeVByb3RvY29sLlRMU19WMSxcbiAgICAgICAgICAgIHNzbE1ldGhvZDogU1NMTWV0aG9kLlZJUCxcbiAgICAgICAgICAgIGFsaWFzZXM6IFsnZXhhbXBsZS5jb20nXSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q2xvdWRGcm9udDo6RGlzdHJpYnV0aW9uJywge1xuICAgICAgICAgICdEaXN0cmlidXRpb25Db25maWcnOiB7XG4gICAgICAgICAgICAnQWxpYXNlcyc6IFsnZXhhbXBsZS5jb20nXSxcbiAgICAgICAgICAgICdWaWV3ZXJDZXJ0aWZpY2F0ZSc6IHtcbiAgICAgICAgICAgICAgJ0lhbUNlcnRpZmljYXRlSWQnOiAndGVzdCcsXG4gICAgICAgICAgICAgICdNaW5pbXVtUHJvdG9jb2xWZXJzaW9uJzogJ1RMU3YxJyxcbiAgICAgICAgICAgICAgJ1NzbFN1cHBvcnRNZXRob2QnOiAndmlwJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cblxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ2Nsb3VkRnJvbnREZWZhdWx0Q2VydGlmaWNhdGUnLCAoKSA9PiB7XG4gICAgICB0ZXN0KCdiYXNlIHVzYWdlJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgICAgY29uc3Qgc291cmNlQnVja2V0ID0gbmV3IHMzLkJ1Y2tldChzdGFjaywgJ0J1Y2tldCcpO1xuXG4gICAgICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnQW5BbWF6aW5nV2Vic2l0ZVByb2JhYmx5Jywge1xuICAgICAgICAgIG9yaWdpbkNvbmZpZ3M6IFt7XG4gICAgICAgICAgICBzM09yaWdpblNvdXJjZTogeyBzM0J1Y2tldFNvdXJjZTogc291cmNlQnVja2V0IH0sXG4gICAgICAgICAgICBiZWhhdmlvcnM6IFt7IGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlIH1dLFxuICAgICAgICAgIH1dLFxuICAgICAgICAgIHZpZXdlckNlcnRpZmljYXRlOiBWaWV3ZXJDZXJ0aWZpY2F0ZS5mcm9tQ2xvdWRGcm9udERlZmF1bHRDZXJ0aWZpY2F0ZSgpLFxuICAgICAgICB9KTtcblxuICAgICAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpDbG91ZEZyb250OjpEaXN0cmlidXRpb24nLCB7XG4gICAgICAgICAgJ0Rpc3RyaWJ1dGlvbkNvbmZpZyc6IHtcbiAgICAgICAgICAgICdBbGlhc2VzJzogW10sXG4gICAgICAgICAgICAnVmlld2VyQ2VydGlmaWNhdGUnOiB7XG4gICAgICAgICAgICAgICdDbG91ZEZyb250RGVmYXVsdENlcnRpZmljYXRlJzogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cblxuICAgICAgfSk7XG4gICAgICB0ZXN0KCdhbGlhc2VzIGFyZSBzZXQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBjb25zdCBzb3VyY2VCdWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG5cbiAgICAgICAgbmV3IENsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24oc3RhY2ssICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHknLCB7XG4gICAgICAgICAgb3JpZ2luQ29uZmlnczogW3tcbiAgICAgICAgICAgIHMzT3JpZ2luU291cmNlOiB7IHMzQnVja2V0U291cmNlOiBzb3VyY2VCdWNrZXQgfSxcbiAgICAgICAgICAgIGJlaGF2aW9yczogW3sgaXNEZWZhdWx0QmVoYXZpb3I6IHRydWUgfV0sXG4gICAgICAgICAgfV0sXG4gICAgICAgICAgdmlld2VyQ2VydGlmaWNhdGU6IFZpZXdlckNlcnRpZmljYXRlLmZyb21DbG91ZEZyb250RGVmYXVsdENlcnRpZmljYXRlKCdleGFtcGxlLmNvbScsICd3d3cuZXhhbXBsZS5jb20nKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q2xvdWRGcm9udDo6RGlzdHJpYnV0aW9uJywge1xuICAgICAgICAgICdEaXN0cmlidXRpb25Db25maWcnOiB7XG4gICAgICAgICAgICAnQWxpYXNlcyc6IFsnZXhhbXBsZS5jb20nLCAnd3d3LmV4YW1wbGUuY29tJ10sXG4gICAgICAgICAgICAnVmlld2VyQ2VydGlmaWNhdGUnOiB7XG4gICAgICAgICAgICAgICdDbG91ZEZyb250RGVmYXVsdENlcnRpZmljYXRlJzogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cblxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ2Vycm9ycycsICgpID0+IHtcbiAgICAgIHRlc3REZXByZWNhdGVkKCd0aHJvd3MgaWYgYm90aCBkZXByZWNhdGVkIGFsaWFzQ29uZmlndXJhdGlvbiBhbmQgdmlld2VyQ2VydGlmaWNhdGUnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBjb25zdCBzb3VyY2VCdWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG5cbiAgICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0FuQW1hemluZ1dlYnNpdGVQcm9iYWJseScsIHtcbiAgICAgICAgICAgIG9yaWdpbkNvbmZpZ3M6IFt7XG4gICAgICAgICAgICAgIHMzT3JpZ2luU291cmNlOiB7IHMzQnVja2V0U291cmNlOiBzb3VyY2VCdWNrZXQgfSxcbiAgICAgICAgICAgICAgYmVoYXZpb3JzOiBbeyBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSB9XSxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgYWxpYXNDb25maWd1cmF0aW9uOiB7IGFjbUNlcnRSZWY6ICd0ZXN0JywgbmFtZXM6IFsnZnRwLmV4YW1wbGUuY29tJ10gfSxcbiAgICAgICAgICAgIHZpZXdlckNlcnRpZmljYXRlOiBWaWV3ZXJDZXJ0aWZpY2F0ZS5mcm9tQ2xvdWRGcm9udERlZmF1bHRDZXJ0aWZpY2F0ZSgnZXhhbXBsZS5jb20nLCAnd3d3LmV4YW1wbGUuY29tJyksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRvVGhyb3coL1lvdSBjYW5ub3Qgc2V0IGJvdGggYWxpYXNDb25maWd1cmF0aW9uIGFuZCB2aWV3ZXJDZXJ0aWZpY2F0ZSBwcm9wZXJ0aWVzLyk7XG5cblxuICAgICAgfSk7XG4gICAgICB0ZXN0KCd0aHJvd3MgaWYgaW52YWxpZCBzZWN1cml0eSBwb2xpY3kgZm9yIFNTTCBtZXRob2QnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBjb25zdCBzb3VyY2VCdWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG5cbiAgICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0FuQW1hemluZ1dlYnNpdGVQcm9iYWJseScsIHtcbiAgICAgICAgICAgIG9yaWdpbkNvbmZpZ3M6IFt7XG4gICAgICAgICAgICAgIHMzT3JpZ2luU291cmNlOiB7IHMzQnVja2V0U291cmNlOiBzb3VyY2VCdWNrZXQgfSxcbiAgICAgICAgICAgICAgYmVoYXZpb3JzOiBbeyBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSB9XSxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgdmlld2VyQ2VydGlmaWNhdGU6IFZpZXdlckNlcnRpZmljYXRlLmZyb21JYW1DZXJ0aWZpY2F0ZSgndGVzdCcsIHtcbiAgICAgICAgICAgICAgc2VjdXJpdHlQb2xpY3k6IFNlY3VyaXR5UG9saWN5UHJvdG9jb2wuVExTX1YxXzFfMjAxNixcbiAgICAgICAgICAgICAgc3NsTWV0aG9kOiBTU0xNZXRob2QuVklQLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRvVGhyb3coL1RMU3YxLjFfMjAxNiBpcyBub3QgY29tcGFidGlibGUgd2l0aCBzc2xNZXRob2QgdmlwLi8pO1xuXG5cbiAgICAgIH0pO1xuICAgICAgLy8gRklYTUUgaHR0cHM6Ly9naXRodWIuY29tL2F3cy9hd3MtY2RrL2lzc3Vlcy80NzI0XG4gICAgICB0ZXN0KCdkb2VzIG5vdCB0aHJvdyBpZiBhY21DZXJ0aWZpY2F0ZSBleHBsaWNpdGx5IG5vdCBpbiB1cy1lYXN0LTEnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBjb25zdCBzb3VyY2VCdWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG5cbiAgICAgICAgY29uc3QgY2VydGlmaWNhdGUgPSBjZXJ0aWZpY2F0ZW1hbmFnZXIuQ2VydGlmaWNhdGUuZnJvbUNlcnRpZmljYXRlQXJuKFxuICAgICAgICAgIHN0YWNrLCAnY2VydCcsICdhcm46YXdzOmFjbTpldS13ZXN0LTM6MTExMTExMTpjZXJ0aWZpY2F0ZS8xMS0zMzM2ZjEtNDQ0ODNkLWFkYzctOWNkMzc1YzUxNjlkJyxcbiAgICAgICAgKTtcblxuICAgICAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0FuQW1hemluZ1dlYnNpdGVQcm9iYWJseScsIHtcbiAgICAgICAgICBvcmlnaW5Db25maWdzOiBbe1xuICAgICAgICAgICAgczNPcmlnaW5Tb3VyY2U6IHsgczNCdWNrZXRTb3VyY2U6IHNvdXJjZUJ1Y2tldCB9LFxuICAgICAgICAgICAgYmVoYXZpb3JzOiBbeyBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSB9XSxcbiAgICAgICAgICB9XSxcbiAgICAgICAgICB2aWV3ZXJDZXJ0aWZpY2F0ZTogVmlld2VyQ2VydGlmaWNhdGUuZnJvbUFjbUNlcnRpZmljYXRlKGNlcnRpZmljYXRlKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q2xvdWRGcm9udDo6RGlzdHJpYnV0aW9uJywge1xuICAgICAgICAgICdEaXN0cmlidXRpb25Db25maWcnOiB7XG4gICAgICAgICAgICAnQWxpYXNlcyc6IFtdLFxuICAgICAgICAgICAgJ1ZpZXdlckNlcnRpZmljYXRlJzoge1xuICAgICAgICAgICAgICAnQWNtQ2VydGlmaWNhdGVBcm4nOiAnYXJuOmF3czphY206ZXUtd2VzdC0zOjExMTExMTE6Y2VydGlmaWNhdGUvMTEtMzMzNmYxLTQ0NDgzZC1hZGM3LTljZDM3NWM1MTY5ZCcsXG4gICAgICAgICAgICAgICdTc2xTdXBwb3J0TWV0aG9kJzogJ3NuaS1vbmx5JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2VkZ2VsYW1iZGEuYW1hem9uYXdzLmNvbSBpcyBhZGRlZCB0byB0aGUgdHJ1c3QgcG9saWN5IG9mIGxhbWJkYScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IHNvdXJjZUJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdCdWNrZXQnKTtcbiAgICBjb25zdCBmbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24oc3RhY2ssICdMYW1iZGEnLCB7XG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tSW5saW5lKCdmb28nKSxcbiAgICAgIGhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcbiAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xNF9YLFxuICAgIH0pO1xuICAgIGNvbnN0IGxhbWJkYVZlcnNpb24gPSBuZXcgbGFtYmRhLlZlcnNpb24oc3RhY2ssICdMYW1iZGFWZXJzaW9uJywgeyBsYW1iZGE6IGZuIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnTXlEaXN0cmlidXRpb24nLCB7XG4gICAgICBvcmlnaW5Db25maWdzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzM09yaWdpblNvdXJjZTogeyBzM0J1Y2tldFNvdXJjZTogc291cmNlQnVja2V0IH0sXG4gICAgICAgICAgYmVoYXZpb3JzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlLFxuICAgICAgICAgICAgICBsYW1iZGFGdW5jdGlvbkFzc29jaWF0aW9uczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGV2ZW50VHlwZTogTGFtYmRhRWRnZUV2ZW50VHlwZS5PUklHSU5fUkVRVUVTVCxcbiAgICAgICAgICAgICAgICAgIGxhbWJkYUZ1bmN0aW9uOiBsYW1iZGFWZXJzaW9uLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OklBTTo6Um9sZScsIHtcbiAgICAgIEFzc3VtZVJvbGVQb2xpY3lEb2N1bWVudDoge1xuICAgICAgICAnU3RhdGVtZW50JzogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgICdBY3Rpb24nOiAnc3RzOkFzc3VtZVJvbGUnLFxuICAgICAgICAgICAgJ0VmZmVjdCc6ICdBbGxvdycsXG4gICAgICAgICAgICAnUHJpbmNpcGFsJzoge1xuICAgICAgICAgICAgICAnU2VydmljZSc6ICdsYW1iZGEuYW1hem9uYXdzLmNvbScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgJ0FjdGlvbic6ICdzdHM6QXNzdW1lUm9sZScsXG4gICAgICAgICAgICAnRWZmZWN0JzogJ0FsbG93JyxcbiAgICAgICAgICAgICdQcmluY2lwYWwnOiB7XG4gICAgICAgICAgICAgICdTZXJ2aWNlJzogJ2VkZ2VsYW1iZGEuYW1hem9uYXdzLmNvbScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgICdWZXJzaW9uJzogJzIwMTItMTAtMTcnLFxuICAgICAgfSxcbiAgICB9KTtcblxuICB9KTtcblxuICB0ZXN0KCdlZGdlbGFtYmRhLmFtYXpvbmF3cy5jb20gaXMgbm90IGFkZGVkIHRvIGxhbWJkYSByb2xlIGZvciBpbXBvcnRlZCBmdW5jdGlvbnMnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBzb3VyY2VCdWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG4gICAgY29uc3QgbGFtYmRhVmVyc2lvbiA9IGxhbWJkYS5WZXJzaW9uLmZyb21WZXJzaW9uQXJuKHN0YWNrLCAnVmVyc2lvbicsICdhcm46YXdzOmxhbWJkYTpmdW5jdGlvbi1yZWdpb246MTExMTExMTExMTExOmZ1bmN0aW9uOmZ1bmN0aW9uLW5hbWUnKTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ015RGlzdHJpYnV0aW9uJywge1xuICAgICAgb3JpZ2luQ29uZmlnczogW1xuICAgICAgICB7XG4gICAgICAgICAgczNPcmlnaW5Tb3VyY2U6IHsgczNCdWNrZXRTb3VyY2U6IHNvdXJjZUJ1Y2tldCB9LFxuICAgICAgICAgIGJlaGF2aW9yczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSxcbiAgICAgICAgICAgICAgbGFtYmRhRnVuY3Rpb25Bc3NvY2lhdGlvbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBldmVudFR5cGU6IExhbWJkYUVkZ2VFdmVudFR5cGUuT1JJR0lOX1JFUVVFU1QsXG4gICAgICAgICAgICAgICAgICBsYW1iZGFGdW5jdGlvbjogbGFtYmRhVmVyc2lvbixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykucmVzb3VyY2VDb3VudElzKCdBV1M6OklBTTo6Um9sZScsIDApO1xuXG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZW8gcmVzdHJpY3Rpb24nLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJ3N1Y2Nlc3MnLCAoKSA9PiB7XG4gICAgICB0ZXN0KCdhbGxvd2xpc3QnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBjb25zdCBzb3VyY2VCdWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG5cbiAgICAgICAgbmV3IENsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24oc3RhY2ssICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHknLCB7XG4gICAgICAgICAgb3JpZ2luQ29uZmlnczogW3tcbiAgICAgICAgICAgIHMzT3JpZ2luU291cmNlOiB7IHMzQnVja2V0U291cmNlOiBzb3VyY2VCdWNrZXQgfSxcbiAgICAgICAgICAgIGJlaGF2aW9yczogW3sgaXNEZWZhdWx0QmVoYXZpb3I6IHRydWUgfV0sXG4gICAgICAgICAgfV0sXG4gICAgICAgICAgZ2VvUmVzdHJpY3Rpb246IEdlb1Jlc3RyaWN0aW9uLmFsbG93bGlzdCgnVVMnLCAnVUsnKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS50ZW1wbGF0ZU1hdGNoZXMoe1xuICAgICAgICAgICdSZXNvdXJjZXMnOiB7XG4gICAgICAgICAgICAnQnVja2V0ODM5MDhFNzcnOiB7XG4gICAgICAgICAgICAgICdUeXBlJzogJ0FXUzo6UzM6OkJ1Y2tldCcsXG4gICAgICAgICAgICAgICdEZWxldGlvblBvbGljeSc6ICdSZXRhaW4nLFxuICAgICAgICAgICAgICAnVXBkYXRlUmVwbGFjZVBvbGljeSc6ICdSZXRhaW4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHlDRkRpc3RyaWJ1dGlvbjQ3RTM5ODNCJzoge1xuICAgICAgICAgICAgICAnVHlwZSc6ICdBV1M6OkNsb3VkRnJvbnQ6OkRpc3RyaWJ1dGlvbicsXG4gICAgICAgICAgICAgICdQcm9wZXJ0aWVzJzoge1xuICAgICAgICAgICAgICAgICdEaXN0cmlidXRpb25Db25maWcnOiB7XG4gICAgICAgICAgICAgICAgICAnRGVmYXVsdFJvb3RPYmplY3QnOiAnaW5kZXguaHRtbCcsXG4gICAgICAgICAgICAgICAgICAnT3JpZ2lucyc6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICdDb25uZWN0aW9uQXR0ZW1wdHMnOiAzLFxuICAgICAgICAgICAgICAgICAgICAgICdDb25uZWN0aW9uVGltZW91dCc6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICdEb21haW5OYW1lJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdCdWNrZXQ4MzkwOEU3NycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdSZWdpb25hbERvbWFpbk5hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICdJZCc6ICdvcmlnaW4xJyxcbiAgICAgICAgICAgICAgICAgICAgICAnUzNPcmlnaW5Db25maWcnOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAnVmlld2VyQ2VydGlmaWNhdGUnOiB7XG4gICAgICAgICAgICAgICAgICAgICdDbG91ZEZyb250RGVmYXVsdENlcnRpZmljYXRlJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAnUHJpY2VDbGFzcyc6ICdQcmljZUNsYXNzXzEwMCcsXG4gICAgICAgICAgICAgICAgICAnRGVmYXVsdENhY2hlQmVoYXZpb3InOiB7XG4gICAgICAgICAgICAgICAgICAgICdBbGxvd2VkTWV0aG9kcyc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgICAnSEVBRCcsXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdDYWNoZWRNZXRob2RzJzogW1xuICAgICAgICAgICAgICAgICAgICAgICdHRVQnLFxuICAgICAgICAgICAgICAgICAgICAgICdIRUFEJyxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ1RhcmdldE9yaWdpbklkJzogJ29yaWdpbjEnLFxuICAgICAgICAgICAgICAgICAgICAnVmlld2VyUHJvdG9jb2xQb2xpY3knOiAncmVkaXJlY3QtdG8taHR0cHMnLFxuICAgICAgICAgICAgICAgICAgICAnRm9yd2FyZGVkVmFsdWVzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICdRdWVyeVN0cmluZyc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICdDb29raWVzJzogeyAnRm9yd2FyZCc6ICdub25lJyB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnQ29tcHJlc3MnOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICdFbmFibGVkJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICdJUFY2RW5hYmxlZCc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAnSHR0cFZlcnNpb24nOiAnaHR0cDInLFxuICAgICAgICAgICAgICAgICAgJ1Jlc3RyaWN0aW9ucyc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0dlb1Jlc3RyaWN0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICAgICdMb2NhdGlvbnMnOiBbJ1VTJywgJ1VLJ10sXG4gICAgICAgICAgICAgICAgICAgICAgJ1Jlc3RyaWN0aW9uVHlwZSc6ICd3aGl0ZWxpc3QnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuXG4gICAgICB9KTtcbiAgICAgIHRlc3QoJ2RlbnlsaXN0JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgICAgY29uc3Qgc291cmNlQnVja2V0ID0gbmV3IHMzLkJ1Y2tldChzdGFjaywgJ0J1Y2tldCcpO1xuXG4gICAgICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnQW5BbWF6aW5nV2Vic2l0ZVByb2JhYmx5Jywge1xuICAgICAgICAgIG9yaWdpbkNvbmZpZ3M6IFt7XG4gICAgICAgICAgICBzM09yaWdpblNvdXJjZTogeyBzM0J1Y2tldFNvdXJjZTogc291cmNlQnVja2V0IH0sXG4gICAgICAgICAgICBiZWhhdmlvcnM6IFt7IGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlIH1dLFxuICAgICAgICAgIH1dLFxuICAgICAgICAgIGdlb1Jlc3RyaWN0aW9uOiBHZW9SZXN0cmljdGlvbi5kZW55bGlzdCgnVVMnKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS50ZW1wbGF0ZU1hdGNoZXMoe1xuICAgICAgICAgICdSZXNvdXJjZXMnOiB7XG4gICAgICAgICAgICAnQnVja2V0ODM5MDhFNzcnOiB7XG4gICAgICAgICAgICAgICdUeXBlJzogJ0FXUzo6UzM6OkJ1Y2tldCcsXG4gICAgICAgICAgICAgICdEZWxldGlvblBvbGljeSc6ICdSZXRhaW4nLFxuICAgICAgICAgICAgICAnVXBkYXRlUmVwbGFjZVBvbGljeSc6ICdSZXRhaW4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdBbkFtYXppbmdXZWJzaXRlUHJvYmFibHlDRkRpc3RyaWJ1dGlvbjQ3RTM5ODNCJzoge1xuICAgICAgICAgICAgICAnVHlwZSc6ICdBV1M6OkNsb3VkRnJvbnQ6OkRpc3RyaWJ1dGlvbicsXG4gICAgICAgICAgICAgICdQcm9wZXJ0aWVzJzoge1xuICAgICAgICAgICAgICAgICdEaXN0cmlidXRpb25Db25maWcnOiB7XG4gICAgICAgICAgICAgICAgICAnRGVmYXVsdFJvb3RPYmplY3QnOiAnaW5kZXguaHRtbCcsXG4gICAgICAgICAgICAgICAgICAnT3JpZ2lucyc6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICdDb25uZWN0aW9uQXR0ZW1wdHMnOiAzLFxuICAgICAgICAgICAgICAgICAgICAgICdDb25uZWN0aW9uVGltZW91dCc6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICdEb21haW5OYW1lJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdCdWNrZXQ4MzkwOEU3NycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdSZWdpb25hbERvbWFpbk5hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICdJZCc6ICdvcmlnaW4xJyxcbiAgICAgICAgICAgICAgICAgICAgICAnUzNPcmlnaW5Db25maWcnOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAnVmlld2VyQ2VydGlmaWNhdGUnOiB7XG4gICAgICAgICAgICAgICAgICAgICdDbG91ZEZyb250RGVmYXVsdENlcnRpZmljYXRlJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAnUHJpY2VDbGFzcyc6ICdQcmljZUNsYXNzXzEwMCcsXG4gICAgICAgICAgICAgICAgICAnRGVmYXVsdENhY2hlQmVoYXZpb3InOiB7XG4gICAgICAgICAgICAgICAgICAgICdBbGxvd2VkTWV0aG9kcyc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgICAnSEVBRCcsXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdDYWNoZWRNZXRob2RzJzogW1xuICAgICAgICAgICAgICAgICAgICAgICdHRVQnLFxuICAgICAgICAgICAgICAgICAgICAgICdIRUFEJyxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ1RhcmdldE9yaWdpbklkJzogJ29yaWdpbjEnLFxuICAgICAgICAgICAgICAgICAgICAnVmlld2VyUHJvdG9jb2xQb2xpY3knOiAncmVkaXJlY3QtdG8taHR0cHMnLFxuICAgICAgICAgICAgICAgICAgICAnRm9yd2FyZGVkVmFsdWVzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICdRdWVyeVN0cmluZyc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICdDb29raWVzJzogeyAnRm9yd2FyZCc6ICdub25lJyB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnQ29tcHJlc3MnOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICdFbmFibGVkJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICdJUFY2RW5hYmxlZCc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAnSHR0cFZlcnNpb24nOiAnaHR0cDInLFxuICAgICAgICAgICAgICAgICAgJ1Jlc3RyaWN0aW9ucyc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0dlb1Jlc3RyaWN0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICAgICdMb2NhdGlvbnMnOiBbJ1VTJ10sXG4gICAgICAgICAgICAgICAgICAgICAgJ1Jlc3RyaWN0aW9uVHlwZSc6ICdibGFja2xpc3QnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnZXJyb3InLCAoKSA9PiB7XG4gICAgICB0ZXN0KCd0aHJvd3MgaWYgbG9jYXRpb25zIGlzIGVtcHR5IGFycmF5JywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICAgIEdlb1Jlc3RyaWN0aW9uLmFsbG93bGlzdCgpO1xuICAgICAgICB9KS50b1Rocm93KC9TaG91bGQgcHJvdmlkZSBhdCBsZWFzdCAxIGxvY2F0aW9uLyk7XG5cbiAgICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgICBHZW9SZXN0cmljdGlvbi5kZW55bGlzdCgpO1xuICAgICAgICB9KS50b1Rocm93KC9TaG91bGQgcHJvdmlkZSBhdCBsZWFzdCAxIGxvY2F0aW9uLyk7XG5cblxuICAgICAgfSk7XG4gICAgICB0ZXN0KCd0aHJvd3MgaWYgbG9jYXRpb25zIGZvcm1hdCBpcyB3cm9uZycsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgICBHZW9SZXN0cmljdGlvbi5hbGxvd2xpc3QoJ3VzJyk7XG4gICAgICAgIH0pLnRvVGhyb3coL0ludmFsaWQgbG9jYXRpb24gZm9ybWF0IGZvciBsb2NhdGlvbjogdXMsIGxvY2F0aW9uIHNob3VsZCBiZSB0d28tbGV0dGVyIGFuZCB1cHBlcmNhc2UgY291bnRyeSBJU08gMzE2Ni0xLWFscGhhLTIgY29kZS8pO1xuXG4gICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgR2VvUmVzdHJpY3Rpb24uZGVueWxpc3QoJ3VzJyk7XG4gICAgICAgIH0pLnRvVGhyb3coL0ludmFsaWQgbG9jYXRpb24gZm9ybWF0IGZvciBsb2NhdGlvbjogdXMsIGxvY2F0aW9uIHNob3VsZCBiZSB0d28tbGV0dGVyIGFuZCB1cHBlcmNhc2UgY291bnRyeSBJU08gMzE2Ni0xLWFscGhhLTIgY29kZS8pO1xuXG5cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ29ubmVjdGlvbiBiZWhhdmlvcnMgYmV0d2VlbiBDbG91ZEZyb250IGFuZCB5b3VyIG9yaWdpbicsICgpID0+IHtcbiAgICBkZXNjcmliZSgnc3VjY2VzcycsICgpID0+IHtcbiAgICAgIHRlc3QoJ2Nvbm5lY3Rpb25BdHRlbXB0cyA9IDEnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnRGlzdHJpYnV0aW9uJywge1xuICAgICAgICAgICAgb3JpZ2luQ29uZmlnczogW3tcbiAgICAgICAgICAgICAgYmVoYXZpb3JzOiBbeyBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSB9XSxcbiAgICAgICAgICAgICAgY29ubmVjdGlvbkF0dGVtcHRzOiAxLFxuICAgICAgICAgICAgICBjdXN0b21PcmlnaW5Tb3VyY2U6IHsgZG9tYWluTmFtZTogJ215b3JpZ2luLmNvbScgfSxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KS5ub3QudG9UaHJvdygvY29ubmVjdGlvbkF0dGVtcHRzOiBZb3UgY2FuIHNwZWNpZnkgMSwgMiwgb3IgMyBhcyB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLi8pO1xuXG4gICAgICB9KTtcbiAgICAgIHRlc3QoJzMgPSBjb25uZWN0aW9uQXR0ZW1wdHMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnRGlzdHJpYnV0aW9uJywge1xuICAgICAgICAgICAgb3JpZ2luQ29uZmlnczogW3tcbiAgICAgICAgICAgICAgYmVoYXZpb3JzOiBbeyBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSB9XSxcbiAgICAgICAgICAgICAgY29ubmVjdGlvbkF0dGVtcHRzOiAzLFxuICAgICAgICAgICAgICBjdXN0b21PcmlnaW5Tb3VyY2U6IHsgZG9tYWluTmFtZTogJ215b3JpZ2luLmNvbScgfSxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KS5ub3QudG9UaHJvdygvY29ubmVjdGlvbkF0dGVtcHRzOiBZb3UgY2FuIHNwZWNpZnkgMSwgMiwgb3IgMyBhcyB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLi8pO1xuXG4gICAgICB9KTtcbiAgICAgIHRlc3QoJ2Nvbm5lY3Rpb25UaW1lb3V0ID0gMScsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgbmV3IENsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24oc3RhY2ssICdEaXN0cmlidXRpb24nLCB7XG4gICAgICAgICAgICBvcmlnaW5Db25maWdzOiBbe1xuICAgICAgICAgICAgICBiZWhhdmlvcnM6IFt7IGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlIH1dLFxuICAgICAgICAgICAgICBjb25uZWN0aW9uVGltZW91dDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMSksXG4gICAgICAgICAgICAgIGN1c3RvbU9yaWdpblNvdXJjZTogeyBkb21haW5OYW1lOiAnbXlvcmlnaW4uY29tJyB9LFxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLm5vdC50b1Rocm93KC9jb25uZWN0aW9uVGltZW91dDogWW91IGNhbiBzcGVjaWZ5IGEgbnVtYmVyIG9mIHNlY29uZHMgYmV0d2VlbiAxIGFuZCAxMCAoaW5jbHVzaXZlKS4vKTtcblxuICAgICAgfSk7XG4gICAgICB0ZXN0KCcxMCA9IGNvbm5lY3Rpb25UaW1lb3V0JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0Rpc3RyaWJ1dGlvbicsIHtcbiAgICAgICAgICAgIG9yaWdpbkNvbmZpZ3M6IFt7XG4gICAgICAgICAgICAgIGJlaGF2aW9yczogW3sgaXNEZWZhdWx0QmVoYXZpb3I6IHRydWUgfV0sXG4gICAgICAgICAgICAgIGNvbm5lY3Rpb25UaW1lb3V0OiBjZGsuRHVyYXRpb24uc2Vjb25kcygxMCksXG4gICAgICAgICAgICAgIGN1c3RvbU9yaWdpblNvdXJjZTogeyBkb21haW5OYW1lOiAnbXlvcmlnaW4uY29tJyB9LFxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLm5vdC50b1Rocm93KC9jb25uZWN0aW9uVGltZW91dDogWW91IGNhbiBzcGVjaWZ5IGEgbnVtYmVyIG9mIHNlY29uZHMgYmV0d2VlbiAxIGFuZCAxMCAoaW5jbHVzaXZlKS4vKTtcblxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ2Vycm9ycycsICgpID0+IHtcbiAgICAgIHRlc3QoJ2Nvbm5lY3Rpb25BdHRlbXB0cyA9IDEuMScsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgbmV3IENsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24oc3RhY2ssICdEaXN0cmlidXRpb24nLCB7XG4gICAgICAgICAgICBvcmlnaW5Db25maWdzOiBbe1xuICAgICAgICAgICAgICBiZWhhdmlvcnM6IFt7IGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlIH1dLFxuICAgICAgICAgICAgICBjb25uZWN0aW9uQXR0ZW1wdHM6IDEuMSxcbiAgICAgICAgICAgICAgY3VzdG9tT3JpZ2luU291cmNlOiB7IGRvbWFpbk5hbWU6ICdteW9yaWdpbi5jb20nIH0sXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSkudG9UaHJvdygvY29ubmVjdGlvbkF0dGVtcHRzOiBZb3UgY2FuIHNwZWNpZnkgMSwgMiwgb3IgMyBhcyB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLi8pO1xuXG4gICAgICB9KTtcbiAgICAgIHRlc3QoJ2Nvbm5lY3Rpb25BdHRlbXB0cyA9IC0xJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0Rpc3RyaWJ1dGlvbicsIHtcbiAgICAgICAgICAgIG9yaWdpbkNvbmZpZ3M6IFt7XG4gICAgICAgICAgICAgIGJlaGF2aW9yczogW3sgaXNEZWZhdWx0QmVoYXZpb3I6IHRydWUgfV0sXG4gICAgICAgICAgICAgIGNvbm5lY3Rpb25BdHRlbXB0czogLTEsXG4gICAgICAgICAgICAgIGN1c3RvbU9yaWdpblNvdXJjZTogeyBkb21haW5OYW1lOiAnbXlvcmlnaW4uY29tJyB9LFxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRvVGhyb3coL2Nvbm5lY3Rpb25BdHRlbXB0czogWW91IGNhbiBzcGVjaWZ5IDEsIDIsIG9yIDMgYXMgdGhlIG51bWJlciBvZiBhdHRlbXB0cy4vKTtcblxuICAgICAgfSk7XG4gICAgICB0ZXN0KCdjb25uZWN0aW9uQXR0ZW1wdHMgPCAxJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgICBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbihzdGFjaywgJ0Rpc3RyaWJ1dGlvbicsIHtcbiAgICAgICAgICAgIG9yaWdpbkNvbmZpZ3M6IFt7XG4gICAgICAgICAgICAgIGJlaGF2aW9yczogW3sgaXNEZWZhdWx0QmVoYXZpb3I6IHRydWUgfV0sXG4gICAgICAgICAgICAgIGNvbm5lY3Rpb25BdHRlbXB0czogMCxcbiAgICAgICAgICAgICAgY3VzdG9tT3JpZ2luU291cmNlOiB7IGRvbWFpbk5hbWU6ICdteW9yaWdpbi5jb20nIH0sXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSkudG9UaHJvdygvY29ubmVjdGlvbkF0dGVtcHRzOiBZb3UgY2FuIHNwZWNpZnkgMSwgMiwgb3IgMyBhcyB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLi8pO1xuXG4gICAgICB9KTtcbiAgICAgIHRlc3QoJzMgPCBjb25uZWN0aW9uQXR0ZW1wdHMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnRGlzdHJpYnV0aW9uJywge1xuICAgICAgICAgICAgb3JpZ2luQ29uZmlnczogW3tcbiAgICAgICAgICAgICAgYmVoYXZpb3JzOiBbeyBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSB9XSxcbiAgICAgICAgICAgICAgY29ubmVjdGlvbkF0dGVtcHRzOiA0LFxuICAgICAgICAgICAgICBjdXN0b21PcmlnaW5Tb3VyY2U6IHsgZG9tYWluTmFtZTogJ215b3JpZ2luLmNvbScgfSxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KS50b1Rocm93KC9jb25uZWN0aW9uQXR0ZW1wdHM6IFlvdSBjYW4gc3BlY2lmeSAxLCAyLCBvciAzIGFzIHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuLyk7XG5cbiAgICAgIH0pO1xuICAgICAgdGVzdCgnY29ubmVjdGlvblRpbWVvdXQgPSAxLjEnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnRGlzdHJpYnV0aW9uJywge1xuICAgICAgICAgICAgb3JpZ2luQ29uZmlnczogW3tcbiAgICAgICAgICAgICAgYmVoYXZpb3JzOiBbeyBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSB9XSxcbiAgICAgICAgICAgICAgY29ubmVjdGlvblRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDEuMSksXG4gICAgICAgICAgICAgIGN1c3RvbU9yaWdpblNvdXJjZTogeyBkb21haW5OYW1lOiAnbXlvcmlnaW4uY29tJyB9LFxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRvVGhyb3coL211c3QgYmUgYSB3aG9sZSBudW1iZXIgb2YvKTtcblxuICAgICAgfSk7XG4gICAgICB0ZXN0KCdjb25uZWN0aW9uVGltZW91dCA8IDEnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICAgIG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnRGlzdHJpYnV0aW9uJywge1xuICAgICAgICAgICAgb3JpZ2luQ29uZmlnczogW3tcbiAgICAgICAgICAgICAgYmVoYXZpb3JzOiBbeyBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSB9XSxcbiAgICAgICAgICAgICAgY29ubmVjdGlvblRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDApLFxuICAgICAgICAgICAgICBjdXN0b21PcmlnaW5Tb3VyY2U6IHsgZG9tYWluTmFtZTogJ215b3JpZ2luLmNvbScgfSxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KS50b1Rocm93KC9jb25uZWN0aW9uVGltZW91dDogWW91IGNhbiBzcGVjaWZ5IGEgbnVtYmVyIG9mIHNlY29uZHMgYmV0d2VlbiAxIGFuZCAxMCBcXChpbmNsdXNpdmVcXCkuLyk7XG5cbiAgICAgIH0pO1xuICAgICAgdGVzdCgnMTAgPCBjb25uZWN0aW9uVGltZW91dCcsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgbmV3IENsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24oc3RhY2ssICdEaXN0cmlidXRpb24nLCB7XG4gICAgICAgICAgICBvcmlnaW5Db25maWdzOiBbe1xuICAgICAgICAgICAgICBiZWhhdmlvcnM6IFt7IGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlIH1dLFxuICAgICAgICAgICAgICBjb25uZWN0aW9uVGltZW91dDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMTEpLFxuICAgICAgICAgICAgICBjdXN0b21PcmlnaW5Tb3VyY2U6IHsgZG9tYWluTmFtZTogJ215b3JpZ2luLmNvbScgfSxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KS50b1Rocm93KC9jb25uZWN0aW9uVGltZW91dDogWW91IGNhbiBzcGVjaWZ5IGEgbnVtYmVyIG9mIHNlY29uZHMgYmV0d2VlbiAxIGFuZCAxMCBcXChpbmNsdXNpdmVcXCkuLyk7XG5cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdleGlzdGluZyBkaXN0cmlidXRpb25zIGNhbiBiZSBpbXBvcnRlZCcsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBkaXN0ID0gQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbi5mcm9tRGlzdHJpYnV0aW9uQXR0cmlidXRlcyhzdGFjaywgJ0ltcG9ydGVkRGlzdCcsIHtcbiAgICAgIGRvbWFpbk5hbWU6ICdkMTExMTExYWJjZGVmOC5jbG91ZGZyb250Lm5ldCcsXG4gICAgICBkaXN0cmlidXRpb25JZDogJzAxMjM0NUFCQ0RFRicsXG4gICAgfSk7XG5cbiAgICBleHBlY3QoZGlzdC5kaXN0cmlidXRpb25Eb21haW5OYW1lKS50b0VxdWFsKCdkMTExMTExYWJjZGVmOC5jbG91ZGZyb250Lm5ldCcpO1xuICAgIGV4cGVjdChkaXN0LmRpc3RyaWJ1dGlvbklkKS50b0VxdWFsKCcwMTIzNDVBQkNERUYnKTtcblxuXG4gIH0pO1xufSk7XG5cbnRlc3QoJ2dyYW50cyBjdXN0b20gYWN0aW9ucycsICgpID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IGRpc3RyaWJ1dGlvbiA9IG5ldyBDbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHN0YWNrLCAnRGlzdHJpYnV0aW9uJywge1xuICAgIG9yaWdpbkNvbmZpZ3M6IFt7XG4gICAgICBjdXN0b21PcmlnaW5Tb3VyY2U6IHsgZG9tYWluTmFtZTogJ215b3JpZ2luLmNvbScgfSxcbiAgICAgIGJlaGF2aW9yczogW3sgaXNEZWZhdWx0QmVoYXZpb3I6IHRydWUgfV0sXG4gICAgfV0sXG4gIH0pO1xuICBjb25zdCByb2xlID0gbmV3IGlhbS5Sb2xlKHN0YWNrLCAnUm9sZScsIHtcbiAgICBhc3N1bWVkQnk6IG5ldyBpYW0uQWNjb3VudFJvb3RQcmluY2lwYWwoKSxcbiAgfSk7XG4gIGRpc3RyaWJ1dGlvbi5ncmFudChyb2xlLCAnY2xvdWRmcm9udDpMaXN0SW52YWxpZGF0aW9ucycsICdjbG91ZGZyb250OkdldEludmFsaWRhdGlvbicpO1xuXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OklBTTo6UG9saWN5Jywge1xuICAgIFBvbGljeURvY3VtZW50OiB7XG4gICAgICBTdGF0ZW1lbnQ6IFtcbiAgICAgICAge1xuICAgICAgICAgIEFjdGlvbjogW1xuICAgICAgICAgICAgJ2Nsb3VkZnJvbnQ6TGlzdEludmFsaWRhdGlvbnMnLFxuICAgICAgICAgICAgJ2Nsb3VkZnJvbnQ6R2V0SW52YWxpZGF0aW9uJyxcbiAgICAgICAgICBdLFxuICAgICAgICAgIFJlc291cmNlOiB7XG4gICAgICAgICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICAgICAgICcnLCBbXG4gICAgICAgICAgICAgICAgJ2FybjonLCB7IFJlZjogJ0FXUzo6UGFydGl0aW9uJyB9LCAnOmNsb3VkZnJvbnQ6OicsIHsgUmVmOiAnQVdTOjpBY2NvdW50SWQnIH0sICc6ZGlzdHJpYnV0aW9uLycsXG4gICAgICAgICAgICAgICAgeyBSZWY6ICdEaXN0cmlidXRpb25DRkRpc3RyaWJ1dGlvbjg4MkE3MzEzJyB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCdncmFudHMgY3JlYXRlSW52YWxpZGF0aW9uJywgKCkgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgY29uc3QgZGlzdHJpYnV0aW9uID0gbmV3IENsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24oc3RhY2ssICdEaXN0cmlidXRpb24nLCB7XG4gICAgb3JpZ2luQ29uZmlnczogW3tcbiAgICAgIGN1c3RvbU9yaWdpblNvdXJjZTogeyBkb21haW5OYW1lOiAnbXlvcmlnaW4uY29tJyB9LFxuICAgICAgYmVoYXZpb3JzOiBbeyBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSB9XSxcbiAgICB9XSxcbiAgfSk7XG4gIGNvbnN0IHJvbGUgPSBuZXcgaWFtLlJvbGUoc3RhY2ssICdSb2xlJywge1xuICAgIGFzc3VtZWRCeTogbmV3IGlhbS5BY2NvdW50Um9vdFByaW5jaXBhbCgpLFxuICB9KTtcbiAgZGlzdHJpYnV0aW9uLmdyYW50Q3JlYXRlSW52YWxpZGF0aW9uKHJvbGUpO1xuXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OklBTTo6UG9saWN5Jywge1xuICAgIFBvbGljeURvY3VtZW50OiB7XG4gICAgICBTdGF0ZW1lbnQ6IFtcbiAgICAgICAge1xuICAgICAgICAgIEFjdGlvbjogJ2Nsb3VkZnJvbnQ6Q3JlYXRlSW52YWxpZGF0aW9uJyxcbiAgICAgICAgICBSZXNvdXJjZToge1xuICAgICAgICAgICAgJ0ZuOjpKb2luJzogW1xuICAgICAgICAgICAgICAnJywgW1xuICAgICAgICAgICAgICAgICdhcm46JywgeyBSZWY6ICdBV1M6OlBhcnRpdGlvbicgfSwgJzpjbG91ZGZyb250OjonLCB7IFJlZjogJ0FXUzo6QWNjb3VudElkJyB9LCAnOmRpc3RyaWJ1dGlvbi8nLFxuICAgICAgICAgICAgICAgIHsgUmVmOiAnRGlzdHJpYnV0aW9uQ0ZEaXN0cmlidXRpb244ODJBNzMxMycgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgfSk7XG59KTtcbiJdfQ==