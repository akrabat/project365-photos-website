"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const cloudwatch = require("../../aws-cloudwatch");
const core_1 = require("../../core");
const actions = require("../lib");
test('can use ssm with critical severity and performance category as alarm action', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const alarm = new cloudwatch.Alarm(stack, 'Alarm', {
        metric: new cloudwatch.Metric({
            namespace: 'AWS',
            metricName: 'Test',
        }),
        evaluationPeriods: 3,
        threshold: 100,
    });
    // WHEN
    alarm.addAlarmAction(new actions.SsmAction(actions.OpsItemSeverity.CRITICAL, actions.OpsItemCategory.PERFORMANCE));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Alarm', {
        AlarmActions: [
            {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':ssm:',
                        {
                            Ref: 'AWS::Region',
                        },
                        ':',
                        {
                            Ref: 'AWS::AccountId',
                        },
                        ':opsitem:1#CATEGORY=Performance',
                    ],
                ],
            },
        ],
    });
});
test('can use ssm with medium severity and no category as alarm action', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const alarm = new cloudwatch.Alarm(stack, 'Alarm', {
        metric: new cloudwatch.Metric({
            namespace: 'AWS',
            metricName: 'Test',
        }),
        evaluationPeriods: 3,
        threshold: 100,
    });
    // WHEN
    alarm.addAlarmAction(new actions.SsmAction(actions.OpsItemSeverity.MEDIUM));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Alarm', {
        AlarmActions: [
            {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':ssm:',
                        {
                            Ref: 'AWS::Region',
                        },
                        ':',
                        {
                            Ref: 'AWS::AccountId',
                        },
                        ':opsitem:3',
                    ],
                ],
            },
        ],
    });
});
test('can use SSM Incident as alarm action', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const alarm = new cloudwatch.Alarm(stack, 'Alarm', {
        metric: new cloudwatch.Metric({ namespace: 'AWS', metricName: 'Test' }),
        evaluationPeriods: 3,
        threshold: 100,
    });
    // WHEN
    const responsePlanName = 'ResponsePlanName';
    alarm.addAlarmAction(new actions.SsmIncidentAction(responsePlanName));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Alarm', {
        AlarmActions: [
            {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':ssm-incidents::',
                        {
                            Ref: 'AWS::AccountId',
                        },
                        ':response-plan/ResponsePlanName',
                    ],
                ],
            },
        ],
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NtLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzc20udGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUE0QztBQUM1QyxtREFBbUQ7QUFDbkQscUNBQW1DO0FBQ25DLGtDQUFrQztBQUVsQyxJQUFJLENBQUMsNkVBQTZFLEVBQUUsR0FBRyxFQUFFO0lBQ3ZGLFFBQVE7SUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO0lBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO1FBQ2pELE1BQU0sRUFBRSxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUM7WUFDNUIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztRQUNGLGlCQUFpQixFQUFFLENBQUM7UUFDcEIsU0FBUyxFQUFFLEdBQUc7S0FDZixDQUFDLENBQUM7SUFFSCxPQUFPO0lBQ1AsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBRW5ILE9BQU87SUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyx3QkFBd0IsRUFBRTtRQUN4RSxZQUFZLEVBQUU7WUFDWjtnQkFDRSxVQUFVLEVBQUU7b0JBQ1YsRUFBRTtvQkFDRjt3QkFDRSxNQUFNO3dCQUNOOzRCQUNFLEdBQUcsRUFBRSxnQkFBZ0I7eUJBQ3RCO3dCQUNELE9BQU87d0JBQ1A7NEJBQ0UsR0FBRyxFQUFFLGFBQWE7eUJBQ25CO3dCQUNELEdBQUc7d0JBQ0g7NEJBQ0UsR0FBRyxFQUFFLGdCQUFnQjt5QkFDdEI7d0JBQ0QsaUNBQWlDO3FCQUNsQztpQkFDRjthQUNGO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUdILElBQUksQ0FBQyxrRUFBa0UsRUFBRSxHQUFHLEVBQUU7SUFDNUUsUUFBUTtJQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7SUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUU7UUFDakQsTUFBTSxFQUFFLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQztZQUM1QixTQUFTLEVBQUUsS0FBSztZQUNoQixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO1FBQ0YsaUJBQWlCLEVBQUUsQ0FBQztRQUNwQixTQUFTLEVBQUUsR0FBRztLQUNmLENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFNUUsT0FBTztJQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLHdCQUF3QixFQUFFO1FBQ3hFLFlBQVksRUFBRTtZQUNaO2dCQUNFLFVBQVUsRUFBRTtvQkFDVixFQUFFO29CQUNGO3dCQUNFLE1BQU07d0JBQ047NEJBQ0UsR0FBRyxFQUFFLGdCQUFnQjt5QkFDdEI7d0JBQ0QsT0FBTzt3QkFDUDs0QkFDRSxHQUFHLEVBQUUsYUFBYTt5QkFDbkI7d0JBQ0QsR0FBRzt3QkFDSDs0QkFDRSxHQUFHLEVBQUUsZ0JBQWdCO3lCQUN0Qjt3QkFDRCxZQUFZO3FCQUNiO2lCQUNGO2FBQ0Y7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtJQUNoRCxRQUFRO0lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztJQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtRQUNqRCxNQUFNLEVBQUUsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUM7UUFDdkUsaUJBQWlCLEVBQUUsQ0FBQztRQUNwQixTQUFTLEVBQUUsR0FBRztLQUNmLENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxNQUFNLGdCQUFnQixHQUFHLGtCQUFrQixDQUFDO0lBQzVDLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxPQUFPLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBRXRFLE9BQU87SUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyx3QkFBd0IsRUFBRTtRQUN4RSxZQUFZLEVBQUU7WUFDWjtnQkFDRSxVQUFVLEVBQUU7b0JBQ1YsRUFBRTtvQkFDRjt3QkFDRSxNQUFNO3dCQUNOOzRCQUNFLEdBQUcsRUFBRSxnQkFBZ0I7eUJBQ3RCO3dCQUNELGtCQUFrQjt3QkFDbEI7NEJBQ0UsR0FBRyxFQUFFLGdCQUFnQjt5QkFDdEI7d0JBQ0QsaUNBQWlDO3FCQUNsQztpQkFDRjthQUNGO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vYXNzZXJ0aW9ucyc7XG5pbXBvcnQgKiBhcyBjbG91ZHdhdGNoIGZyb20gJy4uLy4uL2F3cy1jbG91ZHdhdGNoJztcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4uL2xpYic7XG5cbnRlc3QoJ2NhbiB1c2Ugc3NtIHdpdGggY3JpdGljYWwgc2V2ZXJpdHkgYW5kIHBlcmZvcm1hbmNlIGNhdGVnb3J5IGFzIGFsYXJtIGFjdGlvbicsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgY29uc3QgYWxhcm0gPSBuZXcgY2xvdWR3YXRjaC5BbGFybShzdGFjaywgJ0FsYXJtJywge1xuICAgIG1ldHJpYzogbmV3IGNsb3Vkd2F0Y2guTWV0cmljKHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUycsXG4gICAgICBtZXRyaWNOYW1lOiAnVGVzdCcsXG4gICAgfSksXG4gICAgZXZhbHVhdGlvblBlcmlvZHM6IDMsXG4gICAgdGhyZXNob2xkOiAxMDAsXG4gIH0pO1xuXG4gIC8vIFdIRU5cbiAgYWxhcm0uYWRkQWxhcm1BY3Rpb24obmV3IGFjdGlvbnMuU3NtQWN0aW9uKGFjdGlvbnMuT3BzSXRlbVNldmVyaXR5LkNSSVRJQ0FMLCBhY3Rpb25zLk9wc0l0ZW1DYXRlZ29yeS5QRVJGT1JNQU5DRSkpO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q2xvdWRXYXRjaDo6QWxhcm0nLCB7XG4gICAgQWxhcm1BY3Rpb25zOiBbXG4gICAgICB7XG4gICAgICAgICdGbjo6Sm9pbic6IFtcbiAgICAgICAgICAnJyxcbiAgICAgICAgICBbXG4gICAgICAgICAgICAnYXJuOicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFJlZjogJ0FXUzo6UGFydGl0aW9uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnOnNzbTonLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBSZWY6ICdBV1M6OlJlZ2lvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJzonLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBSZWY6ICdBV1M6OkFjY291bnRJZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJzpvcHNpdGVtOjEjQ0FURUdPUlk9UGVyZm9ybWFuY2UnLFxuICAgICAgICAgIF0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xufSk7XG5cblxudGVzdCgnY2FuIHVzZSBzc20gd2l0aCBtZWRpdW0gc2V2ZXJpdHkgYW5kIG5vIGNhdGVnb3J5IGFzIGFsYXJtIGFjdGlvbicsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgY29uc3QgYWxhcm0gPSBuZXcgY2xvdWR3YXRjaC5BbGFybShzdGFjaywgJ0FsYXJtJywge1xuICAgIG1ldHJpYzogbmV3IGNsb3Vkd2F0Y2guTWV0cmljKHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUycsXG4gICAgICBtZXRyaWNOYW1lOiAnVGVzdCcsXG4gICAgfSksXG4gICAgZXZhbHVhdGlvblBlcmlvZHM6IDMsXG4gICAgdGhyZXNob2xkOiAxMDAsXG4gIH0pO1xuXG4gIC8vIFdIRU5cbiAgYWxhcm0uYWRkQWxhcm1BY3Rpb24obmV3IGFjdGlvbnMuU3NtQWN0aW9uKGFjdGlvbnMuT3BzSXRlbVNldmVyaXR5Lk1FRElVTSkpO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q2xvdWRXYXRjaDo6QWxhcm0nLCB7XG4gICAgQWxhcm1BY3Rpb25zOiBbXG4gICAgICB7XG4gICAgICAgICdGbjo6Sm9pbic6IFtcbiAgICAgICAgICAnJyxcbiAgICAgICAgICBbXG4gICAgICAgICAgICAnYXJuOicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFJlZjogJ0FXUzo6UGFydGl0aW9uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnOnNzbTonLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBSZWY6ICdBV1M6OlJlZ2lvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJzonLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBSZWY6ICdBV1M6OkFjY291bnRJZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJzpvcHNpdGVtOjMnLFxuICAgICAgICAgIF0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ2NhbiB1c2UgU1NNIEluY2lkZW50IGFzIGFsYXJtIGFjdGlvbicsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgY29uc3QgYWxhcm0gPSBuZXcgY2xvdWR3YXRjaC5BbGFybShzdGFjaywgJ0FsYXJtJywge1xuICAgIG1ldHJpYzogbmV3IGNsb3Vkd2F0Y2guTWV0cmljKHsgbmFtZXNwYWNlOiAnQVdTJywgbWV0cmljTmFtZTogJ1Rlc3QnIH0pLFxuICAgIGV2YWx1YXRpb25QZXJpb2RzOiAzLFxuICAgIHRocmVzaG9sZDogMTAwLFxuICB9KTtcblxuICAvLyBXSEVOXG4gIGNvbnN0IHJlc3BvbnNlUGxhbk5hbWUgPSAnUmVzcG9uc2VQbGFuTmFtZSc7XG4gIGFsYXJtLmFkZEFsYXJtQWN0aW9uKG5ldyBhY3Rpb25zLlNzbUluY2lkZW50QWN0aW9uKHJlc3BvbnNlUGxhbk5hbWUpKTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkNsb3VkV2F0Y2g6OkFsYXJtJywge1xuICAgIEFsYXJtQWN0aW9uczogW1xuICAgICAge1xuICAgICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICAgJycsXG4gICAgICAgICAgW1xuICAgICAgICAgICAgJ2FybjonLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBSZWY6ICdBV1M6OlBhcnRpdGlvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJzpzc20taW5jaWRlbnRzOjonLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBSZWY6ICdBV1M6OkFjY291bnRJZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJzpyZXNwb25zZS1wbGFuL1Jlc3BvbnNlUGxhbk5hbWUnLFxuICAgICAgICAgIF0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xufSk7XG5cbiJdfQ==