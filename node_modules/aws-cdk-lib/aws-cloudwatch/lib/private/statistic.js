"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeRawStringStatistic = exports.normalizeStatistic = exports.parseStatistic = exports.pairStatisticToString = exports.singleStatisticToString = void 0;
const stats_1 = require("../stats");
function parseSingleStatistic(statistic, prefix) {
    const prefixLower = prefix.toLowerCase();
    // Allow `P99` uppercase
    statistic = statistic.toLowerCase();
    if (!statistic.startsWith(prefixLower)) {
        return undefined;
    }
    let r = null;
    // p99.99
    // /^p(\d{1,2}(?:\.\d+)?)$/
    r = new RegExp(`^${prefixLower}(\\d{1,2}(?:\\.\\d+)?)$`).exec(statistic);
    if (r) {
        return {
            type: 'single',
            rawStatistic: statistic,
            statPrefix: prefixLower,
            value: parseFloat(r[1]),
        };
    }
    return undefined;
}
function parsePairStatistic(statistic, prefix) {
    const prefixUpper = prefix.toUpperCase();
    // Allow `tm(10%:90%)` lowercase
    statistic = statistic.toUpperCase();
    if (!statistic.startsWith(prefixUpper)) {
        return undefined;
    }
    const common = {
        type: 'pair',
        canBeSingleStat: false,
        rawStatistic: statistic,
        statPrefix: prefixUpper,
    };
    let r = null;
    // TM(99.999:)
    // /TM\((\d{1,2}(?:\.\d+)?):\)/
    r = new RegExp(`^${prefixUpper}\\((\\d+(?:\\.\\d+)?)\\:\\)$`).exec(statistic);
    if (r) {
        return {
            ...common,
            lower: parseFloat(r[1]),
            upper: undefined,
            isPercent: false,
        };
    }
    // TM(99.999%:)
    // /TM\((\d{1,2}(?:\.\d+)?)%:\)/
    r = new RegExp(`^${prefixUpper}\\((\\d{1,2}(?:\\.\\d+)?)%\\:\\)$`).exec(statistic);
    if (r) {
        return {
            ...common,
            lower: parseFloat(r[1]),
            upper: undefined,
            isPercent: true,
        };
    }
    // TM(:99.999)
    // /TM\(:(\d{1,2}(?:\.\d+)?)\)/
    r = new RegExp(`^${prefixUpper}\\(\\:(\\d+(?:\\.\\d+)?)\\)$`).exec(statistic);
    if (r) {
        return {
            ...common,
            lower: undefined,
            upper: parseFloat(r[1]),
            isPercent: false,
        };
    }
    // TM(:99.999%)
    // /TM\(:(\d{1,2}(?:\.\d+)?)%\)/
    // Note: this can be represented as a single stat! TM(:90%) = tm90
    r = new RegExp(`^${prefixUpper}\\(\\:(\\d{1,2}(?:\\.\\d+)?)%\\)$`).exec(statistic);
    if (r) {
        return {
            ...common,
            canBeSingleStat: true,
            asSingleStatStr: `${prefix.toLowerCase()}${r[1]}`,
            lower: undefined,
            upper: parseFloat(r[1]),
            isPercent: true,
        };
    }
    // TM(99.999:99.999)
    // /TM\((\d{1,2}(?:\.\d+)?):(\d{1,2}(?:\.\d+)?)\)/
    r = new RegExp(`^${prefixUpper}\\((\\d+(?:\\.\\d+)?)\\:(\\d+(?:\\.\\d+)?)\\)$`).exec(statistic);
    if (r) {
        return {
            ...common,
            lower: parseFloat(r[1]),
            upper: parseFloat(r[2]),
            isPercent: false,
        };
    }
    // TM(99.999%:99.999%)
    // /TM\((\d{1,2}(?:\.\d+)?)%:(\d{1,2}(?:\.\d+)?)%\)/
    r = new RegExp(`^${prefixUpper}\\((\\d{1,2}(?:\\.\\d+)?)%\\:(\\d{1,2}(?:\\.\\d+)?)%\\)$`).exec(statistic);
    if (r) {
        return {
            ...common,
            lower: parseFloat(r[1]),
            upper: parseFloat(r[2]),
            isPercent: true,
        };
    }
    return undefined;
}
function singleStatisticToString(parsed) {
    return `${parsed.statPrefix}${parsed.value}`;
}
exports.singleStatisticToString = singleStatisticToString;
function pairStatisticToString(parsed) {
    const percent = parsed.isPercent ? '%' : '';
    const lower = parsed.lower ? `${parsed.lower}${percent}` : '';
    const upper = parsed.upper ? `${parsed.upper}${percent}` : '';
    return `${parsed.statPrefix}(${lower}:${upper})`;
}
exports.pairStatisticToString = pairStatisticToString;
/**
 * Parse a statistic, returning the type of metric that was used
 */
function parseStatistic(stat) {
    const lowerStat = stat.toLowerCase();
    // Simple statistics
    const statMap = {
        average: stats_1.Stats.AVERAGE,
        avg: stats_1.Stats.AVERAGE,
        minimum: stats_1.Stats.MINIMUM,
        min: stats_1.Stats.MINIMUM,
        maximum: stats_1.Stats.MAXIMUM,
        max: stats_1.Stats.MAXIMUM,
        samplecount: stats_1.Stats.SAMPLE_COUNT,
        n: stats_1.Stats.SAMPLE_COUNT,
        sum: stats_1.Stats.SUM,
        iqm: stats_1.Stats.IQM,
    };
    if (lowerStat in statMap) {
        return {
            type: 'simple',
            statistic: statMap[lowerStat],
        };
    }
    let m = undefined;
    // Percentile statistics
    m = parseSingleStatistic(stat, 'p');
    if (m)
        return { ...m, statName: 'percentile' };
    // Trimmed mean statistics
    m = parseSingleStatistic(stat, 'tm') || parsePairStatistic(stat, 'tm');
    if (m)
        return { ...m, statName: 'trimmedMean' };
    // Winsorized mean statistics
    m = parseSingleStatistic(stat, 'wm') || parsePairStatistic(stat, 'wm');
    if (m)
        return { ...m, statName: 'winsorizedMean' };
    // Trimmed count statistics
    m = parseSingleStatistic(stat, 'tc') || parsePairStatistic(stat, 'tc');
    if (m)
        return { ...m, statName: 'trimmedCount' };
    // Trimmed sum statistics
    m = parseSingleStatistic(stat, 'ts') || parsePairStatistic(stat, 'ts');
    if (m)
        return { ...m, statName: 'trimmedSum' };
    return {
        type: 'generic',
        statistic: stat,
    };
}
exports.parseStatistic = parseStatistic;
function normalizeStatistic(parsed) {
    if (parsed.type === 'simple' || parsed.type === 'generic') {
        return parsed.statistic;
    }
    else if (parsed.type === 'single') {
        // Avoid parsing because we might get into
        // floating point rounding issues, return as-is but lowercase the stat prefix.
        return parsed.rawStatistic.toLowerCase();
    }
    else if (parsed.type === 'pair') {
        // Avoid parsing because we might get into
        // floating point rounding issues, return as-is but uppercase the stat prefix.
        return parsed.rawStatistic.toUpperCase();
    }
    return '';
}
exports.normalizeStatistic = normalizeStatistic;
function normalizeRawStringStatistic(stat) {
    const parsed = parseStatistic(stat);
    return normalizeStatistic(parsed);
}
exports.normalizeRawStringStatistic = normalizeRawStringStatistic;
//# sourceMappingURL=data:application/json;base64,