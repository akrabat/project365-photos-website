"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe('Alarm Status Widget', () => {
    test('alarm status widget', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const metric = new lib_1.Metric({ namespace: 'CDK', metricName: 'Test' });
        const alarm = new lib_1.Alarm(stack, 'Alarm', {
            metric,
            threshold: 1,
            evaluationPeriods: 1,
        });
        // WHEN
        const widget = new lib_1.AlarmStatusWidget({
            alarms: [alarm],
        });
        // THEN
        expect(stack.resolve(widget.toJson())).toEqual([
            {
                type: 'alarm',
                width: 6,
                height: 3,
                properties: {
                    title: 'Alarm Status',
                    alarms: [{ 'Fn::GetAtt': ['Alarm7103F465', 'Arn'] }],
                },
            },
        ]);
    });
    test('alarm status widget custom props', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const metric = new lib_1.Metric({ namespace: 'CDK', metricName: 'Test' });
        const alarm = new lib_1.Alarm(stack, 'Alarm', {
            metric,
            threshold: 1,
            evaluationPeriods: 1,
        });
        // WHEN
        const widget = new lib_1.AlarmStatusWidget({
            alarms: [alarm],
            sortBy: lib_1.AlarmStatusWidgetSortBy.STATE_UPDATED_TIMESTAMP,
            states: [lib_1.AlarmState.ALARM],
        });
        // THEN
        expect(stack.resolve(widget.toJson())).toEqual([
            {
                type: 'alarm',
                width: 6,
                height: 3,
                properties: {
                    title: 'Alarm Status',
                    alarms: [{ 'Fn::GetAtt': ['Alarm7103F465', 'Arn'] }],
                    sortBy: 'stateUpdatedTimestamp',
                    states: ['ALARM'],
                },
            },
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxhcm0tc3RhdHVzLXdpZGdldC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWxhcm0tc3RhdHVzLXdpZGdldC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQW1DO0FBQ25DLGdDQUErRjtBQUMvRixRQUFRLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO0lBQ25DLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7UUFDL0IsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFNLENBQUMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUU7WUFDdEMsTUFBTTtZQUNOLFNBQVMsRUFBRSxDQUFDO1lBQ1osaUJBQWlCLEVBQUUsQ0FBQztTQUNyQixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxNQUFNLEdBQUcsSUFBSSx1QkFBaUIsQ0FBQztZQUNuQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUM7U0FDaEIsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQzdDO2dCQUNFLElBQUksRUFBRSxPQUFPO2dCQUNiLEtBQUssRUFBRSxDQUFDO2dCQUNSLE1BQU0sRUFBRSxDQUFDO2dCQUNULFVBQVUsRUFBRTtvQkFDVixLQUFLLEVBQUUsY0FBYztvQkFDckIsTUFBTSxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQztpQkFDckQ7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtRQUM1QyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQU0sQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDcEUsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtZQUN0QyxNQUFNO1lBQ04sU0FBUyxFQUFFLENBQUM7WUFDWixpQkFBaUIsRUFBRSxDQUFDO1NBQ3JCLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxNQUFNLE1BQU0sR0FBRyxJQUFJLHVCQUFpQixDQUFDO1lBQ25DLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQztZQUNmLE1BQU0sRUFBRSw2QkFBdUIsQ0FBQyx1QkFBdUI7WUFDdkQsTUFBTSxFQUFFLENBQUMsZ0JBQVUsQ0FBQyxLQUFLLENBQUM7U0FDM0IsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQzdDO2dCQUNFLElBQUksRUFBRSxPQUFPO2dCQUNiLEtBQUssRUFBRSxDQUFDO2dCQUNSLE1BQU0sRUFBRSxDQUFDO2dCQUNULFVBQVUsRUFBRTtvQkFDVixLQUFLLEVBQUUsY0FBYztvQkFDckIsTUFBTSxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQztvQkFDcEQsTUFBTSxFQUFFLHVCQUF1QjtvQkFDL0IsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDO2lCQUNsQjthQUNGO1NBQ0YsQ0FBQyxDQUFDO0lBRUwsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBNZXRyaWMsIEFsYXJtLCBBbGFybVN0YXR1c1dpZGdldCwgQWxhcm1TdGF0dXNXaWRnZXRTb3J0QnksIEFsYXJtU3RhdGUgfSBmcm9tICcuLi9saWInO1xuZGVzY3JpYmUoJ0FsYXJtIFN0YXR1cyBXaWRnZXQnLCAoKSA9PiB7XG4gIHRlc3QoJ2FsYXJtIHN0YXR1cyB3aWRnZXQnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IG1ldHJpYyA9IG5ldyBNZXRyaWMoeyBuYW1lc3BhY2U6ICdDREsnLCBtZXRyaWNOYW1lOiAnVGVzdCcgfSk7XG4gICAgY29uc3QgYWxhcm0gPSBuZXcgQWxhcm0oc3RhY2ssICdBbGFybScsIHtcbiAgICAgIG1ldHJpYyxcbiAgICAgIHRocmVzaG9sZDogMSxcbiAgICAgIGV2YWx1YXRpb25QZXJpb2RzOiAxLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHdpZGdldCA9IG5ldyBBbGFybVN0YXR1c1dpZGdldCh7XG4gICAgICBhbGFybXM6IFthbGFybV0sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHN0YWNrLnJlc29sdmUod2lkZ2V0LnRvSnNvbigpKSkudG9FcXVhbChbXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdhbGFybScsXG4gICAgICAgIHdpZHRoOiA2LFxuICAgICAgICBoZWlnaHQ6IDMsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICB0aXRsZTogJ0FsYXJtIFN0YXR1cycsXG4gICAgICAgICAgYWxhcm1zOiBbeyAnRm46OkdldEF0dCc6IFsnQWxhcm03MTAzRjQ2NScsICdBcm4nXSB9XSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXSk7XG4gIH0pO1xuICB0ZXN0KCdhbGFybSBzdGF0dXMgd2lkZ2V0IGN1c3RvbSBwcm9wcycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgbWV0cmljID0gbmV3IE1ldHJpYyh7IG5hbWVzcGFjZTogJ0NESycsIG1ldHJpY05hbWU6ICdUZXN0JyB9KTtcbiAgICBjb25zdCBhbGFybSA9IG5ldyBBbGFybShzdGFjaywgJ0FsYXJtJywge1xuICAgICAgbWV0cmljLFxuICAgICAgdGhyZXNob2xkOiAxLFxuICAgICAgZXZhbHVhdGlvblBlcmlvZHM6IDEsXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3Qgd2lkZ2V0ID0gbmV3IEFsYXJtU3RhdHVzV2lkZ2V0KHtcbiAgICAgIGFsYXJtczogW2FsYXJtXSxcbiAgICAgIHNvcnRCeTogQWxhcm1TdGF0dXNXaWRnZXRTb3J0QnkuU1RBVEVfVVBEQVRFRF9USU1FU1RBTVAsXG4gICAgICBzdGF0ZXM6IFtBbGFybVN0YXRlLkFMQVJNXSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qoc3RhY2sucmVzb2x2ZSh3aWRnZXQudG9Kc29uKCkpKS50b0VxdWFsKFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ2FsYXJtJyxcbiAgICAgICAgd2lkdGg6IDYsXG4gICAgICAgIGhlaWdodDogMyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIHRpdGxlOiAnQWxhcm0gU3RhdHVzJyxcbiAgICAgICAgICBhbGFybXM6IFt7ICdGbjo6R2V0QXR0JzogWydBbGFybTcxMDNGNDY1JywgJ0FybiddIH1dLFxuICAgICAgICAgIHNvcnRCeTogJ3N0YXRlVXBkYXRlZFRpbWVzdGFtcCcsXG4gICAgICAgICAgc3RhdGVzOiBbJ0FMQVJNJ10sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0pO1xuXG4gIH0pO1xufSk7XG4iXX0=