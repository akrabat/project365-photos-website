"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe('CompositeAlarm', () => {
    test('test alarm rule expression builder', () => {
        const stack = new core_1.Stack();
        const testMetric = new lib_1.Metric({
            namespace: 'CDK/Test',
            metricName: 'Metric',
        });
        const alarm1 = new lib_1.Alarm(stack, 'Alarm1', {
            metric: testMetric,
            threshold: 100,
            evaluationPeriods: 3,
        });
        const alarm2 = new lib_1.Alarm(stack, 'Alarm2', {
            metric: testMetric,
            threshold: 1000,
            evaluationPeriods: 3,
        });
        const alarm3 = new lib_1.Alarm(stack, 'Alarm3', {
            metric: testMetric,
            threshold: 10000,
            evaluationPeriods: 3,
        });
        const alarm4 = new lib_1.Alarm(stack, 'Alarm4', {
            metric: testMetric,
            threshold: 100000,
            evaluationPeriods: 3,
        });
        const alarm5 = new lib_1.Alarm(stack, 'Alarm5', {
            alarmName: 'Alarm with space in name',
            metric: testMetric,
            threshold: 100000,
            evaluationPeriods: 3,
        });
        const alarmRule = lib_1.AlarmRule.anyOf(lib_1.AlarmRule.allOf(lib_1.AlarmRule.anyOf(alarm1, lib_1.AlarmRule.fromAlarm(alarm2, lib_1.AlarmState.OK), alarm3, alarm5), lib_1.AlarmRule.not(lib_1.AlarmRule.fromAlarm(alarm4, lib_1.AlarmState.INSUFFICIENT_DATA))), lib_1.AlarmRule.fromBoolean(false));
        new lib_1.CompositeAlarm(stack, 'CompositeAlarm', {
            alarmRule,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::CompositeAlarm', {
            AlarmName: 'CompositeAlarm',
            AlarmRule: {
                'Fn::Join': [
                    '',
                    [
                        '(((ALARM("',
                        {
                            'Fn::GetAtt': [
                                'Alarm1F9009D71',
                                'Arn',
                            ],
                        },
                        '") OR OK("',
                        {
                            'Fn::GetAtt': [
                                'Alarm2A7122E13',
                                'Arn',
                            ],
                        },
                        '") OR ALARM("',
                        {
                            'Fn::GetAtt': [
                                'Alarm32341D8D9',
                                'Arn',
                            ],
                        },
                        '") OR ALARM("',
                        {
                            'Fn::GetAtt': [
                                'Alarm548383B2F',
                                'Arn',
                            ],
                        },
                        '")) AND (NOT (INSUFFICIENT_DATA("',
                        {
                            'Fn::GetAtt': [
                                'Alarm4671832C8',
                                'Arn',
                            ],
                        },
                        '")))) OR FALSE)',
                    ],
                ],
            },
        });
    });
    test('test action suppressor translates to a correct CFN properties', () => {
        const stack = new core_1.Stack();
        const testMetric = new lib_1.Metric({
            namespace: 'CDK/Test',
            metricName: 'Metric',
        });
        const actionsSuppressor = new lib_1.Alarm(stack, 'Alarm1', {
            metric: testMetric,
            threshold: 100,
            evaluationPeriods: 3,
        });
        const alarmRule = lib_1.AlarmRule.fromBoolean(true);
        new lib_1.CompositeAlarm(stack, 'CompositeAlarm', {
            alarmRule,
            actionsSuppressor,
            actionsSuppressorExtensionPeriod: core_1.Duration.minutes(2),
            actionsSuppressorWaitPeriod: core_1.Duration.minutes(5),
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::CompositeAlarm', {
            AlarmName: 'CompositeAlarm',
            ActionsSuppressor: {
                'Fn::GetAtt': [
                    'Alarm1F9009D71',
                    'Arn',
                ],
            },
            ActionsSuppressorExtensionPeriod: 120,
            ActionsSuppressorWaitPeriod: 300,
        });
    });
    test('test wait and extension periods set without action suppressor', () => {
        const stack = new core_1.Stack();
        const alarmRule = lib_1.AlarmRule.fromBoolean(true);
        var createAlarm = () => new lib_1.CompositeAlarm(stack, 'CompositeAlarm', {
            alarmRule,
            actionsSuppressorExtensionPeriod: core_1.Duration.minutes(2),
            actionsSuppressorWaitPeriod: core_1.Duration.minutes(5),
        });
        expect(createAlarm).toThrow('ActionsSuppressor Extension/Wait Periods require an ActionsSuppressor to be set.');
    });
    test('test action suppressor has correct defaults set', () => {
        const stack = new core_1.Stack();
        const testMetric = new lib_1.Metric({
            namespace: 'CDK/Test',
            metricName: 'Metric',
        });
        const actionsSuppressor = new lib_1.Alarm(stack, 'Alarm1', {
            metric: testMetric,
            threshold: 100,
            evaluationPeriods: 3,
        });
        const alarmRule = lib_1.AlarmRule.fromBoolean(true);
        new lib_1.CompositeAlarm(stack, 'CompositeAlarm', {
            alarmRule,
            actionsSuppressor,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::CompositeAlarm', {
            AlarmName: 'CompositeAlarm',
            ActionsSuppressor: {
                'Fn::GetAtt': [
                    'Alarm1F9009D71',
                    'Arn',
                ],
            },
            ActionsSuppressorExtensionPeriod: 60,
            ActionsSuppressorWaitPeriod: 60,
        });
    });
});
//# sourceMappingURL=data:application/json;base64,