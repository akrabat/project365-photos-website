"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
describe('Layout', () => {
    test('row has the height of the tallest element', () => {
        // WHEN
        const row = new lib_1.Row(new lib_1.Spacer({ width: 10, height: 1 }), new lib_1.Spacer({ width: 10, height: 4 }));
        // THEN
        expect(4).toEqual(row.height);
        expect(20).toEqual(row.width);
    });
    test('spacer has default height and width', () => {
        // WHEN
        const spacer = new lib_1.Spacer();
        // THEN
        expect(1).toEqual(spacer.height);
        expect(1).toEqual(spacer.width);
    });
    test('column has the width of the tallest element', () => {
        // WHEN
        const col = new lib_1.Column(new lib_1.Spacer({ width: 1, height: 1 }), new lib_1.Spacer({ width: 4, height: 4 }));
        // THEN
        expect(4).toEqual(col.width);
        expect(5).toEqual(col.height);
    });
    test('row wraps to width of 24, taking tallest widget into account while wrapping', () => {
        // Try the tall box in all positions
        for (const heights of [[4, 1, 1], [1, 4, 1], [1, 1, 4]]) {
            // GIVEN
            const widgets = [
                new lib_1.TextWidget({ width: 7, height: heights[0], markdown: 'a' }),
                new lib_1.TextWidget({ width: 7, height: heights[1], markdown: 'b' }),
                new lib_1.TextWidget({ width: 7, height: heights[2], markdown: 'c' }),
                new lib_1.TextWidget({ width: 7, height: 1, markdown: 'd' }),
            ];
            // WHEN
            const row = new lib_1.Row(...widgets);
            row.position(1000, 1000); // Check that we correctly offset all inner widgets
            // THEN
            expect(21).toEqual(row.width);
            expect(5).toEqual(row.height);
            function assertWidgetPos(x, y, w) {
                const json = w.toJson()[0];
                expect(x).toEqual(json.x);
                expect(y).toEqual(json.y);
            }
            assertWidgetPos(1000, 1000, widgets[0]);
            assertWidgetPos(1007, 1000, widgets[1]);
            assertWidgetPos(1014, 1000, widgets[2]);
            assertWidgetPos(1000, 1004, widgets[3]);
        }
    });
    test('row can fit exactly 3 8-wide widgets without wrapping', () => {
        // Try the tall box in all positions
        for (const heights of [[4, 1, 1], [1, 4, 1], [1, 1, 4]]) {
            // WHEN
            const row = new lib_1.Row(new lib_1.TextWidget({ width: 8, height: heights[0], markdown: 'a' }), new lib_1.TextWidget({ width: 8, height: heights[1], markdown: 'b' }), new lib_1.TextWidget({ width: 8, height: heights[2], markdown: 'c' }));
            // THEN
            expect(24).toEqual(row.width);
            expect(4).toEqual(row.height);
        }
    });
    test('add a widget to the row', () => {
        const row = new lib_1.Row(new lib_1.Spacer());
        expect(row.width).toEqual(1);
        row.addWidget(new lib_1.Spacer({ width: 3 }));
        expect(row.width).toEqual(4);
    });
    test('add a widget to the column', () => {
        const column = new lib_1.Column(new lib_1.Spacer(), new lib_1.Spacer());
        expect(column.height).toEqual(2);
        column.addWidget(new lib_1.Spacer({ height: 2, width: 3 }));
        expect(column.height).toEqual(4);
        expect(column.width).toEqual(3);
    });
    test('row wraps when adding widgets', () => {
        const row = new lib_1.Row(new lib_1.Spacer({ width: 10 }), new lib_1.Spacer({ width: 10 }));
        expect(row.width).toEqual(20);
        expect(row.height).toEqual(1);
        row.addWidget(new lib_1.Spacer({ width: 5, height: 2 }));
        expect(row.width).toEqual(20);
        expect(row.height).toEqual(3);
    });
});
//# sourceMappingURL=data:application/json;base64,