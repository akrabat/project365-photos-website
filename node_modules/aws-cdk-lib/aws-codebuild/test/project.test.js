"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const ec2 = require("../../aws-ec2");
const iam = require("../../aws-iam");
const logs = require("../../aws-logs");
const s3 = require("../../aws-s3");
const secretsmanager = require("../../aws-secretsmanager");
const cdk = require("../../core");
const codebuild = require("../lib");
/* eslint-disable quote-props */
test('can use filename as buildspec', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new codebuild.Project(stack, 'Project', {
        source: codebuild.Source.s3({
            bucket: new s3.Bucket(stack, 'Bucket'),
            path: 'path',
        }),
        buildSpec: codebuild.BuildSpec.fromSourceFilename('hello.yml'),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
        Source: {
            BuildSpec: 'hello.yml',
        },
    });
});
test('can use buildspec literal', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new codebuild.Project(stack, 'Project', {
        buildSpec: codebuild.BuildSpec.fromObject({ phases: ['say hi'] }),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
        Source: {
            BuildSpec: '{\n  "phases": [\n    "say hi"\n  ]\n}',
        },
    });
});
test('can use yamlbuildspec literal', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new codebuild.Project(stack, 'Project', {
        buildSpec: codebuild.BuildSpec.fromObjectToYaml({
            text: 'text',
            decimal: 10,
            list: ['say hi'],
            obj: {
                text: 'text',
                decimal: 10,
                list: ['say hi'],
            },
        }),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
        Source: {
            BuildSpec: 'text: text\ndecimal: 10\nlist:\n  - say hi\nobj:\n  text: text\n  decimal: 10\n  list:\n    - say hi\n',
        },
    });
});
test('must supply buildspec when using nosource', () => {
    // GIVEN
    const stack = new cdk.Stack();
    expect(() => {
        new codebuild.Project(stack, 'Project', {});
    }).toThrow(/you need to provide a concrete buildSpec/);
});
test('must supply literal buildspec when using nosource', () => {
    // GIVEN
    const stack = new cdk.Stack();
    expect(() => {
        new codebuild.Project(stack, 'Project', {
            buildSpec: codebuild.BuildSpec.fromSourceFilename('bla.yml'),
        });
    }).toThrow(/you need to provide a concrete buildSpec/);
});
describe('GitHub source', () => {
    test('has reportBuildStatus on by default', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.gitHub({
                owner: 'testowner',
                repo: 'testrepo',
                cloneDepth: 3,
            }),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            Source: {
                Type: 'GITHUB',
                Location: 'https://github.com/testowner/testrepo.git',
                ReportBuildStatus: true,
                GitCloneDepth: 3,
            },
        });
    });
    test('can set a branch as the SourceVersion', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.gitHub({
                owner: 'testowner',
                repo: 'testrepo',
                branchOrRef: 'testbranch',
            }),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            SourceVersion: 'testbranch',
        });
    });
    test('can explicitly set reportBuildStatus to false', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.gitHub({
                owner: 'testowner',
                repo: 'testrepo',
                reportBuildStatus: false,
            }),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            Source: {
                ReportBuildStatus: false,
            },
        });
    });
    test('can explicitly set webhook to true', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.gitHub({
                owner: 'testowner',
                repo: 'testrepo',
                webhook: true,
            }),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            Triggers: {
                Webhook: true,
            },
        });
    });
    test('can be added to a CodePipeline', () => {
        const stack = new cdk.Stack();
        const project = new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.gitHub({
                owner: 'testowner',
                repo: 'testrepo',
            }),
        });
        expect(() => {
            project.bindToCodePipeline(project, {
                artifactBucket: new s3.Bucket(stack, 'Bucket'),
            });
        }).not.toThrow(); // no exception
    });
    test('can provide credentials to use with the source', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.GitHubSourceCredentials(stack, 'GitHubSourceCredentials', {
            accessToken: cdk.SecretValue.unsafePlainText('my-access-token'),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::SourceCredential', {
            'ServerType': 'GITHUB',
            'AuthType': 'PERSONAL_ACCESS_TOKEN',
            'Token': 'my-access-token',
        });
    });
});
describe('GitHub Enterprise source', () => {
    test('can use branchOrRef to set the source version', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.gitHubEnterprise({
                httpsCloneUrl: 'https://mygithub-enterprise.com/myuser/myrepo',
                branchOrRef: 'testbranch',
            }),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            SourceVersion: 'testbranch',
        });
    });
    test('can provide credentials to use with the source', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.GitHubEnterpriseSourceCredentials(stack, 'GitHubEnterpriseSourceCredentials', {
            accessToken: cdk.SecretValue.unsafePlainText('my-access-token'),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::SourceCredential', {
            'ServerType': 'GITHUB_ENTERPRISE',
            'AuthType': 'PERSONAL_ACCESS_TOKEN',
            'Token': 'my-access-token',
        });
    });
});
describe('BitBucket source', () => {
    test('can use branchOrRef to set the source version', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.bitBucket({
                owner: 'testowner',
                repo: 'testrepo',
                branchOrRef: 'testbranch',
            }),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            SourceVersion: 'testbranch',
        });
    });
    test('can provide credentials to use with the source', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.BitBucketSourceCredentials(stack, 'BitBucketSourceCredentials', {
            username: cdk.SecretValue.unsafePlainText('my-username'),
            password: cdk.SecretValue.unsafePlainText('password'),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::SourceCredential', {
            'ServerType': 'BITBUCKET',
            'AuthType': 'BASIC_AUTH',
            'Username': 'my-username',
            'Token': 'password',
        });
    });
});
describe('caching', () => {
    test('using Cache.none() results in NO_CACHE in the template', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.PipelineProject(stack, 'Project', {
            cache: codebuild.Cache.none(),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            Cache: {
                Type: 'NO_CACHE',
                Location: assertions_1.Match.absent(),
            },
        });
    });
    test('project with s3 cache bucket', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'SourceBucket'),
                path: 'path',
            }),
            cache: codebuild.Cache.bucket(new s3.Bucket(stack, 'Bucket'), {
                prefix: 'cache-prefix',
            }),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            Cache: {
                Type: 'S3',
                Location: {
                    'Fn::Join': [
                        '/',
                        [
                            {
                                'Ref': 'Bucket83908E77',
                            },
                            'cache-prefix',
                        ],
                    ],
                },
            },
        });
    });
    test('s3 codebuild project with sourceVersion', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'Bucket'),
                path: 'path',
                version: 's3version',
            }),
            cache: codebuild.Cache.local(codebuild.LocalCacheMode.CUSTOM, codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.SOURCE),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            SourceVersion: 's3version',
        });
    });
    test('project with local cache modes', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'Bucket'),
                path: 'path',
            }),
            cache: codebuild.Cache.local(codebuild.LocalCacheMode.CUSTOM, codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.SOURCE),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            Cache: {
                Type: 'LOCAL',
                Modes: [
                    'LOCAL_CUSTOM_CACHE',
                    'LOCAL_DOCKER_LAYER_CACHE',
                    'LOCAL_SOURCE_CACHE',
                ],
            },
        });
    });
    test('project by default has cache type set to NO_CACHE', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'Bucket'),
                path: 'path',
            }),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            Cache: {
                Type: 'NO_CACHE',
                Location: assertions_1.Match.absent(),
            },
        });
    });
});
test('if a role is shared between projects in a VPC, the VPC Policy is only attached once', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'Vpc');
    const role = new iam.Role(stack, 'Role', {
        assumedBy: new iam.ServicePrincipal('codebuild.amazonaws.com'),
    });
    const source = codebuild.Source.gitHubEnterprise({
        httpsCloneUrl: 'https://mygithub-enterprise.com/myuser/myrepo',
    });
    // WHEN
    new codebuild.Project(stack, 'Project1', { source, role, vpc, projectName: 'P1' });
    new codebuild.Project(stack, 'Project2', { source, role, vpc, projectName: 'P2' });
    // THEN
    // - 1 is for `ec2:CreateNetworkInterfacePermission`, deduplicated as they're part of a single policy
    // - 1 is for `ec2:CreateNetworkInterface`, this is the separate Policy we're deduplicating
    // We would have found 3 if the deduplication didn't work.
    assertions_1.Template.fromStack(stack).resourceCountIs('AWS::IAM::Policy', 2);
    // THEN - both Projects have a DependsOn on the same policy
    assertions_1.Template.fromStack(stack).hasResource('AWS::CodeBuild::Project', {
        Properties: { Name: 'P1' },
        DependsOn: ['Project1PolicyDocumentF9761562'],
    });
    assertions_1.Template.fromStack(stack).hasResource('AWS::CodeBuild::Project', {
        Properties: { Name: 'P1' },
        DependsOn: ['Project1PolicyDocumentF9761562'],
    });
});
test('can use an imported Role for a Project within a VPC', () => {
    const stack = new cdk.Stack();
    const importedRole = iam.Role.fromRoleArn(stack, 'Role', 'arn:aws:iam::1234567890:role/service-role/codebuild-bruiser-service-role');
    const vpc = new ec2.Vpc(stack, 'Vpc');
    new codebuild.Project(stack, 'Project', {
        source: codebuild.Source.gitHubEnterprise({
            httpsCloneUrl: 'https://mygithub-enterprise.com/myuser/myrepo',
        }),
        role: importedRole,
        vpc,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
    // no need to do any assertions
    });
});
test('can use an imported Role with mutable = false for a Project within a VPC', () => {
    const stack = new cdk.Stack();
    const importedRole = iam.Role.fromRoleArn(stack, 'Role', 'arn:aws:iam::1234567890:role/service-role/codebuild-bruiser-service-role', {
        mutable: false,
    });
    const vpc = new ec2.Vpc(stack, 'Vpc');
    new codebuild.Project(stack, 'Project', {
        source: codebuild.Source.gitHubEnterprise({
            httpsCloneUrl: 'https://mygithub-enterprise.com/myuser/myrepo',
        }),
        role: importedRole,
        vpc,
    });
    assertions_1.Template.fromStack(stack).resourceCountIs('AWS::IAM::Policy', 0);
    // Check that the CodeBuild project does not have a DependsOn
    assertions_1.Template.fromStack(stack).hasResource('AWS::CodeBuild::Project', (res) => {
        if (res.DependsOn && res.DependsOn.length > 0) {
            throw new Error(`CodeBuild project should have no DependsOn, but got: ${JSON.stringify(res, undefined, 2)}`);
        }
        return true;
    });
});
test('can use an ImmutableRole for a Project within a VPC', () => {
    const stack = new cdk.Stack();
    const role = new iam.Role(stack, 'Role', {
        assumedBy: new iam.ServicePrincipal('codebuild.amazonaws.com'),
    });
    const vpc = new ec2.Vpc(stack, 'Vpc');
    new codebuild.Project(stack, 'Project', {
        source: codebuild.Source.gitHubEnterprise({
            httpsCloneUrl: 'https://mygithub-enterprise.com/myuser/myrepo',
        }),
        role: role.withoutPolicyUpdates(),
        vpc,
    });
    assertions_1.Template.fromStack(stack).resourceCountIs('AWS::IAM::Policy', 0);
    // Check that the CodeBuild project does not have a DependsOn
    assertions_1.Template.fromStack(stack).hasResource('AWS::CodeBuild::Project', (res) => {
        if (res.DependsOn && res.DependsOn.length > 0) {
            throw new Error(`CodeBuild project should have no DependsOn, but got: ${JSON.stringify(res, undefined, 2)}`);
        }
        return true;
    });
});
test('metric method generates a valid CloudWatch metric', () => {
    const stack = new cdk.Stack();
    const project = new codebuild.Project(stack, 'Project', {
        source: codebuild.Source.gitHubEnterprise({
            httpsCloneUrl: 'https://mygithub-enterprise.com/myuser/myrepo',
        }),
    });
    const metric = project.metric('Builds');
    expect(metric.metricName).toEqual('Builds');
    expect(metric.period.toSeconds()).toEqual(cdk.Duration.minutes(5).toSeconds());
    expect(metric.statistic).toEqual('Average');
});
describe('CodeBuild test reports group', () => {
    test('adds the appropriate permissions when reportGroup.grantWrite() is called', () => {
        const stack = new cdk.Stack();
        const reportGroup = new codebuild.ReportGroup(stack, 'ReportGroup');
        const project = new codebuild.Project(stack, 'Project', {
            buildSpec: codebuild.BuildSpec.fromObject({
                version: '0.2',
                reports: {
                    [reportGroup.reportGroupArn]: {
                        files: '**/*',
                    },
                },
            }),
            grantReportGroupPermissions: false,
        });
        reportGroup.grantWrite(project);
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            'PolicyDocument': {
                'Statement': [
                    {},
                    {
                        'Action': [
                            'codebuild:CreateReport',
                            'codebuild:UpdateReport',
                            'codebuild:BatchPutTestCases',
                        ],
                        'Resource': {
                            'Fn::GetAtt': [
                                'ReportGroup8A84C76D',
                                'Arn',
                            ],
                        },
                    },
                ],
            },
        });
    });
});
describe('Environment', () => {
    test('build image - can use secret to access build image', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const secret = new secretsmanager.Secret(stack, 'Secret');
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'Bucket'),
                path: 'path',
            }),
            environment: {
                buildImage: codebuild.LinuxBuildImage.fromDockerRegistry('myimage', { secretsManagerCredentials: secret }),
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: assertions_1.Match.objectLike({
                RegistryCredential: {
                    CredentialProvider: 'SECRETS_MANAGER',
                    Credential: { 'Ref': 'SecretA720EF05' },
                },
            }),
        });
    });
    test('build image - can use imported secret by name', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const secret = secretsmanager.Secret.fromSecretNameV2(stack, 'Secret', 'MySecretName');
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'Bucket'),
                path: 'path',
            }),
            environment: {
                buildImage: codebuild.LinuxBuildImage.fromDockerRegistry('myimage', { secretsManagerCredentials: secret }),
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: assertions_1.Match.objectLike({
                RegistryCredential: {
                    CredentialProvider: 'SECRETS_MANAGER',
                    Credential: 'MySecretName',
                },
            }),
        });
    });
    test('logs config - cloudWatch', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const logGroup = logs.LogGroup.fromLogGroupName(stack, 'LogGroup', 'MyLogGroupName');
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'Bucket'),
                path: 'path',
            }),
            logging: {
                cloudWatch: {
                    logGroup,
                    prefix: '/my-logs',
                },
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            LogsConfig: assertions_1.Match.objectLike({
                CloudWatchLogs: {
                    GroupName: 'MyLogGroupName',
                    Status: 'ENABLED',
                    StreamName: '/my-logs',
                },
            }),
        });
    });
    test('logs config - cloudWatch disabled', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'Bucket'),
                path: 'path',
            }),
            logging: {
                cloudWatch: {
                    enabled: false,
                },
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            LogsConfig: assertions_1.Match.objectLike({
                CloudWatchLogs: {
                    Status: 'DISABLED',
                },
            }),
        });
    });
    test('logs config - s3', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const bucket = s3.Bucket.fromBucketName(stack, 'LogBucket', 'mybucketname');
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'Bucket'),
                path: 'path',
            }),
            logging: {
                s3: {
                    bucket,
                    prefix: 'my-logs',
                },
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            LogsConfig: assertions_1.Match.objectLike({
                S3Logs: {
                    Location: 'mybucketname/my-logs',
                    Status: 'ENABLED',
                },
            }),
        });
    });
    test('logs config - cloudWatch and s3', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const bucket = s3.Bucket.fromBucketName(stack, 'LogBucket2', 'mybucketname');
        const logGroup = logs.LogGroup.fromLogGroupName(stack, 'LogGroup2', 'MyLogGroupName');
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'Bucket'),
                path: 'path',
            }),
            logging: {
                cloudWatch: {
                    logGroup,
                },
                s3: {
                    bucket,
                },
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            LogsConfig: assertions_1.Match.objectLike({
                CloudWatchLogs: {
                    GroupName: 'MyLogGroupName',
                    Status: 'ENABLED',
                },
                S3Logs: {
                    Location: 'mybucketname',
                    Status: 'ENABLED',
                },
            }),
        });
    });
    test('certificate arn', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const bucket = s3.Bucket.fromBucketName(stack, 'Bucket', 'my-bucket'); // (stack, 'Bucket');
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket,
                path: 'path',
            }),
            environment: {
                certificate: {
                    bucket,
                    objectKey: 'path',
                },
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: assertions_1.Match.objectLike({
                Certificate: {
                    'Fn::Join': ['', [
                            'arn:',
                            { 'Ref': 'AWS::Partition' },
                            ':s3:::my-bucket/path',
                        ]],
                },
            }),
        });
    });
    test.each([
        ['Standard 6.0', codebuild.LinuxBuildImage.STANDARD_6_0, 'aws/codebuild/standard:6.0'],
        ['Amazon Linux 4.0', codebuild.LinuxBuildImage.AMAZON_LINUX_2_4, 'aws/codebuild/amazonlinux2-x86_64-standard:4.0'],
        ['Windows Server Core 2019 2.0', codebuild.WindowsBuildImage.WIN_SERVER_CORE_2019_BASE_2_0, 'aws/codebuild/windows-base:2019-2.0'],
    ])('has build image for %s', (_, buildImage, expected) => {
        // GIVEN
        const stack = new cdk.Stack();
        const bucket = s3.Bucket.fromBucketName(stack, 'Bucket', 'my-bucket'); // (stack, 'Bucket');
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket,
                path: 'path',
            }),
            environment: {
                buildImage: buildImage,
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: assertions_1.Match.objectLike({
                Image: expected,
            }),
        });
    });
});
describe('EnvironmentVariables', () => {
    describe('from SSM', () => {
        test('can use environment variables', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            new codebuild.Project(stack, 'Project', {
                source: codebuild.Source.s3({
                    bucket: new s3.Bucket(stack, 'Bucket'),
                    path: 'path',
                }),
                environment: {
                    buildImage: codebuild.LinuxBuildImage.fromDockerRegistry('myimage'),
                },
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.PARAMETER_STORE,
                        value: '/params/param1',
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                Environment: assertions_1.Match.objectLike({
                    EnvironmentVariables: [{
                            Name: 'ENV_VAR1',
                            Type: 'PARAMETER_STORE',
                            Value: '/params/param1',
                        }],
                }),
            });
        });
        test('grants the correct read permissions', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            new codebuild.Project(stack, 'Project', {
                source: codebuild.Source.s3({
                    bucket: new s3.Bucket(stack, 'Bucket'),
                    path: 'path',
                }),
                environment: {
                    buildImage: codebuild.LinuxBuildImage.fromDockerRegistry('myimage'),
                },
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.PARAMETER_STORE,
                        value: '/params/param1',
                    },
                    'ENV_VAR2': {
                        type: codebuild.BuildEnvironmentVariableType.PARAMETER_STORE,
                        value: 'params/param2',
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([assertions_1.Match.objectLike({
                            'Action': 'ssm:GetParameters',
                            'Effect': 'Allow',
                            'Resource': [{
                                    'Fn::Join': [
                                        '',
                                        [
                                            'arn:',
                                            {
                                                Ref: 'AWS::Partition',
                                            },
                                            ':ssm:',
                                            {
                                                Ref: 'AWS::Region',
                                            },
                                            ':',
                                            {
                                                Ref: 'AWS::AccountId',
                                            },
                                            ':parameter/params/param1',
                                        ],
                                    ],
                                },
                                {
                                    'Fn::Join': [
                                        '',
                                        [
                                            'arn:',
                                            {
                                                Ref: 'AWS::Partition',
                                            },
                                            ':ssm:',
                                            {
                                                Ref: 'AWS::Region',
                                            },
                                            ':',
                                            {
                                                Ref: 'AWS::AccountId',
                                            },
                                            ':parameter/params/param2',
                                        ],
                                    ],
                                }],
                        })]),
                },
            });
        });
        test('does not grant read permissions when variables are not from parameter store', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            new codebuild.Project(stack, 'Project', {
                source: codebuild.Source.s3({
                    bucket: new s3.Bucket(stack, 'Bucket'),
                    path: 'path',
                }),
                environment: {
                    buildImage: codebuild.LinuxBuildImage.fromDockerRegistry('myimage'),
                },
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,
                        value: 'var1-value',
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', assertions_1.Match.not({
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([assertions_1.Match.objectLike({
                            'Action': 'ssm:GetParameters',
                            'Effect': 'Allow',
                        })]),
                },
            }));
        });
    });
    describe('from SecretsManager', () => {
        test('can be provided as a verbatim secret name', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: 'my-secret',
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                'Environment': {
                    'EnvironmentVariables': [
                        {
                            'Name': 'ENV_VAR1',
                            'Type': 'SECRETS_MANAGER',
                            'Value': 'my-secret',
                        },
                    ],
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'secretsmanager:GetSecretValue',
                            'Effect': 'Allow',
                            'Resource': {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        ':secretsmanager:',
                                        { Ref: 'AWS::Region' },
                                        ':',
                                        { Ref: 'AWS::AccountId' },
                                        ':secret:my-secret-??????',
                                    ]],
                            },
                        }]),
                },
            });
        });
        test('can be provided as a verbatim secret name followed by a JSON key', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: 'my-secret:json-key',
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                'Environment': {
                    'EnvironmentVariables': [
                        {
                            'Name': 'ENV_VAR1',
                            'Type': 'SECRETS_MANAGER',
                            'Value': 'my-secret:json-key',
                        },
                    ],
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'secretsmanager:GetSecretValue',
                            'Effect': 'Allow',
                            'Resource': {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        ':secretsmanager:',
                                        { Ref: 'AWS::Region' },
                                        ':',
                                        { Ref: 'AWS::AccountId' },
                                        ':secret:my-secret-??????',
                                    ]],
                            },
                        }]),
                },
            });
        });
        test('can be provided as a verbatim full secret ARN followed by a JSON key', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: 'arn:aws:secretsmanager:us-west-2:123456789012:secret:my-secret-123456:json-key',
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                'Environment': {
                    'EnvironmentVariables': [
                        {
                            'Name': 'ENV_VAR1',
                            'Type': 'SECRETS_MANAGER',
                            'Value': 'arn:aws:secretsmanager:us-west-2:123456789012:secret:my-secret-123456:json-key',
                        },
                    ],
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'secretsmanager:GetSecretValue',
                            'Effect': 'Allow',
                            'Resource': 'arn:aws:secretsmanager:us-west-2:123456789012:secret:my-secret-123456*',
                        }]),
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', assertions_1.Match.not({
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'kms:Decrypt',
                            'Effect': 'Allow',
                            'Resource': 'arn:aws:kms:us-west-2:123456789012:key/*',
                        }]),
                },
            }));
        });
        test('can be provided as a verbatim partial secret ARN', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: 'arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret',
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                'Environment': {
                    'EnvironmentVariables': [
                        {
                            'Name': 'ENV_VAR1',
                            'Type': 'SECRETS_MANAGER',
                            'Value': 'arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret',
                        },
                    ],
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'secretsmanager:GetSecretValue',
                            'Effect': 'Allow',
                            'Resource': 'arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret*',
                        }]),
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', assertions_1.Match.not({
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'kms:Decrypt',
                            'Effect': 'Allow',
                            'Resource': 'arn:aws:kms:us-west-2:123456789012:key/*',
                        }]),
                },
            }));
        });
        test("when provided as a verbatim partial secret ARN from another account, adds permission to decrypt keys in the Secret's account", () => {
            // GIVEN
            const app = new cdk.App();
            const stack = new cdk.Stack(app, 'ProjectStack', {
                env: { account: '123456789012' },
            });
            // WHEN
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: 'arn:aws:secretsmanager:us-west-2:901234567890:secret:mysecret',
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'kms:Decrypt',
                            'Effect': 'Allow',
                            'Resource': 'arn:aws:kms:us-west-2:901234567890:key/*',
                        }]),
                },
            });
        });
        test('when two secrets from another account are provided as verbatim partial secret ARNs, adds only one permission for decrypting', () => {
            // GIVEN
            const app = new cdk.App();
            const stack = new cdk.Stack(app, 'ProjectStack', {
                env: { account: '123456789012' },
            });
            // WHEN
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: 'arn:aws:secretsmanager:us-west-2:901234567890:secret:mysecret',
                    },
                    'ENV_VAR2': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: 'arn:aws:secretsmanager:us-west-2:901234567890:secret:other-secret',
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'kms:Decrypt',
                            'Effect': 'Allow',
                            'Resource': 'arn:aws:kms:us-west-2:901234567890:key/*',
                        }]),
                },
            });
        });
        test('can be provided as the ARN attribute of a new Secret', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            const secret = new secretsmanager.Secret(stack, 'Secret');
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: secret.secretArn,
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                'Environment': {
                    'EnvironmentVariables': [
                        {
                            'Name': 'ENV_VAR1',
                            'Type': 'SECRETS_MANAGER',
                            'Value': { 'Ref': 'SecretA720EF05' },
                        },
                    ],
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'secretsmanager:GetSecretValue',
                            'Effect': 'Allow',
                            'Resource': { 'Ref': 'SecretA720EF05' },
                        }]),
                },
            });
        });
        test('when the same new secret is provided with different JSON keys, only adds the resource once', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            const secret = new secretsmanager.Secret(stack, 'Secret');
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: `${secret.secretArn}:json-key1`,
                    },
                    'ENV_VAR2': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: `${secret.secretArn}:json-key2`,
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                'Environment': {
                    'EnvironmentVariables': [
                        {
                            'Name': 'ENV_VAR1',
                            'Type': 'SECRETS_MANAGER',
                            'Value': { 'Fn::Join': ['', [{ 'Ref': 'SecretA720EF05' }, ':json-key1']] },
                        },
                        {
                            'Name': 'ENV_VAR2',
                            'Type': 'SECRETS_MANAGER',
                            'Value': { 'Fn::Join': ['', [{ 'Ref': 'SecretA720EF05' }, ':json-key2']] },
                        },
                    ],
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'secretsmanager:GetSecretValue',
                            'Effect': 'Allow',
                            'Resource': { 'Ref': 'SecretA720EF05' },
                        }]),
                },
            });
        });
        test('can be provided as the ARN attribute of a new Secret, followed by a JSON key', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            const secret = new secretsmanager.Secret(stack, 'Secret');
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: `${secret.secretArn}:json-key:version-stage`,
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                'Environment': {
                    'EnvironmentVariables': [
                        {
                            'Name': 'ENV_VAR1',
                            'Type': 'SECRETS_MANAGER',
                            'Value': {
                                'Fn::Join': ['', [
                                        { 'Ref': 'SecretA720EF05' },
                                        ':json-key:version-stage',
                                    ]],
                            },
                        },
                    ],
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'secretsmanager:GetSecretValue',
                            'Effect': 'Allow',
                            'Resource': { 'Ref': 'SecretA720EF05' },
                        }]),
                },
            });
        });
        test('can be provided as the name attribute of a Secret imported by name', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            const secret = secretsmanager.Secret.fromSecretNameV2(stack, 'Secret', 'mysecret');
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: secret.secretName,
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                'Environment': {
                    'EnvironmentVariables': [
                        {
                            'Name': 'ENV_VAR1',
                            'Type': 'SECRETS_MANAGER',
                            'Value': 'mysecret',
                        },
                    ],
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'secretsmanager:GetSecretValue',
                            'Effect': 'Allow',
                            'Resource': {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { 'Ref': 'AWS::Partition' },
                                        ':secretsmanager:',
                                        { 'Ref': 'AWS::Region' },
                                        ':',
                                        { 'Ref': 'AWS::AccountId' },
                                        ':secret:mysecret-??????',
                                    ]],
                            },
                        }]),
                },
            });
        });
        test('can be provided as the ARN attribute of a Secret imported by partial ARN, followed by a JSON key', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            const secret = secretsmanager.Secret.fromSecretPartialArn(stack, 'Secret', 'arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret');
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: `${secret.secretArn}:json-key`,
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                'Environment': {
                    'EnvironmentVariables': [
                        {
                            'Name': 'ENV_VAR1',
                            'Type': 'SECRETS_MANAGER',
                            'Value': 'arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret:json-key',
                        },
                    ],
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'secretsmanager:GetSecretValue',
                            'Effect': 'Allow',
                            'Resource': 'arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret*',
                        }]),
                },
            });
        });
        test('can be provided as the ARN attribute of a Secret imported by complete ARN, followed by a JSON key', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            const secret = secretsmanager.Secret.fromSecretCompleteArn(stack, 'Secret', 'arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret-123456');
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: `${secret.secretArn}:json-key`,
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                'Environment': {
                    'EnvironmentVariables': [
                        {
                            'Name': 'ENV_VAR1',
                            'Type': 'SECRETS_MANAGER',
                            'Value': 'arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret-123456:json-key',
                        },
                    ],
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'secretsmanager:GetSecretValue',
                            'Effect': 'Allow',
                            'Resource': 'arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret-123456*',
                        }]),
                },
            });
        });
        test('can be provided as a SecretArn of a new Secret, with its physical name set, created in a different account', () => {
            // GIVEN
            const app = new cdk.App();
            const secretStack = new cdk.Stack(app, 'SecretStack', {
                env: { account: '012345678912' },
            });
            const stack = new cdk.Stack(app, 'ProjectStack', {
                env: { account: '123456789012' },
            });
            // WHEN
            const secret = new secretsmanager.Secret(secretStack, 'Secret', { secretName: 'secret-name' });
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: secret.secretArn,
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                'Environment': {
                    'EnvironmentVariables': [
                        {
                            'Name': 'ENV_VAR1',
                            'Type': 'SECRETS_MANAGER',
                            'Value': {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { 'Ref': 'AWS::Partition' },
                                        ':secretsmanager:',
                                        { 'Ref': 'AWS::Region' },
                                        ':012345678912:secret:secret-name',
                                    ]],
                            },
                        },
                    ],
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'secretsmanager:GetSecretValue',
                            'Effect': 'Allow',
                            'Resource': {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { 'Ref': 'AWS::Partition' },
                                        ':secretsmanager:',
                                        { 'Ref': 'AWS::Region' },
                                        ':012345678912:secret:secret-name-??????',
                                    ]],
                            },
                        }]),
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'kms:Decrypt',
                            'Effect': 'Allow',
                            'Resource': {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { 'Ref': 'AWS::Partition' },
                                        ':kms:',
                                        { 'Ref': 'AWS::Region' },
                                        ':012345678912:key/*',
                                    ]],
                            },
                        }]),
                },
            });
        });
        test('can be provided as a SecretArn of a Secret imported by name in a different account', () => {
            // GIVEN
            const app = new cdk.App();
            const secretStack = new cdk.Stack(app, 'SecretStack', {
                env: { account: '012345678912' },
            });
            const stack = new cdk.Stack(app, 'ProjectStack', {
                env: { account: '123456789012' },
            });
            // WHEN
            const secret = secretsmanager.Secret.fromSecretNameV2(secretStack, 'Secret', 'secret-name');
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: `${secret.secretArn}:json-key`,
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                'Environment': {
                    'EnvironmentVariables': [
                        {
                            'Name': 'ENV_VAR1',
                            'Type': 'SECRETS_MANAGER',
                            'Value': {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { 'Ref': 'AWS::Partition' },
                                        ':secretsmanager:',
                                        { 'Ref': 'AWS::Region' },
                                        ':012345678912:secret:secret-name:json-key',
                                    ]],
                            },
                        },
                    ],
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'secretsmanager:GetSecretValue',
                            'Effect': 'Allow',
                            'Resource': {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { 'Ref': 'AWS::Partition' },
                                        ':secretsmanager:',
                                        { 'Ref': 'AWS::Region' },
                                        ':012345678912:secret:secret-name*',
                                    ]],
                            },
                        }]),
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'kms:Decrypt',
                            'Effect': 'Allow',
                            'Resource': {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { 'Ref': 'AWS::Partition' },
                                        ':kms:',
                                        { 'Ref': 'AWS::Region' },
                                        ':012345678912:key/*',
                                    ]],
                            },
                        }]),
                },
            });
        });
        test('can be provided as a SecretArn of a Secret imported by complete ARN from a different account', () => {
            // GIVEN
            const app = new cdk.App();
            const stack = new cdk.Stack(app, 'ProjectStack', {
                env: { account: '123456789012' },
            });
            const secretArn = 'arn:aws:secretsmanager:us-west-2:901234567890:secret:mysecret-123456';
            // WHEN
            const secret = secretsmanager.Secret.fromSecretCompleteArn(stack, 'Secret', secretArn);
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'ENV_VAR1': {
                        type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        value: secret.secretArn,
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
                'Environment': {
                    'EnvironmentVariables': [
                        {
                            'Name': 'ENV_VAR1',
                            'Type': 'SECRETS_MANAGER',
                            'Value': secretArn,
                        },
                    ],
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'secretsmanager:GetSecretValue',
                            'Effect': 'Allow',
                            'Resource': `${secretArn}*`,
                        }]),
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': assertions_1.Match.arrayWith([{
                            'Action': 'kms:Decrypt',
                            'Effect': 'Allow',
                            'Resource': 'arn:aws:kms:us-west-2:901234567890:key/*',
                        }]),
                },
            });
        });
        test('should fail when the parsed Arn does not contain a secret name', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            expect(() => {
                new codebuild.PipelineProject(stack, 'Project', {
                    environmentVariables: {
                        'ENV_VAR1': {
                            type: codebuild.BuildEnvironmentVariableType.SECRETS_MANAGER,
                            value: 'arn:aws:secretsmanager:us-west-2:123456789012:secret',
                        },
                    },
                });
            }).toThrow(/SecretManager ARN is missing the name of the secret:/);
        });
    });
    test('should fail creating when using a secret value in a plaintext variable', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // THEN
        expect(() => {
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'a': {
                        value: `a_${cdk.SecretValue.secretsManager('my-secret')}_b`,
                    },
                },
            });
        }).toThrow(/Plaintext environment variable 'a' contains a secret value!/);
    });
    test("should allow opting out of the 'secret value in a plaintext variable' validation", () => {
        // GIVEN
        const stack = new cdk.Stack();
        // THEN
        expect(() => {
            new codebuild.PipelineProject(stack, 'Project', {
                environmentVariables: {
                    'b': {
                        value: cdk.SecretValue.secretsManager('my-secret'),
                    },
                },
                checkSecretsInPlainTextEnvVariables: false,
            });
        }).not.toThrow();
    });
});
describe('Timeouts', () => {
    test('can add queued timeout', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'Bucket'),
                path: 'path',
            }),
            queuedTimeout: cdk.Duration.minutes(30),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            QueuedTimeoutInMinutes: 30,
        });
    });
    test('can override build timeout', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'Bucket'),
                path: 'path',
            }),
            timeout: cdk.Duration.minutes(30),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            TimeoutInMinutes: 30,
        });
    });
});
describe('Maximum concurrency', () => {
    test('can limit maximum concurrency', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new codebuild.Project(stack, 'Project', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'Bucket'),
                path: 'path',
            }),
            concurrentBuildLimit: 1,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::Project', {
            ConcurrentBuildLimit: 1,
        });
    });
});
test('can automatically add ssm permissions', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new codebuild.Project(stack, 'Project', {
        source: codebuild.Source.s3({
            bucket: new s3.Bucket(stack, 'Bucket'),
            path: 'path',
        }),
        ssmSessionPermissions: true,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: assertions_1.Match.arrayWith([
                assertions_1.Match.objectLike({
                    Action: assertions_1.Match.arrayWith([
                        'ssmmessages:CreateControlChannel',
                        'ssmmessages:CreateDataChannel',
                    ]),
                }),
            ]),
        },
    });
});
describe('can be imported', () => {
    test('by ARN', () => {
        const stack = new cdk.Stack();
        const project = codebuild.Project.fromProjectArn(stack, 'Project', 'arn:aws:codebuild:us-west-2:123456789012:project/My-Project');
        expect(project.projectName).toEqual('My-Project');
        expect(project.env.account).toEqual('123456789012');
        expect(project.env.region).toEqual('us-west-2');
    });
});
//# sourceMappingURL=data:application/json;base64,