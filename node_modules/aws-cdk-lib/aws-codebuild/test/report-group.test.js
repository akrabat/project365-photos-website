"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const iam = require("../../aws-iam");
const kms = require("../../aws-kms");
const s3 = require("../../aws-s3");
const cdk = require("../../core");
const codebuild = require("../lib");
const lib_1 = require("../lib");
/* eslint-disable quote-props */
/* eslint-disable quotes */
describe('Test Reports Groups', () => {
    test('get created with type=TEST and exportConfig=NO_EXPORT by default', () => {
        const stack = new cdk.Stack();
        new codebuild.ReportGroup(stack, 'ReportGroup');
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::ReportGroup', {
            "Type": "TEST",
            "ExportConfig": {
                "ExportConfigType": "NO_EXPORT",
                "S3Destination": assertions_1.Match.absent(),
            },
        });
    });
    test('can be created with name', () => {
        const stack = new cdk.Stack();
        new codebuild.ReportGroup(stack, 'ReportGroup', {
            reportGroupName: 'my-report-group',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::ReportGroup', {
            "Name": 'my-report-group',
        });
    });
    test('can be imported by name', () => {
        const stack = new cdk.Stack();
        const reportGroup = codebuild.ReportGroup.fromReportGroupName(stack, 'ReportGroup', 'my-report-group');
        const role = new iam.Role(stack, 'Role', {
            assumedBy: new iam.AnyPrincipal(),
        });
        role.addToPolicy(new iam.PolicyStatement({
            actions: ['codebuild:*'],
            resources: [reportGroup.reportGroupArn],
        }));
        expect(reportGroup.reportGroupName).toEqual('my-report-group');
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            "PolicyDocument": {
                "Statement": [
                    {
                        "Action": "codebuild:*",
                        "Resource": {
                            "Fn::Join": ["", [
                                    "arn:",
                                    { "Ref": "AWS::Partition" },
                                    ":codebuild:",
                                    { "Ref": "AWS::Region" },
                                    ":",
                                    { "Ref": "AWS::AccountId" },
                                    ":report-group/my-report-group",
                                ]],
                        },
                    },
                ],
            },
        });
    });
    test('specify exportConfig=S3 when providing an exportBucket', () => {
        const stack = new cdk.Stack();
        new codebuild.ReportGroup(stack, 'ReportGroup', {
            exportBucket: s3.Bucket.fromBucketName(stack, 'Bucket', 'my-bucket'),
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::ReportGroup', {
            "Type": "TEST",
            "ExportConfig": {
                "ExportConfigType": "S3",
                "S3Destination": {
                    "Bucket": "my-bucket",
                    "EncryptionKey": assertions_1.Match.absent(),
                    "EncryptionDisabled": assertions_1.Match.absent(),
                    "Packaging": assertions_1.Match.absent(),
                },
            },
        });
    });
    test('specify encryptionKey in ExportConfig.S3Destination if exportBucket has a Key', () => {
        const stack = new cdk.Stack();
        new codebuild.ReportGroup(stack, 'ReportGroup', {
            exportBucket: s3.Bucket.fromBucketAttributes(stack, 'Bucket', {
                bucketName: 'my-bucket',
                encryptionKey: kms.Key.fromKeyArn(stack, 'Key', 'arn:aws:kms:us-east-1:123456789012:key/my-key'),
            }),
            zipExport: true,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::ReportGroup', {
            "Type": "TEST",
            "ExportConfig": {
                "ExportConfigType": "S3",
                "S3Destination": {
                    "Bucket": "my-bucket",
                    "EncryptionDisabled": false,
                    "EncryptionKey": "arn:aws:kms:us-east-1:123456789012:key/my-key",
                    "Packaging": "ZIP",
                },
            },
        });
    });
    test('get created with RemovalPolicy.RETAIN by default', () => {
        const stack = new cdk.Stack();
        new codebuild.ReportGroup(stack, 'ReportGroup');
        assertions_1.Template.fromStack(stack).hasResource('AWS::CodeBuild::ReportGroup', {
            "DeletionPolicy": "Retain",
            "UpdateReplacePolicy": "Retain",
        });
    });
    test('can be created with RemovalPolicy.DESTROY', () => {
        const stack = new cdk.Stack();
        new codebuild.ReportGroup(stack, 'ReportGroup', {
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        assertions_1.Template.fromStack(stack).hasResource('AWS::CodeBuild::ReportGroup', {
            "DeletionPolicy": "Delete",
            "UpdateReplacePolicy": "Delete",
        });
    });
    test('can be created with type=CODE_COVERAGE', () => {
        const stack = new cdk.Stack();
        new codebuild.ReportGroup(stack, 'ReportGroup', {
            type: lib_1.ReportGroupType.CODE_COVERAGE,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::ReportGroup', {
            "Type": "CODE_COVERAGE",
        });
    });
    test('defaults to report group type=TEST when not specified explicitly', () => {
        const stack = new cdk.Stack();
        new codebuild.ReportGroup(stack, 'ReportGroup', {});
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeBuild::ReportGroup', {
            "Type": "TEST",
        });
    });
    test.each([
        [lib_1.ReportGroupType.CODE_COVERAGE, 'codebuild:BatchPutCodeCoverages'],
        [lib_1.ReportGroupType.TEST, 'codebuild:BatchPutTestCases'],
    ])('has correct policy when type is %s', (type, policyStatement) => {
        const stack = new cdk.Stack();
        const reportGroup = new codebuild.ReportGroup(stack, 'ReportGroup', {
            type,
        });
        const project = new codebuild.Project(stack, 'TestProject', {
            buildSpec: {
                toBuildSpec: () => '',
                isImmediate: true,
            },
        });
        reportGroup.grantWrite(project);
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([
                    {
                        Action: [
                            "codebuild:CreateReport",
                            "codebuild:UpdateReport",
                            policyStatement,
                        ],
                        Effect: "Allow",
                        Resource: {
                            "Fn::GetAtt": [
                                "ReportGroup8A84C76D",
                                "Arn",
                            ],
                        },
                    },
                ]),
                Version: "2012-10-17",
            },
        });
    });
    test('has policy for type test when type is not defined', () => {
        const stack = new cdk.Stack();
        const reportGroup = new codebuild.ReportGroup(stack, 'ReportGroup');
        const project = new codebuild.Project(stack, 'TestProject', {
            buildSpec: {
                toBuildSpec: () => '',
                isImmediate: true,
            },
        });
        reportGroup.grantWrite(project);
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([
                    {
                        Action: [
                            "codebuild:CreateReport",
                            "codebuild:UpdateReport",
                            "codebuild:BatchPutTestCases",
                        ],
                        Effect: "Allow",
                        Resource: {
                            "Fn::GetAtt": [
                                "ReportGroup8A84C76D",
                                "Arn",
                            ],
                        },
                    },
                ]),
                Version: "2012-10-17",
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,