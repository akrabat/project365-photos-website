"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const iam = require("../../aws-iam");
const cdk = require("../../core");
const codebuild = require("../lib");
test('can attach permissions boundary to Project', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    const project = new codebuild.Project(stack, 'Project', {
        source: codebuild.Source.gitHub({ owner: 'a', repo: 'b' }),
    });
    iam.PermissionsBoundary.of(project).apply(new codebuild.UntrustedCodeBoundaryPolicy(stack, 'Boundary'));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
        PermissionsBoundary: { Ref: 'BoundaryEA298153' },
    });
});
test('can add additional statements Boundary', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    const project = new codebuild.Project(stack, 'Project', {
        source: codebuild.Source.gitHub({ owner: 'a', repo: 'b' }),
    });
    iam.PermissionsBoundary.of(project).apply(new codebuild.UntrustedCodeBoundaryPolicy(stack, 'Boundary', {
        additionalStatements: [
            new iam.PolicyStatement({
                actions: ['a:a'],
                resources: ['b'],
            }),
        ],
    }));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::ManagedPolicy', {
        PolicyDocument: {
            Statement: assertions_1.Match.arrayWith([{
                    Effect: 'Allow',
                    Action: 'a:a',
                    Resource: 'b',
                }]),
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW50cnVzdGVkLWNvZGUtYm91bmRhcnkudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVudHJ1c3RlZC1jb2RlLWJvdW5kYXJ5LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBbUQ7QUFDbkQscUNBQXFDO0FBQ3JDLGtDQUFrQztBQUNsQyxvQ0FBb0M7QUFFcEMsSUFBSSxDQUFDLDRDQUE0QyxFQUFFLEdBQUcsRUFBRTtJQUN0RCxRQUFRO0lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFOUIsT0FBTztJQUNQLE1BQU0sT0FBTyxHQUFHLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO1FBQ3RELE1BQU0sRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO0tBQzNELENBQUMsQ0FBQztJQUNILEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLDJCQUEyQixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBRXhHLE9BQU87SUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxnQkFBZ0IsRUFBRTtRQUNoRSxtQkFBbUIsRUFBRSxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRTtLQUNqRCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7SUFDbEQsUUFBUTtJQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRTlCLE9BQU87SUFDUCxNQUFNLE9BQU8sR0FBRyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtRQUN0RCxNQUFNLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztLQUMzRCxDQUFDLENBQUM7SUFDSCxHQUFHLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO1FBQ3JHLG9CQUFvQixFQUFFO1lBQ3BCLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztnQkFDdEIsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDO2dCQUNoQixTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUM7YUFDakIsQ0FBQztTQUNIO0tBQ0YsQ0FBQyxDQUFDLENBQUM7SUFFSixPQUFPO0lBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMseUJBQXlCLEVBQUU7UUFDekUsY0FBYyxFQUFFO1lBQ2QsU0FBUyxFQUFFLGtCQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQzFCLE1BQU0sRUFBRSxPQUFPO29CQUNmLE1BQU0sRUFBRSxLQUFLO29CQUNiLFFBQVEsRUFBRSxHQUFHO2lCQUNkLENBQUMsQ0FBQztTQUNKO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXRjaCwgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIGlhbSBmcm9tICcuLi8uLi9hd3MtaWFtJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIGNvZGVidWlsZCBmcm9tICcuLi9saWInO1xuXG50ZXN0KCdjYW4gYXR0YWNoIHBlcm1pc3Npb25zIGJvdW5kYXJ5IHRvIFByb2plY3QnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gIC8vIFdIRU5cbiAgY29uc3QgcHJvamVjdCA9IG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ1Byb2plY3QnLCB7XG4gICAgc291cmNlOiBjb2RlYnVpbGQuU291cmNlLmdpdEh1Yih7IG93bmVyOiAnYScsIHJlcG86ICdiJyB9KSxcbiAgfSk7XG4gIGlhbS5QZXJtaXNzaW9uc0JvdW5kYXJ5Lm9mKHByb2plY3QpLmFwcGx5KG5ldyBjb2RlYnVpbGQuVW50cnVzdGVkQ29kZUJvdW5kYXJ5UG9saWN5KHN0YWNrLCAnQm91bmRhcnknKSk7XG5cbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpJQU06OlJvbGUnLCB7XG4gICAgUGVybWlzc2lvbnNCb3VuZGFyeTogeyBSZWY6ICdCb3VuZGFyeUVBMjk4MTUzJyB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCdjYW4gYWRkIGFkZGl0aW9uYWwgc3RhdGVtZW50cyBCb3VuZGFyeScsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgLy8gV0hFTlxuICBjb25zdCBwcm9qZWN0ID0gbmV3IGNvZGVidWlsZC5Qcm9qZWN0KHN0YWNrLCAnUHJvamVjdCcsIHtcbiAgICBzb3VyY2U6IGNvZGVidWlsZC5Tb3VyY2UuZ2l0SHViKHsgb3duZXI6ICdhJywgcmVwbzogJ2InIH0pLFxuICB9KTtcbiAgaWFtLlBlcm1pc3Npb25zQm91bmRhcnkub2YocHJvamVjdCkuYXBwbHkobmV3IGNvZGVidWlsZC5VbnRydXN0ZWRDb2RlQm91bmRhcnlQb2xpY3koc3RhY2ssICdCb3VuZGFyeScsIHtcbiAgICBhZGRpdGlvbmFsU3RhdGVtZW50czogW1xuICAgICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICBhY3Rpb25zOiBbJ2E6YSddLFxuICAgICAgICByZXNvdXJjZXM6IFsnYiddLFxuICAgICAgfSksXG4gICAgXSxcbiAgfSkpO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6SUFNOjpNYW5hZ2VkUG9saWN5Jywge1xuICAgIFBvbGljeURvY3VtZW50OiB7XG4gICAgICBTdGF0ZW1lbnQ6IE1hdGNoLmFycmF5V2l0aChbe1xuICAgICAgICBFZmZlY3Q6ICdBbGxvdycsXG4gICAgICAgIEFjdGlvbjogJ2E6YScsXG4gICAgICAgIFJlc291cmNlOiAnYicsXG4gICAgICB9XSksXG4gICAgfSxcbiAgfSk7XG59KTtcbiJdfQ==