"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path_1 = require("path");
const assertions_1 = require("../../assertions");
const aws_iam_1 = require("../../aws-iam");
const aws_s3_assets_1 = require("../../aws-s3-assets");
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe('codecommit', () => {
    describe('CodeCommit Repositories', () => {
        test('add an SNS trigger to repository', () => {
            const stack = new core_1.Stack();
            const props = {
                repositoryName: 'MyRepository',
            };
            const snsArn = 'arn:aws:sns:*:123456789012:my_topic';
            new lib_1.Repository(stack, 'MyRepository', props).notify(snsArn);
            assertions_1.Template.fromStack(stack).templateMatches({
                Resources: {
                    MyRepository4C4BD5FC: {
                        Type: 'AWS::CodeCommit::Repository',
                        Properties: {
                            RepositoryName: 'MyRepository',
                            Triggers: [
                                {
                                    Events: [
                                        'all',
                                    ],
                                    DestinationArn: 'arn:aws:sns:*:123456789012:my_topic',
                                    Name: 'Default/MyRepository/arn:aws:sns:*:123456789012:my_topic',
                                },
                            ],
                        },
                    },
                },
            });
        });
        test('fails when triggers have duplicate names', () => {
            const stack = new core_1.Stack();
            const myRepository = new lib_1.Repository(stack, 'MyRepository', {
                repositoryName: 'MyRepository',
            }).notify('myTrigger');
            expect(() => myRepository.notify('myTrigger')).toThrow();
        });
        test('can be imported using a Repository ARN', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const repositoryArn = 'arn:aws:codecommit:us-east-1:585695036304:my-repo';
            // WHEN
            const repo = lib_1.Repository.fromRepositoryArn(stack, 'ImportedRepo', repositoryArn);
            // THEN
            expect(stack.resolve(repo.repositoryArn)).toEqual(repositoryArn);
            expect(stack.resolve(repo.repositoryName)).toEqual('my-repo');
        });
        test('Repository can be initialized with contents from a ZIP file', () => {
            // GIVEN
            const app = new core_1.App();
            const stack = new core_1.Stack(app, 'MyStack');
            // WHEN
            new lib_1.Repository(stack, 'Repository', {
                repositoryName: 'MyRepositoryName',
                code: lib_1.Code.fromZipFile((0, path_1.join)(__dirname, 'asset-test.zip')),
            });
            const assembly = app.synth();
            const assets = JSON.parse(fs.readFileSync((0, path_1.join)(assembly.directory, `${stack.stackName}.assets.json`), 'utf-8'));
            // our asset + the template itself
            expect(Object.entries(assets.files)).toHaveLength(2);
        });
        test('Repository can be initialized with contents from a directory', () => {
            // GIVEN
            const app = new core_1.App();
            const stack = new core_1.Stack(app, 'MyStack');
            // WHEN
            new lib_1.Repository(stack, 'Repository', {
                repositoryName: 'MyRepositoryName',
                code: lib_1.Code.fromDirectory((0, path_1.join)(__dirname, 'asset-test')),
            });
            const assembly = app.synth();
            const assets = JSON.parse(fs.readFileSync((0, path_1.join)(assembly.directory, `${stack.stackName}.assets.json`), 'utf-8'));
            // our asset + the template itself
            expect(Object.entries(assets.files)).toHaveLength(2);
        });
        test('Repository can be initialized with contents from an asset', () => {
            // GIVEN
            const app = new core_1.App();
            const stack = new core_1.Stack(app, 'MyStack');
            const readmeAsset = new aws_s3_assets_1.Asset(stack, 'ReadmeAsset', {
                path: (0, path_1.join)(__dirname, 'asset-test'),
            });
            // WHEN
            new lib_1.Repository(stack, 'Repository', {
                repositoryName: 'MyRepositoryName',
                code: lib_1.Code.fromAsset(readmeAsset),
            });
            // THEN
            const assembly = app.synth();
            const assets = JSON.parse(fs.readFileSync((0, path_1.join)(assembly.directory, `${stack.stackName}.assets.json`), 'utf-8'));
            // our asset + the template itself
            expect(Object.entries(assets.files)).toHaveLength(2);
        });
        test('Repository throws Error when initialized with file while expecting directory', () => {
            // GIVEN
            const app = new core_1.App();
            const stack = new core_1.Stack(app, 'MyStack');
            const filePath = (0, path_1.join)(__dirname, 'asset-test/test.md');
            // THEN
            expect(() => {
                new lib_1.Repository(stack, 'Repository', {
                    repositoryName: 'MyRepositoryName',
                    code: lib_1.Code.fromDirectory(filePath),
                });
            }).toThrow(`'${filePath}' needs to be a path to a directory (resolved to: '${(0, path_1.resolve)(filePath)}')`);
        });
        test('Repository throws Error when initialized with directory while expecting file', () => {
            // GIVEN
            const app = new core_1.App();
            const stack = new core_1.Stack(app, 'MyStack');
            const dirPath = (0, path_1.join)(__dirname, 'asset-test/');
            // THEN
            expect(() => {
                new lib_1.Repository(stack, 'Repository', {
                    repositoryName: 'MyRepositoryName',
                    code: lib_1.Code.fromZipFile(dirPath),
                });
            }).toThrow(`'${dirPath}' needs to be a path to a ZIP file (resolved to: '${(0, path_1.resolve)(dirPath)}')`);
        });
        /**
         * Fix for https://github.com/aws/aws-cdk/issues/10630
         */
        test('can be imported using a Repository ARN and respect the region in clone urls', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const repositoryArn = 'arn:aws:codecommit:us-west-2:585695036304:my-repo';
            // WHEN
            const repo = lib_1.Repository.fromRepositoryArn(stack, 'ImportedRepo', repositoryArn);
            // THEN
            // a fully qualified arn should use the region from the arn
            expect(stack.resolve(repo.repositoryCloneUrlHttp)).toEqual({
                'Fn::Join': [
                    '',
                    [
                        'https://git-codecommit.us-west-2.',
                        { Ref: 'AWS::URLSuffix' },
                        '/v1/repos/my-repo',
                    ],
                ],
            });
            expect(stack.resolve(repo.repositoryCloneUrlSsh)).toEqual({
                'Fn::Join': [
                    '',
                    [
                        'ssh://git-codecommit.us-west-2.',
                        { Ref: 'AWS::URLSuffix' },
                        '/v1/repos/my-repo',
                    ],
                ],
            });
            expect(stack.resolve(repo.repositoryCloneUrlGrc)).toEqual('codecommit::us-west-2://my-repo');
            expect(repo.env.account).toEqual('585695036304');
            expect(repo.env.region).toEqual('us-west-2');
        });
        test('can be imported using just a Repository name (the ARN is deduced)', () => {
            // GIVEN
            const stack = new core_1.Stack();
            // WHEN
            const repo = lib_1.Repository.fromRepositoryName(stack, 'ImportedRepo', 'my-repo');
            // THEN
            expect(stack.resolve(repo.repositoryArn)).toEqual({
                'Fn::Join': ['', [
                        'arn:',
                        { Ref: 'AWS::Partition' },
                        ':codecommit:',
                        { Ref: 'AWS::Region' },
                        ':',
                        { Ref: 'AWS::AccountId' },
                        ':my-repo',
                    ]],
            });
            expect(stack.resolve(repo.repositoryName)).toEqual('my-repo');
            //local name resolution should use stack region
            expect(stack.resolve(repo.repositoryCloneUrlHttp)).toEqual({
                'Fn::Join': [
                    '',
                    [
                        'https://git-codecommit.',
                        { Ref: 'AWS::Region' },
                        '.',
                        { Ref: 'AWS::URLSuffix' },
                        '/v1/repos/my-repo',
                    ],
                ],
            });
            expect(stack.resolve(repo.repositoryCloneUrlGrc)).toEqual({
                'Fn::Join': [
                    '',
                    [
                        'codecommit::',
                        { Ref: 'AWS::Region' },
                        '://my-repo',
                    ],
                ],
            });
        });
        test('grant push', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const repository = new lib_1.Repository(stack, 'Repo', {
                repositoryName: 'repo-name',
            });
            const role = new aws_iam_1.Role(stack, 'Role', {
                assumedBy: new aws_iam_1.ServicePrincipal('ec2.amazonaws.com'),
            });
            // WHEN
            repository.grantPullPush(role);
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                PolicyDocument: {
                    Statement: [
                        {
                            Action: 'codecommit:GitPull',
                            Effect: 'Allow',
                            Resource: {
                                'Fn::GetAtt': [
                                    'Repo02AC86CF',
                                    'Arn',
                                ],
                            },
                        },
                        {
                            Action: 'codecommit:GitPush',
                            Effect: 'Allow',
                            Resource: {
                                'Fn::GetAtt': [
                                    'Repo02AC86CF',
                                    'Arn',
                                ],
                            },
                        },
                    ],
                    Version: '2012-10-17',
                },
            });
        });
        test('HTTPS (GRC) clone URL', () => {
            const stack = new core_1.Stack();
            const repository = new lib_1.Repository(stack, 'Repository', {
                repositoryName: 'my-repo',
            });
            expect(stack.resolve(repository.repositoryCloneUrlGrc)).toEqual({
                'Fn::Join': [
                    '',
                    [
                        'codecommit::',
                        { Ref: 'AWS::Region' },
                        '://',
                        { 'Fn::GetAtt': ['Repository22E53BBD', 'Name'] },
                    ],
                ],
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,