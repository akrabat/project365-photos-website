"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const lambda = require("../../../aws-lambda");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const cdk = require("../../../core");
const codedeploy = require("../../lib");
function mockFunction(stack, id) {
    return new lambda.Function(stack, id, {
        code: lambda.Code.fromInline('mock'),
        handler: 'index.handler',
        runtime: lambda.Runtime.NODEJS_14_X,
    });
}
function mockAlias(stack) {
    return new lambda.Alias(stack, 'Alias', {
        aliasName: 'my-alias',
        version: new lambda.Version(stack, 'Version', {
            lambda: mockFunction(stack, 'Function'),
        }),
    });
}
let stack;
let application;
let alias;
beforeEach(() => {
    stack = new cdk.Stack();
    application = new codedeploy.LambdaApplication(stack, 'MyApp');
    alias = mockAlias(stack);
});
(0, cdk_build_tools_1.testDeprecated)('custom resource created', () => {
    // WHEN
    const config = new codedeploy.CustomLambdaDeploymentConfig(stack, 'CustomConfig', {
        type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,
        interval: cdk.Duration.minutes(1),
        percentage: 5,
    });
    new codedeploy.LambdaDeploymentGroup(stack, 'MyDG', {
        application,
        alias,
        deploymentConfig: config,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::AWS', {
        ServiceToken: {
            'Fn::GetAtt': [
                'AWS679f53fac002430cb0da5b7982bd22872D164C4C',
                'Arn',
            ],
        },
        Create: '{"service":"CodeDeploy","action":"createDeploymentConfig","parameters":{"deploymentConfigName":"CustomConfig.LambdaCanary5Percent1Minutes","computePlatform":"Lambda","trafficRoutingConfig":{"type":"TimeBasedCanary","timeBasedCanary":{"canaryInterval":"1","canaryPercentage":"5"}}},"physicalResourceId":{"id":"CustomConfig.LambdaCanary5Percent1Minutes"}}',
        Update: '{"service":"CodeDeploy","action":"createDeploymentConfig","parameters":{"deploymentConfigName":"CustomConfig.LambdaCanary5Percent1Minutes","computePlatform":"Lambda","trafficRoutingConfig":{"type":"TimeBasedCanary","timeBasedCanary":{"canaryInterval":"1","canaryPercentage":"5"}}},"physicalResourceId":{"id":"CustomConfig.LambdaCanary5Percent1Minutes"}}',
        Delete: '{"service":"CodeDeploy","action":"deleteDeploymentConfig","parameters":{"deploymentConfigName":"CustomConfig.LambdaCanary5Percent1Minutes"}}',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: 'codedeploy:CreateDeploymentConfig',
                    Effect: 'Allow',
                    Resource: '*',
                },
                {
                    Action: 'codedeploy:DeleteDeploymentConfig',
                    Effect: 'Allow',
                    Resource: '*',
                },
            ],
            Version: '2012-10-17',
        },
    });
});
(0, cdk_build_tools_1.testDeprecated)('custom resource created with specific name', () => {
    // WHEN
    const config = new codedeploy.CustomLambdaDeploymentConfig(stack, 'CustomConfig', {
        type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,
        interval: cdk.Duration.minutes(1),
        percentage: 5,
        deploymentConfigName: 'MyDeploymentConfig',
    });
    new codedeploy.LambdaDeploymentGroup(stack, 'MyDG', {
        application,
        alias,
        deploymentConfig: config,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::AWS', {
        Create: '{"service":"CodeDeploy","action":"createDeploymentConfig","parameters":{"deploymentConfigName":"MyDeploymentConfig","computePlatform":"Lambda","trafficRoutingConfig":{"type":"TimeBasedCanary","timeBasedCanary":{"canaryInterval":"1","canaryPercentage":"5"}}},"physicalResourceId":{"id":"MyDeploymentConfig"}}',
        Update: '{"service":"CodeDeploy","action":"createDeploymentConfig","parameters":{"deploymentConfigName":"MyDeploymentConfig","computePlatform":"Lambda","trafficRoutingConfig":{"type":"TimeBasedCanary","timeBasedCanary":{"canaryInterval":"1","canaryPercentage":"5"}}},"physicalResourceId":{"id":"MyDeploymentConfig"}}',
        Delete: '{"service":"CodeDeploy","action":"deleteDeploymentConfig","parameters":{"deploymentConfigName":"MyDeploymentConfig"}}',
    });
});
(0, cdk_build_tools_1.testDeprecated)('fail with more than 100 characters in name', () => {
    const app = new cdk.App();
    const stackWithApp = new cdk.Stack(app);
    new codedeploy.CustomLambdaDeploymentConfig(stackWithApp, 'CustomConfig', {
        type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,
        interval: cdk.Duration.minutes(1),
        percentage: 5,
        deploymentConfigName: 'a'.repeat(101),
    });
    expect(() => app.synth()).toThrow(`Deployment config name: "${'a'.repeat(101)}" can be a max of 100 characters.`);
});
(0, cdk_build_tools_1.testDeprecated)('fail with unallowed characters in name', () => {
    const app = new cdk.App();
    const stackWithApp = new cdk.Stack(app);
    new codedeploy.CustomLambdaDeploymentConfig(stackWithApp, 'CustomConfig', {
        type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,
        interval: cdk.Duration.minutes(1),
        percentage: 5,
        deploymentConfigName: 'my name',
    });
    expect(() => app.synth()).toThrow('Deployment config name: "my name" can only contain letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), + (plus signs), = (equals signs), , (commas), @ (at signs), - (minus signs).');
});
(0, cdk_build_tools_1.testDeprecated)('can create linear custom config', () => {
    // WHEN
    const config = new codedeploy.CustomLambdaDeploymentConfig(stack, 'CustomConfig', {
        type: codedeploy.CustomLambdaDeploymentConfigType.LINEAR,
        interval: cdk.Duration.minutes(1),
        percentage: 5,
    });
    new codedeploy.LambdaDeploymentGroup(stack, 'MyDG', {
        application,
        alias,
        deploymentConfig: config,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeDeploy::DeploymentGroup', {
        DeploymentConfigName: 'CustomConfig.LambdaLinear5PercentEvery1Minutes',
    });
});
(0, cdk_build_tools_1.testDeprecated)('can create canary custom config', () => {
    // WHEN
    const config = new codedeploy.CustomLambdaDeploymentConfig(stack, 'CustomConfig', {
        type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,
        interval: cdk.Duration.minutes(1),
        percentage: 5,
    });
    new codedeploy.LambdaDeploymentGroup(stack, 'MyDG', {
        application,
        alias,
        deploymentConfig: config,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeDeploy::DeploymentGroup', {
        DeploymentConfigName: 'CustomConfig.LambdaCanary5Percent1Minutes',
    });
});
(0, cdk_build_tools_1.testDeprecated)('dependency on the config exists to ensure ordering', () => {
    // WHEN
    const config = new codedeploy.CustomLambdaDeploymentConfig(stack, 'CustomConfig', {
        type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,
        interval: cdk.Duration.minutes(1),
        percentage: 5,
    });
    new codedeploy.LambdaDeploymentGroup(stack, 'MyDG', {
        application,
        alias,
        deploymentConfig: config,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResource('AWS::CodeDeploy::DeploymentGroup', {
        Properties: {
            DeploymentConfigName: 'CustomConfig.LambdaCanary5Percent1Minutes',
        },
        DependsOn: [
            'CustomConfigDeploymentConfigCustomResourcePolicy0426B684',
            'CustomConfigDeploymentConfigE9E1F384',
        ],
    });
});
//# sourceMappingURL=data:application/json;base64,