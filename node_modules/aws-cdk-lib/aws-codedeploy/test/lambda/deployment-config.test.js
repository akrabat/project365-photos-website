"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const cdk = require("../../../core");
const codedeploy = require("../../lib");
const lib_1 = require("../../lib");
/* eslint-disable quote-props */
let stack;
beforeEach(() => {
    stack = new cdk.Stack();
});
test('can create default config', () => {
    // WHEN
    new codedeploy.LambdaDeploymentConfig(stack, 'MyConfig');
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeDeploy::DeploymentConfig', {
        'ComputePlatform': 'Lambda',
        'TrafficRoutingConfig': {
            'Type': 'AllAtOnce',
        },
    });
});
test('can create all-at-once config', () => {
    // WHEN
    new codedeploy.LambdaDeploymentConfig(stack, 'MyConfig', {
        trafficRouting: lib_1.TrafficRouting.allAtOnce(),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeDeploy::DeploymentConfig', {
        'ComputePlatform': 'Lambda',
        'TrafficRoutingConfig': {
            'Type': 'AllAtOnce',
        },
    });
});
test('can create linear config', () => {
    // WHEN
    new codedeploy.LambdaDeploymentConfig(stack, 'MyConfig', {
        trafficRouting: lib_1.TrafficRouting.timeBasedLinear({
            interval: cdk.Duration.minutes(1),
            percentage: 5,
        }),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeDeploy::DeploymentConfig', {
        'ComputePlatform': 'Lambda',
        'TrafficRoutingConfig': {
            'TimeBasedLinear': {
                'LinearInterval': 1,
                'LinearPercentage': 5,
            },
            'Type': 'TimeBasedLinear',
        },
    });
});
test('can create canary config', () => {
    // WHEN
    new codedeploy.LambdaDeploymentConfig(stack, 'MyConfig', {
        trafficRouting: lib_1.TrafficRouting.timeBasedCanary({
            interval: cdk.Duration.minutes(1),
            percentage: 5,
        }),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeDeploy::DeploymentConfig', {
        'ComputePlatform': 'Lambda',
        'TrafficRoutingConfig': {
            'TimeBasedCanary': {
                'CanaryInterval': 1,
                'CanaryPercentage': 5,
            },
            'Type': 'TimeBasedCanary',
        },
    });
});
test('can create a config with a specific name', () => {
    // WHEN
    new codedeploy.LambdaDeploymentConfig(stack, 'MyConfig', {
        deploymentConfigName: 'MyCanaryConfig',
        trafficRouting: lib_1.TrafficRouting.timeBasedCanary({
            interval: cdk.Duration.minutes(1),
            percentage: 5,
        }),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeDeploy::DeploymentConfig', {
        'ComputePlatform': 'Lambda',
        'DeploymentConfigName': 'MyCanaryConfig',
        'TrafficRoutingConfig': {
            'TimeBasedCanary': {
                'CanaryInterval': 1,
                'CanaryPercentage': 5,
            },
            'Type': 'TimeBasedCanary',
        },
    });
});
test('can be imported', () => {
    const deploymentConfig = codedeploy.LambdaDeploymentConfig.fromLambdaDeploymentConfigName(stack, 'MyDC', 'MyDC');
    expect(deploymentConfig).not.toEqual(undefined);
});
test('fail with more than 100 characters in name', () => {
    const app = new cdk.App();
    const stackWithApp = new cdk.Stack(app);
    new codedeploy.LambdaDeploymentConfig(stackWithApp, 'MyConfig', {
        trafficRouting: lib_1.TrafficRouting.timeBasedCanary({
            interval: cdk.Duration.minutes(1),
            percentage: 5,
        }),
        deploymentConfigName: 'a'.repeat(101),
    });
    expect(() => app.synth()).toThrow(`Deployment config name: "${'a'.repeat(101)}" can be a max of 100 characters.`);
});
test('fail with unallowed characters in name', () => {
    const app = new cdk.App();
    const stackWithApp = new cdk.Stack(app);
    new codedeploy.LambdaDeploymentConfig(stackWithApp, 'MyConfig', {
        trafficRouting: lib_1.TrafficRouting.timeBasedCanary({
            interval: cdk.Duration.minutes(1),
            percentage: 5,
        }),
        deploymentConfigName: 'my name',
    });
    expect(() => app.synth()).toThrow('Deployment config name: "my name" can only contain letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), + (plus signs), = (equals signs), , (commas), @ (at signs), - (minus signs).');
});
//# sourceMappingURL=data:application/json;base64,