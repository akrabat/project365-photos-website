"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const aws_iam_1 = require("../../aws-iam");
const core_1 = require("../../core");
const lib_1 = require("../lib");
/* eslint-disable quote-props */
describe('profiling group', () => {
    test('attach read permission to Profiling group via fromProfilingGroupArn', () => {
        const stack = new core_1.Stack();
        // dummy role to test out read permissions on ProfilingGroup
        const readAppRole = new aws_iam_1.Role(stack, 'ReadAppRole', {
            assumedBy: new aws_iam_1.AccountRootPrincipal(),
        });
        const profilingGroup = lib_1.ProfilingGroup.fromProfilingGroupArn(stack, 'MyProfilingGroup', 'arn:aws:codeguru-profiler:us-east-1:1234567890:profilingGroup/MyAwesomeProfilingGroup');
        expect(profilingGroup.profilingGroupName).toBe('MyAwesomeProfilingGroup');
        expect(profilingGroup.profilingGroupArn).toBe('arn:aws:codeguru-profiler:us-east-1:1234567890:profilingGroup/MyAwesomeProfilingGroup');
        expect(profilingGroup.env.region).toBe('us-east-1');
        profilingGroup.grantRead(readAppRole);
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'ReadAppRole52FE6317': {
                    'Type': 'AWS::IAM::Role',
                    'Properties': {
                        'AssumeRolePolicyDocument': {
                            'Statement': [
                                {
                                    'Action': 'sts:AssumeRole',
                                    'Effect': 'Allow',
                                    'Principal': {
                                        'AWS': {
                                            'Fn::Join': [
                                                '',
                                                [
                                                    'arn:',
                                                    {
                                                        'Ref': 'AWS::Partition',
                                                    },
                                                    ':iam::',
                                                    {
                                                        'Ref': 'AWS::AccountId',
                                                    },
                                                    ':root',
                                                ],
                                            ],
                                        },
                                    },
                                },
                            ],
                            'Version': '2012-10-17',
                        },
                    },
                },
                'ReadAppRoleDefaultPolicy4BB8955C': {
                    'Type': 'AWS::IAM::Policy',
                    'Properties': {
                        'PolicyDocument': {
                            'Statement': [
                                {
                                    'Action': [
                                        'codeguru-profiler:GetProfile',
                                        'codeguru-profiler:DescribeProfilingGroup',
                                    ],
                                    'Effect': 'Allow',
                                    'Resource': 'arn:aws:codeguru-profiler:us-east-1:1234567890:profilingGroup/MyAwesomeProfilingGroup',
                                },
                            ],
                            'Version': '2012-10-17',
                        },
                        'PolicyName': 'ReadAppRoleDefaultPolicy4BB8955C',
                        'Roles': [
                            {
                                'Ref': 'ReadAppRole52FE6317',
                            },
                        ],
                    },
                },
            },
        });
    });
    test('attach publish permission to Profiling group via fromProfilingGroupName', () => {
        const stack = new core_1.Stack();
        // dummy role to test out publish permissions on ProfilingGroup
        const publishAppRole = new aws_iam_1.Role(stack, 'PublishAppRole', {
            assumedBy: new aws_iam_1.AccountRootPrincipal(),
        });
        const profilingGroup = lib_1.ProfilingGroup.fromProfilingGroupName(stack, 'MyProfilingGroup', 'MyAwesomeProfilingGroup');
        profilingGroup.grantPublish(publishAppRole);
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'PublishAppRole9FEBD682': {
                    'Type': 'AWS::IAM::Role',
                    'Properties': {
                        'AssumeRolePolicyDocument': {
                            'Statement': [
                                {
                                    'Action': 'sts:AssumeRole',
                                    'Effect': 'Allow',
                                    'Principal': {
                                        'AWS': {
                                            'Fn::Join': [
                                                '',
                                                [
                                                    'arn:',
                                                    {
                                                        'Ref': 'AWS::Partition',
                                                    },
                                                    ':iam::',
                                                    {
                                                        'Ref': 'AWS::AccountId',
                                                    },
                                                    ':root',
                                                ],
                                            ],
                                        },
                                    },
                                },
                            ],
                            'Version': '2012-10-17',
                        },
                    },
                },
                'PublishAppRoleDefaultPolicyCA1E15C3': {
                    'Type': 'AWS::IAM::Policy',
                    'Properties': {
                        'PolicyDocument': {
                            'Statement': [
                                {
                                    'Action': [
                                        'codeguru-profiler:ConfigureAgent',
                                        'codeguru-profiler:PostAgentProfile',
                                    ],
                                    'Effect': 'Allow',
                                    'Resource': {
                                        'Fn::Join': [
                                            '',
                                            [
                                                'arn:',
                                                {
                                                    'Ref': 'AWS::Partition',
                                                },
                                                ':codeguru-profiler:',
                                                {
                                                    'Ref': 'AWS::Region',
                                                },
                                                ':',
                                                {
                                                    'Ref': 'AWS::AccountId',
                                                },
                                                ':profilingGroup/MyAwesomeProfilingGroup',
                                            ],
                                        ],
                                    },
                                },
                            ],
                            'Version': '2012-10-17',
                        },
                        'PolicyName': 'PublishAppRoleDefaultPolicyCA1E15C3',
                        'Roles': [
                            {
                                'Ref': 'PublishAppRole9FEBD682',
                            },
                        ],
                    },
                },
            },
        });
    });
    test('use name specified via fromProfilingGroupName', () => {
        const stack = new core_1.Stack();
        const profilingGroup = lib_1.ProfilingGroup.fromProfilingGroupName(stack, 'MyProfilingGroup', 'MyAwesomeProfilingGroup');
        expect(profilingGroup.profilingGroupName).toEqual('MyAwesomeProfilingGroup');
    });
    test('default profiling group', () => {
        const stack = new core_1.Stack();
        new lib_1.ProfilingGroup(stack, 'MyProfilingGroup', {
            profilingGroupName: 'MyAwesomeProfilingGroup',
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'MyProfilingGroup829F0507': {
                    'Type': 'AWS::CodeGuruProfiler::ProfilingGroup',
                    'Properties': {
                        'ProfilingGroupName': 'MyAwesomeProfilingGroup',
                    },
                },
            },
        });
    });
    test('allows setting its ComputePlatform', () => {
        const stack = new core_1.Stack();
        new lib_1.ProfilingGroup(stack, 'MyProfilingGroup', {
            profilingGroupName: 'MyAwesomeProfilingGroup',
            computePlatform: lib_1.ComputePlatform.AWS_LAMBDA,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodeGuruProfiler::ProfilingGroup', {
            'ComputePlatform': 'AWSLambda',
        });
    });
    test('default profiling group without name', () => {
        const stack = new core_1.Stack();
        new lib_1.ProfilingGroup(stack, 'MyProfilingGroup', {});
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'MyProfilingGroup829F0507': {
                    'Type': 'AWS::CodeGuruProfiler::ProfilingGroup',
                    'Properties': {
                        'ProfilingGroupName': 'MyProfilingGroup',
                    },
                },
            },
        });
    });
    test('default profiling group without name when name exceeding limit is generated', () => {
        const stack = new core_1.Stack();
        new lib_1.ProfilingGroup(stack, 'MyProfilingGroupWithAReallyLongProfilingGroupNameThatExceedsTheLimitOfProfilingGroupNameSize_InOrderToDoSoTheNameMustBeGreaterThanTwoHundredAndFiftyFiveCharacters_InSuchCasesWePickUpTheFirstOneTwentyCharactersFromTheBeginningAndTheEndAndConcatenateThemToGetTheIdentifier', {});
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'MyProfilingGroupWithAReallyLongProfilingGroupNameThatExceedsTheLimitOfProfilingGroupNameSizeInOrderToDoSoTheNameMustBeGreaterThanTwoHundredAndFiftyFiveCharactersInSuchCasesWePickUpTheFirstOneTwentyCharactersFromTheBeginningAndTheEndAndConca4B39908C': {
                    'Type': 'AWS::CodeGuruProfiler::ProfilingGroup',
                    'Properties': {
                        'ProfilingGroupName': 'MyProfilingGroupWithAReallyLongProfilingGroupNameThatExceedsTheLimitOfProfilingGroupNameSizeInOrderToDoSoTheNameMustBeGrnTwoHundredAndFiftyFiveCharactersInSuchCasesWePickUpTheFirstOneTwentyCharactersFromTheBeginningAndTheEndAndConca2FE009B0',
                    },
                },
            },
        });
    });
    test('grant publish permissions profiling group', () => {
        const stack = new core_1.Stack();
        const profilingGroup = new lib_1.ProfilingGroup(stack, 'MyProfilingGroup', {
            profilingGroupName: 'MyAwesomeProfilingGroup',
        });
        const publishAppRole = new aws_iam_1.Role(stack, 'PublishAppRole', {
            assumedBy: new aws_iam_1.AccountRootPrincipal(),
        });
        profilingGroup.grantPublish(publishAppRole);
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'MyProfilingGroup829F0507': {
                    'Type': 'AWS::CodeGuruProfiler::ProfilingGroup',
                    'Properties': {
                        'ProfilingGroupName': 'MyAwesomeProfilingGroup',
                    },
                },
                'PublishAppRole9FEBD682': {
                    'Type': 'AWS::IAM::Role',
                    'Properties': {
                        'AssumeRolePolicyDocument': {
                            'Statement': [
                                {
                                    'Action': 'sts:AssumeRole',
                                    'Effect': 'Allow',
                                    'Principal': {
                                        'AWS': {
                                            'Fn::Join': [
                                                '',
                                                [
                                                    'arn:',
                                                    {
                                                        'Ref': 'AWS::Partition',
                                                    },
                                                    ':iam::',
                                                    {
                                                        'Ref': 'AWS::AccountId',
                                                    },
                                                    ':root',
                                                ],
                                            ],
                                        },
                                    },
                                },
                            ],
                            'Version': '2012-10-17',
                        },
                    },
                },
                'PublishAppRoleDefaultPolicyCA1E15C3': {
                    'Type': 'AWS::IAM::Policy',
                    'Properties': {
                        'PolicyDocument': {
                            'Statement': [
                                {
                                    'Action': [
                                        'codeguru-profiler:ConfigureAgent',
                                        'codeguru-profiler:PostAgentProfile',
                                    ],
                                    'Effect': 'Allow',
                                    'Resource': {
                                        'Fn::GetAtt': [
                                            'MyProfilingGroup829F0507',
                                            'Arn',
                                        ],
                                    },
                                },
                            ],
                            'Version': '2012-10-17',
                        },
                        'PolicyName': 'PublishAppRoleDefaultPolicyCA1E15C3',
                        'Roles': [
                            {
                                'Ref': 'PublishAppRole9FEBD682',
                            },
                        ],
                    },
                },
            },
        });
    });
    test('grant read permissions profiling group', () => {
        const stack = new core_1.Stack();
        const profilingGroup = new lib_1.ProfilingGroup(stack, 'MyProfilingGroup', {
            profilingGroupName: 'MyAwesomeProfilingGroup',
        });
        const readAppRole = new aws_iam_1.Role(stack, 'ReadAppRole', {
            assumedBy: new aws_iam_1.AccountRootPrincipal(),
        });
        profilingGroup.grantRead(readAppRole);
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'MyProfilingGroup829F0507': {
                    'Type': 'AWS::CodeGuruProfiler::ProfilingGroup',
                    'Properties': {
                        'ProfilingGroupName': 'MyAwesomeProfilingGroup',
                    },
                },
                'ReadAppRole52FE6317': {
                    'Type': 'AWS::IAM::Role',
                    'Properties': {
                        'AssumeRolePolicyDocument': {
                            'Statement': [
                                {
                                    'Action': 'sts:AssumeRole',
                                    'Effect': 'Allow',
                                    'Principal': {
                                        'AWS': {
                                            'Fn::Join': [
                                                '',
                                                [
                                                    'arn:',
                                                    {
                                                        'Ref': 'AWS::Partition',
                                                    },
                                                    ':iam::',
                                                    {
                                                        'Ref': 'AWS::AccountId',
                                                    },
                                                    ':root',
                                                ],
                                            ],
                                        },
                                    },
                                },
                            ],
                            'Version': '2012-10-17',
                        },
                    },
                },
                'ReadAppRoleDefaultPolicy4BB8955C': {
                    'Type': 'AWS::IAM::Policy',
                    'Properties': {
                        'PolicyDocument': {
                            'Statement': [
                                {
                                    'Action': [
                                        'codeguru-profiler:GetProfile',
                                        'codeguru-profiler:DescribeProfilingGroup',
                                    ],
                                    'Effect': 'Allow',
                                    'Resource': {
                                        'Fn::GetAtt': [
                                            'MyProfilingGroup829F0507',
                                            'Arn',
                                        ],
                                    },
                                },
                            ],
                            'Version': '2012-10-17',
                        },
                        'PolicyName': 'ReadAppRoleDefaultPolicy4BB8955C',
                        'Roles': [
                            {
                                'Ref': 'ReadAppRole52FE6317',
                            },
                        ],
                    },
                },
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,