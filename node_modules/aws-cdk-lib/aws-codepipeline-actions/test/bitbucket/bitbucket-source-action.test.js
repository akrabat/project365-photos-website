"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const codebuild = require("../../../aws-codebuild");
const codepipeline = require("../../../aws-codepipeline");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../../core");
const cpactions = require("../../lib");
/* eslint-disable quote-props */
(0, cdk_build_tools_1.describeDeprecated)('BitBucket source Action', () => {
    describe('BitBucket source Action', () => {
        test('produces the correct configuration when added to a pipeline', () => {
            const stack = new core_1.Stack();
            createBitBucketAndCodeBuildPipeline(stack, {
                codeBuildCloneOutput: false,
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                'Stages': [
                    {
                        'Name': 'Source',
                        'Actions': [
                            {
                                'Name': 'BitBucket',
                                'ActionTypeId': {
                                    'Owner': 'AWS',
                                    'Provider': 'CodeStarSourceConnection',
                                },
                                'Configuration': {
                                    'ConnectionArn': 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh',
                                    'FullRepositoryId': 'aws/aws-cdk',
                                    'BranchName': 'master',
                                },
                            },
                        ],
                    },
                    {
                        'Name': 'Build',
                        'Actions': [
                            {
                                'Name': 'CodeBuild',
                            },
                        ],
                    },
                ],
            });
        });
    });
    test('setting codeBuildCloneOutput=true adds permission to use the connection to the following CodeBuild Project', () => {
        const stack = new core_1.Stack();
        createBitBucketAndCodeBuildPipeline(stack, {
            codeBuildCloneOutput: true,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            'PolicyDocument': {
                'Statement': [
                    {
                        'Action': [
                            'logs:CreateLogGroup',
                            'logs:CreateLogStream',
                            'logs:PutLogEvents',
                        ],
                    },
                    {},
                    {},
                    {},
                    {},
                    {
                        'Action': 'codestar-connections:UseConnection',
                        'Effect': 'Allow',
                        'Resource': 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh',
                    },
                ],
            },
        });
    });
    test('grant s3 putObjectACL to the following CodeBuild Project', () => {
        const stack = new core_1.Stack();
        createBitBucketAndCodeBuildPipeline(stack, {
            codeBuildCloneOutput: true,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            'PolicyDocument': {
                'Statement': assertions_1.Match.arrayWith([
                    assertions_1.Match.objectLike({
                        'Action': [
                            's3:PutObjectAcl',
                            's3:PutObjectVersionAcl',
                        ],
                        'Effect': 'Allow',
                        'Resource': {
                            'Fn::Join': [
                                '',
                                [
                                    {
                                        'Fn::GetAtt': [
                                            'PipelineArtifactsBucket22248F97',
                                            'Arn',
                                        ],
                                    },
                                    '/*',
                                ],
                            ],
                        },
                    }),
                ]),
            },
        });
    });
    test('setting triggerOnPush=false reflects in the configuration', () => {
        const stack = new core_1.Stack();
        createBitBucketAndCodeBuildPipeline(stack, {
            triggerOnPush: false,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            'Stages': [
                {
                    'Name': 'Source',
                    'Actions': [
                        {
                            'Name': 'BitBucket',
                            'ActionTypeId': {
                                'Owner': 'AWS',
                                'Provider': 'CodeStarSourceConnection',
                            },
                            'Configuration': {
                                'ConnectionArn': 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh',
                                'FullRepositoryId': 'aws/aws-cdk',
                                'BranchName': 'master',
                                'DetectChanges': false,
                            },
                        },
                    ],
                },
                {
                    'Name': 'Build',
                    'Actions': [
                        {
                            'Name': 'CodeBuild',
                        },
                    ],
                },
            ],
        });
    });
});
function createBitBucketAndCodeBuildPipeline(stack, props) {
    const sourceOutput = new codepipeline.Artifact();
    new codepipeline.Pipeline(stack, 'Pipeline', {
        stages: [
            {
                stageName: 'Source',
                actions: [
                    new cpactions.BitBucketSourceAction({
                        actionName: 'BitBucket',
                        owner: 'aws',
                        repo: 'aws-cdk',
                        output: sourceOutput,
                        connectionArn: 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh',
                        ...props,
                    }),
                ],
            },
            {
                stageName: 'Build',
                actions: [
                    new cpactions.CodeBuildAction({
                        actionName: 'CodeBuild',
                        project: new codebuild.PipelineProject(stack, 'MyProject'),
                        input: sourceOutput,
                        outputs: [new codepipeline.Artifact()],
                    }),
                ],
            },
        ],
    });
}
//# sourceMappingURL=data:application/json;base64,