"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const codebuild = require("../../../aws-codebuild");
const codecommit = require("../../../aws-codecommit");
const codepipeline = require("../../../aws-codepipeline");
const s3 = require("../../../aws-s3");
const sns = require("../../../aws-sns");
const core_1 = require("../../../core");
const cpactions = require("../../lib");
/* eslint-disable quote-props */
describe('CodeBuild Action', () => {
    describe('CodeBuild action', () => {
        describe('that is cross-account and has outputs', () => {
            test('causes an error', () => {
                const app = new core_1.App();
                const projectStack = new core_1.Stack(app, 'ProjectStack', {
                    env: {
                        region: 'us-west-2',
                        account: '012345678912',
                    },
                });
                const project = new codebuild.PipelineProject(projectStack, 'Project');
                const pipelineStack = new core_1.Stack(app, 'PipelineStack', {
                    env: {
                        region: 'us-west-2',
                        account: '012345678913',
                    },
                });
                const sourceOutput = new codepipeline.Artifact();
                const pipeline = new codepipeline.Pipeline(pipelineStack, 'Pipeline', {
                    stages: [
                        {
                            stageName: 'Source',
                            actions: [new cpactions.CodeCommitSourceAction({
                                    actionName: 'CodeCommit',
                                    repository: codecommit.Repository.fromRepositoryName(pipelineStack, 'Repo', 'repo-name'),
                                    output: sourceOutput,
                                })],
                        },
                    ],
                });
                const buildStage = pipeline.addStage({
                    stageName: 'Build',
                });
                // this works fine - no outputs!
                buildStage.addAction(new cpactions.CodeBuildAction({
                    actionName: 'Build1',
                    input: sourceOutput,
                    project,
                }));
                const buildAction2 = new cpactions.CodeBuildAction({
                    actionName: 'Build2',
                    input: sourceOutput,
                    project,
                    outputs: [new codepipeline.Artifact()],
                });
                expect(() => {
                    buildStage.addAction(buildAction2);
                }).toThrow(/https:\/\/github\.com\/aws\/aws-cdk\/issues\/4169/);
            });
        });
        test('can be backed by an imported project', () => {
            const stack = new core_1.Stack();
            const codeBuildProject = codebuild.PipelineProject.fromProjectName(stack, 'CodeBuild', 'codeBuildProjectNameInAnotherAccount');
            const sourceOutput = new codepipeline.Artifact();
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [
                            new cpactions.S3SourceAction({
                                actionName: 'S3_Source',
                                bucket: new s3.Bucket(stack, 'Bucket'),
                                bucketKey: 'key',
                                output: sourceOutput,
                            }),
                        ],
                    },
                    {
                        stageName: 'Build',
                        actions: [
                            new cpactions.CodeBuildAction({
                                actionName: 'CodeBuild',
                                input: sourceOutput,
                                project: codeBuildProject,
                            }),
                        ],
                    },
                ],
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                'Stages': [
                    {
                        'Name': 'Source',
                    },
                    {
                        'Name': 'Build',
                        'Actions': [
                            {
                                'Name': 'CodeBuild',
                                'Configuration': {
                                    'ProjectName': 'codeBuildProjectNameInAnotherAccount',
                                },
                            },
                        ],
                    },
                ],
            });
        });
        test('exposes variables for other actions to consume', () => {
            const stack = new core_1.Stack();
            const sourceOutput = new codepipeline.Artifact();
            const codeBuildAction = new cpactions.CodeBuildAction({
                actionName: 'CodeBuild',
                input: sourceOutput,
                project: new codebuild.PipelineProject(stack, 'CodeBuild', {
                    buildSpec: codebuild.BuildSpec.fromObject({
                        version: '0.2',
                        env: {
                            'exported-variables': [
                                'SomeVar',
                            ],
                        },
                        phases: {
                            build: {
                                commands: [
                                    'export SomeVar="Some Value"',
                                ],
                            },
                        },
                    }),
                }),
            });
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [
                            new cpactions.S3SourceAction({
                                actionName: 'S3_Source',
                                bucket: s3.Bucket.fromBucketName(stack, 'Bucket', 'bucket'),
                                bucketKey: 'key',
                                output: sourceOutput,
                            }),
                        ],
                    },
                    {
                        stageName: 'Build',
                        actions: [
                            codeBuildAction,
                            new cpactions.ManualApprovalAction({
                                actionName: 'Approve',
                                additionalInformation: codeBuildAction.variable('SomeVar'),
                                notificationTopic: sns.Topic.fromTopicArn(stack, 'Topic', 'arn:aws:sns:us-east-1:123456789012:mytopic'),
                                runOrder: 2,
                            }),
                        ],
                    },
                ],
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                'Stages': [
                    {
                        'Name': 'Source',
                    },
                    {
                        'Name': 'Build',
                        'Actions': [
                            {
                                'Name': 'CodeBuild',
                                'Namespace': 'Build_CodeBuild_NS',
                            },
                            {
                                'Name': 'Approve',
                                'Configuration': {
                                    'CustomData': '#{Build_CodeBuild_NS.SomeVar}',
                                },
                            },
                        ],
                    },
                ],
            });
        });
        test('sets the BatchEnabled configuration', () => {
            const stack = new core_1.Stack();
            const codeBuildProject = new codebuild.PipelineProject(stack, 'CodeBuild');
            const sourceOutput = new codepipeline.Artifact();
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [
                            new cpactions.S3SourceAction({
                                actionName: 'S3_Source',
                                bucket: new s3.Bucket(stack, 'Bucket'),
                                bucketKey: 'key',
                                output: sourceOutput,
                            }),
                        ],
                    },
                    {
                        stageName: 'Build',
                        actions: [
                            new cpactions.CodeBuildAction({
                                actionName: 'CodeBuild',
                                input: sourceOutput,
                                project: codeBuildProject,
                                executeBatchBuild: true,
                            }),
                        ],
                    },
                ],
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                'Stages': [
                    {
                        'Name': 'Source',
                    },
                    {
                        'Name': 'Build',
                        'Actions': [
                            {
                                'Name': 'CodeBuild',
                                'Configuration': {
                                    'BatchEnabled': 'true',
                                },
                            },
                        ],
                    },
                ],
            });
        });
        test('sets the CombineArtifacts configuration', () => {
            const stack = new core_1.Stack();
            const codeBuildProject = new codebuild.PipelineProject(stack, 'CodeBuild');
            const sourceOutput = new codepipeline.Artifact();
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [
                            new cpactions.S3SourceAction({
                                actionName: 'S3_Source',
                                bucket: new s3.Bucket(stack, 'Bucket'),
                                bucketKey: 'key',
                                output: sourceOutput,
                            }),
                        ],
                    },
                    {
                        stageName: 'Build',
                        actions: [
                            new cpactions.CodeBuildAction({
                                actionName: 'CodeBuild',
                                input: sourceOutput,
                                project: codeBuildProject,
                                executeBatchBuild: true,
                                combineBatchBuildArtifacts: true,
                            }),
                        ],
                    },
                ],
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                'Stages': [
                    {
                        'Name': 'Source',
                    },
                    {
                        'Name': 'Build',
                        'Actions': [
                            {
                                'Name': 'CodeBuild',
                                'Configuration': {
                                    'BatchEnabled': 'true',
                                    'CombineArtifacts': 'true',
                                },
                            },
                        ],
                    },
                ],
            });
        });
        describe('environment variables', () => {
            test('should fail by default when added to a Pipeline while using a secret value in a plaintext variable', () => {
                const stack = new core_1.Stack();
                const sourceOutput = new codepipeline.Artifact();
                const pipeline = new codepipeline.Pipeline(stack, 'Pipeline', {
                    stages: [
                        {
                            stageName: 'Source',
                            actions: [new cpactions.CodeCommitSourceAction({
                                    actionName: 'source',
                                    repository: new codecommit.Repository(stack, 'CodeCommitRepo', {
                                        repositoryName: 'my-repo',
                                    }),
                                    output: sourceOutput,
                                })],
                        },
                    ],
                });
                const buildStage = pipeline.addStage({
                    stageName: 'Build',
                });
                const codeBuildProject = new codebuild.PipelineProject(stack, 'CodeBuild');
                const buildAction = new cpactions.CodeBuildAction({
                    actionName: 'Build',
                    project: codeBuildProject,
                    input: sourceOutput,
                    environmentVariables: {
                        'X': {
                            value: core_1.SecretValue.secretsManager('my-secret'),
                        },
                    },
                });
                expect(() => {
                    buildStage.addAction(buildAction);
                }).toThrow(/Plaintext environment variable 'X' contains a secret value!/);
            });
            test("should allow opting out of the 'secret value in a plaintext variable' validation", () => {
                const stack = new core_1.Stack();
                const sourceOutput = new codepipeline.Artifact();
                new codepipeline.Pipeline(stack, 'Pipeline', {
                    stages: [
                        {
                            stageName: 'Source',
                            actions: [new cpactions.CodeCommitSourceAction({
                                    actionName: 'source',
                                    repository: new codecommit.Repository(stack, 'CodeCommitRepo', {
                                        repositoryName: 'my-repo',
                                    }),
                                    output: sourceOutput,
                                })],
                        },
                        {
                            stageName: 'Build',
                            actions: [new cpactions.CodeBuildAction({
                                    actionName: 'build',
                                    project: new codebuild.PipelineProject(stack, 'CodeBuild'),
                                    input: sourceOutput,
                                    environmentVariables: {
                                        'X': {
                                            value: core_1.SecretValue.secretsManager('my-secret'),
                                        },
                                    },
                                    checkSecretsInPlainTextEnvVariables: false,
                                })],
                        },
                    ],
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,