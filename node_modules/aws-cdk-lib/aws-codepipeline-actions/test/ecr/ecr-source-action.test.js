"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const codebuild = require("../../../aws-codebuild");
const codepipeline = require("../../../aws-codepipeline");
const ecr = require("../../../aws-ecr");
const core_1 = require("../../../core");
const cpactions = require("../../lib");
/* eslint-disable quote-props */
describe('ecr source action', () => {
    describe('ECR source Action', () => {
        test('exposes variables for other actions to consume', () => {
            const stack = new core_1.Stack();
            const sourceOutput = new codepipeline.Artifact();
            const ecrSourceAction = new cpactions.EcrSourceAction({
                actionName: 'Source',
                output: sourceOutput,
                repository: ecr.Repository.fromRepositoryName(stack, 'Repo', 'repo'),
            });
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [ecrSourceAction],
                    },
                    {
                        stageName: 'Build',
                        actions: [
                            new cpactions.CodeBuildAction({
                                actionName: 'Build',
                                project: new codebuild.PipelineProject(stack, 'MyProject'),
                                input: sourceOutput,
                                environmentVariables: {
                                    ImageDigest: { value: ecrSourceAction.variables.imageDigest },
                                },
                            }),
                        ],
                    },
                ],
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                'Stages': assertions_1.Match.arrayWith([
                    assertions_1.Match.objectLike({
                        'Name': 'Source',
                    }),
                    assertions_1.Match.objectLike({
                        'Name': 'Build',
                        'Actions': assertions_1.Match.arrayWith([
                            assertions_1.Match.objectLike({
                                'Name': 'Build',
                                'Configuration': {
                                    'EnvironmentVariables': '[{"name":"ImageDigest","type":"PLAINTEXT","value":"#{Source_Source_NS.ImageDigest}"}]',
                                },
                            }),
                        ]),
                    }),
                ]),
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
                'EventPattern': {
                    'detail': {
                        'result': ['SUCCESS'],
                        'repository-name': ['repo'],
                        'image-tag': ['latest'],
                        'action-type': ['PUSH'],
                    },
                },
            });
        });
        test('watches all tags when imageTag provided as empty string', () => {
            const stack = new core_1.Stack();
            const sourceOutput = new codepipeline.Artifact();
            const ecrSourceAction = new cpactions.EcrSourceAction({
                actionName: 'Source',
                output: sourceOutput,
                repository: ecr.Repository.fromRepositoryName(stack, 'Repo', 'repo'),
                imageTag: '',
            });
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [ecrSourceAction],
                    },
                    {
                        stageName: 'Build',
                        actions: [
                            new cpactions.CodeBuildAction({
                                actionName: 'Build',
                                project: new codebuild.PipelineProject(stack, 'MyProject'),
                                input: sourceOutput,
                                environmentVariables: {
                                    ImageDigest: { value: ecrSourceAction.variables.imageDigest },
                                },
                            }),
                        ],
                    },
                ],
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
                'EventPattern': {
                    'source': [
                        'aws.ecr',
                    ],
                    'detail': {
                        'result': ['SUCCESS'],
                        'repository-name': ['repo'],
                        'image-tag': [],
                        'action-type': ['PUSH'],
                    },
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                'Stages': assertions_1.Match.arrayWith([
                    assertions_1.Match.objectLike({
                        'Name': 'Source',
                        'Actions': assertions_1.Match.arrayWith([
                            assertions_1.Match.objectLike({
                                'Name': 'Source',
                                'Configuration': {
                                    'ImageTag': assertions_1.Match.absent(),
                                },
                            }),
                        ]),
                    }),
                ]),
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,