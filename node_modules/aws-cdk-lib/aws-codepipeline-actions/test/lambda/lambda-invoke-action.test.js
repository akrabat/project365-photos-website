"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const codepipeline = require("../../../aws-codepipeline");
const lambda = require("../../../aws-lambda");
const s3 = require("../../../aws-s3");
const sns = require("../../../aws-sns");
const core_1 = require("../../../core");
const cpactions = require("../../lib");
/* eslint-disable quote-props */
describe('', () => {
    describe('Lambda invoke Action', () => {
        test('properly serializes the object passed in userParameters', () => {
            const stack = stackIncludingLambdaInvokeCodePipeline({
                userParams: {
                    key: 1234,
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', assertions_1.Match.objectLike({
                'Stages': [
                    {},
                    {
                        'Actions': [
                            {
                                'Configuration': {
                                    'UserParameters': '{"key":1234}',
                                },
                            },
                        ],
                    },
                ],
            }));
        });
        test('properly resolves any Tokens passed in userParameters', () => {
            const stack = stackIncludingLambdaInvokeCodePipeline({
                userParams: {
                    key: core_1.Lazy.string({ produce: () => core_1.Aws.REGION }),
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', assertions_1.Match.objectLike({
                'Stages': [
                    {},
                    {
                        'Actions': [
                            {
                                'Configuration': {
                                    'UserParameters': {
                                        'Fn::Join': [
                                            '',
                                            [
                                                '{"key":"',
                                                {
                                                    'Ref': 'AWS::Region',
                                                },
                                                '"}',
                                            ],
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                ],
            }));
        });
        test('properly resolves any stringified Tokens passed in userParameters', () => {
            const stack = stackIncludingLambdaInvokeCodePipeline({
                userParams: {
                    key: core_1.Token.asString(null),
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', assertions_1.Match.objectLike({
                'Stages': [
                    {},
                    {
                        'Actions': [
                            {
                                'Configuration': {
                                    'UserParameters': '{"key":null}',
                                },
                            },
                        ],
                    },
                ],
            }));
        });
        test('properly assings userParametersString to UserParameters', () => {
            const stack = stackIncludingLambdaInvokeCodePipeline({
                userParamsString: '**/*.template.json',
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', assertions_1.Match.objectLike({
                'Stages': [
                    {},
                    {
                        'Actions': [
                            {
                                'Configuration': {
                                    'UserParameters': '**/*.template.json',
                                },
                            },
                        ],
                    },
                ],
            }));
        });
        test('throws if both userParameters and userParametersString are supplied', () => {
            expect(() => stackIncludingLambdaInvokeCodePipeline({
                userParams: {
                    key: core_1.Token.asString(null),
                },
                userParamsString: '**/*.template.json',
            })).toThrow(/Only one of userParameters or userParametersString can be specified/);
        });
        test("assigns the Action's Role with read permissions to the Bucket if it has only inputs", () => {
            const stack = stackIncludingLambdaInvokeCodePipeline({
                lambdaInput: new codepipeline.Artifact(),
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', assertions_1.Match.objectLike({
                'PolicyDocument': {
                    'Statement': [
                        {
                            'Action': 'lambda:ListFunctions',
                            'Resource': '*',
                            'Effect': 'Allow',
                        },
                        {
                            'Action': 'lambda:InvokeFunction',
                            'Effect': 'Allow',
                        },
                        {
                            'Action': [
                                's3:GetObject*',
                                's3:GetBucket*',
                                's3:List*',
                            ],
                            'Effect': 'Allow',
                        },
                        {
                            'Action': [
                                'kms:Decrypt',
                                'kms:DescribeKey',
                            ],
                            'Effect': 'Allow',
                        },
                    ],
                },
            }));
        });
        test("assigns the Action's Role with write permissions to the Bucket if it has only outputs", () => {
            const stack = stackIncludingLambdaInvokeCodePipeline({
                lambdaOutput: new codepipeline.Artifact(),
                // no input to the Lambda Action - we want write permissions only in this case
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                PolicyName: 'PipelineInvokeLambdaCodePipelineActionRoleDefaultPolicy103F34DA',
                'PolicyDocument': assertions_1.Match.objectLike({
                    'Statement': [
                        {
                            'Action': 'lambda:ListFunctions',
                            'Resource': '*',
                            'Effect': 'Allow',
                        },
                        {
                            'Action': 'lambda:InvokeFunction',
                            'Effect': 'Allow',
                        },
                        {
                            'Action': [
                                's3:DeleteObject*',
                                's3:PutObject',
                                's3:PutObjectLegalHold',
                                's3:PutObjectRetention',
                                's3:PutObjectTagging',
                                's3:PutObjectVersionTagging',
                                's3:Abort*',
                            ],
                            'Effect': 'Allow',
                        },
                        {
                            'Action': [
                                'kms:Encrypt',
                                'kms:ReEncrypt*',
                                'kms:GenerateDataKey*',
                                'kms:Decrypt',
                            ],
                            'Effect': 'Allow',
                        },
                    ],
                }),
            });
        });
        test("assigns the Action's Role with read-write permissions to the Bucket if it has both inputs and outputs", () => {
            const stack = stackIncludingLambdaInvokeCodePipeline({
                lambdaInput: new codepipeline.Artifact(),
                lambdaOutput: new codepipeline.Artifact(),
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                PolicyName: 'PipelineInvokeLambdaCodePipelineActionRoleDefaultPolicy103F34DA',
                'PolicyDocument': assertions_1.Match.objectLike({
                    'Statement': [
                        {
                            'Action': 'lambda:ListFunctions',
                            'Resource': '*',
                            'Effect': 'Allow',
                        },
                        {
                            'Action': 'lambda:InvokeFunction',
                            'Effect': 'Allow',
                        },
                        {
                            'Action': [
                                's3:GetObject*',
                                's3:GetBucket*',
                                's3:List*',
                            ],
                            'Effect': 'Allow',
                        },
                        {
                            'Action': [
                                'kms:Decrypt',
                                'kms:DescribeKey',
                            ],
                            'Effect': 'Allow',
                        },
                        {
                            'Action': [
                                's3:DeleteObject*',
                                's3:PutObject',
                                's3:PutObjectLegalHold',
                                's3:PutObjectRetention',
                                's3:PutObjectTagging',
                                's3:PutObjectVersionTagging',
                                's3:Abort*',
                            ],
                            'Effect': 'Allow',
                        },
                        {
                            'Action': [
                                'kms:Encrypt',
                                'kms:ReEncrypt*',
                                'kms:GenerateDataKey*',
                                'kms:Decrypt',
                            ],
                            'Effect': 'Allow',
                        },
                    ],
                }),
            });
        });
        test('exposes variables for other actions to consume', () => {
            const stack = new core_1.Stack(undefined, undefined, {
                env: { account: '123456789012', region: 'us-east-1' },
            });
            const sourceOutput = new codepipeline.Artifact();
            const lambdaInvokeAction = new cpactions.LambdaInvokeAction({
                actionName: 'LambdaInvoke',
                lambda: lambda.Function.fromFunctionArn(stack, 'Func', 'arn:aws:lambda:us-east-1:123456789012:function:some-func'),
            });
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [
                            new cpactions.S3SourceAction({
                                actionName: 'S3_Source',
                                bucket: s3.Bucket.fromBucketName(stack, 'Bucket', 'bucket'),
                                bucketKey: 'key',
                                output: sourceOutput,
                            }),
                        ],
                    },
                    {
                        stageName: 'Invoke',
                        actions: [
                            lambdaInvokeAction,
                            new cpactions.ManualApprovalAction({
                                actionName: 'Approve',
                                additionalInformation: lambdaInvokeAction.variable('SomeVar'),
                                notificationTopic: sns.Topic.fromTopicArn(stack, 'Topic', 'arn:aws:sns:us-east-1:123456789012:mytopic'),
                                runOrder: 2,
                            }),
                        ],
                    },
                ],
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', assertions_1.Match.objectLike({
                'Stages': [
                    {
                        'Name': 'Source',
                    },
                    {
                        'Name': 'Invoke',
                        'Actions': [
                            {
                                'Name': 'LambdaInvoke',
                                'Namespace': 'Invoke_LambdaInvoke_NS',
                            },
                            {
                                'Name': 'Approve',
                                'Configuration': {
                                    'CustomData': '#{Invoke_LambdaInvoke_NS.SomeVar}',
                                },
                            },
                        ],
                    },
                ],
            }));
        });
    });
});
function stackIncludingLambdaInvokeCodePipeline(props, app) {
    const stack = new core_1.Stack(app);
    new codepipeline.Pipeline(stack, 'Pipeline', {
        stages: [
            {
                stageName: 'Source',
                actions: [
                    new cpactions.GitHubSourceAction({
                        actionName: 'GitHub',
                        output: props.lambdaInput || new codepipeline.Artifact(),
                        oauthToken: core_1.SecretValue.unsafePlainText('secret'),
                        owner: 'awslabs',
                        repo: 'aws-cdk',
                    }),
                ],
            },
            {
                stageName: 'Invoke',
                actions: [
                    new cpactions.LambdaInvokeAction({
                        actionName: 'Lambda',
                        lambda: new lambda.Function(stack, 'Lambda', {
                            code: lambda.Code.fromCfnParameters(),
                            handler: 'index.handler',
                            runtime: lambda.Runtime.NODEJS_14_X,
                        }),
                        userParameters: props.userParams,
                        userParametersString: props.userParamsString,
                        inputs: props.lambdaInput ? [props.lambdaInput] : undefined,
                        outputs: props.lambdaOutput ? [props.lambdaOutput] : undefined,
                    }),
                ],
            },
        ],
    });
    return stack;
}
//# sourceMappingURL=data:application/json;base64,