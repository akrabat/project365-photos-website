"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const iam = require("../../aws-iam");
const s3 = require("../../aws-s3");
const core_1 = require("../../core");
const fake_build_action_1 = require("./fake-build-action");
const fake_source_action_1 = require("./fake-source-action");
const codepipeline = require("../lib");
describe.each([
    ['legacy', false],
    ['legacy', true],
    ['modern', false],
    ['modern', true],
])('with %s synthesis, in Stage=%p', (synthesisStyle, inStage) => {
    let app;
    let stackScope;
    let stack;
    let sourceArtifact;
    let initialStages;
    beforeEach(() => {
        app = new core_1.App({
            context: {
                ...synthesisStyle === 'modern' ? { '@aws-cdk/core:newStyleStackSynthesis': true } : undefined,
            },
        });
        stackScope = inStage ? new core_1.Stage(app, 'MyStage') : app;
        stack = new core_1.Stack(stackScope, 'PipelineStack', { env: { account: '2222', region: 'us-east-1' } });
        sourceArtifact = new codepipeline.Artifact();
        initialStages = [
            {
                stageName: 'Source',
                actions: [new fake_source_action_1.FakeSourceAction({
                        actionName: 'Source',
                        output: sourceArtifact,
                    })],
            },
            {
                stageName: 'Build',
                actions: [new fake_build_action_1.FakeBuildAction({
                        actionName: 'Build',
                        input: sourceArtifact,
                    })],
            },
        ];
    });
    describe('crossAccountKeys=false', () => {
        let pipeline;
        beforeEach(() => {
            pipeline = new codepipeline.Pipeline(stack, 'Pipeline', {
                crossAccountKeys: false,
                stages: initialStages,
            });
        });
        test('creates a bucket but no keys', () => {
            // THEN
            assertions_1.Template.fromStack(stack).resourceCountIs('AWS::KMS::Key', 0);
            assertions_1.Template.fromStack(stack).resourceCountIs('AWS::S3::Bucket', 1);
        });
        describe('prevents adding a cross-account action', () => {
            const expectedError = 'crossAccountKeys: true';
            let stage;
            beforeEach(() => {
                stage = pipeline.addStage({ stageName: 'Deploy' });
            });
            test('by role', () => {
                // WHEN
                expect(() => {
                    stage.addAction(new fake_build_action_1.FakeBuildAction({
                        actionName: 'Deploy',
                        input: sourceArtifact,
                        role: iam.Role.fromRoleArn(stack, 'Role', 'arn:aws:iam::1111:role/some-role'),
                    }));
                }).toThrow(expectedError);
            });
            test('by resource', () => {
                // WHEN
                expect(() => {
                    stage.addAction(new fake_build_action_1.FakeBuildAction({
                        actionName: 'Deploy',
                        input: sourceArtifact,
                        resource: s3.Bucket.fromBucketAttributes(stack, 'Bucket', {
                            bucketName: 'foo',
                            account: '1111',
                        }),
                    }));
                }).toThrow(expectedError);
            });
            test('by declared account', () => {
                // WHEN
                expect(() => {
                    stage.addAction(new fake_build_action_1.FakeBuildAction({
                        actionName: 'Deploy',
                        input: sourceArtifact,
                        account: '1111',
                    }));
                }).toThrow(expectedError);
            });
        });
        describe('also affects cross-region support stacks', () => {
            let stage;
            beforeEach(() => {
                stage = pipeline.addStage({ stageName: 'Deploy' });
            });
            test('when making a support stack', () => {
                // WHEN
                stage.addAction(new fake_build_action_1.FakeBuildAction({
                    actionName: 'Deploy',
                    input: sourceArtifact,
                    // No resource to grab onto forces creating a fresh support stack
                    region: 'eu-west-1',
                }));
                // THEN
                let asm = app.synth();
                asm = inStage ? asm.getNestedAssembly('assembly-MyStage') : asm;
                const supportStack = asm.getStackByName(`${stack.stackName}-support-eu-west-1`);
                // THEN
                assertions_1.Template.fromJSON(supportStack.template).resourceCountIs('AWS::KMS::Key', 0);
                assertions_1.Template.fromJSON(supportStack.template).hasResourceProperties('AWS::S3::Bucket', {
                    PublicAccessBlockConfiguration: {
                        BlockPublicAcls: true,
                        BlockPublicPolicy: true,
                        IgnorePublicAcls: true,
                        RestrictPublicBuckets: true,
                    },
                });
            });
            test('when twiddling another stack', () => {
                const stack2 = new core_1.Stack(stackScope, 'Stack2', { env: { account: '2222', region: 'eu-west-1' } });
                // WHEN
                stage.addAction(new fake_build_action_1.FakeBuildAction({
                    actionName: 'Deploy',
                    input: sourceArtifact,
                    resource: new iam.User(stack2, 'DoesntMatterWhatThisIs'),
                }));
                // THEN
                assertions_1.Template.fromStack(stack2).resourceCountIs('AWS::KMS::Key', 0);
                assertions_1.Template.fromStack(stack2).resourceCountIs('AWS::S3::Bucket', 1);
            });
        });
    });
});
describe('cross-environment CodePipeline', function () {
    test('correctly detects that an Action is cross-account from the account of the resource backing the Action', () => {
        const app = new core_1.App();
        const pipelineStack = new core_1.Stack(app, 'PipelineStack', {
            env: { account: '123', region: 'my-region' },
        });
        const sourceOutput = new codepipeline.Artifact();
        const pipeline = new codepipeline.Pipeline(pipelineStack, 'Pipeline', {
            stages: [
                {
                    stageName: 'Source',
                    actions: [
                        new fake_source_action_1.FakeSourceAction({
                            actionName: 'Source',
                            output: sourceOutput,
                        }),
                    ],
                },
            ],
        });
        // Import a resource backing the FakeBuildAction into the pipeline's Stack,
        // but specify a different account for it during the import.
        // This should be correctly detected by the CodePipeline construct,
        // and a correct support Stack should be created.
        const deployBucket = s3.Bucket.fromBucketAttributes(pipelineStack, 'DeployBucket', {
            bucketName: 'my-bucket',
            account: '456',
        });
        pipeline.addStage({
            stageName: 'Build',
            actions: [
                new fake_build_action_1.FakeBuildAction({
                    actionName: 'Build',
                    input: sourceOutput,
                    resource: deployBucket,
                }),
            ],
        });
        const asm = app.synth();
        const supportStack = asm.getStackByName(`${pipelineStack.stackName}-support-456`);
        assertions_1.Template.fromJSON(supportStack.template).hasResourceProperties('AWS::IAM::Role', {
            RoleName: 'pipelinestack-support-456dbuildactionrole91c6f1a469fd11d52dfe',
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: [
                { Name: 'Source' },
                {
                    Name: 'Build',
                    Actions: [
                        {
                            Name: 'Build',
                            RoleArn: {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        ':iam::456:role/pipelinestack-support-456dbuildactionrole91c6f1a469fd11d52dfe',
                                    ]],
                            },
                        },
                    ],
                },
            ],
        });
    });
});
//# sourceMappingURL=data:application/json;base64,