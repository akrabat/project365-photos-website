"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("../../core");
const fake_source_action_1 = require("./fake-source-action");
const artifact_1 = require("../lib/artifact");
const pipeline_1 = require("../lib/pipeline");
const validation_1 = require("../lib/private/validation");
describe('general validation', () => {
    test('name validation', () => {
        const cases = [
            { name: 'BlahBleep123.@-_', shouldPassValidation: true, explanation: 'should be valid' },
            { name: '', shouldPassValidation: false, explanation: 'the empty string should be invalid' },
            { name: ' BlahBleep', shouldPassValidation: false, explanation: 'spaces should be invalid' },
            { name: '!BlahBleep', shouldPassValidation: false, explanation: '\'!\' should be invalid' },
        ];
        cases.forEach(testCase => {
            const name = testCase.name;
            const validationBlock = () => { (0, validation_1.validateName)('test thing', name); };
            if (testCase.shouldPassValidation) {
                expect(validationBlock).not.toThrow();
            }
            else {
                expect(validationBlock).toThrow();
            }
        });
    });
    describe('Stage validation', () => {
        test('should fail if Stage has no Actions', () => {
            const stage = stageForTesting();
            expect(stage.validate().length).toEqual(1);
        });
    });
    describe('Pipeline validation', () => {
        test('should fail if Pipeline has no Stages', () => {
            const stack = new cdk.Stack();
            const pipeline = new pipeline_1.Pipeline(stack, 'Pipeline');
            expect(pipeline.node.validate().length).toEqual(1);
        });
        test('should fail if Pipeline has a Source Action in a non-first Stage', () => {
            const stack = new cdk.Stack();
            const pipeline = new pipeline_1.Pipeline(stack, 'Pipeline');
            pipeline.addStage({
                stageName: 'FirstStage',
                actions: [
                    new fake_source_action_1.FakeSourceAction({
                        actionName: 'FakeSource',
                        output: new artifact_1.Artifact(),
                    }),
                ],
            });
            expect(pipeline.node.validate().length).toEqual(1);
        });
    });
});
function stageForTesting() {
    const stack = new cdk.Stack();
    const pipeline = new pipeline_1.Pipeline(stack, 'Pipeline');
    return pipeline.addStage({ stageName: 'stage' });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhbC12YWxpZGF0aW9uLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnZW5lcmFsLXZhbGlkYXRpb24udGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtDQUFrQztBQUNsQyw2REFBd0Q7QUFFeEQsOENBQTJDO0FBQzNDLDhDQUEyQztBQUMzQywwREFBeUQ7QUFRekQsUUFBUSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtJQUNsQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO1FBQzNCLE1BQU0sS0FBSyxHQUE2QjtZQUN0QyxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLGlCQUFpQixFQUFFO1lBQ3hGLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLG9DQUFvQyxFQUFFO1lBQzVGLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLDBCQUEwQixFQUFFO1lBQzVGLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLHlCQUF5QixFQUFFO1NBQzVGLENBQUM7UUFFRixLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDM0IsTUFBTSxlQUFlLEdBQUcsR0FBRyxFQUFFLEdBQUcsSUFBQSx5QkFBWSxFQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwRSxJQUFJLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRTtnQkFDakMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUN2QztpQkFBTTtnQkFDTCxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDbkM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtRQUNoQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO1lBQy9DLE1BQU0sS0FBSyxHQUFHLGVBQWUsRUFBRSxDQUFDO1lBRWhDLE1BQU0sQ0FBRSxLQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO1FBQ25DLElBQUksQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7WUFDakQsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztZQUVqRCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsa0VBQWtFLEVBQUUsR0FBRyxFQUFFO1lBQzVFLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlCLE1BQU0sUUFBUSxHQUFHLElBQUksbUJBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFFakQsUUFBUSxDQUFDLFFBQVEsQ0FBQztnQkFDaEIsU0FBUyxFQUFFLFlBQVk7Z0JBQ3ZCLE9BQU8sRUFBRTtvQkFDUCxJQUFJLHFDQUFnQixDQUFDO3dCQUNuQixVQUFVLEVBQUUsWUFBWTt3QkFDeEIsTUFBTSxFQUFFLElBQUksbUJBQVEsRUFBRTtxQkFDdkIsQ0FBQztpQkFDSDthQUNGLENBQUMsQ0FBQztZQUVILE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLGVBQWU7SUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDOUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRCxPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNuRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgRmFrZVNvdXJjZUFjdGlvbiB9IGZyb20gJy4vZmFrZS1zb3VyY2UtYWN0aW9uJztcbmltcG9ydCB7IElTdGFnZSB9IGZyb20gJy4uL2xpYi9hY3Rpb24nO1xuaW1wb3J0IHsgQXJ0aWZhY3QgfSBmcm9tICcuLi9saWIvYXJ0aWZhY3QnO1xuaW1wb3J0IHsgUGlwZWxpbmUgfSBmcm9tICcuLi9saWIvcGlwZWxpbmUnO1xuaW1wb3J0IHsgdmFsaWRhdGVOYW1lIH0gZnJvbSAnLi4vbGliL3ByaXZhdGUvdmFsaWRhdGlvbic7XG5cbmludGVyZmFjZSBOYW1lVmFsaWRhdGlvblRlc3RDYXNlIHtcbiAgbmFtZTogc3RyaW5nO1xuICBzaG91bGRQYXNzVmFsaWRhdGlvbjogYm9vbGVhbjtcbiAgZXhwbGFuYXRpb246IHN0cmluZztcbn1cblxuZGVzY3JpYmUoJ2dlbmVyYWwgdmFsaWRhdGlvbicsICgpID0+IHtcbiAgdGVzdCgnbmFtZSB2YWxpZGF0aW9uJywgKCkgPT4ge1xuICAgIGNvbnN0IGNhc2VzOiBOYW1lVmFsaWRhdGlvblRlc3RDYXNlW10gPSBbXG4gICAgICB7IG5hbWU6ICdCbGFoQmxlZXAxMjMuQC1fJywgc2hvdWxkUGFzc1ZhbGlkYXRpb246IHRydWUsIGV4cGxhbmF0aW9uOiAnc2hvdWxkIGJlIHZhbGlkJyB9LFxuICAgICAgeyBuYW1lOiAnJywgc2hvdWxkUGFzc1ZhbGlkYXRpb246IGZhbHNlLCBleHBsYW5hdGlvbjogJ3RoZSBlbXB0eSBzdHJpbmcgc2hvdWxkIGJlIGludmFsaWQnIH0sXG4gICAgICB7IG5hbWU6ICcgQmxhaEJsZWVwJywgc2hvdWxkUGFzc1ZhbGlkYXRpb246IGZhbHNlLCBleHBsYW5hdGlvbjogJ3NwYWNlcyBzaG91bGQgYmUgaW52YWxpZCcgfSxcbiAgICAgIHsgbmFtZTogJyFCbGFoQmxlZXAnLCBzaG91bGRQYXNzVmFsaWRhdGlvbjogZmFsc2UsIGV4cGxhbmF0aW9uOiAnXFwnIVxcJyBzaG91bGQgYmUgaW52YWxpZCcgfSxcbiAgICBdO1xuXG4gICAgY2FzZXMuZm9yRWFjaCh0ZXN0Q2FzZSA9PiB7XG4gICAgICBjb25zdCBuYW1lID0gdGVzdENhc2UubmFtZTtcbiAgICAgIGNvbnN0IHZhbGlkYXRpb25CbG9jayA9ICgpID0+IHsgdmFsaWRhdGVOYW1lKCd0ZXN0IHRoaW5nJywgbmFtZSk7IH07XG4gICAgICBpZiAodGVzdENhc2Uuc2hvdWxkUGFzc1ZhbGlkYXRpb24pIHtcbiAgICAgICAgZXhwZWN0KHZhbGlkYXRpb25CbG9jaykubm90LnRvVGhyb3coKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4cGVjdCh2YWxpZGF0aW9uQmxvY2spLnRvVGhyb3coKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1N0YWdlIHZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGZhaWwgaWYgU3RhZ2UgaGFzIG5vIEFjdGlvbnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGFnZSA9IHN0YWdlRm9yVGVzdGluZygpO1xuXG4gICAgICBleHBlY3QoKHN0YWdlIGFzIGFueSkudmFsaWRhdGUoKS5sZW5ndGgpLnRvRXF1YWwoMSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQaXBlbGluZSB2YWxpZGF0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBmYWlsIGlmIFBpcGVsaW5lIGhhcyBubyBTdGFnZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IHBpcGVsaW5lID0gbmV3IFBpcGVsaW5lKHN0YWNrLCAnUGlwZWxpbmUnKTtcblxuICAgICAgZXhwZWN0KHBpcGVsaW5lLm5vZGUudmFsaWRhdGUoKS5sZW5ndGgpLnRvRXF1YWwoMSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZmFpbCBpZiBQaXBlbGluZSBoYXMgYSBTb3VyY2UgQWN0aW9uIGluIGEgbm9uLWZpcnN0IFN0YWdlJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBjb25zdCBwaXBlbGluZSA9IG5ldyBQaXBlbGluZShzdGFjaywgJ1BpcGVsaW5lJyk7XG5cbiAgICAgIHBpcGVsaW5lLmFkZFN0YWdlKHtcbiAgICAgICAgc3RhZ2VOYW1lOiAnRmlyc3RTdGFnZScsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICBuZXcgRmFrZVNvdXJjZUFjdGlvbih7XG4gICAgICAgICAgICBhY3Rpb25OYW1lOiAnRmFrZVNvdXJjZScsXG4gICAgICAgICAgICBvdXRwdXQ6IG5ldyBBcnRpZmFjdCgpLFxuICAgICAgICAgIH0pLFxuICAgICAgICBdLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChwaXBlbGluZS5ub2RlLnZhbGlkYXRlKCkubGVuZ3RoKS50b0VxdWFsKDEpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5mdW5jdGlvbiBzdGFnZUZvclRlc3RpbmcoKTogSVN0YWdlIHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IHBpcGVsaW5lID0gbmV3IFBpcGVsaW5lKHN0YWNrLCAnUGlwZWxpbmUnKTtcbiAgcmV0dXJuIHBpcGVsaW5lLmFkZFN0YWdlKHsgc3RhZ2VOYW1lOiAnc3RhZ2UnIH0pO1xufVxuIl19