"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const cdk = require("../../core");
const fake_build_action_1 = require("./fake-build-action");
const fake_source_action_1 = require("./fake-source-action");
const codepipeline = require("../lib");
/* eslint-disable quote-props */
describe('variables', () => {
    describe('Pipeline Variables', () => {
        test('uses the passed namespace when its passed when constructing the Action', () => {
            const stack = new cdk.Stack();
            const sourceArtifact = new codepipeline.Artifact();
            const pipeline = new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [new fake_source_action_1.FakeSourceAction({
                                actionName: 'Source',
                                output: sourceArtifact,
                                variablesNamespace: 'MyNamespace',
                            })],
                    },
                ],
            });
            // -- stages and actions here are needed to satisfy validation rules
            const first = pipeline.addStage({ stageName: 'FirstStage' });
            first.addAction(new fake_build_action_1.FakeBuildAction({
                actionName: 'dummyAction',
                input: sourceArtifact,
            }));
            const second = pipeline.addStage({ stageName: 'SecondStage' });
            second.addAction(new fake_build_action_1.FakeBuildAction({
                actionName: 'dummyAction',
                input: sourceArtifact,
            }));
            // --
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                'Stages': assertions_1.Match.arrayWith([
                    {
                        'Name': 'Source',
                        'Actions': [
                            assertions_1.Match.objectLike({
                                'Name': 'Source',
                                'Namespace': 'MyNamespace',
                            }),
                        ],
                    },
                ]),
            });
        });
        test('allows using the variable in the configuration of a different action', () => {
            const stack = new cdk.Stack();
            const sourceOutput = new codepipeline.Artifact();
            const fakeSourceAction = new fake_source_action_1.FakeSourceAction({
                actionName: 'Source',
                output: sourceOutput,
                variablesNamespace: 'SourceVariables',
            });
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [fakeSourceAction],
                    },
                    {
                        stageName: 'Build',
                        actions: [new fake_build_action_1.FakeBuildAction({
                                actionName: 'Build',
                                input: sourceOutput,
                                customConfigKey: fakeSourceAction.variables.firstVariable,
                            })],
                    },
                ],
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                'Stages': [
                    {
                        'Name': 'Source',
                    },
                    {
                        'Name': 'Build',
                        'Actions': [
                            {
                                'Name': 'Build',
                                'Configuration': {
                                    'CustomConfigKey': '#{SourceVariables.FirstVariable}',
                                },
                            },
                        ],
                    },
                ],
            });
        });
        test('fails when trying add an action using variables with an empty string for the namespace to a pipeline', () => {
            const stack = new cdk.Stack();
            const pipeline = new codepipeline.Pipeline(stack, 'Pipeline');
            const sourceStage = pipeline.addStage({ stageName: 'Source' });
            const sourceAction = new fake_source_action_1.FakeSourceAction({
                actionName: 'Source',
                output: new codepipeline.Artifact(),
                variablesNamespace: '',
            });
            expect(() => {
                sourceStage.addAction(sourceAction);
            }).toThrow(/Namespace name must match regular expression:/);
        });
        test('can use global variables', () => {
            const stack = new cdk.Stack();
            const sourceArtifact = new codepipeline.Artifact();
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [new fake_source_action_1.FakeSourceAction({
                                actionName: 'Source',
                                output: sourceArtifact,
                            })],
                    },
                    {
                        stageName: 'Build',
                        actions: [new fake_build_action_1.FakeBuildAction({
                                actionName: 'Build',
                                input: sourceArtifact,
                                customConfigKey: codepipeline.GlobalVariables.executionId,
                            })],
                    },
                ],
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                'Stages': assertions_1.Match.arrayWith([
                    {
                        'Name': 'Build',
                        'Actions': [
                            assertions_1.Match.objectLike({
                                'Name': 'Build',
                                'Configuration': {
                                    'CustomConfigKey': '#{codepipeline.PipelineExecutionId}',
                                },
                            }),
                        ],
                    },
                ]),
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,