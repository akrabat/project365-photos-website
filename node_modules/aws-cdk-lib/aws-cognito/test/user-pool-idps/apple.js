"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const core_1 = require("../../../core");
const lib_1 = require("../../lib");
describe('UserPoolIdentityProvider', () => {
    describe('apple', () => {
        test('defaults', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const pool = new lib_1.UserPool(stack, 'userpool');
            // WHEN
            new lib_1.UserPoolIdentityProviderApple(stack, 'userpoolidp', {
                userPool: pool,
                clientId: 'com.amzn.cdk',
                teamId: 'CDKTEAMCDK',
                keyId: 'CDKKEYCDK1',
                privateKey: 'PRIV_KEY_CDK',
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Cognito::UserPoolIdentityProvider', {
                ProviderName: 'SignInWithApple',
                ProviderType: 'SignInWithApple',
                ProviderDetails: {
                    client_id: 'com.amzn.cdk',
                    team_id: 'CDKTEAMCDK',
                    key_id: 'CDKKEYCDK1',
                    private_key: 'PRIV_KEY_CDK',
                    authorize_scopes: 'name',
                },
            });
        });
        test('scopes', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const pool = new lib_1.UserPool(stack, 'userpool');
            // WHEN
            new lib_1.UserPoolIdentityProviderApple(stack, 'userpoolidp', {
                userPool: pool,
                clientId: 'com.amzn.cdk',
                teamId: 'CDKTEAMCDK',
                keyId: 'CDKKEYCDK1',
                privateKey: 'PRIV_KEY_CDK',
                scopes: ['scope1', 'scope2'],
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Cognito::UserPoolIdentityProvider', {
                ProviderName: 'SignInWithApple',
                ProviderType: 'SignInWithApple',
                ProviderDetails: {
                    client_id: 'com.amzn.cdk',
                    team_id: 'CDKTEAMCDK',
                    key_id: 'CDKKEYCDK1',
                    private_key: 'PRIV_KEY_CDK',
                    authorize_scopes: 'scope1 scope2',
                },
            });
        });
        test('registered with user pool', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const pool = new lib_1.UserPool(stack, 'userpool');
            // WHEN
            const provider = new lib_1.UserPoolIdentityProviderApple(stack, 'userpoolidp', {
                userPool: pool,
                clientId: 'com.amzn.cdk',
                teamId: 'CDKTEAMCDK',
                keyId: 'CDKKEYCDK1',
                privateKey: 'PRIV_KEY_CDK',
            });
            // THEN
            expect(pool.identityProviders).toContain(provider);
        });
        test('attribute mapping', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const pool = new lib_1.UserPool(stack, 'userpool');
            // WHEN
            new lib_1.UserPoolIdentityProviderApple(stack, 'userpoolidp', {
                userPool: pool,
                clientId: 'com.amzn.cdk',
                teamId: 'CDKTEAMCDK',
                keyId: 'CDKKEYCDK1',
                privateKey: 'PRIV_KEY_CDK',
                attributeMapping: {
                    familyName: lib_1.ProviderAttribute.APPLE_LAST_NAME,
                    givenName: lib_1.ProviderAttribute.APPLE_FIRST_NAME,
                    custom: {
                        customAttr1: lib_1.ProviderAttribute.APPLE_EMAIL,
                        customAttr2: lib_1.ProviderAttribute.other('sub'),
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Cognito::UserPoolIdentityProvider', {
                AttributeMapping: {
                    family_name: 'firstName',
                    given_name: 'lastName',
                    customAttr1: 'email',
                    customAttr2: 'sub',
                },
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,