"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const core_1 = require("../../../core");
const lib_1 = require("../../lib");
describe('UserPoolIdentityProvider', () => {
    describe('saml', () => {
        test('metadata URL', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const pool = new lib_1.UserPool(stack, 'userpool');
            // WHEN
            new lib_1.UserPoolIdentityProviderSaml(stack, 'userpoolidp', {
                userPool: pool,
                metadata: lib_1.UserPoolIdentityProviderSamlMetadata.url('https://my-metadata-url.com'),
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Cognito::UserPoolIdentityProvider', {
                ProviderName: 'userpoolidp',
                ProviderType: 'SAML',
                ProviderDetails: {
                    MetadataURL: 'https://my-metadata-url.com',
                    IDPSignout: false,
                },
            });
        });
        test('metadata file', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const pool = new lib_1.UserPool(stack, 'userpool');
            // WHEN
            new lib_1.UserPoolIdentityProviderSaml(stack, 'userpoolidp', {
                userPool: pool,
                metadata: lib_1.UserPoolIdentityProviderSamlMetadata.file('my-file-contents'),
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Cognito::UserPoolIdentityProvider', {
                ProviderName: 'userpoolidp',
                ProviderType: 'SAML',
                ProviderDetails: {
                    MetadataFile: 'my-file-contents',
                    IDPSignout: false,
                },
            });
        });
        test('idpSignout', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const pool = new lib_1.UserPool(stack, 'userpool');
            // WHEN
            new lib_1.UserPoolIdentityProviderSaml(stack, 'userpoolidp', {
                userPool: pool,
                metadata: lib_1.UserPoolIdentityProviderSamlMetadata.file('my-file-contents'),
                idpSignout: true,
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Cognito::UserPoolIdentityProvider', {
                ProviderName: 'userpoolidp',
                ProviderType: 'SAML',
                ProviderDetails: {
                    MetadataFile: 'my-file-contents',
                    IDPSignout: true,
                },
            });
        });
        test('registered with user pool', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const pool = new lib_1.UserPool(stack, 'userpool');
            // WHEN
            const provider = new lib_1.UserPoolIdentityProviderSaml(stack, 'userpoolidp', {
                userPool: pool,
                metadata: lib_1.UserPoolIdentityProviderSamlMetadata.file('my-file-contents'),
            });
            // THEN
            expect(pool.identityProviders).toContain(provider);
        });
        test('attribute mapping', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const pool = new lib_1.UserPool(stack, 'userpool');
            // WHEN
            new lib_1.UserPoolIdentityProviderSaml(stack, 'userpoolidp', {
                userPool: pool,
                metadata: lib_1.UserPoolIdentityProviderSamlMetadata.file('my-file-contents'),
                attributeMapping: {
                    familyName: lib_1.ProviderAttribute.other('family_name'),
                    givenName: lib_1.ProviderAttribute.other('given_name'),
                    custom: {
                        customAttr1: lib_1.ProviderAttribute.other('email'),
                        customAttr2: lib_1.ProviderAttribute.other('sub'),
                    },
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Cognito::UserPoolIdentityProvider', {
                AttributeMapping: {
                    family_name: 'family_name',
                    given_name: 'given_name',
                    customAttr1: 'email',
                    customAttr2: 'sub',
                },
            });
        });
        test('with provider name', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const pool = new lib_1.UserPool(stack, 'userpool');
            // WHEN
            new lib_1.UserPoolIdentityProviderSaml(stack, 'userpoolidp', {
                userPool: pool,
                name: 'my-provider',
                metadata: lib_1.UserPoolIdentityProviderSamlMetadata.file('my-file-contents'),
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Cognito::UserPoolIdentityProvider', {
                ProviderName: 'my-provider',
            });
        });
        test('throws with invalid provider name', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const pool = new lib_1.UserPool(stack, 'userpool');
            // THEN
            expect(() => new lib_1.UserPoolIdentityProviderSaml(stack, 'userpoolidp', {
                userPool: pool,
                name: 'xy',
                metadata: lib_1.UserPoolIdentityProviderSamlMetadata.file('my-file-contents'),
            })).toThrow(/Expected provider name to be between 3 and 32 characters/);
        });
        test('generates a valid name when unique id is too short', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const pool = new lib_1.UserPool(stack, 'userpool');
            // WHEN
            new lib_1.UserPoolIdentityProviderSaml(stack, 'xy', {
                userPool: pool,
                metadata: lib_1.UserPoolIdentityProviderSamlMetadata.file('my-file-contents'),
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Cognito::UserPoolIdentityProvider', {
                ProviderName: 'xysaml',
            });
        });
        test('generates a valid name when unique id is too long', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const pool = new lib_1.UserPool(stack, 'userpool');
            // WHEN
            new lib_1.UserPoolIdentityProviderSaml(stack, `${'saml'.repeat(10)}xyz`, {
                userPool: pool,
                metadata: lib_1.UserPoolIdentityProviderSamlMetadata.file('my-file-contents'),
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Cognito::UserPoolIdentityProvider', {
                ProviderName: assertions_1.Match.stringLikeRegexp('^\\w{3,32}$'),
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,