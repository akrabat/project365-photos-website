"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../../core");
const lib_1 = require("../lib");
const CDK_NUMERIC_TOKEN = core_1.Token.asNumber({ Ref: 'abc' });
describe('Endpoint', () => {
    test('accepts tokens for the port value', () => {
        // GIVEN
        const token = CDK_NUMERIC_TOKEN;
        // WHEN
        const endpoint = new lib_1.Endpoint('127.0.0.1', token);
        // THEN
        expect(endpoint.port).toBe(token);
    });
    test('accepts valid port string numbers', () => {
        // GIVEN
        for (const port of [1, 50, 65535]) {
            // WHEN
            const endpoint = new lib_1.Endpoint('127.0.0.1', port);
            // THEN
            expect(endpoint.port).toBe(port);
        }
    });
    test('throws an exception for port numbers below the minimum', () => {
        // GIVEN
        const port = 0;
        // WHEN
        function createInvalidEnpoint() {
            new lib_1.Endpoint('127.0.0.1', port);
        }
        // THEN
        expect(createInvalidEnpoint)
            .toThrow();
    });
    test('throws an exception for port numbers above the maximum', () => {
        // GIVEN
        const port = 65536;
        // WHEN
        function createInvalidEnpoint() {
            new lib_1.Endpoint('127.0.0.1', port);
        }
        // THEN
        expect(createInvalidEnpoint)
            .toThrow();
    });
    test('throws an exception for floating-point port numbers', () => {
        // GIVEN
        const port = 1.5;
        // WHEN
        function createInvalidEnpoint() {
            new lib_1.Endpoint('127.0.0.1', port);
        }
        // THEN
        expect(createInvalidEnpoint)
            .toThrow();
    });
    describe('.portAsString()', () => {
        test('converts port tokens to string tokens', () => {
            // GIVEN
            const port = CDK_NUMERIC_TOKEN;
            const endpoint = new lib_1.Endpoint('127.0.0.1', port);
            // WHEN
            const result = endpoint.portAsString();
            // THEN
            // Should return a string token
            expect(core_1.Token.isUnresolved(result)).toBeTruthy();
            // It should not just be the string representation of the numeric token
            expect(result).not.toBe(port.toString());
        });
        test('converts resolved port numbers to string representation', () => {
            // GIVEN
            const port = 1500;
            const endpoint = new lib_1.Endpoint('127.0.0.1', port);
            // WHEN
            const result = endpoint.portAsString();
            // THEN
            expect(result).toBe(port.toString());
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kcG9pbnQudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVuZHBvaW50LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBbUM7QUFDbkMsZ0NBQWtDO0FBRWxDLE1BQU0saUJBQWlCLEdBQUcsWUFBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBRXpELFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO0lBQ3hCLElBQUksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7UUFDN0MsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLGlCQUFpQixDQUFDO1FBRWhDLE9BQU87UUFDUCxNQUFNLFFBQVEsR0FBRyxJQUFJLGNBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFbEQsT0FBTztRQUNQLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtRQUM3QyxRQUFRO1FBQ1IsS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDakMsT0FBTztZQUNQLE1BQU0sUUFBUSxHQUFHLElBQUksY0FBUSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUVqRCxPQUFPO1lBQ1AsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEM7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx3REFBd0QsRUFBRSxHQUFHLEVBQUU7UUFDbEUsUUFBUTtRQUNSLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQztRQUVmLE9BQU87UUFDUCxTQUFTLG9CQUFvQjtZQUMzQixJQUFJLGNBQVEsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEMsQ0FBQztRQUVELE9BQU87UUFDUCxNQUFNLENBQUMsb0JBQW9CLENBQUM7YUFDekIsT0FBTyxFQUFFLENBQUM7SUFDZixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx3REFBd0QsRUFBRSxHQUFHLEVBQUU7UUFDbEUsUUFBUTtRQUNSLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQztRQUVuQixPQUFPO1FBQ1AsU0FBUyxvQkFBb0I7WUFDM0IsSUFBSSxjQUFRLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFFRCxPQUFPO1FBQ1AsTUFBTSxDQUFDLG9CQUFvQixDQUFDO2FBQ3pCLE9BQU8sRUFBRSxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMscURBQXFELEVBQUUsR0FBRyxFQUFFO1FBQy9ELFFBQVE7UUFDUixNQUFNLElBQUksR0FBRyxHQUFHLENBQUM7UUFFakIsT0FBTztRQUNQLFNBQVMsb0JBQW9CO1lBQzNCLElBQUksY0FBUSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBRUQsT0FBTztRQUNQLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQzthQUN6QixPQUFPLEVBQUUsQ0FBQztJQUNmLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtRQUMvQixJQUFJLENBQUMsdUNBQXVDLEVBQUUsR0FBRyxFQUFFO1lBQ2pELFFBQVE7WUFDUixNQUFNLElBQUksR0FBRyxpQkFBaUIsQ0FBQztZQUMvQixNQUFNLFFBQVEsR0FBRyxJQUFJLGNBQVEsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFFakQsT0FBTztZQUNQLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUV2QyxPQUFPO1lBQ1AsK0JBQStCO1lBQy9CLE1BQU0sQ0FBQyxZQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDaEQsdUVBQXVFO1lBQ3ZFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLHlEQUF5RCxFQUFFLEdBQUcsRUFBRTtZQUNuRSxRQUFRO1lBQ1IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLE1BQU0sUUFBUSxHQUFHLElBQUksY0FBUSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUVqRCxPQUFPO1lBQ1AsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBRXZDLE9BQU87WUFDUCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRva2VuIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBFbmRwb2ludCB9IGZyb20gJy4uL2xpYic7XG5cbmNvbnN0IENES19OVU1FUklDX1RPS0VOID0gVG9rZW4uYXNOdW1iZXIoeyBSZWY6ICdhYmMnIH0pO1xuXG5kZXNjcmliZSgnRW5kcG9pbnQnLCAoKSA9PiB7XG4gIHRlc3QoJ2FjY2VwdHMgdG9rZW5zIGZvciB0aGUgcG9ydCB2YWx1ZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHRva2VuID0gQ0RLX05VTUVSSUNfVE9LRU47XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgZW5kcG9pbnQgPSBuZXcgRW5kcG9pbnQoJzEyNy4wLjAuMScsIHRva2VuKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoZW5kcG9pbnQucG9ydCkudG9CZSh0b2tlbik7XG4gIH0pO1xuXG4gIHRlc3QoJ2FjY2VwdHMgdmFsaWQgcG9ydCBzdHJpbmcgbnVtYmVycycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGZvciAoY29uc3QgcG9ydCBvZiBbMSwgNTAsIDY1NTM1XSkge1xuICAgICAgLy8gV0hFTlxuICAgICAgY29uc3QgZW5kcG9pbnQgPSBuZXcgRW5kcG9pbnQoJzEyNy4wLjAuMScsIHBvcnQpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QoZW5kcG9pbnQucG9ydCkudG9CZShwb3J0KTtcbiAgICB9XG4gIH0pO1xuXG4gIHRlc3QoJ3Rocm93cyBhbiBleGNlcHRpb24gZm9yIHBvcnQgbnVtYmVycyBiZWxvdyB0aGUgbWluaW11bScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHBvcnQgPSAwO1xuXG4gICAgLy8gV0hFTlxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWRFbnBvaW50KCkge1xuICAgICAgbmV3IEVuZHBvaW50KCcxMjcuMC4wLjEnLCBwb3J0KTtcbiAgICB9XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGNyZWF0ZUludmFsaWRFbnBvaW50KVxuICAgICAgLnRvVGhyb3coKTtcbiAgfSk7XG5cbiAgdGVzdCgndGhyb3dzIGFuIGV4Y2VwdGlvbiBmb3IgcG9ydCBudW1iZXJzIGFib3ZlIHRoZSBtYXhpbXVtJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgcG9ydCA9IDY1NTM2O1xuXG4gICAgLy8gV0hFTlxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWRFbnBvaW50KCkge1xuICAgICAgbmV3IEVuZHBvaW50KCcxMjcuMC4wLjEnLCBwb3J0KTtcbiAgICB9XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGNyZWF0ZUludmFsaWRFbnBvaW50KVxuICAgICAgLnRvVGhyb3coKTtcbiAgfSk7XG5cbiAgdGVzdCgndGhyb3dzIGFuIGV4Y2VwdGlvbiBmb3IgZmxvYXRpbmctcG9pbnQgcG9ydCBudW1iZXJzJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgcG9ydCA9IDEuNTtcblxuICAgIC8vIFdIRU5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkRW5wb2ludCgpIHtcbiAgICAgIG5ldyBFbmRwb2ludCgnMTI3LjAuMC4xJywgcG9ydCk7XG4gICAgfVxuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChjcmVhdGVJbnZhbGlkRW5wb2ludClcbiAgICAgIC50b1Rocm93KCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCcucG9ydEFzU3RyaW5nKCknLCAoKSA9PiB7XG4gICAgdGVzdCgnY29udmVydHMgcG9ydCB0b2tlbnMgdG8gc3RyaW5nIHRva2VucycsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb25zdCBwb3J0ID0gQ0RLX05VTUVSSUNfVE9LRU47XG4gICAgICBjb25zdCBlbmRwb2ludCA9IG5ldyBFbmRwb2ludCgnMTI3LjAuMC4xJywgcG9ydCk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGVuZHBvaW50LnBvcnRBc1N0cmluZygpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICAvLyBTaG91bGQgcmV0dXJuIGEgc3RyaW5nIHRva2VuXG4gICAgICBleHBlY3QoVG9rZW4uaXNVbnJlc29sdmVkKHJlc3VsdCkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIC8vIEl0IHNob3VsZCBub3QganVzdCBiZSB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1lcmljIHRva2VuXG4gICAgICBleHBlY3QocmVzdWx0KS5ub3QudG9CZShwb3J0LnRvU3RyaW5nKCkpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnY29udmVydHMgcmVzb2x2ZWQgcG9ydCBudW1iZXJzIHRvIHN0cmluZyByZXByZXNlbnRhdGlvbicsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb25zdCBwb3J0ID0gMTUwMDtcbiAgICAgIGNvbnN0IGVuZHBvaW50ID0gbmV3IEVuZHBvaW50KCcxMjcuMC4wLjEnLCBwb3J0KTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgY29uc3QgcmVzdWx0ID0gZW5kcG9pbnQucG9ydEFzU3RyaW5nKCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUocG9ydC50b1N0cmluZygpKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==