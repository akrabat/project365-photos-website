"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowLog = exports.LogFormat = exports.FlowLogMaxAggregationInterval = exports.FlowLogDestination = exports.FlowLogFileFormat = exports.FlowLogResourceType = exports.FlowLogDestinationType = exports.FlowLogTrafficType = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const iam = require("../../aws-iam");
const logs = require("../../aws-logs");
const s3 = require("../../aws-s3");
const core_1 = require("../../core");
const cx_api_1 = require("../../cx-api");
const ec2_generated_1 = require("./ec2.generated");
/**
 * The type of VPC traffic to log
 */
var FlowLogTrafficType;
(function (FlowLogTrafficType) {
    /**
     * Only log accepts
     */
    FlowLogTrafficType["ACCEPT"] = "ACCEPT";
    /**
     * Log all requests
     */
    FlowLogTrafficType["ALL"] = "ALL";
    /**
     * Only log rejects
     */
    FlowLogTrafficType["REJECT"] = "REJECT";
})(FlowLogTrafficType = exports.FlowLogTrafficType || (exports.FlowLogTrafficType = {}));
/**
 * The available destination types for Flow Logs
 */
var FlowLogDestinationType;
(function (FlowLogDestinationType) {
    /**
     * Send flow logs to CloudWatch Logs Group
     */
    FlowLogDestinationType["CLOUD_WATCH_LOGS"] = "cloud-watch-logs";
    /**
     * Send flow logs to S3 Bucket
     */
    FlowLogDestinationType["S3"] = "s3";
})(FlowLogDestinationType = exports.FlowLogDestinationType || (exports.FlowLogDestinationType = {}));
/**
 * The type of resource to create the flow log for
 */
class FlowLogResourceType {
    /**
     * The subnet to attach the Flow Log to
     */
    static fromSubnet(subnet) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_ISubnet(subnet);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromSubnet);
            }
            throw error;
        }
        return {
            resourceType: 'Subnet',
            resourceId: subnet.subnetId,
        };
    }
    /**
     * The VPC to attach the Flow Log to
     */
    static fromVpc(vpc) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_IVpc(vpc);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromVpc);
            }
            throw error;
        }
        return {
            resourceType: 'VPC',
            resourceId: vpc.vpcId,
        };
    }
    /**
     * The Network Interface to attach the Flow Log to
     */
    static fromNetworkInterfaceId(id) {
        return {
            resourceType: 'NetworkInterface',
            resourceId: id,
        };
    }
}
_a = JSII_RTTI_SYMBOL_1;
FlowLogResourceType[_a] = { fqn: "aws-cdk-lib.aws_ec2.FlowLogResourceType", version: "2.73.0" };
exports.FlowLogResourceType = FlowLogResourceType;
/**
 * The file format for flow logs written to an S3 bucket destination
 */
var FlowLogFileFormat;
(function (FlowLogFileFormat) {
    /**
     * File will be written as plain text
     *
     * This is the default value
     */
    FlowLogFileFormat["PLAIN_TEXT"] = "plain-text";
    /**
     * File will be written in parquet format
     */
    FlowLogFileFormat["PARQUET"] = "parquet";
})(FlowLogFileFormat = exports.FlowLogFileFormat || (exports.FlowLogFileFormat = {}));
/**
 * The destination type for the flow log
 */
class FlowLogDestination {
    /**
     * Use CloudWatch logs as the destination
     */
    static toCloudWatchLogs(logGroup, iamRole) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_logs_ILogGroup(logGroup);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_IRole(iamRole);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.toCloudWatchLogs);
            }
            throw error;
        }
        return new CloudWatchLogsDestination({
            logDestinationType: FlowLogDestinationType.CLOUD_WATCH_LOGS,
            logGroup,
            iamRole,
        });
    }
    /**
     * Use S3 as the destination
     *
     * @param bucket optional s3 bucket to publish logs to. If one is not provided
     * a default bucket will be created
     * @param keyPrefix optional prefix within the bucket to write logs to
     * @param options additional s3 destination options
     */
    static toS3(bucket, keyPrefix, options) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_IBucket(bucket);
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_S3DestinationOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.toS3);
            }
            throw error;
        }
        return new S3Destination({
            logDestinationType: FlowLogDestinationType.S3,
            s3Bucket: bucket,
            keyPrefix,
            destinationOptions: options,
        });
    }
}
_b = JSII_RTTI_SYMBOL_1;
FlowLogDestination[_b] = { fqn: "aws-cdk-lib.aws_ec2.FlowLogDestination", version: "2.73.0" };
exports.FlowLogDestination = FlowLogDestination;
/**
 *
 */
class S3Destination extends FlowLogDestination {
    constructor(props) {
        super();
        this.props = props;
    }
    bind(scope, _flowLog) {
        let s3Bucket;
        if (this.props.s3Bucket === undefined) {
            s3Bucket = new s3.Bucket(scope, 'Bucket', {
                encryption: s3.BucketEncryption.UNENCRYPTED,
                removalPolicy: core_1.RemovalPolicy.RETAIN,
            });
        }
        else {
            s3Bucket = this.props.s3Bucket;
        }
        // https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-s3.html#flow-logs-s3-permissions
        if (core_1.FeatureFlags.of(scope).isEnabled(cx_api_1.S3_CREATE_DEFAULT_LOGGING_POLICY)) {
            const stack = core_1.Stack.of(scope);
            let keyPrefix = this.props.keyPrefix ?? '';
            if (keyPrefix && !keyPrefix.endsWith('/')) {
                keyPrefix = keyPrefix + '/';
            }
            const prefix = this.props.destinationOptions?.hiveCompatiblePartitions
                ? s3Bucket.arnForObjects(`${keyPrefix}AWSLogs/aws-account-id=${stack.account}/*`)
                : s3Bucket.arnForObjects(`${keyPrefix}AWSLogs/${stack.account}/*`);
            s3Bucket.addToResourcePolicy(new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                principals: [
                    new iam.ServicePrincipal('delivery.logs.amazonaws.com'),
                ],
                resources: [
                    prefix,
                ],
                actions: ['s3:PutObject'],
                conditions: {
                    StringEquals: {
                        's3:x-amz-acl': 'bucket-owner-full-control',
                        'aws:SourceAccount': stack.account,
                    },
                    ArnLike: {
                        'aws:SourceArn': stack.formatArn({
                            service: 'logs',
                            resource: '*',
                        }),
                    },
                },
            }));
            s3Bucket.addToResourcePolicy(new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                principals: [
                    new iam.ServicePrincipal('delivery.logs.amazonaws.com'),
                ],
                resources: [s3Bucket.bucketArn],
                actions: [
                    's3:GetBucketAcl',
                    's3:ListBucket',
                ],
                conditions: {
                    StringEquals: {
                        'aws:SourceAccount': stack.account,
                    },
                    ArnLike: {
                        'aws:SourceArn': stack.formatArn({
                            service: 'logs',
                            resource: '*',
                        }),
                    },
                },
            }));
        }
        return {
            logDestinationType: FlowLogDestinationType.S3,
            s3Bucket,
            keyPrefix: this.props.keyPrefix,
            destinationOptions: (this.props.destinationOptions?.fileFormat || this.props.destinationOptions?.perHourPartition
                || this.props.destinationOptions?.hiveCompatiblePartitions)
                ? {
                    fileFormat: this.props.destinationOptions.fileFormat ?? FlowLogFileFormat.PLAIN_TEXT,
                    perHourPartition: this.props.destinationOptions.perHourPartition ?? false,
                    hiveCompatiblePartitions: this.props.destinationOptions.hiveCompatiblePartitions ?? false,
                } : undefined,
        };
    }
}
/**
 *
 */
class CloudWatchLogsDestination extends FlowLogDestination {
    constructor(props) {
        super();
        this.props = props;
    }
    bind(scope, _flowLog) {
        let iamRole;
        let logGroup;
        if (this.props.iamRole === undefined) {
            iamRole = new iam.Role(scope, 'IAMRole', {
                roleName: core_1.PhysicalName.GENERATE_IF_NEEDED,
                assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com'),
            });
        }
        else {
            iamRole = this.props.iamRole;
        }
        if (this.props.logGroup === undefined) {
            logGroup = new logs.LogGroup(scope, 'LogGroup');
        }
        else {
            logGroup = this.props.logGroup;
        }
        iamRole.addToPrincipalPolicy(new iam.PolicyStatement({
            actions: [
                'logs:CreateLogStream',
                'logs:PutLogEvents',
                'logs:DescribeLogStreams',
            ],
            effect: iam.Effect.ALLOW,
            resources: [logGroup.logGroupArn],
        }));
        iamRole.addToPrincipalPolicy(new iam.PolicyStatement({
            actions: ['iam:PassRole'],
            effect: iam.Effect.ALLOW,
            resources: [iamRole.roleArn],
        }));
        return {
            logDestinationType: FlowLogDestinationType.CLOUD_WATCH_LOGS,
            logGroup,
            iamRole,
        };
    }
}
/**
 * The maximum interval of time during which a flow of packets
 * is captured and aggregated into a flow log record.
 *
 */
var FlowLogMaxAggregationInterval;
(function (FlowLogMaxAggregationInterval) {
    /**
     * 1 minute (60 seconds)
     */
    FlowLogMaxAggregationInterval[FlowLogMaxAggregationInterval["ONE_MINUTE"] = 60] = "ONE_MINUTE";
    /**
     * 10 minutes (600 seconds)
     */
    FlowLogMaxAggregationInterval[FlowLogMaxAggregationInterval["TEN_MINUTES"] = 600] = "TEN_MINUTES";
})(FlowLogMaxAggregationInterval = exports.FlowLogMaxAggregationInterval || (exports.FlowLogMaxAggregationInterval = {}));
/**
 * The following table describes all of the available fields for a flow log record.
 */
class LogFormat {
    /**
     * A custom format string.
     *
     * Gives full control over the format string fragment.
     */
    static custom(formatString) {
        return new LogFormat(formatString);
    }
    /**
     * A custom field name.
     *
     * If there is no ready-made constant for a new field yet, you can use this.
     * The field name will automatically be wrapped in `${ ... }`.
     */
    static field(field) {
        return new LogFormat(`\${${field}}`);
    }
    constructor(value) {
        this.value = value;
    }
}
_c = JSII_RTTI_SYMBOL_1;
LogFormat[_c] = { fqn: "aws-cdk-lib.aws_ec2.LogFormat", version: "2.73.0" };
/**
 * The VPC Flow Logs version.
 */
LogFormat.VERSION = LogFormat.field('version');
/**
 * The AWS account ID of the owner of the source network interface for which traffic is recorded.
 */
LogFormat.ACCOUNT_ID = LogFormat.field('account-id');
/**
 * The ID of the network interface for which the traffic is recorded.
 */
LogFormat.INTERFACE_ID = LogFormat.field('interface-id');
/**
 * The source address for incoming traffic, or the IPv4 or IPv6 address of the network interface
 * for outgoing traffic on the network interface.
 */
LogFormat.SRC_ADDR = LogFormat.field('srcaddr');
/**
 * The destination address for outgoing traffic, or the IPv4 or IPv6 address of the network interface
 * for incoming traffic on the network interface.
 */
LogFormat.DST_ADDR = LogFormat.field('dstaddr');
/**
 * The source port of the traffic.
 */
LogFormat.SRC_PORT = LogFormat.field('srcport');
/**
 * The destination port of the traffic.
 */
LogFormat.DST_PORT = LogFormat.field('dstport');
/**
 * The IANA protocol number of the traffic.
 */
LogFormat.PROTOCOL = LogFormat.field('protocol');
/**
 * The number of packets transferred during the flow.
 */
LogFormat.PACKETS = LogFormat.field('packets');
/**
 * The number of bytes transferred during the flow.
 */
LogFormat.BYTES = LogFormat.field('bytes');
/**
 * The time, in Unix seconds, when the first packet of the flow was received within
 * the aggregation interval.
 *
 * This might be up to 60 seconds after the packet was transmitted or received on
 * the network interface.
 */
LogFormat.START_TIMESTAMP = LogFormat.field('start');
/**
 * The time, in Unix seconds, when the last packet of the flow was received within
 * the aggregation interval.
 *
 * This might be up to 60 seconds after the packet was transmitted or received on
 * the network interface.
 */
LogFormat.END_TIMESTAMP = LogFormat.field('end');
/**
 * The action that is associated with the traffic.
 */
LogFormat.ACTION = LogFormat.field('action');
/**
 * The logging status of the flow log.
 */
LogFormat.LOG_STATUS = LogFormat.field('log-status');
/**
 * The ID of the VPC that contains the network interface for which the traffic is recorded.
 */
LogFormat.VPC_ID = LogFormat.field('vpc-id');
/**
 * The ID of the subnet that contains the network interface for which the traffic is recorded.
 */
LogFormat.SUBNET_ID = LogFormat.field('subnet-id');
/**
 * The ID of the instance that's associated with network interface for which the traffic is
 * recorded, if the instance is owned by you.
 *
 * Returns a '-' symbol for a requester-managed network interface; for example, the
 * network interface for a NAT gateway
 */
LogFormat.INSTANCE_ID = LogFormat.field('instance-id');
/**
 * The bitmask value for TCP flags.
 *
 * - FIN -- 1
 * - SYN -- 2
 * - RST -- 4
 * - SYN-ACK -- 18
 *
 * If no supported flags are recorded, the TCP flag value is 0.
 *
 * TCP flags can be OR-ed during the aggregation interval. For short connections,
 * the flags might be set on the same line in the flow log record, for example,
 * 19 for SYN-ACK and FIN, and 3 for SYN and FIN.
 */
LogFormat.TCP_FLAGS = LogFormat.field('tcp-flags');
/**
 * The type of traffic.
 *
 * The possible values are IPv4, IPv6, or EFA.
 */
LogFormat.TRAFFIC_TYPE = LogFormat.field('type');
/**
 * The packet-level (original) source IP address of the traffic.
 */
LogFormat.PKT_SRC_ADDR = LogFormat.field('pkt-srcaddr');
/**
 * The packet-level (original) destination IP address for the traffic.
 */
LogFormat.PKT_DST_ADDR = LogFormat.field('pkt-dstaddr');
/**
 * The Region that contains the network interface for which traffic is recorded.
 */
LogFormat.REGION = LogFormat.field('region');
/**
 * The ID of the Availability Zone that contains the network interface for which traffic is recorded.
 */
LogFormat.AZ_ID = LogFormat.field('az-id');
/**
 * The type of sublocation that's returned in the sublocation-id field.
 */
LogFormat.SUBLOCATION_TYPE = LogFormat.field('sublocation-type');
/**
 * The ID of the sublocation that contains the network interface for which traffic is recorded.
 */
LogFormat.SUBLOCATION_ID = LogFormat.field('sublocation-id');
/**
 * The name of the subset of IP address ranges for the pkt-srcaddr field,
 * if the source IP address is for an AWS service.
 */
LogFormat.PKT_SRC_AWS_SERVICE = LogFormat.field('pkt-src-aws-service');
/**
 * The name of the subset of IP address ranges for the pkt-dstaddr field,
 * if the destination IP address is for an AWS service.
 */
LogFormat.PKT_DST_AWS_SERVICE = LogFormat.field('pkt-dst-aws-service');
/**
 * The direction of the flow with respect to the interface where traffic is captured.
 */
LogFormat.FLOW_DIRECTION = LogFormat.field('flow-direction');
/**
 * The path that egress traffic takes to the destination.
 */
LogFormat.TRAFFIC_PATH = LogFormat.field('traffic-path');
/**
 * The default format.
 */
LogFormat.ALL_DEFAULT_FIELDS = new LogFormat('${version} ${account-id} ${interface-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${packets} ${bytes} ${start} ${end} ${action} ${log-status}');
exports.LogFormat = LogFormat;
/**
 * The base class for a Flow Log
 */
class FlowLogBase extends core_1.Resource {
}
/**
 * A VPC flow log.
 * @resource AWS::EC2::FlowLog
 */
class FlowLog extends FlowLogBase {
    /**
     * Import a Flow Log by it's Id
     */
    static fromFlowLogId(scope, id, flowLogId) {
        class Import extends FlowLogBase {
            constructor() {
                super(...arguments);
                this.flowLogId = flowLogId;
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.flowLogName,
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_FlowLogProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, FlowLog);
            }
            throw error;
        }
        const destination = props.destination || FlowLogDestination.toCloudWatchLogs();
        const destinationConfig = destination.bind(this, this);
        this.logGroup = destinationConfig.logGroup;
        this.bucket = destinationConfig.s3Bucket;
        this.iamRole = destinationConfig.iamRole;
        this.keyPrefix = destinationConfig.keyPrefix;
        let logDestination = undefined;
        if (this.bucket) {
            logDestination = this.keyPrefix ? this.bucket.arnForObjects(this.keyPrefix) : this.bucket.bucketArn;
        }
        let customLogFormat = undefined;
        if (props.logFormat) {
            customLogFormat = props.logFormat.map(elm => {
                return elm.value;
            }).join(' ');
        }
        const flowLog = new ec2_generated_1.CfnFlowLog(this, 'FlowLog', {
            destinationOptions: destinationConfig.destinationOptions,
            deliverLogsPermissionArn: this.iamRole ? this.iamRole.roleArn : undefined,
            logDestinationType: destinationConfig.logDestinationType,
            logGroupName: this.logGroup ? this.logGroup.logGroupName : undefined,
            maxAggregationInterval: props.maxAggregationInterval,
            resourceId: props.resourceType.resourceId,
            resourceType: props.resourceType.resourceType,
            trafficType: props.trafficType
                ? props.trafficType
                : FlowLogTrafficType.ALL,
            logFormat: customLogFormat,
            logDestination,
        });
        // VPC service implicitly tries to create a bucket policy when adding a vpc flow log.
        // To avoid the race condition, we add an explicit dependency here.
        if (this.bucket?.policy?.node.defaultChild instanceof core_1.CfnResource) {
            flowLog.addDependency(this.bucket?.policy.node.defaultChild);
        }
        // we must remove a flow log configuration first before deleting objects.
        const deleteObjects = this.bucket?.node.tryFindChild('AutoDeleteObjectsCustomResource')?.node.defaultChild;
        if (deleteObjects instanceof core_1.CfnResource) {
            flowLog.addDependency(deleteObjects);
        }
        this.flowLogId = flowLog.ref;
        this.node.defaultChild = flowLog;
    }
}
_d = JSII_RTTI_SYMBOL_1;
FlowLog[_d] = { fqn: "aws-cdk-lib.aws_ec2.FlowLog", version: "2.73.0" };
exports.FlowLog = FlowLog;
//# sourceMappingURL=data:application/json;base64,