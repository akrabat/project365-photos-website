"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const cdk = require("../../../core");
const constructs_1 = require("constructs");
const lib_1 = require("../../lib");
describe('RequireImdsv2Aspect', () => {
    let app;
    let stack;
    let vpc;
    beforeEach(() => {
        app = new cdk.App();
        stack = new cdk.Stack(app, 'Stack');
        vpc = new lib_1.Vpc(stack, 'Vpc');
    });
    test('suppresses warnings', () => {
        // GIVEN
        const aspect = new lib_1.LaunchTemplateRequireImdsv2Aspect({
            suppressWarnings: true,
        });
        const errmsg = 'ERROR';
        const visitMock = jest.spyOn(aspect, 'visit').mockImplementation((node) => {
            // @ts-ignore
            aspect.warn(node, errmsg);
        });
        const construct = new constructs_1.Construct(stack, 'Construct');
        // WHEN
        aspect.visit(construct);
        // THEN
        expect(visitMock).toHaveBeenCalled();
        assertions_1.Annotations.fromStack(stack).hasNoWarning('/Stack/Construct', errmsg);
    });
    describe('InstanceRequireImdsv2Aspect', () => {
        test('requires IMDSv2', () => {
            // GIVEN
            const instance = new lib_1.Instance(stack, 'Instance', {
                vpc,
                instanceType: new lib_1.InstanceType('t2.micro'),
                machineImage: lib_1.MachineImage.latestAmazonLinux(),
            });
            const aspect = new lib_1.InstanceRequireImdsv2Aspect();
            // WHEN
            cdk.Aspects.of(stack).add(aspect);
            app.synth();
            // THEN
            const launchTemplate = instance.node.tryFindChild('LaunchTemplate');
            expect(launchTemplate).toBeDefined();
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
                LaunchTemplateName: stack.resolve(launchTemplate.launchTemplateName),
                LaunchTemplateData: {
                    MetadataOptions: {
                        HttpTokens: 'required',
                    },
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::Instance', {
                LaunchTemplate: {
                    LaunchTemplateName: stack.resolve(launchTemplate.launchTemplateName),
                },
            });
        });
        test('does not toggle when Instance has a LaunchTemplate', () => {
            // GIVEN
            const instance = new lib_1.Instance(stack, 'Instance', {
                vpc,
                instanceType: new lib_1.InstanceType('t2.micro'),
                machineImage: lib_1.MachineImage.latestAmazonLinux(),
            });
            instance.instance.launchTemplate = {
                launchTemplateName: 'name',
                version: 'version',
            };
            const aspect = new lib_1.InstanceRequireImdsv2Aspect();
            // WHEN
            cdk.Aspects.of(stack).add(aspect);
            // THEN
            // Aspect normally creates a LaunchTemplate for the Instance to toggle IMDSv1,
            // so we can assert that one was not created
            assertions_1.Template.fromStack(stack).resourceCountIs('AWS::EC2::LaunchTemplate', 0);
            assertions_1.Annotations.fromStack(stack).hasWarning('/Stack/Instance', assertions_1.Match.stringLikeRegexp('.*Cannot toggle IMDSv1 because this Instance is associated with an existing Launch Template.'));
        });
        test('suppresses Launch Template warnings', () => {
            // GIVEN
            const instance = new lib_1.Instance(stack, 'Instance', {
                vpc,
                instanceType: new lib_1.InstanceType('t2.micro'),
                machineImage: lib_1.MachineImage.latestAmazonLinux(),
            });
            instance.instance.launchTemplate = {
                launchTemplateName: 'name',
                version: 'version',
            };
            const aspect = new lib_1.InstanceRequireImdsv2Aspect({
                suppressLaunchTemplateWarning: true,
            });
            // WHEN
            aspect.visit(instance);
            // THEN
            assertions_1.Annotations.fromStack(stack).hasNoWarning('/Stack/Instance', 'Cannot toggle IMDSv1 because this Instance is associated with an existing Launch Template.');
        });
        test('launch template name is unique with feature flag', () => {
            // GIVEN
            const app2 = new cdk.App();
            const otherStack = new cdk.Stack(app2, 'OtherStack');
            const otherVpc = new lib_1.Vpc(otherStack, 'OtherVpc');
            const otherInstance = new lib_1.Instance(otherStack, 'OtherInstance', {
                vpc: otherVpc,
                instanceType: new lib_1.InstanceType('t2.micro'),
                machineImage: lib_1.MachineImage.latestAmazonLinux(),
            });
            const imdsv2Stack = new cdk.Stack(app2, 'RequireImdsv2Stack');
            const imdsv2Vpc = new lib_1.Vpc(imdsv2Stack, 'Vpc');
            const instance = new lib_1.Instance(imdsv2Stack, 'Instance', {
                vpc: imdsv2Vpc,
                instanceType: new lib_1.InstanceType('t2.micro'),
                machineImage: lib_1.MachineImage.latestAmazonLinux(),
            });
            const aspect = new lib_1.InstanceRequireImdsv2Aspect();
            // WHEN
            cdk.Aspects.of(imdsv2Stack).add(aspect);
            cdk.Aspects.of(otherStack).add(aspect);
            app2.synth();
            // THEN
            const launchTemplate = instance.node.tryFindChild('LaunchTemplate');
            const otherLaunchTemplate = otherInstance.node.tryFindChild('LaunchTemplate');
            expect(launchTemplate).toBeDefined();
            expect(otherLaunchTemplate).toBeDefined();
            expect(launchTemplate.launchTemplateName !== otherLaunchTemplate.launchTemplateName);
        });
    });
    describe('LaunchTemplateRequireImdsv2Aspect', () => {
        test('warns when LaunchTemplateData is a CDK token', () => {
            // GIVEN
            const launchTemplate = new lib_1.LaunchTemplate(stack, 'LaunchTemplate');
            const cfnLaunchTemplate = launchTemplate.node.tryFindChild('Resource');
            cfnLaunchTemplate.launchTemplateData = cdk.Token.asAny({
                kernelId: 'asfd',
            });
            const aspect = new lib_1.LaunchTemplateRequireImdsv2Aspect();
            // WHEN
            aspect.visit(launchTemplate);
            // THEN
            assertions_1.Annotations.fromStack(stack).hasWarning('/Stack/LaunchTemplate', assertions_1.Match.stringLikeRegexp('.*LaunchTemplateData is a CDK token.'));
        });
        test('warns when MetadataOptions is a CDK token', () => {
            // GIVEN
            const launchTemplate = new lib_1.LaunchTemplate(stack, 'LaunchTemplate');
            const cfnLaunchTemplate = launchTemplate.node.tryFindChild('Resource');
            cfnLaunchTemplate.launchTemplateData = {
                metadataOptions: cdk.Token.asAny({
                    httpEndpoint: 'http://bla',
                }),
            };
            const aspect = new lib_1.LaunchTemplateRequireImdsv2Aspect();
            // WHEN
            aspect.visit(launchTemplate);
            // THEN
            assertions_1.Annotations.fromStack(stack).hasWarning('/Stack/LaunchTemplate', assertions_1.Match.stringLikeRegexp('.*LaunchTemplateData.MetadataOptions is a CDK token.'));
        });
        test('requires IMDSv2', () => {
            // GIVEN
            new lib_1.LaunchTemplate(stack, 'LaunchTemplate');
            const aspect = new lib_1.LaunchTemplateRequireImdsv2Aspect();
            // WHEN
            cdk.Aspects.of(stack).add(aspect);
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
                LaunchTemplateData: {
                    MetadataOptions: {
                        HttpTokens: 'required',
                    },
                },
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,