"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cidr_splits_1 = require("../lib/cidr-splits");
describe('Cidr split results', () => {
    test('3 big subnets then 6 small ones', () => {
        expect((0, cidr_splits_1.calculateCidrSplits)(22, [24, 24, 24, 28, 28, 28, 28, 28, 28])).toEqual([
            { netmask: 24, count: 4, index: 0 },
            { netmask: 24, count: 4, index: 1 },
            { netmask: 24, count: 4, index: 2 },
            { netmask: 28, count: 64, index: 48 },
            { netmask: 28, count: 64, index: 49 },
            { netmask: 28, count: 64, index: 50 },
            { netmask: 28, count: 64, index: 51 },
            { netmask: 28, count: 64, index: 52 },
            { netmask: 28, count: 64, index: 53 },
        ]);
    });
    test('3 small subnets then 2 big ones', () => {
        expect((0, cidr_splits_1.calculateCidrSplits)(22, [27, 27, 27, 24, 24])).toEqual([
            { netmask: 27, count: 32, index: 0 },
            { netmask: 27, count: 32, index: 1 },
            { netmask: 27, count: 32, index: 2 },
            { netmask: 24, count: 4, index: 1 },
            { netmask: 24, count: 4, index: 2 },
        ]);
    });
    test('small big small', () => {
        expect((0, cidr_splits_1.calculateCidrSplits)(22, [28, 24, 28])).toEqual([
            { netmask: 28, count: 64, index: 0 },
            { netmask: 24, count: 4, index: 1 },
            { netmask: 28, count: 64, index: 32 },
        ]);
    });
    test('allocation too big', () => {
        expect(() => (0, cidr_splits_1.calculateCidrSplits)(22, [23, 23, 23])).toThrow(/not big enough/);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lkci1zcGxpdHMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNpZHItc3BsaXRzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvREFBeUQ7QUFFekQsUUFBUSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtJQUNsQyxJQUFJLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO1FBQzNDLE1BQU0sQ0FBQyxJQUFBLGlDQUFtQixFQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUM1RSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1lBQ25DLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7WUFDbkMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUNuQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ3JDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDckMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNyQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ3JDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDckMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtTQUN0QyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7UUFDM0MsTUFBTSxDQUFDLElBQUEsaUNBQW1CLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDNUQsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUNwQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1lBQ3BDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7WUFDcEMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUNuQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1NBQ3BDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtRQUMzQixNQUFNLENBQUUsSUFBQSxpQ0FBbUIsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDckQsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUNwQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1lBQ25DLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7U0FDdEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO1FBQzlCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFBLGlDQUFtQixFQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hGLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxjdWxhdGVDaWRyU3BsaXRzIH0gZnJvbSAnLi4vbGliL2NpZHItc3BsaXRzJztcblxuZGVzY3JpYmUoJ0NpZHIgc3BsaXQgcmVzdWx0cycsICgpID0+IHtcbiAgdGVzdCgnMyBiaWcgc3VibmV0cyB0aGVuIDYgc21hbGwgb25lcycsICgpID0+IHtcbiAgICBleHBlY3QoY2FsY3VsYXRlQ2lkclNwbGl0cygyMiwgWzI0LCAyNCwgMjQsIDI4LCAyOCwgMjgsIDI4LCAyOCwgMjhdKSkudG9FcXVhbChbXG4gICAgICB7IG5ldG1hc2s6IDI0LCBjb3VudDogNCwgaW5kZXg6IDAgfSxcbiAgICAgIHsgbmV0bWFzazogMjQsIGNvdW50OiA0LCBpbmRleDogMSB9LFxuICAgICAgeyBuZXRtYXNrOiAyNCwgY291bnQ6IDQsIGluZGV4OiAyIH0sXG4gICAgICB7IG5ldG1hc2s6IDI4LCBjb3VudDogNjQsIGluZGV4OiA0OCB9LFxuICAgICAgeyBuZXRtYXNrOiAyOCwgY291bnQ6IDY0LCBpbmRleDogNDkgfSxcbiAgICAgIHsgbmV0bWFzazogMjgsIGNvdW50OiA2NCwgaW5kZXg6IDUwIH0sXG4gICAgICB7IG5ldG1hc2s6IDI4LCBjb3VudDogNjQsIGluZGV4OiA1MSB9LFxuICAgICAgeyBuZXRtYXNrOiAyOCwgY291bnQ6IDY0LCBpbmRleDogNTIgfSxcbiAgICAgIHsgbmV0bWFzazogMjgsIGNvdW50OiA2NCwgaW5kZXg6IDUzIH0sXG4gICAgXSk7XG4gIH0pO1xuXG4gIHRlc3QoJzMgc21hbGwgc3VibmV0cyB0aGVuIDIgYmlnIG9uZXMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGNhbGN1bGF0ZUNpZHJTcGxpdHMoMjIsIFsyNywgMjcsIDI3LCAyNCwgMjRdKSkudG9FcXVhbChbXG4gICAgICB7IG5ldG1hc2s6IDI3LCBjb3VudDogMzIsIGluZGV4OiAwIH0sXG4gICAgICB7IG5ldG1hc2s6IDI3LCBjb3VudDogMzIsIGluZGV4OiAxIH0sXG4gICAgICB7IG5ldG1hc2s6IDI3LCBjb3VudDogMzIsIGluZGV4OiAyIH0sXG4gICAgICB7IG5ldG1hc2s6IDI0LCBjb3VudDogNCwgaW5kZXg6IDEgfSxcbiAgICAgIHsgbmV0bWFzazogMjQsIGNvdW50OiA0LCBpbmRleDogMiB9LFxuICAgIF0pO1xuICB9KTtcblxuICB0ZXN0KCdzbWFsbCBiaWcgc21hbGwnLCAoKSA9PiB7XG4gICAgZXhwZWN0IChjYWxjdWxhdGVDaWRyU3BsaXRzKDIyLCBbMjgsIDI0LCAyOF0pKS50b0VxdWFsKFtcbiAgICAgIHsgbmV0bWFzazogMjgsIGNvdW50OiA2NCwgaW5kZXg6IDAgfSxcbiAgICAgIHsgbmV0bWFzazogMjQsIGNvdW50OiA0LCBpbmRleDogMSB9LFxuICAgICAgeyBuZXRtYXNrOiAyOCwgY291bnQ6IDY0LCBpbmRleDogMzIgfSxcbiAgICBdKTtcbiAgfSk7XG5cbiAgdGVzdCgnYWxsb2NhdGlvbiB0b28gYmlnJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiBjYWxjdWxhdGVDaWRyU3BsaXRzKDIyLCBbMjMsIDIzLCAyM10pKS50b1Rocm93KC9ub3QgYmlnIGVub3VnaC8pO1xuICB9KTtcbn0pOyJdfQ==