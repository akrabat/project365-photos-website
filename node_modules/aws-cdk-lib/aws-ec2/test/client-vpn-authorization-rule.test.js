"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../core");
const lib_1 = require("../lib");
const client_vpn_authorization_rule_1 = require("../lib/client-vpn-authorization-rule");
let stack;
beforeEach(() => {
    const app = new core_1.App({
        context: {
            '@aws-cdk/core:newStyleStackSynthesis': false,
        },
    });
    stack = new core_1.Stack(app);
});
describe('ClientVpnAuthorizationRule constructor', () => {
    test('normal usage', () => {
        const clientVpnEndpoint = {
            endpointId: 'myClientVpnEndpoint',
            targetNetworksAssociated: [],
            stack,
            env: { account: 'myAccount', region: 'us-east-1' },
            connections: new lib_1.Connections(),
            node: stack.node,
            applyRemovalPolicy: () => { },
        };
        new client_vpn_authorization_rule_1.ClientVpnAuthorizationRule(stack, 'NormalRule', {
            cidr: '10.0.10.0/32',
            clientVpnEndpoint,
        });
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::EC2::ClientVpnAuthorizationRule', 1);
        expect(stack.node.children.length).toBe(1);
    });
    test('either clientVpnEndoint (deprecated, typo) or clientVpnEndpoint is required', () => {
        expect(() => {
            new client_vpn_authorization_rule_1.ClientVpnAuthorizationRule(stack, 'RuleNoEndointNoEndpoint', {
                cidr: '10.0.10.0/32',
            });
        }).toThrow(new Error('ClientVpnAuthorizationRule: either clientVpnEndpoint or clientVpnEndoint (deprecated) must be specified'));
    });
    (0, cdk_build_tools_1.testDeprecated)('specifying both clientVpnEndoint (deprecated, typo) and clientVpnEndpoint is not allowed', () => {
        const clientVpnEndoint = {
            endpointId: 'typoTypo',
            targetNetworksAssociated: [],
            stack,
            env: { account: 'myAccount', region: 'us-east-1' },
            connections: new lib_1.Connections(),
            node: stack.node,
            applyRemovalPolicy: () => { },
        };
        const clientVpnEndpoint = {
            endpointId: 'myClientVpnEndpoint',
            targetNetworksAssociated: [],
            stack,
            env: { account: 'myAccount', region: 'us-east-1' },
            connections: new lib_1.Connections(),
            node: stack.node,
            applyRemovalPolicy: () => { },
        };
        expect(() => {
            new client_vpn_authorization_rule_1.ClientVpnAuthorizationRule(stack, 'RuleBothEndointAndEndpoint', {
                cidr: '10.0.10.0/32',
                clientVpnEndoint,
                clientVpnEndpoint,
            });
        }).toThrow(new Error('ClientVpnAuthorizationRule: either clientVpnEndpoint or clientVpnEndoint (deprecated) must be specified' +
            ', but not both'));
    });
    test('invalid constructor calls should not add anything to the stack', () => {
        expect(() => {
            new client_vpn_authorization_rule_1.ClientVpnAuthorizationRule(stack, 'RuleNoEndointNoEndpoint', {
                cidr: '10.0.10.0/32',
            });
        }).toThrow();
        expect(stack.node.children.length).toBe(0);
    });
    (0, cdk_build_tools_1.testDeprecated)('supplying clientVpnEndoint (deprecated due to typo) should still work', () => {
        const clientVpnEndoint = {
            endpointId: 'myClientVpnEndpoint',
            targetNetworksAssociated: [],
            stack,
            env: { account: 'myAccount', region: 'us-east-1' },
            connections: new lib_1.Connections(),
            node: stack.node,
            applyRemovalPolicy: () => { },
        };
        new client_vpn_authorization_rule_1.ClientVpnAuthorizationRule(stack, 'RuleWithEndointTypo', {
            cidr: '10.0.10.0/32',
            clientVpnEndoint,
        });
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::EC2::ClientVpnAuthorizationRule', 1);
        expect(stack.node.children.length).toBe(1);
    });
});
//# sourceMappingURL=data:application/json;base64,