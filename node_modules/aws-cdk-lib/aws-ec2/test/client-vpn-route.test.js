"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const aws_iam_1 = require("../../aws-iam");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../core");
const ec2 = require("../lib");
const lib_1 = require("../lib");
let stack;
let vpc;
beforeEach(() => {
    const app = new core_1.App({
        context: {
            '@aws-cdk/core:newStyleStackSynthesis': false,
        },
    });
    stack = new core_1.Stack(app);
    vpc = new ec2.Vpc(stack, 'Vpc');
});
describe('ClientVpnRoute constructor', () => {
    test('normal usage', () => {
        const samlProvider = new aws_iam_1.SamlProvider(stack, 'Provider', {
            metadataDocument: aws_iam_1.SamlMetadataDocument.fromXml('xml'),
        });
        const clientVpnEndpoint = vpc.addClientVpnEndpoint('Endpoint', {
            cidr: '10.100.0.0/16',
            serverCertificateArn: 'server-certificate-arn',
            clientCertificateArn: 'client-certificate-arn',
            clientConnectionHandler: {
                functionArn: 'function-arn',
                functionName: 'AWSClientVPN-function-name',
            },
            dnsServers: ['8.8.8.8', '8.8.4.4'],
            userBasedAuthentication: lib_1.ClientVpnUserBasedAuthentication.federated(samlProvider),
        });
        new lib_1.ClientVpnRoute(stack, 'NormalRoute', {
            clientVpnEndpoint,
            cidr: '0.0.0.0/0',
            target: lib_1.ClientVpnRouteTarget.local(),
        });
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::EC2::VPC', 1);
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::EC2::ClientVpnEndpoint', 1);
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::EC2::ClientVpnRoute', 1);
        expect(stack.node.children.length).toBe(3);
    });
    (0, cdk_build_tools_1.testDeprecated)('either clientVpnEndoint (deprecated, typo) or clientVpnEndpoint is required', () => {
        expect(() => {
            new lib_1.ClientVpnRoute(stack, 'RouteNoEndointOrEndpoint', {
                cidr: '0.0.0.0/0',
                target: lib_1.ClientVpnRouteTarget.local(),
            });
        }).toThrow(new Error('ClientVpnRoute: either clientVpnEndpoint or clientVpnEndoint (deprecated) must be specified'));
    });
    (0, cdk_build_tools_1.testDeprecated)('specifying both clientVpnEndoint (deprecated, typo) and clientVpnEndpoint is not allowed', () => {
        const samlProvider = new aws_iam_1.SamlProvider(stack, 'Provider', {
            metadataDocument: aws_iam_1.SamlMetadataDocument.fromXml('xml'),
        });
        const clientVpnEndpoint = vpc.addClientVpnEndpoint('Endpoint', {
            cidr: '10.100.0.0/16',
            serverCertificateArn: 'server-certificate-arn',
            clientCertificateArn: 'client-certificate-arn',
            clientConnectionHandler: {
                functionArn: 'function-arn',
                functionName: 'AWSClientVPN-function-name',
            },
            dnsServers: ['8.8.8.8', '8.8.4.4'],
            userBasedAuthentication: lib_1.ClientVpnUserBasedAuthentication.federated(samlProvider),
        });
        const clientVpnEndoint = clientVpnEndpoint;
        expect(() => {
            new lib_1.ClientVpnRoute(stack, 'RouteBothEndointAndEndpoint', {
                clientVpnEndoint,
                clientVpnEndpoint,
                cidr: '0.0.0.0/0',
                target: lib_1.ClientVpnRouteTarget.local(),
            });
        }).toThrow(new Error('ClientVpnRoute: either clientVpnEndpoint or clientVpnEndoint (deprecated) must be specified' +
            ', but not both'));
    });
    test('invalid constructor calls should not add anything to the stack', () => {
        expect(() => {
            new lib_1.ClientVpnRoute(stack, 'RouteNoEndointOrEndpoint', {
                cidr: '0.0.0.0/0',
                target: lib_1.ClientVpnRouteTarget.local(),
            });
        }).toThrow();
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::EC2::VPC', 1);
        expect(stack.node.children.length).toBe(1);
    });
    (0, cdk_build_tools_1.testDeprecated)('supplying clientVpnEndoint (deprecated due to typo) should still work', () => {
        const samlProvider = new aws_iam_1.SamlProvider(stack, 'Provider', {
            metadataDocument: aws_iam_1.SamlMetadataDocument.fromXml('xml'),
        });
        const clientVpnEndoint = vpc.addClientVpnEndpoint('Endpoint', {
            cidr: '10.100.0.0/16',
            serverCertificateArn: 'server-certificate-arn',
            clientCertificateArn: 'client-certificate-arn',
            clientConnectionHandler: {
                functionArn: 'function-arn',
                functionName: 'AWSClientVPN-function-name',
            },
            dnsServers: ['8.8.8.8', '8.8.4.4'],
            userBasedAuthentication: lib_1.ClientVpnUserBasedAuthentication.federated(samlProvider),
        });
        new lib_1.ClientVpnRoute(stack, 'RouteWithEndointTypo', {
            clientVpnEndoint,
            cidr: '0.0.0.0/0',
            target: lib_1.ClientVpnRouteTarget.local(),
        });
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::EC2::VPC', 1);
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::EC2::ClientVpnEndpoint', 1);
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::EC2::ClientVpnRoute', 1);
        expect(stack.node.children.length).toBe(3);
    });
});
//# sourceMappingURL=data:application/json;base64,