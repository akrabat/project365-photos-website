"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const aws_iam_1 = require("../../aws-iam");
const aws_kms_1 = require("../../aws-kms");
const core_1 = require("../../core");
const cxapi = require("../../cx-api");
const util_1 = require("./util");
const lib_1 = require("../lib");
/* eslint-disable jest/expect-expect */
describe('LaunchTemplate', () => {
    let app;
    let stack;
    beforeEach(() => {
        app = new core_1.App();
        stack = new core_1.Stack(app);
    });
    test('Empty props', () => {
        // WHEN
        const template = new lib_1.LaunchTemplate(stack, 'Template');
        // THEN
        // Note: The following is intentionally a haveResource instead of haveResourceLike
        // to ensure that only the bare minimum of properties have values when no properties
        // are given to a LaunchTemplate.
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                TagSpecifications: [
                    {
                        ResourceType: 'instance',
                        Tags: [
                            {
                                Key: 'Name',
                                Value: 'Default/Template',
                            },
                        ],
                    },
                    {
                        ResourceType: 'volume',
                        Tags: [
                            {
                                Key: 'Name',
                                Value: 'Default/Template',
                            },
                        ],
                    },
                ],
            },
            TagSpecifications: [
                {
                    ResourceType: 'launch-template',
                    Tags: [
                        {
                            Key: 'Name',
                            Value: 'Default/Template',
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::IAM::InstanceProfile', 0);
        expect(() => { template.grantPrincipal; }).toThrow();
        expect(() => { template.connections; }).toThrow();
        expect(template.osType).toBeUndefined();
        expect(template.role).toBeUndefined();
        expect(template.userData).toBeUndefined();
    });
    test('Import from attributes with name', () => {
        // WHEN
        const template = lib_1.LaunchTemplate.fromLaunchTemplateAttributes(stack, 'Template', {
            launchTemplateName: 'TestName',
            versionNumber: 'TestVersion',
        });
        // THEN
        expect(template.launchTemplateId).toBeUndefined();
        expect(template.launchTemplateName).toBe('TestName');
        expect(template.versionNumber).toBe('TestVersion');
    });
    test('Import from attributes with id', () => {
        // WHEN
        const template = lib_1.LaunchTemplate.fromLaunchTemplateAttributes(stack, 'Template', {
            launchTemplateId: 'TestId',
            versionNumber: 'TestVersion',
        });
        // THEN
        expect(template.launchTemplateId).toBe('TestId');
        expect(template.launchTemplateName).toBeUndefined();
        expect(template.versionNumber).toBe('TestVersion');
    });
    test('Import from attributes fails with name and id', () => {
        expect(() => {
            lib_1.LaunchTemplate.fromLaunchTemplateAttributes(stack, 'Template', {
                launchTemplateName: 'TestName',
                launchTemplateId: 'TestId',
                versionNumber: 'TestVersion',
            });
        }).toThrow();
    });
    test('Given name', () => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            launchTemplateName: 'LTName',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateName: 'LTName',
        });
    });
    test('Given instanceType', () => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            instanceType: new lib_1.InstanceType('tt.test'),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                InstanceType: 'tt.test',
            },
        });
    });
    test('Given machineImage (Linux)', () => {
        // WHEN
        const template = new lib_1.LaunchTemplate(stack, 'Template', {
            machineImage: new lib_1.AmazonLinuxImage(),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                ImageId: {
                    Ref: (0, util_1.stringLike)('SsmParameterValueawsserviceamiamazonlinuxlatestamznami.*Parameter'),
                },
            },
        });
        expect(template.osType).toBe(lib_1.OperatingSystemType.LINUX);
        expect(template.userData).toBeUndefined();
    });
    test('Given machineImage (Windows)', () => {
        // WHEN
        const template = new lib_1.LaunchTemplate(stack, 'Template', {
            machineImage: new lib_1.WindowsImage(lib_1.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                ImageId: {
                    Ref: (0, util_1.stringLike)('SsmParameterValueawsserviceamiwindowslatestWindowsServer2019EnglishFullBase.*Parameter'),
                },
            },
        });
        expect(template.osType).toBe(lib_1.OperatingSystemType.WINDOWS);
        expect(template.userData).toBeUndefined();
    });
    test('Given userData', () => {
        // GIVEN
        const userData = lib_1.UserData.forLinux();
        userData.addCommands('echo Test');
        // WHEN
        const template = new lib_1.LaunchTemplate(stack, 'Template', {
            userData,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                UserData: {
                    'Fn::Base64': '#!/bin/bash\necho Test',
                },
            },
        });
        expect(template.userData).toBeDefined();
    });
    test('Given role', () => {
        // GIVEN
        const role = new aws_iam_1.Role(stack, 'TestRole', {
            assumedBy: new aws_iam_1.ServicePrincipal('ec2.amazonaws.com'),
        });
        // WHEN
        const template = new lib_1.LaunchTemplate(stack, 'Template', {
            role,
        });
        // THEN
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::IAM::Role', 1);
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::InstanceProfile', {
            Roles: [
                {
                    Ref: 'TestRole6C9272DF',
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                IamInstanceProfile: {
                    Arn: stack.resolve(template.node.findChild('Profile').getAtt('Arn')),
                },
                TagSpecifications: [
                    {
                        ResourceType: 'instance',
                        Tags: [
                            {
                                Key: 'Name',
                                Value: 'Default/Template',
                            },
                        ],
                    },
                    {
                        ResourceType: 'volume',
                        Tags: [
                            {
                                Key: 'Name',
                                Value: 'Default/Template',
                            },
                        ],
                    },
                ],
            },
            TagSpecifications: [
                {
                    ResourceType: 'launch-template',
                    Tags: [
                        {
                            Key: 'Name',
                            Value: 'Default/Template',
                        },
                    ],
                },
            ],
        });
        expect(template.role).toBeDefined();
        expect(template.grantPrincipal).toBeDefined();
    });
    test('Given blockDeviceMapping', () => {
        // GIVEN
        const kmsKey = new aws_kms_1.Key(stack, 'EbsKey');
        const blockDevices = [
            {
                deviceName: 'ebs',
                mappingEnabled: true,
                volume: lib_1.BlockDeviceVolume.ebs(15, {
                    deleteOnTermination: true,
                    encrypted: true,
                    volumeType: lib_1.EbsDeviceVolumeType.IO1,
                    iops: 5000,
                }),
            }, {
                deviceName: 'ebs-cmk',
                mappingEnabled: true,
                volume: lib_1.BlockDeviceVolume.ebs(15, {
                    deleteOnTermination: true,
                    encrypted: true,
                    kmsKey: kmsKey,
                    volumeType: lib_1.EbsDeviceVolumeType.IO1,
                    iops: 5000,
                }),
            }, {
                deviceName: 'ebs-snapshot',
                mappingEnabled: false,
                volume: lib_1.BlockDeviceVolume.ebsFromSnapshot('snapshot-id', {
                    volumeSize: 500,
                    deleteOnTermination: false,
                    volumeType: lib_1.EbsDeviceVolumeType.SC1,
                }),
            }, {
                deviceName: 'ephemeral',
                volume: lib_1.BlockDeviceVolume.ephemeral(0),
            },
        ];
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            blockDevices,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                BlockDeviceMappings: [
                    {
                        DeviceName: 'ebs',
                        Ebs: {
                            DeleteOnTermination: true,
                            Encrypted: true,
                            Iops: 5000,
                            VolumeSize: 15,
                            VolumeType: 'io1',
                        },
                    },
                    {
                        DeviceName: 'ebs-cmk',
                        Ebs: {
                            DeleteOnTermination: true,
                            Encrypted: true,
                            KmsKeyId: {
                                'Fn::GetAtt': [
                                    'EbsKeyD3FEE551',
                                    'Arn',
                                ],
                            },
                            Iops: 5000,
                            VolumeSize: 15,
                            VolumeType: 'io1',
                        },
                    },
                    {
                        DeviceName: 'ebs-snapshot',
                        Ebs: {
                            DeleteOnTermination: false,
                            SnapshotId: 'snapshot-id',
                            VolumeSize: 500,
                            VolumeType: 'sc1',
                        },
                        NoDevice: '',
                    },
                    {
                        DeviceName: 'ephemeral',
                        VirtualName: 'ephemeral0',
                    },
                ],
            },
        });
    });
    describe('feature flag @aws-cdk/aws-ec2:launchTemplateDefaultUserData', () => {
        test('Given machineImage (Linux)', () => {
            // WHEN
            stack.node.setContext(cxapi.EC2_LAUNCH_TEMPLATE_DEFAULT_USER_DATA, true);
            const template = new lib_1.LaunchTemplate(stack, 'Template', {
                machineImage: new lib_1.AmazonLinuxImage(),
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
                LaunchTemplateData: {
                    ImageId: {
                        Ref: (0, util_1.stringLike)('SsmParameterValueawsserviceamiamazonlinuxlatestamznami.*Parameter'),
                    },
                },
            });
            expect(template.osType).toBe(lib_1.OperatingSystemType.LINUX);
            expect(template.userData).toBeDefined();
        });
        test('Given machineImage (Windows)', () => {
            // WHEN
            stack.node.setContext(cxapi.EC2_LAUNCH_TEMPLATE_DEFAULT_USER_DATA, true);
            const template = new lib_1.LaunchTemplate(stack, 'Template', {
                machineImage: new lib_1.WindowsImage(lib_1.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE),
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
                LaunchTemplateData: {
                    ImageId: {
                        Ref: (0, util_1.stringLike)('SsmParameterValueawsserviceamiwindowslatestWindowsServer2019EnglishFullBase.*Parameter'),
                    },
                },
            });
            expect(template.osType).toBe(lib_1.OperatingSystemType.WINDOWS);
            expect(template.userData).toBeDefined();
        });
    });
    test.each([
        [lib_1.CpuCredits.STANDARD, 'standard'],
        [lib_1.CpuCredits.UNLIMITED, 'unlimited'],
    ])('Given cpuCredits %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            cpuCredits: given,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                CreditSpecification: {
                    CpuCredits: expected,
                },
            },
        });
    });
    test.each([
        [true, true],
        [false, false],
    ])('Given disableApiTermination %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            disableApiTermination: given,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                DisableApiTermination: expected,
            },
        });
    });
    test.each([
        [true, true],
        [false, false],
    ])('Given ebsOptimized %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            ebsOptimized: given,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                EbsOptimized: expected,
            },
        });
    });
    test.each([
        [true, true],
        [false, false],
    ])('Given nitroEnclaveEnabled %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            nitroEnclaveEnabled: given,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                EnclaveOptions: {
                    Enabled: expected,
                },
            },
        });
    });
    test.each([
        [lib_1.InstanceInitiatedShutdownBehavior.STOP, 'stop'],
        [lib_1.InstanceInitiatedShutdownBehavior.TERMINATE, 'terminate'],
    ])('Given instanceInitiatedShutdownBehavior %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            instanceInitiatedShutdownBehavior: given,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                InstanceInitiatedShutdownBehavior: expected,
            },
        });
    });
    test('Given keyName', () => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            keyName: 'TestKeyname',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                KeyName: 'TestKeyname',
            },
        });
    });
    test.each([
        [true, true],
        [false, false],
    ])('Given detailedMonitoring %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            detailedMonitoring: given,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                Monitoring: {
                    Enabled: expected,
                },
            },
        });
    });
    test('Given securityGroup', () => {
        // GIVEN
        const vpc = new lib_1.Vpc(stack, 'VPC');
        const sg = new lib_1.SecurityGroup(stack, 'SG', { vpc });
        // WHEN
        const template = new lib_1.LaunchTemplate(stack, 'Template', {
            securityGroup: sg,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                SecurityGroupIds: [
                    {
                        'Fn::GetAtt': [
                            'SGADB53937',
                            'GroupId',
                        ],
                    },
                ],
            },
        });
        expect(template.connections).toBeDefined();
        expect(template.connections.securityGroups).toHaveLength(1);
        expect(template.connections.securityGroups[0]).toBe(sg);
    });
    test('Adding tags', () => {
        // GIVEN
        const template = new lib_1.LaunchTemplate(stack, 'Template');
        // WHEN
        core_1.Tags.of(template).add('TestKey', 'TestValue');
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                TagSpecifications: [
                    {
                        ResourceType: 'instance',
                        Tags: [
                            {
                                Key: 'Name',
                                Value: 'Default/Template',
                            },
                            {
                                Key: 'TestKey',
                                Value: 'TestValue',
                            },
                        ],
                    },
                    {
                        ResourceType: 'volume',
                        Tags: [
                            {
                                Key: 'Name',
                                Value: 'Default/Template',
                            },
                            {
                                Key: 'TestKey',
                                Value: 'TestValue',
                            },
                        ],
                    },
                ],
            },
            TagSpecifications: [
                {
                    ResourceType: 'launch-template',
                    Tags: [
                        {
                            Key: 'Name',
                            Value: 'Default/Template',
                        },
                        {
                            Key: 'TestKey',
                            Value: 'TestValue',
                        },
                    ],
                },
            ],
        });
    });
    test('Requires IMDSv2', () => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            requireImdsv2: true,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                MetadataOptions: {
                    HttpTokens: 'required',
                },
            },
        });
    });
});
describe('LaunchTemplate marketOptions', () => {
    let app;
    let stack;
    beforeEach(() => {
        app = new core_1.App();
        stack = new core_1.Stack(app);
    });
    test('given spotOptions', () => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            spotOptions: {},
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                InstanceMarketOptions: {
                    MarketType: 'spot',
                },
            },
        });
    });
    test.each([
        [0, 1],
        [1, 0],
        [6, 0],
        [7, 1],
    ])('for range duration errors: %p', (duration, expectedErrors) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            spotOptions: {
                blockDuration: core_1.Duration.hours(duration),
            },
        });
        // THEN
        const errors = assertions_1.Annotations.fromStack(stack).findError('/Default/Template', assertions_1.Match.anyValue());
        expect(errors).toHaveLength(expectedErrors);
    });
    test('for bad duration', () => {
        expect(() => {
            new lib_1.LaunchTemplate(stack, 'Template', {
                spotOptions: {
                    // Duration must be an integral number of hours.
                    blockDuration: core_1.Duration.minutes(61),
                },
            });
        }).toThrow();
    });
    test('given blockDuration', () => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            spotOptions: {
                blockDuration: core_1.Duration.hours(1),
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                InstanceMarketOptions: {
                    MarketType: 'spot',
                    SpotOptions: {
                        BlockDurationMinutes: 60,
                    },
                },
            },
        });
    });
    test.each([
        [lib_1.SpotInstanceInterruption.STOP, 'stop'],
        [lib_1.SpotInstanceInterruption.TERMINATE, 'terminate'],
        [lib_1.SpotInstanceInterruption.HIBERNATE, 'hibernate'],
    ])('given interruptionBehavior %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            spotOptions: {
                interruptionBehavior: given,
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                InstanceMarketOptions: {
                    MarketType: 'spot',
                    SpotOptions: {
                        InstanceInterruptionBehavior: expected,
                    },
                },
            },
        });
    });
    test.each([
        [0.001, '0.001'],
        [1, '1'],
        [2.5, '2.5'],
    ])('given maxPrice %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            spotOptions: {
                maxPrice: given,
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                InstanceMarketOptions: {
                    MarketType: 'spot',
                    SpotOptions: {
                        MaxPrice: expected,
                    },
                },
            },
        });
    });
    test.each([
        [lib_1.SpotRequestType.ONE_TIME, 'one-time'],
        [lib_1.SpotRequestType.PERSISTENT, 'persistent'],
    ])('given requestType %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            spotOptions: {
                requestType: given,
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                InstanceMarketOptions: {
                    MarketType: 'spot',
                    SpotOptions: {
                        SpotInstanceType: expected,
                    },
                },
            },
        });
    });
    test('given validUntil', () => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            spotOptions: {
                validUntil: core_1.Expiration.atTimestamp(0),
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                InstanceMarketOptions: {
                    MarketType: 'spot',
                    SpotOptions: {
                        ValidUntil: 'Thu, 01 Jan 1970 00:00:00 GMT',
                    },
                },
            },
        });
    });
});
describe('LaunchTemplate metadataOptions', () => {
    let app;
    let stack;
    beforeEach(() => {
        app = new core_1.App();
        stack = new core_1.Stack(app);
    });
    test.each([
        [true, 'enabled'],
        [false, 'disabled'],
    ])('given httpEndpoint %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            httpEndpoint: given,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                MetadataOptions: {
                    HttpEndpoint: expected,
                },
            },
        });
    });
    test.each([
        [true, 'enabled'],
        [false, 'disabled'],
    ])('given httpProtocolIpv6 %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            httpProtocolIpv6: given,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                MetadataOptions: {
                    HttpProtocolIpv6: expected,
                },
            },
        });
    });
    test.each([
        [1, 1],
        [2, 2],
    ])('given httpPutResponseHopLimit %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            httpPutResponseHopLimit: given,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                MetadataOptions: {
                    HttpPutResponseHopLimit: expected,
                },
            },
        });
    });
    test.each([
        [lib_1.LaunchTemplateHttpTokens.OPTIONAL, 'optional'],
        [lib_1.LaunchTemplateHttpTokens.REQUIRED, 'required'],
    ])('given httpTokens %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            httpTokens: given,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                MetadataOptions: {
                    HttpTokens: expected,
                },
            },
        });
    });
    test.each([
        [true, 'enabled'],
        [false, 'disabled'],
    ])('given instanceMetadataTags %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            instanceMetadataTags: given,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                MetadataOptions: {
                    InstanceMetadataTags: expected,
                },
            },
        });
    });
    test.each([
        [0, 1],
        [-1, 1],
        [1, 0],
        [64, 0],
        [65, 1],
    ])('given instanceMetadataTags %p', (given, expected) => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            httpPutResponseHopLimit: given,
        });
        // THEN
        const errors = assertions_1.Annotations.fromStack(stack).findError('/Default/Template', assertions_1.Match.anyValue());
        expect(errors).toHaveLength(expected);
    });
    test('throw when requireImdsv2 is true and httpTokens is OPTIONAL', () => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            requireImdsv2: true,
            httpTokens: lib_1.LaunchTemplateHttpTokens.OPTIONAL,
        });
        // THEN
        const errors = assertions_1.Annotations.fromStack(stack).findError('/Default/Template', assertions_1.Match.anyValue());
        expect(errors[0].entry.data).toMatch(/httpTokens must be required when requireImdsv2 is true/);
    });
    test('httpTokens REQUIRED is allowed when requireImdsv2 is true', () => {
        // WHEN
        new lib_1.LaunchTemplate(stack, 'Template', {
            requireImdsv2: true,
            httpTokens: lib_1.LaunchTemplateHttpTokens.REQUIRED,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::LaunchTemplate', {
            LaunchTemplateData: {
                MetadataOptions: {
                    HttpTokens: 'required',
                },
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,