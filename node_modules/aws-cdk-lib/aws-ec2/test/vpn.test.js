"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe('vpn', () => {
    test('can add a vpn connection to a vpc with a vpn gateway', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.Vpc(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    asn: 65001,
                    ip: '192.0.2.1',
                },
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::CustomerGateway', {
            BgpAsn: 65001,
            IpAddress: '192.0.2.1',
            Type: 'ipsec.1',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::VPNConnection', {
            CustomerGatewayId: {
                Ref: 'VpcNetworkVpnConnectionCustomerGateway8B56D9AF',
            },
            Type: 'ipsec.1',
            VpnGatewayId: {
                Ref: 'VpcNetworkVpnGateway501295FA',
            },
            StaticRoutesOnly: false,
        });
    });
    test('with static routing', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.Vpc(stack, 'VpcNetwork', {
            vpnConnections: {
                static: {
                    ip: '192.0.2.1',
                    staticRoutes: [
                        '192.168.10.0/24',
                        '192.168.20.0/24',
                    ],
                },
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::VPNConnection', {
            CustomerGatewayId: {
                Ref: 'VpcNetworkstaticCustomerGatewayAF2651CC',
            },
            Type: 'ipsec.1',
            VpnGatewayId: {
                Ref: 'VpcNetworkVpnGateway501295FA',
            },
            StaticRoutesOnly: true,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::VPNConnectionRoute', {
            DestinationCidrBlock: '192.168.10.0/24',
            VpnConnectionId: {
                Ref: 'VpcNetworkstaticE33EA98C',
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::VPNConnectionRoute', {
            DestinationCidrBlock: '192.168.20.0/24',
            VpnConnectionId: {
                Ref: 'VpcNetworkstaticE33EA98C',
            },
        });
    });
    test('with tunnel options, using secret value', () => {
        // GIVEN
        const stack = new core_1.Stack();
        new lib_1.Vpc(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.1',
                    tunnelOptions: [{
                            preSharedKeySecret: core_1.SecretValue.unsafePlainText('secretkey1234'),
                            tunnelInsideCidr: '169.254.10.0/30',
                        }],
                },
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::VPNConnection', {
            CustomerGatewayId: {
                Ref: 'VpcNetworkVpnConnectionCustomerGateway8B56D9AF',
            },
            Type: 'ipsec.1',
            VpnGatewayId: {
                Ref: 'VpcNetworkVpnGateway501295FA',
            },
            StaticRoutesOnly: false,
            VpnTunnelOptionsSpecifications: [
                {
                    PreSharedKey: 'secretkey1234',
                    TunnelInsideCidr: '169.254.10.0/30',
                },
            ],
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('with tunnel options, using secret', () => {
        // GIVEN
        const stack = new core_1.Stack();
        new lib_1.Vpc(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.1',
                    tunnelOptions: [{
                            preSharedKey: 'secretkey1234',
                            tunnelInsideCidr: '169.254.10.0/30',
                        }],
                },
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::VPNConnection', {
            CustomerGatewayId: {
                Ref: 'VpcNetworkVpnConnectionCustomerGateway8B56D9AF',
            },
            Type: 'ipsec.1',
            VpnGatewayId: {
                Ref: 'VpcNetworkVpnGateway501295FA',
            },
            StaticRoutesOnly: false,
            VpnTunnelOptionsSpecifications: [
                {
                    PreSharedKey: 'secretkey1234',
                    TunnelInsideCidr: '169.254.10.0/30',
                },
            ],
        });
    });
    test('fails when ip is invalid', () => {
        // GIVEN
        const stack = new core_1.Stack();
        expect(() => new lib_1.Vpc(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.256',
                },
            },
        })).toThrow(/`ip`.+IPv4/);
    });
    test('fails when specifying more than two tunnel options', () => {
        // GIVEN
        const stack = new core_1.Stack();
        expect(() => new lib_1.Vpc(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.1',
                    tunnelOptions: [
                        {
                            preSharedKeySecret: core_1.SecretValue.unsafePlainText('secretkey1234'),
                        },
                        {
                            preSharedKeySecret: core_1.SecretValue.unsafePlainText('secretkey1234'),
                        },
                        {
                            preSharedKeySecret: core_1.SecretValue.unsafePlainText('secretkey1234'),
                        },
                    ],
                },
            },
        })).toThrow(/two.+`tunnelOptions`/);
    });
    test('fails with duplicate tunnel inside cidr', () => {
        // GIVEN
        const stack = new core_1.Stack();
        expect(() => new lib_1.Vpc(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.1',
                    tunnelOptions: [
                        {
                            tunnelInsideCidr: '169.254.10.0/30',
                        },
                        {
                            tunnelInsideCidr: '169.254.10.0/30',
                        },
                    ],
                },
            },
        })).toThrow(/`tunnelInsideCidr`.+both tunnels/);
    });
    (0, cdk_build_tools_1.testDeprecated)('fails when specifying an invalid pre-shared key', () => {
        // GIVEN
        const stack = new core_1.Stack();
        expect(() => new lib_1.Vpc(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.1',
                    tunnelOptions: [
                        {
                            preSharedKey: '0invalid',
                        },
                    ],
                },
            },
        })).toThrow(/`preSharedKey`/);
    });
    test('fails when specifying a reserved tunnel inside cidr', () => {
        // GIVEN
        const stack = new core_1.Stack();
        expect(() => new lib_1.Vpc(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.1',
                    tunnelOptions: [
                        {
                            tunnelInsideCidr: '169.254.1.0/30',
                        },
                    ],
                },
            },
        })).toThrow(/`tunnelInsideCidr`.+reserved/);
    });
    test('fails when specifying an invalid tunnel inside cidr', () => {
        // GIVEN
        const stack = new core_1.Stack();
        expect(() => new lib_1.Vpc(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.1',
                    tunnelOptions: [
                        {
                            tunnelInsideCidr: '169.200.10.0/30',
                        },
                    ],
                },
            },
        })).toThrow(/`tunnelInsideCidr`.+size/);
    });
    test('can use metricTunnelState on a vpn connection', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new lib_1.Vpc(stack, 'VpcNetwork', {
            vpnGateway: true,
        });
        const vpn = vpc.addVpnConnection('Vpn', {
            ip: '192.0.2.1',
        });
        // THEN
        expect(stack.resolve(vpn.metricTunnelState())).toEqual({
            dimensions: { VpnId: { Ref: 'VpcNetworkVpnA476C58D' } },
            namespace: 'AWS/VPN',
            metricName: 'TunnelState',
            period: core_1.Duration.minutes(5),
            statistic: 'Average',
        });
    });
    test('can import a vpn connection from attributes', () => {
        const stack = new core_1.Stack();
        const vpn = lib_1.VpnConnection.fromVpnConnectionAttributes(stack, 'Connection', {
            vpnId: 'idv',
            customerGatewayIp: 'ip',
            customerGatewayId: 'idc',
            customerGatewayAsn: 6500,
        });
        expect(vpn.vpnId).toEqual('idv');
        expect(vpn.customerGatewayAsn).toEqual(6500);
        expect(vpn.customerGatewayId).toEqual('idc');
        expect(vpn.customerGatewayIp).toEqual('ip');
        expect(stack.resolve(vpn.metricTunnelState())).toEqual({
            dimensions: { VpnId: 'idv' },
            namespace: 'AWS/VPN',
            metricName: 'TunnelState',
            period: core_1.Duration.minutes(5),
            statistic: 'Average',
        });
        expect(stack.resolve(vpn.metricTunnelDataIn())).toEqual({
            dimensions: { VpnId: 'idv' },
            namespace: 'AWS/VPN',
            metricName: 'TunnelDataIn',
            period: core_1.Duration.minutes(5),
            statistic: 'Sum',
        });
        expect(stack.resolve(vpn.metricTunnelDataOut())).toEqual({
            dimensions: { VpnId: 'idv' },
            namespace: 'AWS/VPN',
            metricName: 'TunnelDataOut',
            period: core_1.Duration.minutes(5),
            statistic: 'Sum',
        });
    });
    test('can use metricAllTunnelDataOut', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // THEN
        expect(stack.resolve(lib_1.VpnConnection.metricAllTunnelDataOut())).toEqual({
            namespace: 'AWS/VPN',
            metricName: 'TunnelDataOut',
            period: core_1.Duration.minutes(5),
            statistic: 'Sum',
        });
    });
    test('fails when enabling vpnGateway without having subnets', () => {
        // GIVEN
        const stack = new core_1.Stack();
        expect(() => new lib_1.Vpc(stack, 'VpcNetwork', {
            vpnGateway: true,
            subnetConfiguration: [],
        })).toThrow(/VPN gateway/);
    });
    test('can add a vpn connection later to a vpc that initially had no subnets', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const vpc = new lib_1.Vpc(stack, 'VpcNetwork', {
            subnetConfiguration: [],
        });
        const subnet = new lib_1.PublicSubnet(stack, 'Subnet', {
            vpcId: vpc.vpcId,
            availabilityZone: 'eu-central-1a',
            cidrBlock: '10.0.0.0/28',
        });
        vpc.publicSubnets.push(subnet);
        vpc.addVpnConnection('VPNConnection', {
            ip: '1.2.3.4',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::CustomerGateway', {
            Type: 'ipsec.1',
        });
    });
    test('can add a vpn connection with a Token as customer gateway ip', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const token = core_1.Token.asAny('192.0.2.1');
        // WHEN
        new lib_1.Vpc(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: token,
                },
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::CustomerGateway', {
            IpAddress: '192.0.2.1',
        });
    });
});
//# sourceMappingURL=data:application/json;base64,