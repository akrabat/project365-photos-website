"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const core_1 = require("../../core");
const cx_api_1 = require("../../cx-api");
const lib_1 = require("../lib");
describe('build cache', () => {
    test('manifest contains cache from options ', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app);
        const asset = new lib_1.DockerImageAsset(stack, 'DockerImage6', {
            directory: path.join(__dirname, 'demo-image'),
            cacheFrom: [{ type: 'registry', params: { image: 'foo' } }],
        });
        // WHEN
        const asm = app.synth();
        // THEN
        const manifestArtifact = getAssetManifest(asm);
        const manifest = readAssetManifest(manifestArtifact);
        expect(Object.keys(manifest.dockerImages ?? {}).length).toBe(1);
        expect(manifest.dockerImages?.[asset.assetHash]?.source.cacheFrom?.length).toBe(1);
        expect(manifest.dockerImages?.[asset.assetHash]?.source.cacheFrom?.[0]).toStrictEqual({
            type: 'registry',
            params: { image: 'foo' },
        });
    });
    test('manifest contains cache to options ', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app);
        const asset = new lib_1.DockerImageAsset(stack, 'DockerImage6', {
            directory: path.join(__dirname, 'demo-image'),
            cacheTo: { type: 'inline' },
        });
        // WHEN
        const asm = app.synth();
        // THEN
        const manifestArtifact = getAssetManifest(asm);
        const manifest = readAssetManifest(manifestArtifact);
        expect(Object.keys(manifest.dockerImages ?? {}).length).toBe(1);
        expect(manifest.dockerImages?.[asset.assetHash]?.source.cacheTo).toStrictEqual({
            type: 'inline',
        });
    });
    test('manifest does not contain options when not specified', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app);
        const asset = new lib_1.DockerImageAsset(stack, 'DockerImage6', {
            directory: path.join(__dirname, 'demo-image'),
        });
        // WHEN
        const asm = app.synth();
        // THEN
        const manifestArtifact = getAssetManifest(asm);
        const manifest = readAssetManifest(manifestArtifact);
        expect(Object.keys(manifest.dockerImages ?? {}).length).toBe(1);
        expect(manifest.dockerImages?.[asset.assetHash]?.source.cacheFrom).toBeUndefined();
        expect(manifest.dockerImages?.[asset.assetHash]?.source.cacheTo).toBeUndefined();
    });
});
function isAssetManifest(x) {
    return x instanceof cx_api_1.AssetManifestArtifact;
}
function getAssetManifest(asm) {
    const manifestArtifact = asm.artifacts.filter(isAssetManifest)[0];
    if (!manifestArtifact) {
        throw new Error('no asset manifest in assembly');
    }
    return manifestArtifact;
}
function readAssetManifest(manifestArtifact) {
    return JSON.parse(fs.readFileSync(manifestArtifact.file, { encoding: 'utf-8' }));
}
//# sourceMappingURL=data:application/json;base64,