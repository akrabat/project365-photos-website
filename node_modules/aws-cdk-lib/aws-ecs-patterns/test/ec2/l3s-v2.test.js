"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const aws_autoscaling_1 = require("../../../aws-autoscaling");
const aws_certificatemanager_1 = require("../../../aws-certificatemanager");
const ec2 = require("../../../aws-ec2");
const aws_ec2_1 = require("../../../aws-ec2");
const aws_ecs_1 = require("../../../aws-ecs");
const aws_elasticloadbalancingv2_1 = require("../../../aws-elasticloadbalancingv2");
const aws_iam_1 = require("../../../aws-iam");
const aws_route53_1 = require("../../../aws-route53");
const aws_servicediscovery_1 = require("../../../aws-servicediscovery");
const core_1 = require("../../../core");
const lib_1 = require("../../lib");
describe('When Application Load Balancer', () => {
    test('test ECS ALB construct with default settings', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        // WHEN
        new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            memoryLimitMiB: 1024,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('test'),
            },
        });
        // THEN - stack contains a load balancer, a service, and a target group.
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::ElasticLoadBalancingV2::LoadBalancer', 1);
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
            LaunchType: 'EC2',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                assertions_1.Match.objectLike({
                    Image: 'test',
                    LogConfiguration: {
                        LogDriver: 'awslogs',
                        Options: {
                            'awslogs-group': {
                                Ref: 'ServiceTaskDefwebLogGroup2A898F61',
                            },
                            'awslogs-stream-prefix': 'Service',
                            'awslogs-region': {
                                Ref: 'AWS::Region',
                            },
                        },
                    },
                    Memory: 1024,
                    Name: 'web',
                    PortMappings: [
                        {
                            ContainerPort: 80,
                            HostPort: 0,
                            Protocol: 'tcp',
                        },
                    ],
                }),
            ],
            NetworkMode: 'bridge',
            RequiresCompatibilities: [
                'EC2',
            ],
        });
    });
    test('test ECS ALB construct with all settings', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        const zone = new aws_route53_1.PublicHostedZone(stack, 'HostedZone', { zoneName: 'example.com' });
        // WHEN
        new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            memoryLimitMiB: 1024,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                containerName: 'myContainer',
                containerPorts: [80, 90],
                enableLogging: false,
                environment: {
                    TEST_ENVIRONMENT_VARIABLE1: 'test environment variable 1 value',
                    TEST_ENVIRONMENT_VARIABLE2: 'test environment variable 2 value',
                },
                logDriver: new aws_ecs_1.AwsLogDriver({
                    streamPrefix: 'TestStream',
                }),
                family: 'Ec2TaskDef',
                executionRole: new aws_iam_1.Role(stack, 'ExecutionRole', {
                    path: '/',
                    assumedBy: new aws_iam_1.CompositePrincipal(new aws_iam_1.ServicePrincipal('ecs.amazonaws.com'), new aws_iam_1.ServicePrincipal('ecs-tasks.amazonaws.com')),
                }),
                taskRole: new aws_iam_1.Role(stack, 'TaskRole', {
                    assumedBy: new aws_iam_1.ServicePrincipal('ecs-tasks.amazonaws.com'),
                }),
                dockerLabels: { label1: 'labelValue1', label2: 'labelValue2' },
            },
            cpu: 256,
            desiredCount: 3,
            enableECSManagedTags: true,
            enableExecuteCommand: true,
            healthCheckGracePeriod: core_1.Duration.millis(2000),
            loadBalancers: [
                {
                    name: 'lb',
                    domainName: 'api.example.com',
                    domainZone: zone,
                    publicLoadBalancer: false,
                    listeners: [
                        {
                            name: 'listener',
                            protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
                            certificate: aws_certificatemanager_1.Certificate.fromCertificateArn(stack, 'Cert', 'helloworld'),
                            sslPolicy: aws_elasticloadbalancingv2_1.SslPolicy.TLS12_EXT,
                        },
                    ],
                },
            ],
            propagateTags: aws_ecs_1.PropagatedTagSource.SERVICE,
            memoryReservationMiB: 1024,
            serviceName: 'myService',
            targetGroups: [
                {
                    containerPort: 80,
                    listener: 'listener',
                },
                {
                    containerPort: 90,
                    listener: 'listener',
                    pathPattern: 'a/b/c',
                    priority: 10,
                    protocol: aws_ecs_1.Protocol.TCP,
                },
            ],
            placementStrategies: [aws_ecs_1.PlacementStrategy.spreadAcrossInstances(), aws_ecs_1.PlacementStrategy.packedByCpu(), aws_ecs_1.PlacementStrategy.randomly()],
            placementConstraints: [aws_ecs_1.PlacementConstraint.memberOf('attribute:ecs.instance-type =~ m5a.*')],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
            DesiredCount: 3,
            LaunchType: 'EC2',
            EnableECSManagedTags: true,
            EnableExecuteCommand: true,
            HealthCheckGracePeriodSeconds: 2,
            LoadBalancers: [
                {
                    ContainerName: 'myContainer',
                    ContainerPort: 80,
                    TargetGroupArn: {
                        Ref: 'ServicelblistenerECSTargetGroupmyContainer80GroupAD83584A',
                    },
                },
                {
                    ContainerName: 'myContainer',
                    ContainerPort: 90,
                    TargetGroupArn: {
                        Ref: 'ServicelblistenerECSTargetGroupmyContainer90GroupF5A6D3A0',
                    },
                },
            ],
            PropagateTags: 'SERVICE',
            ServiceName: 'myService',
            PlacementConstraints: [{ Type: 'memberOf', Expression: 'attribute:ecs.instance-type =~ m5a.*' }],
            PlacementStrategies: [{ Field: 'instanceId', Type: 'spread' }, { Field: 'CPU', Type: 'binpack' }, { Type: 'random' }],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Cpu: 256,
                    Environment: [
                        {
                            Name: 'TEST_ENVIRONMENT_VARIABLE1',
                            Value: 'test environment variable 1 value',
                        },
                        {
                            Name: 'TEST_ENVIRONMENT_VARIABLE2',
                            Value: 'test environment variable 2 value',
                        },
                    ],
                    Essential: true,
                    Image: 'test',
                    LogConfiguration: {
                        LogDriver: 'awslogs',
                        Options: {
                            'awslogs-group': {
                                Ref: 'ServiceTaskDefmyContainerLogGroup0A87368B',
                            },
                            'awslogs-stream-prefix': 'TestStream',
                            'awslogs-region': {
                                Ref: 'AWS::Region',
                            },
                        },
                    },
                    Memory: 1024,
                    MemoryReservation: 1024,
                    Name: 'myContainer',
                    PortMappings: [
                        {
                            ContainerPort: 80,
                            HostPort: 0,
                            Protocol: 'tcp',
                        },
                        {
                            ContainerPort: 90,
                            HostPort: 0,
                            Protocol: 'tcp',
                        },
                    ],
                    DockerLabels: {
                        label1: 'labelValue1',
                        label2: 'labelValue2',
                    },
                },
            ],
            ExecutionRoleArn: {
                'Fn::GetAtt': [
                    'ExecutionRole605A040B',
                    'Arn',
                ],
            },
            Family: 'ServiceTaskDef79D79521',
            NetworkMode: 'bridge',
            RequiresCompatibilities: [
                'EC2',
            ],
            TaskRoleArn: {
                'Fn::GetAtt': [
                    'TaskRole30FC0FBB',
                    'Arn',
                ],
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::Listener', {
            Port: 443,
            Protocol: 'HTTPS',
            Certificates: [{
                    CertificateArn: 'helloworld',
                }],
            SslPolicy: aws_elasticloadbalancingv2_1.SslPolicy.TLS12_EXT,
        });
    });
    test('able to pass pre-defined task definition', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        const taskDefinition = new aws_ecs_1.Ec2TaskDefinition(stack, 'Ec2TaskDef');
        const container = taskDefinition.addContainer('web', {
            image: aws_ecs_1.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),
            memoryLimitMiB: 512,
        });
        container.addPortMappings({
            containerPort: 80,
        });
        // WHEN
        new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            taskDefinition,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Essential: true,
                    Image: 'amazon/amazon-ecs-sample',
                    Memory: 512,
                    Name: 'web',
                    PortMappings: [
                        {
                            ContainerPort: 80,
                            HostPort: 0,
                            Protocol: 'tcp',
                        },
                    ],
                },
            ],
            Family: 'Ec2TaskDef',
            NetworkMode: 'bridge',
            RequiresCompatibilities: [
                'EC2',
            ],
        });
    });
    test('able to output correct load balancer DNS and URLs for each protocol type', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        const zone = new aws_route53_1.PublicHostedZone(stack, 'HostedZone', { zoneName: 'example.com' });
        // WHEN
        new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            memoryLimitMiB: 1024,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('test'),
            },
            loadBalancers: [
                {
                    name: 'lb1',
                    domainName: 'api.example.com',
                    domainZone: zone,
                    listeners: [
                        {
                            name: 'listener1',
                            protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
                            certificate: aws_certificatemanager_1.Certificate.fromCertificateArn(stack, 'Cert', 'helloworld'),
                        },
                        {
                            name: 'listener2',
                            protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTP,
                        },
                    ],
                },
                {
                    name: 'lb3',
                    listeners: [
                        {
                            name: 'listener3',
                            protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTP,
                        },
                    ],
                },
            ],
            targetGroups: [
                {
                    containerPort: 80,
                    listener: 'listener1',
                },
                {
                    containerPort: 90,
                    listener: 'listener2',
                },
                {
                    containerPort: 70,
                    listener: 'listener3',
                },
            ],
        });
        // THEN
        const outputs = assertions_1.Template.fromStack(stack).findOutputs('*');
        expect(outputs).toEqual({
            ServiceLoadBalancerDNSlb175E78BFE: {
                Value: {
                    'Fn::GetAtt': [
                        'Servicelb152C7F4F9',
                        'DNSName',
                    ],
                },
            },
            ServiceServiceURLlb1https5C0C4079: {
                Value: {
                    'Fn::Join': [
                        '',
                        [
                            'https://',
                            {
                                Ref: 'ServiceDNSlb12BA1FAD3',
                            },
                        ],
                    ],
                },
            },
            ServiceServiceURLlb1http65F0546A: {
                Value: {
                    'Fn::Join': [
                        '',
                        [
                            'http://',
                            {
                                Ref: 'ServiceDNSlb12BA1FAD3',
                            },
                        ],
                    ],
                },
            },
            ServiceLoadBalancerDNSlb32F273F27: {
                Value: {
                    'Fn::GetAtt': [
                        'Servicelb3A583D5E7',
                        'DNSName',
                    ],
                },
            },
            ServiceServiceURLlb3http40F9CADC: {
                Value: {
                    'Fn::Join': [
                        '',
                        [
                            'http://',
                            {
                                'Fn::GetAtt': [
                                    'Servicelb3A583D5E7',
                                    'DNSName',
                                ],
                            },
                        ],
                    ],
                },
            },
        });
    });
    test('errors if no essential container in pre-defined task definition', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        const taskDefinition = new aws_ecs_1.Ec2TaskDefinition(stack, 'Ec2TaskDef');
        // THEN
        expect(() => {
            new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskDefinition,
            });
        }).toThrow(/At least one essential container must be specified/);
    });
    test('set default load balancer, listener, target group correctly', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const zone = new aws_route53_1.PublicHostedZone(stack, 'HostedZone', { zoneName: 'example.com' });
        // WHEN
        const ecsService = new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
            vpc,
            memoryLimitMiB: 1024,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('test'),
            },
            loadBalancers: [
                {
                    name: 'lb1',
                    listeners: [
                        {
                            name: 'listener1',
                        },
                    ],
                },
                {
                    name: 'lb2',
                    domainName: 'api.example.com',
                    domainZone: zone,
                    listeners: [
                        {
                            name: 'listener2',
                        },
                        {
                            name: 'listener3',
                            protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
                            certificate: aws_certificatemanager_1.Certificate.fromCertificateArn(stack, 'Cert', 'helloworld'),
                        },
                    ],
                },
            ],
            targetGroups: [
                {
                    containerPort: 80,
                },
                {
                    containerPort: 90,
                },
            ],
        });
        // THEN
        expect(ecsService.loadBalancer.node.id).toEqual('lb1');
        expect(ecsService.listener.node.id).toEqual('listener1');
        expect(ecsService.targetGroup.node.id).toEqual('ECSTargetGroupweb80Group');
    });
    test('setting vpc and cluster throws error', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        // WHEN
        expect(() => new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            vpc,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('/aws/aws-example-app'),
            },
        })).toThrow(/You can only specify either vpc or cluster. Alternatively, you can leave both blank/);
    });
    test('creates AWS Cloud Map service for Private DNS namespace', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'MyVpc', {});
        const cluster = new aws_ecs_1.Cluster(stack, 'EcsCluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        // WHEN
        cluster.addDefaultCloudMapNamespace({
            name: 'foo.com',
            type: aws_servicediscovery_1.NamespaceType.DNS_PRIVATE,
        });
        new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('hello'),
            },
            cloudMapOptions: {
                name: 'myApp',
            },
            memoryLimitMiB: 512,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
            ServiceRegistries: [
                {
                    ContainerName: 'web',
                    ContainerPort: 80,
                    RegistryArn: {
                        'Fn::GetAtt': [
                            'ServiceCloudmapServiceDE76B29D',
                            'Arn',
                        ],
                    },
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ServiceDiscovery::Service', {
            DnsConfig: {
                DnsRecords: [
                    {
                        TTL: 60,
                        Type: 'SRV',
                    },
                ],
                NamespaceId: {
                    'Fn::GetAtt': [
                        'EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F',
                        'Id',
                    ],
                },
                RoutingPolicy: 'MULTIVALUE',
            },
            HealthCheckCustomConfig: {
                FailureThreshold: 1,
            },
            Name: 'myApp',
            NamespaceId: {
                'Fn::GetAtt': [
                    'EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F',
                    'Id',
                ],
            },
        });
    });
    test('errors when setting both taskDefinition and taskImageOptions', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        const taskDefinition = new aws_ecs_1.Ec2TaskDefinition(stack, 'Ec2TaskDef');
        taskDefinition.addContainer('test', {
            image: aws_ecs_1.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),
            memoryLimitMiB: 512,
        });
        // THEN
        expect(() => {
            new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                taskDefinition,
            });
        }).toThrow(/You must specify only one of TaskDefinition or TaskImageOptions./);
    });
    test('errors when setting neither taskDefinition nor taskImageOptions', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        // THEN
        expect(() => {
            new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
            });
        }).toThrow(/You must specify one of: taskDefinition or image/);
    });
    test('errors when setting domainName but not domainZone', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        // THEN
        expect(() => {
            new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                loadBalancers: [
                    {
                        name: 'lb1',
                        domainName: 'api.example.com',
                        listeners: [
                            {
                                name: 'listener1',
                            },
                        ],
                    },
                ],
            });
        }).toThrow(/A Route53 hosted domain zone name is required to configure the specified domain name/);
    });
    test('errors when loadBalancers is empty', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        // THEN
        expect(() => {
            new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                loadBalancers: [],
            });
        }).toThrow(/At least one load balancer must be specified/);
    });
    test('errors when targetGroups is empty', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        // THEN
        expect(() => {
            new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                targetGroups: [],
            });
        }).toThrow(/At least one target group should be specified/);
    });
    test('errors when no listener specified', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        // THEN
        expect(() => {
            new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                loadBalancers: [
                    {
                        name: 'lb',
                        listeners: [],
                    },
                ],
            });
        }).toThrow(/At least one listener must be specified/);
    });
    test('errors when setting both HTTP protocol and certificate', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        // THEN
        expect(() => {
            new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                loadBalancers: [
                    {
                        name: 'lb',
                        listeners: [
                            {
                                name: 'listener',
                                protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTP,
                                certificate: aws_certificatemanager_1.Certificate.fromCertificateArn(stack, 'Cert', 'helloworld'),
                            },
                        ],
                    },
                ],
            });
        }).toThrow(/The HTTPS protocol must be used when a certificate is given/);
    });
    test('errors when setting HTTPS protocol but not domain name', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        // THEN
        expect(() => {
            new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                loadBalancers: [
                    {
                        name: 'lb',
                        listeners: [
                            {
                                name: 'listener',
                                protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
                            },
                        ],
                    },
                ],
            });
        }).toThrow(/A domain name and zone is required when using the HTTPS protocol/);
    });
    test('errors when listener is not defined but used in creating target groups', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        // THEN
        expect(() => {
            new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                loadBalancers: [
                    {
                        name: 'lb',
                        listeners: [
                            {
                                name: 'listener1',
                            },
                        ],
                    },
                ],
                targetGroups: [
                    {
                        containerPort: 80,
                        listener: 'listener2',
                    },
                ],
            });
        }).toThrow(/Listener listener2 is not defined. Did you define listener with name listener2?/);
    });
    test('errors if desiredTaskCount is 0', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        // THEN
        expect(() => new lib_1.ApplicationMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            memoryLimitMiB: 1024,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('test'),
            },
            desiredCount: 0,
        })).toThrow(/You must specify a desiredCount greater than 0/);
    });
});
describe('When Network Load Balancer', () => {
    test('test ECS NLB construct with default settings', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        // WHEN
        new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            memoryLimitMiB: 256,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('test'),
            },
        });
        // THEN - stack contains a load balancer and a service
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::ElasticLoadBalancingV2::LoadBalancer', 1);
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
            LaunchType: 'EC2',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Essential: true,
                    Image: 'test',
                    LogConfiguration: {
                        LogDriver: 'awslogs',
                        Options: {
                            'awslogs-group': {
                                Ref: 'ServiceTaskDefwebLogGroup2A898F61',
                            },
                            'awslogs-stream-prefix': 'Service',
                            'awslogs-region': {
                                Ref: 'AWS::Region',
                            },
                        },
                    },
                    Memory: 256,
                    Name: 'web',
                    PortMappings: [
                        {
                            ContainerPort: 80,
                            HostPort: 0,
                            Protocol: 'tcp',
                        },
                    ],
                },
            ],
            ExecutionRoleArn: {
                'Fn::GetAtt': [
                    'ServiceTaskDefExecutionRole919F7BE3',
                    'Arn',
                ],
            },
            Family: 'ServiceTaskDef79D79521',
            NetworkMode: 'bridge',
            RequiresCompatibilities: [
                'EC2',
            ],
            TaskRoleArn: {
                'Fn::GetAtt': [
                    'ServiceTaskDefTaskRole0CFE2F57',
                    'Arn',
                ],
            },
        });
    });
    test('Assert EnableExecuteCommand is missing if not set', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        const zone = new aws_route53_1.PublicHostedZone(stack, 'HostedZone', { zoneName: 'example.com' });
        // WHEN
        new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            memoryLimitMiB: 256,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                containerName: 'myContainer',
                containerPorts: [80, 90],
                enableLogging: false,
                environment: {
                    TEST_ENVIRONMENT_VARIABLE1: 'test environment variable 1 value',
                    TEST_ENVIRONMENT_VARIABLE2: 'test environment variable 2 value',
                },
                logDriver: new aws_ecs_1.AwsLogDriver({
                    streamPrefix: 'TestStream',
                }),
                family: 'Ec2TaskDef',
                executionRole: new aws_iam_1.Role(stack, 'ExecutionRole', {
                    path: '/',
                    assumedBy: new aws_iam_1.CompositePrincipal(new aws_iam_1.ServicePrincipal('ecs.amazonaws.com'), new aws_iam_1.ServicePrincipal('ecs-tasks.amazonaws.com')),
                }),
                taskRole: new aws_iam_1.Role(stack, 'TaskRole', {
                    assumedBy: new aws_iam_1.ServicePrincipal('ecs-tasks.amazonaws.com'),
                }),
                dockerLabels: { label1: 'labelValue1', label2: 'labelValue2' },
            },
            cpu: 256,
            desiredCount: 3,
            enableECSManagedTags: true,
            enableExecuteCommand: false,
            healthCheckGracePeriod: core_1.Duration.millis(2000),
            loadBalancers: [
                {
                    name: 'lb1',
                    domainName: 'api.example.com',
                    domainZone: zone,
                    publicLoadBalancer: false,
                    listeners: [
                        {
                            name: 'listener1',
                        },
                    ],
                },
                {
                    name: 'lb2',
                    listeners: [
                        {
                            name: 'listener2',
                            port: 81,
                        },
                    ],
                },
            ],
            propagateTags: aws_ecs_1.PropagatedTagSource.SERVICE,
            memoryReservationMiB: 256,
            serviceName: 'myService',
            targetGroups: [
                {
                    containerPort: 80,
                    listener: 'listener1',
                },
                {
                    containerPort: 90,
                    listener: 'listener2',
                },
            ],
            placementStrategies: [aws_ecs_1.PlacementStrategy.spreadAcrossInstances(), aws_ecs_1.PlacementStrategy.packedByCpu(), aws_ecs_1.PlacementStrategy.randomly()],
            placementConstraints: [aws_ecs_1.PlacementConstraint.memberOf('attribute:ecs.instance-type =~ m5a.*')],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
            EnableExecuteCommand: false,
        });
    });
    test('test ECS NLB construct with all settings', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        const zone = new aws_route53_1.PublicHostedZone(stack, 'HostedZone', { zoneName: 'example.com' });
        // WHEN
        new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            memoryLimitMiB: 256,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                containerName: 'myContainer',
                containerPorts: [80, 90],
                enableLogging: false,
                environment: {
                    TEST_ENVIRONMENT_VARIABLE1: 'test environment variable 1 value',
                    TEST_ENVIRONMENT_VARIABLE2: 'test environment variable 2 value',
                },
                logDriver: new aws_ecs_1.AwsLogDriver({
                    streamPrefix: 'TestStream',
                }),
                family: 'Ec2TaskDef',
                executionRole: new aws_iam_1.Role(stack, 'ExecutionRole', {
                    path: '/',
                    assumedBy: new aws_iam_1.CompositePrincipal(new aws_iam_1.ServicePrincipal('ecs.amazonaws.com'), new aws_iam_1.ServicePrincipal('ecs-tasks.amazonaws.com')),
                }),
                taskRole: new aws_iam_1.Role(stack, 'TaskRole', {
                    assumedBy: new aws_iam_1.ServicePrincipal('ecs-tasks.amazonaws.com'),
                }),
                dockerLabels: { label1: 'labelValue1', label2: 'labelValue2' },
            },
            cpu: 256,
            desiredCount: 3,
            enableECSManagedTags: true,
            enableExecuteCommand: true,
            healthCheckGracePeriod: core_1.Duration.millis(2000),
            loadBalancers: [
                {
                    name: 'lb1',
                    domainName: 'api.example.com',
                    domainZone: zone,
                    publicLoadBalancer: false,
                    listeners: [
                        {
                            name: 'listener1',
                        },
                    ],
                },
                {
                    name: 'lb2',
                    listeners: [
                        {
                            name: 'listener2',
                            port: 81,
                        },
                    ],
                },
            ],
            propagateTags: aws_ecs_1.PropagatedTagSource.SERVICE,
            memoryReservationMiB: 256,
            serviceName: 'myService',
            targetGroups: [
                {
                    containerPort: 80,
                    listener: 'listener1',
                },
                {
                    containerPort: 90,
                    listener: 'listener2',
                },
            ],
            placementStrategies: [aws_ecs_1.PlacementStrategy.spreadAcrossInstances(), aws_ecs_1.PlacementStrategy.packedByCpu(), aws_ecs_1.PlacementStrategy.randomly()],
            placementConstraints: [aws_ecs_1.PlacementConstraint.memberOf('attribute:ecs.instance-type =~ m5a.*')],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
            DesiredCount: 3,
            EnableECSManagedTags: true,
            EnableExecuteCommand: true,
            HealthCheckGracePeriodSeconds: 2,
            LaunchType: 'EC2',
            LoadBalancers: [
                {
                    ContainerName: 'myContainer',
                    ContainerPort: 80,
                    TargetGroupArn: {
                        Ref: 'Servicelb1listener1ECSTargetGroupmyContainer80Group43098F8B',
                    },
                },
                {
                    ContainerName: 'myContainer',
                    ContainerPort: 90,
                    TargetGroupArn: {
                        Ref: 'Servicelb2listener2ECSTargetGroupmyContainer90GroupDEB417E4',
                    },
                },
            ],
            PropagateTags: 'SERVICE',
            SchedulingStrategy: 'REPLICA',
            ServiceName: 'myService',
            PlacementConstraints: [{ Type: 'memberOf', Expression: 'attribute:ecs.instance-type =~ m5a.*' }],
            PlacementStrategies: [{ Field: 'instanceId', Type: 'spread' }, { Field: 'CPU', Type: 'binpack' }, { Type: 'random' }],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Cpu: 256,
                    Environment: [
                        {
                            Name: 'TEST_ENVIRONMENT_VARIABLE1',
                            Value: 'test environment variable 1 value',
                        },
                        {
                            Name: 'TEST_ENVIRONMENT_VARIABLE2',
                            Value: 'test environment variable 2 value',
                        },
                    ],
                    Essential: true,
                    Image: 'test',
                    LogConfiguration: {
                        LogDriver: 'awslogs',
                        Options: {
                            'awslogs-group': {
                                Ref: 'ServiceTaskDefmyContainerLogGroup0A87368B',
                            },
                            'awslogs-stream-prefix': 'TestStream',
                            'awslogs-region': {
                                Ref: 'AWS::Region',
                            },
                        },
                    },
                    Memory: 256,
                    MemoryReservation: 256,
                    Name: 'myContainer',
                    PortMappings: [
                        {
                            ContainerPort: 80,
                            HostPort: 0,
                            Protocol: 'tcp',
                        },
                        {
                            ContainerPort: 90,
                            HostPort: 0,
                            Protocol: 'tcp',
                        },
                    ],
                    DockerLabels: {
                        label1: 'labelValue1',
                        label2: 'labelValue2',
                    },
                },
            ],
            ExecutionRoleArn: {
                'Fn::GetAtt': [
                    'ExecutionRole605A040B',
                    'Arn',
                ],
            },
            Family: 'ServiceTaskDef79D79521',
            NetworkMode: 'bridge',
            RequiresCompatibilities: [
                'EC2',
            ],
            TaskRoleArn: {
                'Fn::GetAtt': [
                    'TaskRole30FC0FBB',
                    'Arn',
                ],
            },
        });
    });
    test('EnableExecuteCommand flag generated IAM Permissions', () => {
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        const zone = new aws_route53_1.PublicHostedZone(stack, 'HostedZone', { zoneName: 'example.com' });
        // WHEN
        new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            memoryLimitMiB: 256,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                containerName: 'myContainer',
                containerPorts: [80, 90],
                enableLogging: false,
                environment: {
                    TEST_ENVIRONMENT_VARIABLE1: 'test environment variable 1 value',
                    TEST_ENVIRONMENT_VARIABLE2: 'test environment variable 2 value',
                },
                logDriver: new aws_ecs_1.AwsLogDriver({
                    streamPrefix: 'TestStream',
                }),
                family: 'Ec2TaskDef',
                executionRole: new aws_iam_1.Role(stack, 'ExecutionRole', {
                    path: '/',
                    assumedBy: new aws_iam_1.CompositePrincipal(new aws_iam_1.ServicePrincipal('ecs.amazonaws.com'), new aws_iam_1.ServicePrincipal('ecs-tasks.amazonaws.com')),
                }),
                taskRole: new aws_iam_1.Role(stack, 'TaskRole', {
                    assumedBy: new aws_iam_1.ServicePrincipal('ecs-tasks.amazonaws.com'),
                }),
                dockerLabels: { label1: 'labelValue1', label2: 'labelValue2' },
            },
            cpu: 256,
            desiredCount: 3,
            enableECSManagedTags: true,
            enableExecuteCommand: true,
            healthCheckGracePeriod: core_1.Duration.millis(2000),
            loadBalancers: [
                {
                    name: 'lb1',
                    domainName: 'api.example.com',
                    domainZone: zone,
                    publicLoadBalancer: false,
                    listeners: [
                        {
                            name: 'listener1',
                        },
                    ],
                },
                {
                    name: 'lb2',
                    listeners: [
                        {
                            name: 'listener2',
                            port: 81,
                        },
                    ],
                },
            ],
            propagateTags: aws_ecs_1.PropagatedTagSource.SERVICE,
            memoryReservationMiB: 256,
            serviceName: 'myService',
            targetGroups: [
                {
                    containerPort: 80,
                    listener: 'listener1',
                },
                {
                    containerPort: 90,
                    listener: 'listener2',
                },
            ],
            placementStrategies: [aws_ecs_1.PlacementStrategy.spreadAcrossInstances(), aws_ecs_1.PlacementStrategy.packedByCpu(), aws_ecs_1.PlacementStrategy.randomly()],
            placementConstraints: [aws_ecs_1.PlacementConstraint.memberOf('attribute:ecs.instance-type =~ m5a.*')],
        });
        // ECS Exec
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: [
                            'ssmmessages:CreateControlChannel',
                            'ssmmessages:CreateDataChannel',
                            'ssmmessages:OpenControlChannel',
                            'ssmmessages:OpenDataChannel',
                        ],
                        Effect: 'Allow',
                        Resource: '*',
                    },
                    {
                        Action: 'logs:DescribeLogGroups',
                        Effect: 'Allow',
                        Resource: '*',
                    },
                    {
                        Action: [
                            'logs:CreateLogStream',
                            'logs:DescribeLogStreams',
                            'logs:PutLogEvents',
                        ],
                        Effect: 'Allow',
                        Resource: '*',
                    },
                ],
                Version: '2012-10-17',
            },
            PolicyName: 'TaskRoleDefaultPolicy07FC53DE',
            Roles: [
                {
                    Ref: 'TaskRole30FC0FBB',
                },
            ],
        });
    });
    test('able to pass pre-defined task definition', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        const taskDefinition = new aws_ecs_1.Ec2TaskDefinition(stack, 'Ec2TaskDef');
        const container = taskDefinition.addContainer('web', {
            image: aws_ecs_1.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),
            memoryLimitMiB: 512,
        });
        container.addPortMappings({
            containerPort: 80,
        });
        // WHEN
        new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            taskDefinition,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Essential: true,
                    Image: 'amazon/amazon-ecs-sample',
                    Memory: 512,
                    Name: 'web',
                    PortMappings: [
                        {
                            ContainerPort: 80,
                            HostPort: 0,
                            Protocol: 'tcp',
                        },
                    ],
                },
            ],
            Family: 'Ec2TaskDef',
            NetworkMode: 'bridge',
            RequiresCompatibilities: [
                'EC2',
            ],
        });
    });
    test('errors if no essential container in pre-defined task definition', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        const taskDefinition = new aws_ecs_1.Ec2TaskDefinition(stack, 'Ec2TaskDef');
        // THEN
        expect(() => {
            new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskDefinition,
            });
        }).toThrow(/At least one essential container must be specified/);
    });
    test('set default load balancer, listener, target group correctly', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const zone = new aws_route53_1.PublicHostedZone(stack, 'HostedZone', { zoneName: 'example.com' });
        // WHEN
        const ecsService = new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
            vpc,
            memoryLimitMiB: 1024,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('test'),
            },
            loadBalancers: [
                {
                    name: 'lb1',
                    listeners: [
                        {
                            name: 'listener1',
                        },
                    ],
                },
                {
                    name: 'lb2',
                    domainName: 'api.example.com',
                    domainZone: zone,
                    listeners: [
                        {
                            name: 'listener2',
                        },
                        {
                            name: 'listener3',
                        },
                    ],
                },
            ],
            targetGroups: [
                {
                    containerPort: 80,
                },
                {
                    containerPort: 90,
                },
            ],
        });
        // THEN
        expect(ecsService.loadBalancer.node.id).toEqual('lb1');
        expect(ecsService.listener.node.id).toEqual('listener1');
        expect(ecsService.targetGroup.node.id).toEqual('ECSTargetGroupweb80Group');
    });
    test('setting vpc and cluster throws error', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        // WHEN
        expect(() => new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            vpc,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('/aws/aws-example-app'),
            },
        })).toThrow(/You can only specify either vpc or cluster. Alternatively, you can leave both blank/);
    });
    test('creates AWS Cloud Map service for Private DNS namespace', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'MyVpc', {});
        const cluster = new aws_ecs_1.Cluster(stack, 'EcsCluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        // WHEN
        cluster.addDefaultCloudMapNamespace({
            name: 'foo.com',
            type: aws_servicediscovery_1.NamespaceType.DNS_PRIVATE,
        });
        new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('hello'),
            },
            cloudMapOptions: {
                name: 'myApp',
            },
            memoryLimitMiB: 512,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
            ServiceRegistries: [
                {
                    ContainerName: 'web',
                    ContainerPort: 80,
                    RegistryArn: {
                        'Fn::GetAtt': [
                            'ServiceCloudmapServiceDE76B29D',
                            'Arn',
                        ],
                    },
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ServiceDiscovery::Service', {
            DnsConfig: {
                DnsRecords: [
                    {
                        TTL: 60,
                        Type: 'SRV',
                    },
                ],
                NamespaceId: {
                    'Fn::GetAtt': [
                        'EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F',
                        'Id',
                    ],
                },
                RoutingPolicy: 'MULTIVALUE',
            },
            HealthCheckCustomConfig: {
                FailureThreshold: 1,
            },
            Name: 'myApp',
            NamespaceId: {
                'Fn::GetAtt': [
                    'EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F',
                    'Id',
                ],
            },
        });
    });
    test('errors when setting both taskDefinition and taskImageOptions', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        const taskDefinition = new aws_ecs_1.Ec2TaskDefinition(stack, 'Ec2TaskDef');
        taskDefinition.addContainer('test', {
            image: aws_ecs_1.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),
            memoryLimitMiB: 512,
        });
        // THEN
        expect(() => {
            new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                taskDefinition,
            });
        }).toThrow(/You must specify only one of TaskDefinition or TaskImageOptions./);
    });
    test('errors when setting neither taskDefinition nor taskImageOptions', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        // THEN
        expect(() => {
            new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
            });
        }).toThrow(/You must specify one of: taskDefinition or image/);
    });
    test('errors when setting domainName but not domainZone', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        // THEN
        expect(() => {
            new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                loadBalancers: [
                    {
                        name: 'lb1',
                        domainName: 'api.example.com',
                        listeners: [{
                                name: 'listener1',
                            }],
                    },
                ],
            });
        }).toThrow(/A Route53 hosted domain zone name is required to configure the specified domain name/);
    });
    test('errors when loadBalancers is empty', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        // THEN
        expect(() => {
            new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                loadBalancers: [],
            });
        }).toThrow(/At least one load balancer must be specified/);
    });
    test('errors when targetGroups is empty', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        // THEN
        expect(() => {
            new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                targetGroups: [],
            });
        }).toThrow(/At least one target group should be specified/);
    });
    test('errors when no listener specified', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        // THEN
        expect(() => {
            new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                loadBalancers: [
                    {
                        name: 'lb',
                        listeners: [],
                    },
                ],
            });
        }).toThrow(/At least one listener must be specified/);
    });
    test('errors when listener is not defined but used in creating target groups', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        // THEN
        expect(() => {
            new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
                cluster,
                taskImageOptions: {
                    image: aws_ecs_1.ContainerImage.fromRegistry('test'),
                },
                loadBalancers: [
                    {
                        name: 'lb',
                        listeners: [
                            {
                                name: 'listener1',
                            },
                        ],
                    },
                ],
                targetGroups: [
                    {
                        containerPort: 80,
                        listener: 'listener2',
                    },
                ],
            });
        }).toThrow(/Listener listener2 is not defined. Did you define listener with name listener2?/);
    });
    test('errors if desiredTaskCount is 0', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        const cluster = new aws_ecs_1.Cluster(stack, 'Cluster', { vpc });
        cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
            autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
                vpc,
                instanceType: new ec2.InstanceType('t2.micro'),
                machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
            }),
        }));
        // THEN
        expect(() => new lib_1.NetworkMultipleTargetGroupsEc2Service(stack, 'Service', {
            cluster,
            memoryLimitMiB: 1024,
            taskImageOptions: {
                image: aws_ecs_1.ContainerImage.fromRegistry('test'),
            },
            desiredCount: 0,
        })).toThrow(/You must specify a desiredCount greater than 0/);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDNzLXYyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsM3MtdjIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9EQUFzRDtBQUN0RCw4REFBNEQ7QUFDNUQsNEVBQThEO0FBQzlELHdDQUF3QztBQUN4Qyw4Q0FBcUQ7QUFDckQsOENBVTBCO0FBQzFCLG9GQUFxRjtBQUNyRiw4Q0FBOEU7QUFDOUUsc0RBQXdEO0FBQ3hELHdFQUE4RDtBQUM5RCx3Q0FBZ0Q7QUFDaEQsbUNBQTZHO0FBRTdHLFFBQVEsQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7SUFDOUMsSUFBSSxDQUFDLDhDQUE4QyxFQUFFLEdBQUcsRUFBRTtRQUN4RCxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLDZCQUFtQixDQUFDLEtBQUssRUFBRSxpQ0FBaUMsRUFBRTtZQUMvRixnQkFBZ0IsRUFBRSxJQUFJLGtDQUFnQixDQUFDLEtBQUssRUFBRSx5QkFBeUIsRUFBRTtnQkFDdkUsR0FBRztnQkFDSCxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztnQkFDOUMsWUFBWSxFQUFFLHNCQUFZLENBQUMsaUJBQWlCLEVBQUU7YUFDL0MsQ0FBQztTQUNILENBQUMsQ0FBQyxDQUFDO1FBRUosT0FBTztRQUNQLElBQUksK0NBQXlDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUM5RCxPQUFPO1lBQ1AsY0FBYyxFQUFFLElBQUk7WUFDcEIsZ0JBQWdCLEVBQUU7Z0JBQ2hCLEtBQUssRUFBRSx3QkFBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7YUFDM0M7U0FDRixDQUFDLENBQUM7UUFFSCx3RUFBd0U7UUFDeEUscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsZUFBZSxDQUFDLDJDQUEyQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTFGLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLG1CQUFtQixFQUFFO1lBQ25FLFVBQVUsRUFBRSxLQUFLO1NBQ2xCLENBQUMsQ0FBQztRQUVILHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLDBCQUEwQixFQUFFO1lBQzFFLG9CQUFvQixFQUFFO2dCQUNwQixrQkFBSyxDQUFDLFVBQVUsQ0FBQztvQkFDZixLQUFLLEVBQUUsTUFBTTtvQkFDYixnQkFBZ0IsRUFBRTt3QkFDaEIsU0FBUyxFQUFFLFNBQVM7d0JBQ3BCLE9BQU8sRUFBRTs0QkFDUCxlQUFlLEVBQUU7Z0NBQ2YsR0FBRyxFQUFFLG1DQUFtQzs2QkFDekM7NEJBQ0QsdUJBQXVCLEVBQUUsU0FBUzs0QkFDbEMsZ0JBQWdCLEVBQUU7Z0NBQ2hCLEdBQUcsRUFBRSxhQUFhOzZCQUNuQjt5QkFDRjtxQkFDRjtvQkFDRCxNQUFNLEVBQUUsSUFBSTtvQkFDWixJQUFJLEVBQUUsS0FBSztvQkFDWCxZQUFZLEVBQUU7d0JBQ1o7NEJBQ0UsYUFBYSxFQUFFLEVBQUU7NEJBQ2pCLFFBQVEsRUFBRSxDQUFDOzRCQUNYLFFBQVEsRUFBRSxLQUFLO3lCQUNoQjtxQkFDRjtpQkFDRixDQUFDO2FBQ0g7WUFDRCxXQUFXLEVBQUUsUUFBUTtZQUNyQix1QkFBdUIsRUFBRTtnQkFDdkIsS0FBSzthQUNOO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1FBQ3BELFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdkQsT0FBTyxDQUFDLHNCQUFzQixDQUFDLElBQUksNkJBQW1CLENBQUMsS0FBSyxFQUFFLGlDQUFpQyxFQUFFO1lBQy9GLGdCQUFnQixFQUFFLElBQUksa0NBQWdCLENBQUMsS0FBSyxFQUFFLHlCQUF5QixFQUFFO2dCQUN2RSxHQUFHO2dCQUNILFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO2dCQUM5QyxZQUFZLEVBQUUsc0JBQVksQ0FBQyxpQkFBaUIsRUFBRTthQUMvQyxDQUFDO1NBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSixNQUFNLElBQUksR0FBRyxJQUFJLDhCQUFnQixDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztRQUVwRixPQUFPO1FBQ1AsSUFBSSwrQ0FBeUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQzlELE9BQU87WUFDUCxjQUFjLEVBQUUsSUFBSTtZQUNwQixnQkFBZ0IsRUFBRTtnQkFDaEIsS0FBSyxFQUFFLHdCQUFjLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztnQkFDMUMsYUFBYSxFQUFFLGFBQWE7Z0JBQzVCLGNBQWMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7Z0JBQ3hCLGFBQWEsRUFBRSxLQUFLO2dCQUNwQixXQUFXLEVBQUU7b0JBQ1gsMEJBQTBCLEVBQUUsbUNBQW1DO29CQUMvRCwwQkFBMEIsRUFBRSxtQ0FBbUM7aUJBQ2hFO2dCQUNELFNBQVMsRUFBRSxJQUFJLHNCQUFZLENBQUM7b0JBQzFCLFlBQVksRUFBRSxZQUFZO2lCQUMzQixDQUFDO2dCQUNGLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixhQUFhLEVBQUUsSUFBSSxjQUFJLENBQUMsS0FBSyxFQUFFLGVBQWUsRUFBRTtvQkFDOUMsSUFBSSxFQUFFLEdBQUc7b0JBQ1QsU0FBUyxFQUFFLElBQUksNEJBQWtCLENBQy9CLElBQUksMEJBQWdCLENBQUMsbUJBQW1CLENBQUMsRUFDekMsSUFBSSwwQkFBZ0IsQ0FBQyx5QkFBeUIsQ0FBQyxDQUNoRDtpQkFDRixDQUFDO2dCQUNGLFFBQVEsRUFBRSxJQUFJLGNBQUksQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO29CQUNwQyxTQUFTLEVBQUUsSUFBSSwwQkFBZ0IsQ0FBQyx5QkFBeUIsQ0FBQztpQkFDM0QsQ0FBQztnQkFDRixZQUFZLEVBQUUsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUU7YUFDL0Q7WUFDRCxHQUFHLEVBQUUsR0FBRztZQUNSLFlBQVksRUFBRSxDQUFDO1lBQ2Ysb0JBQW9CLEVBQUUsSUFBSTtZQUMxQixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLHNCQUFzQixFQUFFLGVBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQzdDLGFBQWEsRUFBRTtnQkFDYjtvQkFDRSxJQUFJLEVBQUUsSUFBSTtvQkFDVixVQUFVLEVBQUUsaUJBQWlCO29CQUM3QixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsa0JBQWtCLEVBQUUsS0FBSztvQkFDekIsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLElBQUksRUFBRSxVQUFVOzRCQUNoQixRQUFRLEVBQUUsZ0RBQW1CLENBQUMsS0FBSzs0QkFDbkMsV0FBVyxFQUFFLG9DQUFXLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLENBQUM7NEJBQ3hFLFNBQVMsRUFBRSxzQ0FBUyxDQUFDLFNBQVM7eUJBQy9CO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxhQUFhLEVBQUUsNkJBQW1CLENBQUMsT0FBTztZQUMxQyxvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLFdBQVcsRUFBRSxXQUFXO1lBQ3hCLFlBQVksRUFBRTtnQkFDWjtvQkFDRSxhQUFhLEVBQUUsRUFBRTtvQkFDakIsUUFBUSxFQUFFLFVBQVU7aUJBQ3JCO2dCQUNEO29CQUNFLGFBQWEsRUFBRSxFQUFFO29CQUNqQixRQUFRLEVBQUUsVUFBVTtvQkFDcEIsV0FBVyxFQUFFLE9BQU87b0JBQ3BCLFFBQVEsRUFBRSxFQUFFO29CQUNaLFFBQVEsRUFBRSxrQkFBUSxDQUFDLEdBQUc7aUJBQ3ZCO2FBQ0Y7WUFDRCxtQkFBbUIsRUFBRSxDQUFDLDJCQUFpQixDQUFDLHFCQUFxQixFQUFFLEVBQUUsMkJBQWlCLENBQUMsV0FBVyxFQUFFLEVBQUUsMkJBQWlCLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDL0gsb0JBQW9CLEVBQUUsQ0FBQyw2QkFBbUIsQ0FBQyxRQUFRLENBQUMsc0NBQXNDLENBQUMsQ0FBQztTQUM3RixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLEVBQUU7WUFDbkUsWUFBWSxFQUFFLENBQUM7WUFDZixVQUFVLEVBQUUsS0FBSztZQUNqQixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsNkJBQTZCLEVBQUUsQ0FBQztZQUNoQyxhQUFhLEVBQUU7Z0JBQ2I7b0JBQ0UsYUFBYSxFQUFFLGFBQWE7b0JBQzVCLGFBQWEsRUFBRSxFQUFFO29CQUNqQixjQUFjLEVBQUU7d0JBQ2QsR0FBRyxFQUFFLDJEQUEyRDtxQkFDakU7aUJBQ0Y7Z0JBQ0Q7b0JBQ0UsYUFBYSxFQUFFLGFBQWE7b0JBQzVCLGFBQWEsRUFBRSxFQUFFO29CQUNqQixjQUFjLEVBQUU7d0JBQ2QsR0FBRyxFQUFFLDJEQUEyRDtxQkFDakU7aUJBQ0Y7YUFDRjtZQUNELGFBQWEsRUFBRSxTQUFTO1lBQ3hCLFdBQVcsRUFBRSxXQUFXO1lBQ3hCLG9CQUFvQixFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxzQ0FBc0MsRUFBRSxDQUFDO1lBQ2hHLG1CQUFtQixFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDO1NBQ3RILENBQUMsQ0FBQztRQUVILHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLDBCQUEwQixFQUFFO1lBQzFFLG9CQUFvQixFQUFFO2dCQUNwQjtvQkFDRSxHQUFHLEVBQUUsR0FBRztvQkFDUixXQUFXLEVBQUU7d0JBQ1g7NEJBQ0UsSUFBSSxFQUFFLDRCQUE0Qjs0QkFDbEMsS0FBSyxFQUFFLG1DQUFtQzt5QkFDM0M7d0JBQ0Q7NEJBQ0UsSUFBSSxFQUFFLDRCQUE0Qjs0QkFDbEMsS0FBSyxFQUFFLG1DQUFtQzt5QkFDM0M7cUJBQ0Y7b0JBQ0QsU0FBUyxFQUFFLElBQUk7b0JBQ2YsS0FBSyxFQUFFLE1BQU07b0JBQ2IsZ0JBQWdCLEVBQUU7d0JBQ2hCLFNBQVMsRUFBRSxTQUFTO3dCQUNwQixPQUFPLEVBQUU7NEJBQ1AsZUFBZSxFQUFFO2dDQUNmLEdBQUcsRUFBRSwyQ0FBMkM7NkJBQ2pEOzRCQUNELHVCQUF1QixFQUFFLFlBQVk7NEJBQ3JDLGdCQUFnQixFQUFFO2dDQUNoQixHQUFHLEVBQUUsYUFBYTs2QkFDbkI7eUJBQ0Y7cUJBQ0Y7b0JBQ0QsTUFBTSxFQUFFLElBQUk7b0JBQ1osaUJBQWlCLEVBQUUsSUFBSTtvQkFDdkIsSUFBSSxFQUFFLGFBQWE7b0JBQ25CLFlBQVksRUFBRTt3QkFDWjs0QkFDRSxhQUFhLEVBQUUsRUFBRTs0QkFDakIsUUFBUSxFQUFFLENBQUM7NEJBQ1gsUUFBUSxFQUFFLEtBQUs7eUJBQ2hCO3dCQUNEOzRCQUNFLGFBQWEsRUFBRSxFQUFFOzRCQUNqQixRQUFRLEVBQUUsQ0FBQzs0QkFDWCxRQUFRLEVBQUUsS0FBSzt5QkFDaEI7cUJBQ0Y7b0JBQ0QsWUFBWSxFQUFFO3dCQUNaLE1BQU0sRUFBRSxhQUFhO3dCQUNyQixNQUFNLEVBQUUsYUFBYTtxQkFDdEI7aUJBQ0Y7YUFDRjtZQUNELGdCQUFnQixFQUFFO2dCQUNoQixZQUFZLEVBQUU7b0JBQ1osdUJBQXVCO29CQUN2QixLQUFLO2lCQUNOO2FBQ0Y7WUFDRCxNQUFNLEVBQUUsd0JBQXdCO1lBQ2hDLFdBQVcsRUFBRSxRQUFRO1lBQ3JCLHVCQUF1QixFQUFFO2dCQUN2QixLQUFLO2FBQ047WUFDRCxXQUFXLEVBQUU7Z0JBQ1gsWUFBWSxFQUFFO29CQUNaLGtCQUFrQjtvQkFDbEIsS0FBSztpQkFDTjthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBRUgscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsdUNBQXVDLEVBQUU7WUFDdkYsSUFBSSxFQUFFLEdBQUc7WUFDVCxRQUFRLEVBQUUsT0FBTztZQUNqQixZQUFZLEVBQUUsQ0FBQztvQkFDYixjQUFjLEVBQUUsWUFBWTtpQkFDN0IsQ0FBQztZQUNGLFNBQVMsRUFBRSxzQ0FBUyxDQUFDLFNBQVM7U0FDL0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1FBQ3BELFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdkQsT0FBTyxDQUFDLHNCQUFzQixDQUFDLElBQUksNkJBQW1CLENBQUMsS0FBSyxFQUFFLGlDQUFpQyxFQUFFO1lBQy9GLGdCQUFnQixFQUFFLElBQUksa0NBQWdCLENBQUMsS0FBSyxFQUFFLHlCQUF5QixFQUFFO2dCQUN2RSxHQUFHO2dCQUNILFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO2dCQUM5QyxZQUFZLEVBQUUsc0JBQVksQ0FBQyxpQkFBaUIsRUFBRTthQUMvQyxDQUFDO1NBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSixNQUFNLGNBQWMsR0FBRyxJQUFJLDJCQUFpQixDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNsRSxNQUFNLFNBQVMsR0FBRyxjQUFjLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRTtZQUNuRCxLQUFLLEVBQUUsd0JBQWMsQ0FBQyxZQUFZLENBQUMsMEJBQTBCLENBQUM7WUFDOUQsY0FBYyxFQUFFLEdBQUc7U0FDcEIsQ0FBQyxDQUFDO1FBQ0gsU0FBUyxDQUFDLGVBQWUsQ0FBQztZQUN4QixhQUFhLEVBQUUsRUFBRTtTQUNsQixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsSUFBSSwrQ0FBeUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQzlELE9BQU87WUFDUCxjQUFjO1NBQ2YsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLDBCQUEwQixFQUFFO1lBQzFFLG9CQUFvQixFQUFFO2dCQUNwQjtvQkFDRSxTQUFTLEVBQUUsSUFBSTtvQkFDZixLQUFLLEVBQUUsMEJBQTBCO29CQUNqQyxNQUFNLEVBQUUsR0FBRztvQkFDWCxJQUFJLEVBQUUsS0FBSztvQkFDWCxZQUFZLEVBQUU7d0JBQ1o7NEJBQ0UsYUFBYSxFQUFFLEVBQUU7NEJBQ2pCLFFBQVEsRUFBRSxDQUFDOzRCQUNYLFFBQVEsRUFBRSxLQUFLO3lCQUNoQjtxQkFDRjtpQkFDRjthQUNGO1lBQ0QsTUFBTSxFQUFFLFlBQVk7WUFDcEIsV0FBVyxFQUFFLFFBQVE7WUFDckIsdUJBQXVCLEVBQUU7Z0JBQ3ZCLEtBQUs7YUFDTjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDBFQUEwRSxFQUFFLEdBQUcsRUFBRTtRQUNwRixRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLDZCQUFtQixDQUFDLEtBQUssRUFBRSxpQ0FBaUMsRUFBRTtZQUMvRixnQkFBZ0IsRUFBRSxJQUFJLGtDQUFnQixDQUFDLEtBQUssRUFBRSx5QkFBeUIsRUFBRTtnQkFDdkUsR0FBRztnQkFDSCxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztnQkFDOUMsWUFBWSxFQUFFLHNCQUFZLENBQUMsaUJBQWlCLEVBQUU7YUFDL0MsQ0FBQztTQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0osTUFBTSxJQUFJLEdBQUcsSUFBSSw4QkFBZ0IsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFFcEYsT0FBTztRQUNQLElBQUksK0NBQXlDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUM5RCxPQUFPO1lBQ1AsY0FBYyxFQUFFLElBQUk7WUFDcEIsZ0JBQWdCLEVBQUU7Z0JBQ2hCLEtBQUssRUFBRSx3QkFBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7YUFDM0M7WUFDRCxhQUFhLEVBQUU7Z0JBQ2I7b0JBQ0UsSUFBSSxFQUFFLEtBQUs7b0JBQ1gsVUFBVSxFQUFFLGlCQUFpQjtvQkFDN0IsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxJQUFJLEVBQUUsV0FBVzs0QkFDakIsUUFBUSxFQUFFLGdEQUFtQixDQUFDLEtBQUs7NEJBQ25DLFdBQVcsRUFBRSxvQ0FBVyxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDO3lCQUN6RTt3QkFDRDs0QkFDRSxJQUFJLEVBQUUsV0FBVzs0QkFDakIsUUFBUSxFQUFFLGdEQUFtQixDQUFDLElBQUk7eUJBQ25DO3FCQUNGO2lCQUNGO2dCQUNEO29CQUNFLElBQUksRUFBRSxLQUFLO29CQUNYLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxJQUFJLEVBQUUsV0FBVzs0QkFDakIsUUFBUSxFQUFFLGdEQUFtQixDQUFDLElBQUk7eUJBQ25DO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxZQUFZLEVBQUU7Z0JBQ1o7b0JBQ0UsYUFBYSxFQUFFLEVBQUU7b0JBQ2pCLFFBQVEsRUFBRSxXQUFXO2lCQUN0QjtnQkFDRDtvQkFDRSxhQUFhLEVBQUUsRUFBRTtvQkFDakIsUUFBUSxFQUFFLFdBQVc7aUJBQ3RCO2dCQUNEO29CQUNFLGFBQWEsRUFBRSxFQUFFO29CQUNqQixRQUFRLEVBQUUsV0FBVztpQkFDdEI7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxNQUFNLE9BQU8sR0FBRyxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUN0QixpQ0FBaUMsRUFBRTtnQkFDakMsS0FBSyxFQUFFO29CQUNMLFlBQVksRUFBRTt3QkFDWixvQkFBb0I7d0JBQ3BCLFNBQVM7cUJBQ1Y7aUJBQ0Y7YUFDRjtZQUNELGlDQUFpQyxFQUFFO2dCQUNqQyxLQUFLLEVBQUU7b0JBQ0wsVUFBVSxFQUFFO3dCQUNWLEVBQUU7d0JBQ0Y7NEJBQ0UsVUFBVTs0QkFDVjtnQ0FDRSxHQUFHLEVBQUUsdUJBQXVCOzZCQUM3Qjt5QkFDRjtxQkFDRjtpQkFDRjthQUNGO1lBQ0QsZ0NBQWdDLEVBQUU7Z0JBQ2hDLEtBQUssRUFBRTtvQkFDTCxVQUFVLEVBQUU7d0JBQ1YsRUFBRTt3QkFDRjs0QkFDRSxTQUFTOzRCQUNUO2dDQUNFLEdBQUcsRUFBRSx1QkFBdUI7NkJBQzdCO3lCQUNGO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxpQ0FBaUMsRUFBRTtnQkFDakMsS0FBSyxFQUFFO29CQUNMLFlBQVksRUFBRTt3QkFDWixvQkFBb0I7d0JBQ3BCLFNBQVM7cUJBQ1Y7aUJBQ0Y7YUFDRjtZQUNELGdDQUFnQyxFQUFFO2dCQUNoQyxLQUFLLEVBQUU7b0JBQ0wsVUFBVSxFQUFFO3dCQUNWLEVBQUU7d0JBQ0Y7NEJBQ0UsU0FBUzs0QkFDVDtnQ0FDRSxZQUFZLEVBQUU7b0NBQ1osb0JBQW9CO29DQUNwQixTQUFTO2lDQUNWOzZCQUNGO3lCQUNGO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxpRUFBaUUsRUFBRSxHQUFHLEVBQUU7UUFDM0UsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN2RCxPQUFPLENBQUMsc0JBQXNCLENBQUMsSUFBSSw2QkFBbUIsQ0FBQyxLQUFLLEVBQUUsaUNBQWlDLEVBQUU7WUFDL0YsZ0JBQWdCLEVBQUUsSUFBSSxrQ0FBZ0IsQ0FBQyxLQUFLLEVBQUUseUJBQXlCLEVBQUU7Z0JBQ3ZFLEdBQUc7Z0JBQ0gsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7Z0JBQzlDLFlBQVksRUFBRSxzQkFBWSxDQUFDLGlCQUFpQixFQUFFO2FBQy9DLENBQUM7U0FDSCxDQUFDLENBQUMsQ0FBQztRQUVKLE1BQU0sY0FBYyxHQUFHLElBQUksMkJBQWlCLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRWxFLE9BQU87UUFDUCxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSwrQ0FBeUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO2dCQUM5RCxPQUFPO2dCQUNQLGNBQWM7YUFDZixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsb0RBQW9ELENBQUMsQ0FBQztJQUNuRSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw2REFBNkQsRUFBRSxHQUFHLEVBQUU7UUFDdkUsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLElBQUksOEJBQWdCLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBRXBGLE9BQU87UUFDUCxNQUFNLFVBQVUsR0FBRyxJQUFJLCtDQUF5QyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7WUFDakYsR0FBRztZQUNILGNBQWMsRUFBRSxJQUFJO1lBQ3BCLGdCQUFnQixFQUFFO2dCQUNoQixLQUFLLEVBQUUsd0JBQWMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO2FBQzNDO1lBQ0QsYUFBYSxFQUFFO2dCQUNiO29CQUNFLElBQUksRUFBRSxLQUFLO29CQUNYLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxJQUFJLEVBQUUsV0FBVzt5QkFDbEI7cUJBQ0Y7aUJBQ0Y7Z0JBQ0Q7b0JBQ0UsSUFBSSxFQUFFLEtBQUs7b0JBQ1gsVUFBVSxFQUFFLGlCQUFpQjtvQkFDN0IsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxJQUFJLEVBQUUsV0FBVzt5QkFDbEI7d0JBQ0Q7NEJBQ0UsSUFBSSxFQUFFLFdBQVc7NEJBQ2pCLFFBQVEsRUFBRSxnREFBbUIsQ0FBQyxLQUFLOzRCQUNuQyxXQUFXLEVBQUUsb0NBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FBQzt5QkFDekU7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUNELFlBQVksRUFBRTtnQkFDWjtvQkFDRSxhQUFhLEVBQUUsRUFBRTtpQkFDbEI7Z0JBQ0Q7b0JBQ0UsYUFBYSxFQUFFLEVBQUU7aUJBQ2xCO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RCxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUM3RSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7UUFDaEQsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV2RCxPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksK0NBQXlDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUMzRSxPQUFPO1lBQ1AsR0FBRztZQUNILGdCQUFnQixFQUFFO2dCQUNoQixLQUFLLEVBQUUsd0JBQWMsQ0FBQyxZQUFZLENBQUMsc0JBQXNCLENBQUM7YUFDM0Q7U0FDRixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMscUZBQXFGLENBQUMsQ0FBQztJQUNyRyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx5REFBeUQsRUFBRSxHQUFHLEVBQUU7UUFDbkUsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4QyxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDMUQsT0FBTyxDQUFDLHNCQUFzQixDQUFDLElBQUksNkJBQW1CLENBQUMsS0FBSyxFQUFFLGlDQUFpQyxFQUFFO1lBQy9GLGdCQUFnQixFQUFFLElBQUksa0NBQWdCLENBQUMsS0FBSyxFQUFFLHlCQUF5QixFQUFFO2dCQUN2RSxHQUFHO2dCQUNILFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO2dCQUM5QyxZQUFZLEVBQUUsc0JBQVksQ0FBQyxpQkFBaUIsRUFBRTthQUMvQyxDQUFDO1NBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSixPQUFPO1FBQ1AsT0FBTyxDQUFDLDJCQUEyQixDQUFDO1lBQ2xDLElBQUksRUFBRSxTQUFTO1lBQ2YsSUFBSSxFQUFFLG9DQUFhLENBQUMsV0FBVztTQUNoQyxDQUFDLENBQUM7UUFFSCxJQUFJLCtDQUF5QyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7WUFDOUQsT0FBTztZQUNQLGdCQUFnQixFQUFFO2dCQUNoQixLQUFLLEVBQUUsd0JBQWMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDO2FBQzVDO1lBQ0QsZUFBZSxFQUFFO2dCQUNmLElBQUksRUFBRSxPQUFPO2FBQ2Q7WUFDRCxjQUFjLEVBQUUsR0FBRztTQUNwQixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLEVBQUU7WUFDbkUsaUJBQWlCLEVBQUU7Z0JBQ2pCO29CQUNFLGFBQWEsRUFBRSxLQUFLO29CQUNwQixhQUFhLEVBQUUsRUFBRTtvQkFDakIsV0FBVyxFQUFFO3dCQUNYLFlBQVksRUFBRTs0QkFDWixnQ0FBZ0M7NEJBQ2hDLEtBQUs7eUJBQ047cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLGdDQUFnQyxFQUFFO1lBQ2hGLFNBQVMsRUFBRTtnQkFDVCxVQUFVLEVBQUU7b0JBQ1Y7d0JBQ0UsR0FBRyxFQUFFLEVBQUU7d0JBQ1AsSUFBSSxFQUFFLEtBQUs7cUJBQ1o7aUJBQ0Y7Z0JBQ0QsV0FBVyxFQUFFO29CQUNYLFlBQVksRUFBRTt3QkFDWixvREFBb0Q7d0JBQ3BELElBQUk7cUJBQ0w7aUJBQ0Y7Z0JBQ0QsYUFBYSxFQUFFLFlBQVk7YUFDNUI7WUFDRCx1QkFBdUIsRUFBRTtnQkFDdkIsZ0JBQWdCLEVBQUUsQ0FBQzthQUNwQjtZQUNELElBQUksRUFBRSxPQUFPO1lBQ2IsV0FBVyxFQUFFO2dCQUNYLFlBQVksRUFBRTtvQkFDWixvREFBb0Q7b0JBQ3BELElBQUk7aUJBQ0w7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDhEQUE4RCxFQUFFLEdBQUcsRUFBRTtRQUN4RSxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLDZCQUFtQixDQUFDLEtBQUssRUFBRSxpQ0FBaUMsRUFBRTtZQUMvRixnQkFBZ0IsRUFBRSxJQUFJLGtDQUFnQixDQUFDLEtBQUssRUFBRSx5QkFBeUIsRUFBRTtnQkFDdkUsR0FBRztnQkFDSCxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztnQkFDOUMsWUFBWSxFQUFFLHNCQUFZLENBQUMsaUJBQWlCLEVBQUU7YUFDL0MsQ0FBQztTQUNILENBQUMsQ0FBQyxDQUFDO1FBRUosTUFBTSxjQUFjLEdBQUcsSUFBSSwyQkFBaUIsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbEUsY0FBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDbEMsS0FBSyxFQUFFLHdCQUFjLENBQUMsWUFBWSxDQUFDLDBCQUEwQixDQUFDO1lBQzlELGNBQWMsRUFBRSxHQUFHO1NBQ3BCLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSwrQ0FBeUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO2dCQUM5RCxPQUFPO2dCQUNQLGdCQUFnQixFQUFFO29CQUNoQixLQUFLLEVBQUUsd0JBQWMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO2lCQUMzQztnQkFDRCxjQUFjO2FBQ2YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGtFQUFrRSxDQUFDLENBQUM7SUFDakYsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsaUVBQWlFLEVBQUUsR0FBRyxFQUFFO1FBQzNFLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdkQsT0FBTyxDQUFDLHNCQUFzQixDQUFDLElBQUksNkJBQW1CLENBQUMsS0FBSyxFQUFFLGlDQUFpQyxFQUFFO1lBQy9GLGdCQUFnQixFQUFFLElBQUksa0NBQWdCLENBQUMsS0FBSyxFQUFFLHlCQUF5QixFQUFFO2dCQUN2RSxHQUFHO2dCQUNILFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO2dCQUM5QyxZQUFZLEVBQUUsc0JBQVksQ0FBQyxpQkFBaUIsRUFBRTthQUMvQyxDQUFDO1NBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSixPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksK0NBQXlDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtnQkFDOUQsT0FBTzthQUNSLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO0lBQ2pFLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsRUFBRTtRQUM3RCxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLDZCQUFtQixDQUFDLEtBQUssRUFBRSxpQ0FBaUMsRUFBRTtZQUMvRixnQkFBZ0IsRUFBRSxJQUFJLGtDQUFnQixDQUFDLEtBQUssRUFBRSx5QkFBeUIsRUFBRTtnQkFDdkUsR0FBRztnQkFDSCxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztnQkFDOUMsWUFBWSxFQUFFLHNCQUFZLENBQUMsaUJBQWlCLEVBQUU7YUFDL0MsQ0FBQztTQUNILENBQUMsQ0FBQyxDQUFDO1FBRUosT0FBTztRQUNQLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDVixJQUFJLCtDQUF5QyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7Z0JBQzlELE9BQU87Z0JBQ1AsZ0JBQWdCLEVBQUU7b0JBQ2hCLEtBQUssRUFBRSx3QkFBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7aUJBQzNDO2dCQUNELGFBQWEsRUFBRTtvQkFDYjt3QkFDRSxJQUFJLEVBQUUsS0FBSzt3QkFDWCxVQUFVLEVBQUUsaUJBQWlCO3dCQUM3QixTQUFTLEVBQUU7NEJBQ1Q7Z0NBQ0UsSUFBSSxFQUFFLFdBQVc7NkJBQ2xCO3lCQUNGO3FCQUNGO2lCQUNGO2FBQ0YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHNGQUFzRixDQUFDLENBQUM7SUFDckcsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFFO1FBQzlDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFdkQsT0FBTztRQUNQLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDVixJQUFJLCtDQUF5QyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7Z0JBQzlELE9BQU87Z0JBQ1AsZ0JBQWdCLEVBQUU7b0JBQ2hCLEtBQUssRUFBRSx3QkFBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7aUJBQzNDO2dCQUNELGFBQWEsRUFBRSxFQUFFO2FBQ2xCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0lBQzdELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtRQUM3QyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRXZELE9BQU87UUFDUCxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSwrQ0FBeUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO2dCQUM5RCxPQUFPO2dCQUNQLGdCQUFnQixFQUFFO29CQUNoQixLQUFLLEVBQUUsd0JBQWMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO2lCQUMzQztnQkFDRCxZQUFZLEVBQUUsRUFBRTthQUNqQixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsK0NBQStDLENBQUMsQ0FBQztJQUM5RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7UUFDN0MsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV2RCxPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksK0NBQXlDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtnQkFDOUQsT0FBTztnQkFDUCxnQkFBZ0IsRUFBRTtvQkFDaEIsS0FBSyxFQUFFLHdCQUFjLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztpQkFDM0M7Z0JBQ0QsYUFBYSxFQUFFO29CQUNiO3dCQUNFLElBQUksRUFBRSxJQUFJO3dCQUNWLFNBQVMsRUFBRSxFQUFFO3FCQUNkO2lCQUNGO2FBQ0YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7SUFDeEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsd0RBQXdELEVBQUUsR0FBRyxFQUFFO1FBQ2xFLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFdkQsT0FBTztRQUNQLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDVixJQUFJLCtDQUF5QyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7Z0JBQzlELE9BQU87Z0JBQ1AsZ0JBQWdCLEVBQUU7b0JBQ2hCLEtBQUssRUFBRSx3QkFBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7aUJBQzNDO2dCQUNELGFBQWEsRUFBRTtvQkFDYjt3QkFDRSxJQUFJLEVBQUUsSUFBSTt3QkFDVixTQUFTLEVBQUU7NEJBQ1Q7Z0NBQ0UsSUFBSSxFQUFFLFVBQVU7Z0NBQ2hCLFFBQVEsRUFBRSxnREFBbUIsQ0FBQyxJQUFJO2dDQUNsQyxXQUFXLEVBQUUsb0NBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FBQzs2QkFDekU7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsNkRBQTZELENBQUMsQ0FBQztJQUM1RSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx3REFBd0QsRUFBRSxHQUFHLEVBQUU7UUFDbEUsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV2RCxPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksK0NBQXlDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtnQkFDOUQsT0FBTztnQkFDUCxnQkFBZ0IsRUFBRTtvQkFDaEIsS0FBSyxFQUFFLHdCQUFjLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztpQkFDM0M7Z0JBQ0QsYUFBYSxFQUFFO29CQUNiO3dCQUNFLElBQUksRUFBRSxJQUFJO3dCQUNWLFNBQVMsRUFBRTs0QkFDVDtnQ0FDRSxJQUFJLEVBQUUsVUFBVTtnQ0FDaEIsUUFBUSxFQUFFLGdEQUFtQixDQUFDLEtBQUs7NkJBQ3BDO3lCQUNGO3FCQUNGO2lCQUNGO2FBQ0YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGtFQUFrRSxDQUFDLENBQUM7SUFDakYsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsd0VBQXdFLEVBQUUsR0FBRyxFQUFFO1FBQ2xGLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFdkQsT0FBTztRQUNQLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDVixJQUFJLCtDQUF5QyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7Z0JBQzlELE9BQU87Z0JBQ1AsZ0JBQWdCLEVBQUU7b0JBQ2hCLEtBQUssRUFBRSx3QkFBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7aUJBQzNDO2dCQUNELGFBQWEsRUFBRTtvQkFDYjt3QkFDRSxJQUFJLEVBQUUsSUFBSTt3QkFDVixTQUFTLEVBQUU7NEJBQ1Q7Z0NBQ0UsSUFBSSxFQUFFLFdBQVc7NkJBQ2xCO3lCQUNGO3FCQUNGO2lCQUNGO2dCQUNELFlBQVksRUFBRTtvQkFDWjt3QkFDRSxhQUFhLEVBQUUsRUFBRTt3QkFDakIsUUFBUSxFQUFFLFdBQVc7cUJBQ3RCO2lCQUNGO2FBQ0YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGlGQUFpRixDQUFDLENBQUM7SUFDaEcsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO1FBQzNDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdkQsT0FBTyxDQUFDLHNCQUFzQixDQUFDLElBQUksNkJBQW1CLENBQUMsS0FBSyxFQUFFLGlDQUFpQyxFQUFFO1lBQy9GLGdCQUFnQixFQUFFLElBQUksa0NBQWdCLENBQUMsS0FBSyxFQUFFLHlCQUF5QixFQUFFO2dCQUN2RSxHQUFHO2dCQUNILFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO2dCQUM5QyxZQUFZLEVBQUUsc0JBQVksQ0FBQyxpQkFBaUIsRUFBRTthQUMvQyxDQUFDO1NBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSixPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUNWLElBQUksK0NBQXlDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUM5RCxPQUFPO1lBQ1AsY0FBYyxFQUFFLElBQUk7WUFDcEIsZ0JBQWdCLEVBQUU7Z0JBQ2hCLEtBQUssRUFBRSx3QkFBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7YUFDM0M7WUFDRCxZQUFZLEVBQUUsQ0FBQztTQUNoQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0RBQWdELENBQUMsQ0FBQztJQUNsRSxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtJQUMxQyxJQUFJLENBQUMsOENBQThDLEVBQUUsR0FBRyxFQUFFO1FBQ3hELFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdkQsT0FBTyxDQUFDLHNCQUFzQixDQUFDLElBQUksNkJBQW1CLENBQUMsS0FBSyxFQUFFLGlDQUFpQyxFQUFFO1lBQy9GLGdCQUFnQixFQUFFLElBQUksa0NBQWdCLENBQUMsS0FBSyxFQUFFLHlCQUF5QixFQUFFO2dCQUN2RSxHQUFHO2dCQUNILFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO2dCQUM5QyxZQUFZLEVBQUUsc0JBQVksQ0FBQyxpQkFBaUIsRUFBRTthQUMvQyxDQUFDO1NBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSixPQUFPO1FBQ1AsSUFBSSwyQ0FBcUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQzFELE9BQU87WUFDUCxjQUFjLEVBQUUsR0FBRztZQUNuQixnQkFBZ0IsRUFBRTtnQkFDaEIsS0FBSyxFQUFFLHdCQUFjLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQzthQUMzQztTQUNGLENBQUMsQ0FBQztRQUVILHNEQUFzRDtRQUN0RCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUMsMkNBQTJDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUYscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLEVBQUU7WUFDbkUsVUFBVSxFQUFFLEtBQUs7U0FDbEIsQ0FBQyxDQUFDO1FBRUgscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsMEJBQTBCLEVBQUU7WUFDMUUsb0JBQW9CLEVBQUU7Z0JBQ3BCO29CQUNFLFNBQVMsRUFBRSxJQUFJO29CQUNmLEtBQUssRUFBRSxNQUFNO29CQUNiLGdCQUFnQixFQUFFO3dCQUNoQixTQUFTLEVBQUUsU0FBUzt3QkFDcEIsT0FBTyxFQUFFOzRCQUNQLGVBQWUsRUFBRTtnQ0FDZixHQUFHLEVBQUUsbUNBQW1DOzZCQUN6Qzs0QkFDRCx1QkFBdUIsRUFBRSxTQUFTOzRCQUNsQyxnQkFBZ0IsRUFBRTtnQ0FDaEIsR0FBRyxFQUFFLGFBQWE7NkJBQ25CO3lCQUNGO3FCQUNGO29CQUNELE1BQU0sRUFBRSxHQUFHO29CQUNYLElBQUksRUFBRSxLQUFLO29CQUNYLFlBQVksRUFBRTt3QkFDWjs0QkFDRSxhQUFhLEVBQUUsRUFBRTs0QkFDakIsUUFBUSxFQUFFLENBQUM7NEJBQ1gsUUFBUSxFQUFFLEtBQUs7eUJBQ2hCO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxnQkFBZ0IsRUFBRTtnQkFDaEIsWUFBWSxFQUFFO29CQUNaLHFDQUFxQztvQkFDckMsS0FBSztpQkFDTjthQUNGO1lBQ0QsTUFBTSxFQUFFLHdCQUF3QjtZQUNoQyxXQUFXLEVBQUUsUUFBUTtZQUNyQix1QkFBdUIsRUFBRTtnQkFDdkIsS0FBSzthQUNOO1lBQ0QsV0FBVyxFQUFFO2dCQUNYLFlBQVksRUFBRTtvQkFDWixnQ0FBZ0M7b0JBQ2hDLEtBQUs7aUJBQ047YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBR0gsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsRUFBRTtRQUM3RCxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLDZCQUFtQixDQUFDLEtBQUssRUFBRSxpQ0FBaUMsRUFBRTtZQUMvRixnQkFBZ0IsRUFBRSxJQUFJLGtDQUFnQixDQUFDLEtBQUssRUFBRSx5QkFBeUIsRUFBRTtnQkFDdkUsR0FBRztnQkFDSCxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztnQkFDOUMsWUFBWSxFQUFFLHNCQUFZLENBQUMsaUJBQWlCLEVBQUU7YUFDL0MsQ0FBQztTQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0osTUFBTSxJQUFJLEdBQUcsSUFBSSw4QkFBZ0IsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFFcEYsT0FBTztRQUNQLElBQUksMkNBQXFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUMxRCxPQUFPO1lBQ1AsY0FBYyxFQUFFLEdBQUc7WUFDbkIsZ0JBQWdCLEVBQUU7Z0JBQ2hCLEtBQUssRUFBRSx3QkFBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7Z0JBQzFDLGFBQWEsRUFBRSxhQUFhO2dCQUM1QixjQUFjLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO2dCQUN4QixhQUFhLEVBQUUsS0FBSztnQkFDcEIsV0FBVyxFQUFFO29CQUNYLDBCQUEwQixFQUFFLG1DQUFtQztvQkFDL0QsMEJBQTBCLEVBQUUsbUNBQW1DO2lCQUNoRTtnQkFDRCxTQUFTLEVBQUUsSUFBSSxzQkFBWSxDQUFDO29CQUMxQixZQUFZLEVBQUUsWUFBWTtpQkFDM0IsQ0FBQztnQkFDRixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsYUFBYSxFQUFFLElBQUksY0FBSSxDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUU7b0JBQzlDLElBQUksRUFBRSxHQUFHO29CQUNULFNBQVMsRUFBRSxJQUFJLDRCQUFrQixDQUMvQixJQUFJLDBCQUFnQixDQUFDLG1CQUFtQixDQUFDLEVBQ3pDLElBQUksMEJBQWdCLENBQUMseUJBQXlCLENBQUMsQ0FDaEQ7aUJBQ0YsQ0FBQztnQkFDRixRQUFRLEVBQUUsSUFBSSxjQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtvQkFDcEMsU0FBUyxFQUFFLElBQUksMEJBQWdCLENBQUMseUJBQXlCLENBQUM7aUJBQzNELENBQUM7Z0JBQ0YsWUFBWSxFQUFFLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFO2FBQy9EO1lBQ0QsR0FBRyxFQUFFLEdBQUc7WUFDUixZQUFZLEVBQUUsQ0FBQztZQUNmLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsb0JBQW9CLEVBQUUsS0FBSztZQUMzQixzQkFBc0IsRUFBRSxlQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztZQUM3QyxhQUFhLEVBQUU7Z0JBQ2I7b0JBQ0UsSUFBSSxFQUFFLEtBQUs7b0JBQ1gsVUFBVSxFQUFFLGlCQUFpQjtvQkFDN0IsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLGtCQUFrQixFQUFFLEtBQUs7b0JBQ3pCLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxJQUFJLEVBQUUsV0FBVzt5QkFDbEI7cUJBQ0Y7aUJBQ0Y7Z0JBQ0Q7b0JBQ0UsSUFBSSxFQUFFLEtBQUs7b0JBQ1gsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLElBQUksRUFBRSxXQUFXOzRCQUNqQixJQUFJLEVBQUUsRUFBRTt5QkFDVDtxQkFDRjtpQkFDRjthQUNGO1lBQ0QsYUFBYSxFQUFFLDZCQUFtQixDQUFDLE9BQU87WUFDMUMsb0JBQW9CLEVBQUUsR0FBRztZQUN6QixXQUFXLEVBQUUsV0FBVztZQUN4QixZQUFZLEVBQUU7Z0JBQ1o7b0JBQ0UsYUFBYSxFQUFFLEVBQUU7b0JBQ2pCLFFBQVEsRUFBRSxXQUFXO2lCQUN0QjtnQkFDRDtvQkFDRSxhQUFhLEVBQUUsRUFBRTtvQkFDakIsUUFBUSxFQUFFLFdBQVc7aUJBQ3RCO2FBQ0Y7WUFDRCxtQkFBbUIsRUFBRSxDQUFDLDJCQUFpQixDQUFDLHFCQUFxQixFQUFFLEVBQUUsMkJBQWlCLENBQUMsV0FBVyxFQUFFLEVBQUUsMkJBQWlCLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDL0gsb0JBQW9CLEVBQUUsQ0FBQyw2QkFBbUIsQ0FBQyxRQUFRLENBQUMsc0NBQXNDLENBQUMsQ0FBQztTQUM3RixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLEVBQUU7WUFDbkUsb0JBQW9CLEVBQUUsS0FBSztTQUM1QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywwQ0FBMEMsRUFBRSxHQUFHLEVBQUU7UUFDcEQsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN2RCxPQUFPLENBQUMsc0JBQXNCLENBQUMsSUFBSSw2QkFBbUIsQ0FBQyxLQUFLLEVBQUUsaUNBQWlDLEVBQUU7WUFDL0YsZ0JBQWdCLEVBQUUsSUFBSSxrQ0FBZ0IsQ0FBQyxLQUFLLEVBQUUseUJBQXlCLEVBQUU7Z0JBQ3ZFLEdBQUc7Z0JBQ0gsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7Z0JBQzlDLFlBQVksRUFBRSxzQkFBWSxDQUFDLGlCQUFpQixFQUFFO2FBQy9DLENBQUM7U0FDSCxDQUFDLENBQUMsQ0FBQztRQUNKLE1BQU0sSUFBSSxHQUFHLElBQUksOEJBQWdCLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBRXBGLE9BQU87UUFDUCxJQUFJLDJDQUFxQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7WUFDMUQsT0FBTztZQUNQLGNBQWMsRUFBRSxHQUFHO1lBQ25CLGdCQUFnQixFQUFFO2dCQUNoQixLQUFLLEVBQUUsd0JBQWMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO2dCQUMxQyxhQUFhLEVBQUUsYUFBYTtnQkFDNUIsY0FBYyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztnQkFDeEIsYUFBYSxFQUFFLEtBQUs7Z0JBQ3BCLFdBQVcsRUFBRTtvQkFDWCwwQkFBMEIsRUFBRSxtQ0FBbUM7b0JBQy9ELDBCQUEwQixFQUFFLG1DQUFtQztpQkFDaEU7Z0JBQ0QsU0FBUyxFQUFFLElBQUksc0JBQVksQ0FBQztvQkFDMUIsWUFBWSxFQUFFLFlBQVk7aUJBQzNCLENBQUM7Z0JBQ0YsTUFBTSxFQUFFLFlBQVk7Z0JBQ3BCLGFBQWEsRUFBRSxJQUFJLGNBQUksQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO29CQUM5QyxJQUFJLEVBQUUsR0FBRztvQkFDVCxTQUFTLEVBQUUsSUFBSSw0QkFBa0IsQ0FDL0IsSUFBSSwwQkFBZ0IsQ0FBQyxtQkFBbUIsQ0FBQyxFQUN6QyxJQUFJLDBCQUFnQixDQUFDLHlCQUF5QixDQUFDLENBQ2hEO2lCQUNGLENBQUM7Z0JBQ0YsUUFBUSxFQUFFLElBQUksY0FBSSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7b0JBQ3BDLFNBQVMsRUFBRSxJQUFJLDBCQUFnQixDQUFDLHlCQUF5QixDQUFDO2lCQUMzRCxDQUFDO2dCQUNGLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRTthQUMvRDtZQUNELEdBQUcsRUFBRSxHQUFHO1lBQ1IsWUFBWSxFQUFFLENBQUM7WUFDZixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsc0JBQXNCLEVBQUUsZUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDN0MsYUFBYSxFQUFFO2dCQUNiO29CQUNFLElBQUksRUFBRSxLQUFLO29CQUNYLFVBQVUsRUFBRSxpQkFBaUI7b0JBQzdCLFVBQVUsRUFBRSxJQUFJO29CQUNoQixrQkFBa0IsRUFBRSxLQUFLO29CQUN6QixTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsSUFBSSxFQUFFLFdBQVc7eUJBQ2xCO3FCQUNGO2lCQUNGO2dCQUNEO29CQUNFLElBQUksRUFBRSxLQUFLO29CQUNYLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxJQUFJLEVBQUUsV0FBVzs0QkFDakIsSUFBSSxFQUFFLEVBQUU7eUJBQ1Q7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUNELGFBQWEsRUFBRSw2QkFBbUIsQ0FBQyxPQUFPO1lBQzFDLG9CQUFvQixFQUFFLEdBQUc7WUFDekIsV0FBVyxFQUFFLFdBQVc7WUFDeEIsWUFBWSxFQUFFO2dCQUNaO29CQUNFLGFBQWEsRUFBRSxFQUFFO29CQUNqQixRQUFRLEVBQUUsV0FBVztpQkFDdEI7Z0JBQ0Q7b0JBQ0UsYUFBYSxFQUFFLEVBQUU7b0JBQ2pCLFFBQVEsRUFBRSxXQUFXO2lCQUN0QjthQUNGO1lBQ0QsbUJBQW1CLEVBQUUsQ0FBQywyQkFBaUIsQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLDJCQUFpQixDQUFDLFdBQVcsRUFBRSxFQUFFLDJCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQy9ILG9CQUFvQixFQUFFLENBQUMsNkJBQW1CLENBQUMsUUFBUSxDQUFDLHNDQUFzQyxDQUFDLENBQUM7U0FDN0YsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLG1CQUFtQixFQUFFO1lBQ25FLFlBQVksRUFBRSxDQUFDO1lBQ2Ysb0JBQW9CLEVBQUUsSUFBSTtZQUMxQixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLDZCQUE2QixFQUFFLENBQUM7WUFDaEMsVUFBVSxFQUFFLEtBQUs7WUFDakIsYUFBYSxFQUFFO2dCQUNiO29CQUNFLGFBQWEsRUFBRSxhQUFhO29CQUM1QixhQUFhLEVBQUUsRUFBRTtvQkFDakIsY0FBYyxFQUFFO3dCQUNkLEdBQUcsRUFBRSw2REFBNkQ7cUJBQ25FO2lCQUNGO2dCQUNEO29CQUNFLGFBQWEsRUFBRSxhQUFhO29CQUM1QixhQUFhLEVBQUUsRUFBRTtvQkFDakIsY0FBYyxFQUFFO3dCQUNkLEdBQUcsRUFBRSw2REFBNkQ7cUJBQ25FO2lCQUNGO2FBQ0Y7WUFDRCxhQUFhLEVBQUUsU0FBUztZQUN4QixrQkFBa0IsRUFBRSxTQUFTO1lBQzdCLFdBQVcsRUFBRSxXQUFXO1lBQ3hCLG9CQUFvQixFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxzQ0FBc0MsRUFBRSxDQUFDO1lBQ2hHLG1CQUFtQixFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDO1NBQ3RILENBQUMsQ0FBQztRQUVILHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLDBCQUEwQixFQUFFO1lBQzFFLG9CQUFvQixFQUFFO2dCQUNwQjtvQkFDRSxHQUFHLEVBQUUsR0FBRztvQkFDUixXQUFXLEVBQUU7d0JBQ1g7NEJBQ0UsSUFBSSxFQUFFLDRCQUE0Qjs0QkFDbEMsS0FBSyxFQUFFLG1DQUFtQzt5QkFDM0M7d0JBQ0Q7NEJBQ0UsSUFBSSxFQUFFLDRCQUE0Qjs0QkFDbEMsS0FBSyxFQUFFLG1DQUFtQzt5QkFDM0M7cUJBQ0Y7b0JBQ0QsU0FBUyxFQUFFLElBQUk7b0JBQ2YsS0FBSyxFQUFFLE1BQU07b0JBQ2IsZ0JBQWdCLEVBQUU7d0JBQ2hCLFNBQVMsRUFBRSxTQUFTO3dCQUNwQixPQUFPLEVBQUU7NEJBQ1AsZUFBZSxFQUFFO2dDQUNmLEdBQUcsRUFBRSwyQ0FBMkM7NkJBQ2pEOzRCQUNELHVCQUF1QixFQUFFLFlBQVk7NEJBQ3JDLGdCQUFnQixFQUFFO2dDQUNoQixHQUFHLEVBQUUsYUFBYTs2QkFDbkI7eUJBQ0Y7cUJBQ0Y7b0JBQ0QsTUFBTSxFQUFFLEdBQUc7b0JBQ1gsaUJBQWlCLEVBQUUsR0FBRztvQkFDdEIsSUFBSSxFQUFFLGFBQWE7b0JBQ25CLFlBQVksRUFBRTt3QkFDWjs0QkFDRSxhQUFhLEVBQUUsRUFBRTs0QkFDakIsUUFBUSxFQUFFLENBQUM7NEJBQ1gsUUFBUSxFQUFFLEtBQUs7eUJBQ2hCO3dCQUNEOzRCQUNFLGFBQWEsRUFBRSxFQUFFOzRCQUNqQixRQUFRLEVBQUUsQ0FBQzs0QkFDWCxRQUFRLEVBQUUsS0FBSzt5QkFDaEI7cUJBQ0Y7b0JBQ0QsWUFBWSxFQUFFO3dCQUNaLE1BQU0sRUFBRSxhQUFhO3dCQUNyQixNQUFNLEVBQUUsYUFBYTtxQkFDdEI7aUJBQ0Y7YUFDRjtZQUNELGdCQUFnQixFQUFFO2dCQUNoQixZQUFZLEVBQUU7b0JBQ1osdUJBQXVCO29CQUN2QixLQUFLO2lCQUNOO2FBQ0Y7WUFDRCxNQUFNLEVBQUUsd0JBQXdCO1lBQ2hDLFdBQVcsRUFBRSxRQUFRO1lBQ3JCLHVCQUF1QixFQUFFO2dCQUN2QixLQUFLO2FBQ047WUFDRCxXQUFXLEVBQUU7Z0JBQ1gsWUFBWSxFQUFFO29CQUNaLGtCQUFrQjtvQkFDbEIsS0FBSztpQkFDTjthQUNGO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMscURBQXFELEVBQUUsR0FBRyxFQUFFO1FBQy9ELE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN2RCxPQUFPLENBQUMsc0JBQXNCLENBQUMsSUFBSSw2QkFBbUIsQ0FBQyxLQUFLLEVBQUUsaUNBQWlDLEVBQUU7WUFDL0YsZ0JBQWdCLEVBQUUsSUFBSSxrQ0FBZ0IsQ0FBQyxLQUFLLEVBQUUseUJBQXlCLEVBQUU7Z0JBQ3ZFLEdBQUc7Z0JBQ0gsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7Z0JBQzlDLFlBQVksRUFBRSxzQkFBWSxDQUFDLGlCQUFpQixFQUFFO2FBQy9DLENBQUM7U0FDSCxDQUFDLENBQUMsQ0FBQztRQUNKLE1BQU0sSUFBSSxHQUFHLElBQUksOEJBQWdCLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBRXBGLE9BQU87UUFDUCxJQUFJLDJDQUFxQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7WUFDMUQsT0FBTztZQUNQLGNBQWMsRUFBRSxHQUFHO1lBQ25CLGdCQUFnQixFQUFFO2dCQUNoQixLQUFLLEVBQUUsd0JBQWMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO2dCQUMxQyxhQUFhLEVBQUUsYUFBYTtnQkFDNUIsY0FBYyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztnQkFDeEIsYUFBYSxFQUFFLEtBQUs7Z0JBQ3BCLFdBQVcsRUFBRTtvQkFDWCwwQkFBMEIsRUFBRSxtQ0FBbUM7b0JBQy9ELDBCQUEwQixFQUFFLG1DQUFtQztpQkFDaEU7Z0JBQ0QsU0FBUyxFQUFFLElBQUksc0JBQVksQ0FBQztvQkFDMUIsWUFBWSxFQUFFLFlBQVk7aUJBQzNCLENBQUM7Z0JBQ0YsTUFBTSxFQUFFLFlBQVk7Z0JBQ3BCLGFBQWEsRUFBRSxJQUFJLGNBQUksQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO29CQUM5QyxJQUFJLEVBQUUsR0FBRztvQkFDVCxTQUFTLEVBQUUsSUFBSSw0QkFBa0IsQ0FDL0IsSUFBSSwwQkFBZ0IsQ0FBQyxtQkFBbUIsQ0FBQyxFQUN6QyxJQUFJLDBCQUFnQixDQUFDLHlCQUF5QixDQUFDLENBQ2hEO2lCQUNGLENBQUM7Z0JBQ0YsUUFBUSxFQUFFLElBQUksY0FBSSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7b0JBQ3BDLFNBQVMsRUFBRSxJQUFJLDBCQUFnQixDQUFDLHlCQUF5QixDQUFDO2lCQUMzRCxDQUFDO2dCQUNGLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRTthQUMvRDtZQUNELEdBQUcsRUFBRSxHQUFHO1lBQ1IsWUFBWSxFQUFFLENBQUM7WUFDZixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsc0JBQXNCLEVBQUUsZUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDN0MsYUFBYSxFQUFFO2dCQUNiO29CQUNFLElBQUksRUFBRSxLQUFLO29CQUNYLFVBQVUsRUFBRSxpQkFBaUI7b0JBQzdCLFVBQVUsRUFBRSxJQUFJO29CQUNoQixrQkFBa0IsRUFBRSxLQUFLO29CQUN6QixTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsSUFBSSxFQUFFLFdBQVc7eUJBQ2xCO3FCQUNGO2lCQUNGO2dCQUNEO29CQUNFLElBQUksRUFBRSxLQUFLO29CQUNYLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxJQUFJLEVBQUUsV0FBVzs0QkFDakIsSUFBSSxFQUFFLEVBQUU7eUJBQ1Q7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUNELGFBQWEsRUFBRSw2QkFBbUIsQ0FBQyxPQUFPO1lBQzFDLG9CQUFvQixFQUFFLEdBQUc7WUFDekIsV0FBVyxFQUFFLFdBQVc7WUFDeEIsWUFBWSxFQUFFO2dCQUNaO29CQUNFLGFBQWEsRUFBRSxFQUFFO29CQUNqQixRQUFRLEVBQUUsV0FBVztpQkFDdEI7Z0JBQ0Q7b0JBQ0UsYUFBYSxFQUFFLEVBQUU7b0JBQ2pCLFFBQVEsRUFBRSxXQUFXO2lCQUN0QjthQUNGO1lBQ0QsbUJBQW1CLEVBQUUsQ0FBQywyQkFBaUIsQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLDJCQUFpQixDQUFDLFdBQVcsRUFBRSxFQUFFLDJCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQy9ILG9CQUFvQixFQUFFLENBQUMsNkJBQW1CLENBQUMsUUFBUSxDQUFDLHNDQUFzQyxDQUFDLENBQUM7U0FDN0YsQ0FBQyxDQUFDO1FBRUgsV0FBVztRQUNYLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLGtCQUFrQixFQUFFO1lBQ2xFLGNBQWMsRUFBRTtnQkFDZCxTQUFTLEVBQUU7b0JBQ1Q7d0JBQ0UsTUFBTSxFQUFFOzRCQUNOLGtDQUFrQzs0QkFDbEMsK0JBQStCOzRCQUMvQixnQ0FBZ0M7NEJBQ2hDLDZCQUE2Qjt5QkFDOUI7d0JBQ0QsTUFBTSxFQUFFLE9BQU87d0JBQ2YsUUFBUSxFQUFFLEdBQUc7cUJBQ2Q7b0JBQ0Q7d0JBQ0UsTUFBTSxFQUFFLHdCQUF3Qjt3QkFDaEMsTUFBTSxFQUFFLE9BQU87d0JBQ2YsUUFBUSxFQUFFLEdBQUc7cUJBQ2Q7b0JBQ0Q7d0JBQ0UsTUFBTSxFQUFFOzRCQUNOLHNCQUFzQjs0QkFDdEIseUJBQXlCOzRCQUN6QixtQkFBbUI7eUJBQ3BCO3dCQUNELE1BQU0sRUFBRSxPQUFPO3dCQUNmLFFBQVEsRUFBRSxHQUFHO3FCQUNkO2lCQUNGO2dCQUNELE9BQU8sRUFBRSxZQUFZO2FBQ3RCO1lBQ0QsVUFBVSxFQUFFLCtCQUErQjtZQUMzQyxLQUFLLEVBQUU7Z0JBQ0w7b0JBQ0UsR0FBRyxFQUFFLGtCQUFrQjtpQkFDeEI7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtRQUNwRCxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLDZCQUFtQixDQUFDLEtBQUssRUFBRSxpQ0FBaUMsRUFBRTtZQUMvRixnQkFBZ0IsRUFBRSxJQUFJLGtDQUFnQixDQUFDLEtBQUssRUFBRSx5QkFBeUIsRUFBRTtnQkFDdkUsR0FBRztnQkFDSCxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztnQkFDOUMsWUFBWSxFQUFFLHNCQUFZLENBQUMsaUJBQWlCLEVBQUU7YUFDL0MsQ0FBQztTQUNILENBQUMsQ0FBQyxDQUFDO1FBRUosTUFBTSxjQUFjLEdBQUcsSUFBSSwyQkFBaUIsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbEUsTUFBTSxTQUFTLEdBQUcsY0FBYyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUU7WUFDbkQsS0FBSyxFQUFFLHdCQUFjLENBQUMsWUFBWSxDQUFDLDBCQUEwQixDQUFDO1lBQzlELGNBQWMsRUFBRSxHQUFHO1NBQ3BCLENBQUMsQ0FBQztRQUNILFNBQVMsQ0FBQyxlQUFlLENBQUM7WUFDeEIsYUFBYSxFQUFFLEVBQUU7U0FDbEIsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLElBQUksMkNBQXFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUMxRCxPQUFPO1lBQ1AsY0FBYztTQUNmLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQywwQkFBMEIsRUFBRTtZQUMxRSxvQkFBb0IsRUFBRTtnQkFDcEI7b0JBQ0UsU0FBUyxFQUFFLElBQUk7b0JBQ2YsS0FBSyxFQUFFLDBCQUEwQjtvQkFDakMsTUFBTSxFQUFFLEdBQUc7b0JBQ1gsSUFBSSxFQUFFLEtBQUs7b0JBQ1gsWUFBWSxFQUFFO3dCQUNaOzRCQUNFLGFBQWEsRUFBRSxFQUFFOzRCQUNqQixRQUFRLEVBQUUsQ0FBQzs0QkFDWCxRQUFRLEVBQUUsS0FBSzt5QkFDaEI7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUNELE1BQU0sRUFBRSxZQUFZO1lBQ3BCLFdBQVcsRUFBRSxRQUFRO1lBQ3JCLHVCQUF1QixFQUFFO2dCQUN2QixLQUFLO2FBQ047U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxpRUFBaUUsRUFBRSxHQUFHLEVBQUU7UUFDM0UsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN2RCxPQUFPLENBQUMsc0JBQXNCLENBQUMsSUFBSSw2QkFBbUIsQ0FBQyxLQUFLLEVBQUUsaUNBQWlDLEVBQUU7WUFDL0YsZ0JBQWdCLEVBQUUsSUFBSSxrQ0FBZ0IsQ0FBQyxLQUFLLEVBQUUseUJBQXlCLEVBQUU7Z0JBQ3ZFLEdBQUc7Z0JBQ0gsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7Z0JBQzlDLFlBQVksRUFBRSxzQkFBWSxDQUFDLGlCQUFpQixFQUFFO2FBQy9DLENBQUM7U0FDSCxDQUFDLENBQUMsQ0FBQztRQUVKLE1BQU0sY0FBYyxHQUFHLElBQUksMkJBQWlCLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRWxFLE9BQU87UUFDUCxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSwyQ0FBcUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO2dCQUMxRCxPQUFPO2dCQUNQLGNBQWM7YUFDZixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsb0RBQW9ELENBQUMsQ0FBQztJQUNuRSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw2REFBNkQsRUFBRSxHQUFHLEVBQUU7UUFDdkUsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLElBQUksOEJBQWdCLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBRXBGLE9BQU87UUFDUCxNQUFNLFVBQVUsR0FBRyxJQUFJLDJDQUFxQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7WUFDN0UsR0FBRztZQUNILGNBQWMsRUFBRSxJQUFJO1lBQ3BCLGdCQUFnQixFQUFFO2dCQUNoQixLQUFLLEVBQUUsd0JBQWMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO2FBQzNDO1lBQ0QsYUFBYSxFQUFFO2dCQUNiO29CQUNFLElBQUksRUFBRSxLQUFLO29CQUNYLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxJQUFJLEVBQUUsV0FBVzt5QkFDbEI7cUJBQ0Y7aUJBQ0Y7Z0JBQ0Q7b0JBQ0UsSUFBSSxFQUFFLEtBQUs7b0JBQ1gsVUFBVSxFQUFFLGlCQUFpQjtvQkFDN0IsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxJQUFJLEVBQUUsV0FBVzt5QkFDbEI7d0JBQ0Q7NEJBQ0UsSUFBSSxFQUFFLFdBQVc7eUJBQ2xCO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxZQUFZLEVBQUU7Z0JBQ1o7b0JBQ0UsYUFBYSxFQUFFLEVBQUU7aUJBQ2xCO2dCQUNEO29CQUNFLGFBQWEsRUFBRSxFQUFFO2lCQUNsQjthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6RCxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDN0UsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO1FBQ2hELFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFdkQsT0FBTztRQUNQLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLDJDQUFxQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7WUFDdkUsT0FBTztZQUNQLEdBQUc7WUFDSCxnQkFBZ0IsRUFBRTtnQkFDaEIsS0FBSyxFQUFFLHdCQUFjLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDO2FBQzNEO1NBQ0YsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHFGQUFxRixDQUFDLENBQUM7SUFDckcsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMseURBQXlELEVBQUUsR0FBRyxFQUFFO1FBQ25FLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzFELE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLDZCQUFtQixDQUFDLEtBQUssRUFBRSxpQ0FBaUMsRUFBRTtZQUMvRixnQkFBZ0IsRUFBRSxJQUFJLGtDQUFnQixDQUFDLEtBQUssRUFBRSx5QkFBeUIsRUFBRTtnQkFDdkUsR0FBRztnQkFDSCxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztnQkFDOUMsWUFBWSxFQUFFLHNCQUFZLENBQUMsaUJBQWlCLEVBQUU7YUFDL0MsQ0FBQztTQUNILENBQUMsQ0FBQyxDQUFDO1FBRUosT0FBTztRQUNQLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQztZQUNsQyxJQUFJLEVBQUUsU0FBUztZQUNmLElBQUksRUFBRSxvQ0FBYSxDQUFDLFdBQVc7U0FDaEMsQ0FBQyxDQUFDO1FBRUgsSUFBSSwyQ0FBcUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQzFELE9BQU87WUFDUCxnQkFBZ0IsRUFBRTtnQkFDaEIsS0FBSyxFQUFFLHdCQUFjLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQzthQUM1QztZQUNELGVBQWUsRUFBRTtnQkFDZixJQUFJLEVBQUUsT0FBTzthQUNkO1lBQ0QsY0FBYyxFQUFFLEdBQUc7U0FDcEIsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLG1CQUFtQixFQUFFO1lBQ25FLGlCQUFpQixFQUFFO2dCQUNqQjtvQkFDRSxhQUFhLEVBQUUsS0FBSztvQkFDcEIsYUFBYSxFQUFFLEVBQUU7b0JBQ2pCLFdBQVcsRUFBRTt3QkFDWCxZQUFZLEVBQUU7NEJBQ1osZ0NBQWdDOzRCQUNoQyxLQUFLO3lCQUNOO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxnQ0FBZ0MsRUFBRTtZQUNoRixTQUFTLEVBQUU7Z0JBQ1QsVUFBVSxFQUFFO29CQUNWO3dCQUNFLEdBQUcsRUFBRSxFQUFFO3dCQUNQLElBQUksRUFBRSxLQUFLO3FCQUNaO2lCQUNGO2dCQUNELFdBQVcsRUFBRTtvQkFDWCxZQUFZLEVBQUU7d0JBQ1osb0RBQW9EO3dCQUNwRCxJQUFJO3FCQUNMO2lCQUNGO2dCQUNELGFBQWEsRUFBRSxZQUFZO2FBQzVCO1lBQ0QsdUJBQXVCLEVBQUU7Z0JBQ3ZCLGdCQUFnQixFQUFFLENBQUM7YUFDcEI7WUFDRCxJQUFJLEVBQUUsT0FBTztZQUNiLFdBQVcsRUFBRTtnQkFDWCxZQUFZLEVBQUU7b0JBQ1osb0RBQW9EO29CQUNwRCxJQUFJO2lCQUNMO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw4REFBOEQsRUFBRSxHQUFHLEVBQUU7UUFDeEUsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN2RCxPQUFPLENBQUMsc0JBQXNCLENBQUMsSUFBSSw2QkFBbUIsQ0FBQyxLQUFLLEVBQUUsaUNBQWlDLEVBQUU7WUFDL0YsZ0JBQWdCLEVBQUUsSUFBSSxrQ0FBZ0IsQ0FBQyxLQUFLLEVBQUUseUJBQXlCLEVBQUU7Z0JBQ3ZFLEdBQUc7Z0JBQ0gsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7Z0JBQzlDLFlBQVksRUFBRSxzQkFBWSxDQUFDLGlCQUFpQixFQUFFO2FBQy9DLENBQUM7U0FDSCxDQUFDLENBQUMsQ0FBQztRQUVKLE1BQU0sY0FBYyxHQUFHLElBQUksMkJBQWlCLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2xFLGNBQWMsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO1lBQ2xDLEtBQUssRUFBRSx3QkFBYyxDQUFDLFlBQVksQ0FBQywwQkFBMEIsQ0FBQztZQUM5RCxjQUFjLEVBQUUsR0FBRztTQUNwQixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksMkNBQXFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtnQkFDMUQsT0FBTztnQkFDUCxnQkFBZ0IsRUFBRTtvQkFDaEIsS0FBSyxFQUFFLHdCQUFjLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztpQkFDM0M7Z0JBQ0QsY0FBYzthQUNmLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDO0lBQ2pGLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGlFQUFpRSxFQUFFLEdBQUcsRUFBRTtRQUMzRSxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLDZCQUFtQixDQUFDLEtBQUssRUFBRSxpQ0FBaUMsRUFBRTtZQUMvRixnQkFBZ0IsRUFBRSxJQUFJLGtDQUFnQixDQUFDLEtBQUssRUFBRSx5QkFBeUIsRUFBRTtnQkFDdkUsR0FBRztnQkFDSCxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztnQkFDOUMsWUFBWSxFQUFFLHNCQUFZLENBQUMsaUJBQWlCLEVBQUU7YUFDL0MsQ0FBQztTQUNILENBQUMsQ0FBQyxDQUFDO1FBRUosT0FBTztRQUNQLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDVixJQUFJLDJDQUFxQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7Z0JBQzFELE9BQU87YUFDUixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsa0RBQWtELENBQUMsQ0FBQztJQUNqRSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxtREFBbUQsRUFBRSxHQUFHLEVBQUU7UUFDN0QsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN2RCxPQUFPLENBQUMsc0JBQXNCLENBQUMsSUFBSSw2QkFBbUIsQ0FBQyxLQUFLLEVBQUUsaUNBQWlDLEVBQUU7WUFDL0YsZ0JBQWdCLEVBQUUsSUFBSSxrQ0FBZ0IsQ0FBQyxLQUFLLEVBQUUseUJBQXlCLEVBQUU7Z0JBQ3ZFLEdBQUc7Z0JBQ0gsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7Z0JBQzlDLFlBQVksRUFBRSxzQkFBWSxDQUFDLGlCQUFpQixFQUFFO2FBQy9DLENBQUM7U0FDSCxDQUFDLENBQUMsQ0FBQztRQUVKLE9BQU87UUFDUCxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSwyQ0FBcUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO2dCQUMxRCxPQUFPO2dCQUNQLGdCQUFnQixFQUFFO29CQUNoQixLQUFLLEVBQUUsd0JBQWMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO2lCQUMzQztnQkFDRCxhQUFhLEVBQUU7b0JBQ2I7d0JBQ0UsSUFBSSxFQUFFLEtBQUs7d0JBQ1gsVUFBVSxFQUFFLGlCQUFpQjt3QkFDN0IsU0FBUyxFQUFFLENBQUM7Z0NBQ1YsSUFBSSxFQUFFLFdBQVc7NkJBQ2xCLENBQUM7cUJBQ0g7aUJBQ0Y7YUFDRixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsc0ZBQXNGLENBQUMsQ0FBQztJQUNyRyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLEVBQUU7UUFDOUMsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV2RCxPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksMkNBQXFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtnQkFDMUQsT0FBTztnQkFDUCxnQkFBZ0IsRUFBRTtvQkFDaEIsS0FBSyxFQUFFLHdCQUFjLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztpQkFDM0M7Z0JBQ0QsYUFBYSxFQUFFLEVBQUU7YUFDbEIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7SUFDN0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFO1FBQzdDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFdkQsT0FBTztRQUNQLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDVixJQUFJLDJDQUFxQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7Z0JBQzFELE9BQU87Z0JBQ1AsZ0JBQWdCLEVBQUU7b0JBQ2hCLEtBQUssRUFBRSx3QkFBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7aUJBQzNDO2dCQUNELFlBQVksRUFBRSxFQUFFO2FBQ2pCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0lBQzlELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtRQUM3QyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRXZELE9BQU87UUFDUCxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSwyQ0FBcUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO2dCQUMxRCxPQUFPO2dCQUNQLGdCQUFnQixFQUFFO29CQUNoQixLQUFLLEVBQUUsd0JBQWMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO2lCQUMzQztnQkFDRCxhQUFhLEVBQUU7b0JBQ2I7d0JBQ0UsSUFBSSxFQUFFLElBQUk7d0JBQ1YsU0FBUyxFQUFFLEVBQUU7cUJBQ2Q7aUJBQ0Y7YUFDRixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMseUNBQXlDLENBQUMsQ0FBQztJQUN4RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx3RUFBd0UsRUFBRSxHQUFHLEVBQUU7UUFDbEYsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV2RCxPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksMkNBQXFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtnQkFDMUQsT0FBTztnQkFDUCxnQkFBZ0IsRUFBRTtvQkFDaEIsS0FBSyxFQUFFLHdCQUFjLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztpQkFDM0M7Z0JBQ0QsYUFBYSxFQUFFO29CQUNiO3dCQUNFLElBQUksRUFBRSxJQUFJO3dCQUNWLFNBQVMsRUFBRTs0QkFDVDtnQ0FDRSxJQUFJLEVBQUUsV0FBVzs2QkFDbEI7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7Z0JBQ0QsWUFBWSxFQUFFO29CQUNaO3dCQUNFLGFBQWEsRUFBRSxFQUFFO3dCQUNqQixRQUFRLEVBQUUsV0FBVztxQkFDdEI7aUJBQ0Y7YUFDRixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsaUZBQWlGLENBQUMsQ0FBQztJQUNoRyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7UUFDM0MsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN2RCxPQUFPLENBQUMsc0JBQXNCLENBQUMsSUFBSSw2QkFBbUIsQ0FBQyxLQUFLLEVBQUUsaUNBQWlDLEVBQUU7WUFDL0YsZ0JBQWdCLEVBQUUsSUFBSSxrQ0FBZ0IsQ0FBQyxLQUFLLEVBQUUseUJBQXlCLEVBQUU7Z0JBQ3ZFLEdBQUc7Z0JBQ0gsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7Z0JBQzlDLFlBQVksRUFBRSxzQkFBWSxDQUFDLGlCQUFpQixFQUFFO2FBQy9DLENBQUM7U0FDSCxDQUFDLENBQUMsQ0FBQztRQUVKLE9BQU87UUFDUCxNQUFNLENBQUMsR0FBRyxFQUFFLENBQ1YsSUFBSSwyQ0FBcUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQzFELE9BQU87WUFDUCxjQUFjLEVBQUUsSUFBSTtZQUNwQixnQkFBZ0IsRUFBRTtnQkFDaEIsS0FBSyxFQUFFLHdCQUFjLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQzthQUMzQztZQUNELFlBQVksRUFBRSxDQUFDO1NBQ2hCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0lBQ2xFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXRjaCwgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCB7IEF1dG9TY2FsaW5nR3JvdXAgfSBmcm9tICcuLi8uLi8uLi9hd3MtYXV0b3NjYWxpbmcnO1xuaW1wb3J0IHsgQ2VydGlmaWNhdGUgfSBmcm9tICcuLi8uLi8uLi9hd3MtY2VydGlmaWNhdGVtYW5hZ2VyJztcbmltcG9ydCAqIGFzIGVjMiBmcm9tICcuLi8uLi8uLi9hd3MtZWMyJztcbmltcG9ydCB7IE1hY2hpbmVJbWFnZSwgVnBjIH0gZnJvbSAnLi4vLi4vLi4vYXdzLWVjMic7XG5pbXBvcnQge1xuICBBc2dDYXBhY2l0eVByb3ZpZGVyLFxuICBBd3NMb2dEcml2ZXIsXG4gIENsdXN0ZXIsXG4gIENvbnRhaW5lckltYWdlLFxuICBFYzJUYXNrRGVmaW5pdGlvbixcbiAgUHJvcGFnYXRlZFRhZ1NvdXJjZSxcbiAgUHJvdG9jb2wsXG4gIFBsYWNlbWVudFN0cmF0ZWd5LFxuICBQbGFjZW1lbnRDb25zdHJhaW50LFxufSBmcm9tICcuLi8uLi8uLi9hd3MtZWNzJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uUHJvdG9jb2wsIFNzbFBvbGljeSB9IGZyb20gJy4uLy4uLy4uL2F3cy1lbGFzdGljbG9hZGJhbGFuY2luZ3YyJztcbmltcG9ydCB7IENvbXBvc2l0ZVByaW5jaXBhbCwgUm9sZSwgU2VydmljZVByaW5jaXBhbCB9IGZyb20gJy4uLy4uLy4uL2F3cy1pYW0nO1xuaW1wb3J0IHsgUHVibGljSG9zdGVkWm9uZSB9IGZyb20gJy4uLy4uLy4uL2F3cy1yb3V0ZTUzJztcbmltcG9ydCB7IE5hbWVzcGFjZVR5cGUgfSBmcm9tICcuLi8uLi8uLi9hd3Mtc2VydmljZWRpc2NvdmVyeSc7XG5pbXBvcnQgeyBEdXJhdGlvbiwgU3RhY2sgfSBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uTXVsdGlwbGVUYXJnZXRHcm91cHNFYzJTZXJ2aWNlLCBOZXR3b3JrTXVsdGlwbGVUYXJnZXRHcm91cHNFYzJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vbGliJztcblxuZGVzY3JpYmUoJ1doZW4gQXBwbGljYXRpb24gTG9hZCBCYWxhbmNlcicsICgpID0+IHtcbiAgdGVzdCgndGVzdCBFQ1MgQUxCIGNvbnN0cnVjdCB3aXRoIGRlZmF1bHQgc2V0dGluZ3MnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHZwYyA9IG5ldyBWcGMoc3RhY2ssICdWUEMnKTtcbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IENsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG4gICAgY2x1c3Rlci5hZGRBc2dDYXBhY2l0eVByb3ZpZGVyKG5ldyBBc2dDYXBhY2l0eVByb3ZpZGVyKHN0YWNrLCAnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXBQcm92aWRlcicsIHtcbiAgICAgIGF1dG9TY2FsaW5nR3JvdXA6IG5ldyBBdXRvU2NhbGluZ0dyb3VwKHN0YWNrLCAnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXAnLCB7XG4gICAgICAgIHZwYyxcbiAgICAgICAgaW5zdGFuY2VUeXBlOiBuZXcgZWMyLkluc3RhbmNlVHlwZSgndDIubWljcm8nKSxcbiAgICAgICAgbWFjaGluZUltYWdlOiBNYWNoaW5lSW1hZ2UubGF0ZXN0QW1hem9uTGludXgoKSxcbiAgICAgIH0pLFxuICAgIH0pKTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgQXBwbGljYXRpb25NdWx0aXBsZVRhcmdldEdyb3Vwc0VjMlNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgICAgY2x1c3RlcixcbiAgICAgIG1lbW9yeUxpbWl0TWlCOiAxMDI0LFxuICAgICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgICBpbWFnZTogQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCd0ZXN0JyksXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTiAtIHN0YWNrIGNvbnRhaW5zIGEgbG9hZCBiYWxhbmNlciwgYSBzZXJ2aWNlLCBhbmQgYSB0YXJnZXQgZ3JvdXAuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6RWxhc3RpY0xvYWRCYWxhbmNpbmdWMjo6TG9hZEJhbGFuY2VyJywgMSk7XG5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFQ1M6OlNlcnZpY2UnLCB7XG4gICAgICBMYXVuY2hUeXBlOiAnRUMyJyxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLCB7XG4gICAgICBDb250YWluZXJEZWZpbml0aW9uczogW1xuICAgICAgICBNYXRjaC5vYmplY3RMaWtlKHtcbiAgICAgICAgICBJbWFnZTogJ3Rlc3QnLFxuICAgICAgICAgIExvZ0NvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICAgIExvZ0RyaXZlcjogJ2F3c2xvZ3MnLFxuICAgICAgICAgICAgT3B0aW9uczoge1xuICAgICAgICAgICAgICAnYXdzbG9ncy1ncm91cCc6IHtcbiAgICAgICAgICAgICAgICBSZWY6ICdTZXJ2aWNlVGFza0RlZndlYkxvZ0dyb3VwMkE4OThGNjEnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAnYXdzbG9ncy1zdHJlYW0tcHJlZml4JzogJ1NlcnZpY2UnLFxuICAgICAgICAgICAgICAnYXdzbG9ncy1yZWdpb24nOiB7XG4gICAgICAgICAgICAgICAgUmVmOiAnQVdTOjpSZWdpb24nLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIE1lbW9yeTogMTAyNCxcbiAgICAgICAgICBOYW1lOiAnd2ViJyxcbiAgICAgICAgICBQb3J0TWFwcGluZ3M6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgQ29udGFpbmVyUG9ydDogODAsXG4gICAgICAgICAgICAgIEhvc3RQb3J0OiAwLFxuICAgICAgICAgICAgICBQcm90b2NvbDogJ3RjcCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICAgIE5ldHdvcmtNb2RlOiAnYnJpZGdlJyxcbiAgICAgIFJlcXVpcmVzQ29tcGF0aWJpbGl0aWVzOiBbXG4gICAgICAgICdFQzInLFxuICAgICAgXSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgndGVzdCBFQ1MgQUxCIGNvbnN0cnVjdCB3aXRoIGFsbCBzZXR0aW5ncycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcbiAgICBjbHVzdGVyLmFkZEFzZ0NhcGFjaXR5UHJvdmlkZXIobmV3IEFzZ0NhcGFjaXR5UHJvdmlkZXIoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cFByb3ZpZGVyJywge1xuICAgICAgYXV0b1NjYWxpbmdHcm91cDogbmV3IEF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cCcsIHtcbiAgICAgICAgdnBjLFxuICAgICAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICAgICAgICBtYWNoaW5lSW1hZ2U6IE1hY2hpbmVJbWFnZS5sYXRlc3RBbWF6b25MaW51eCgpLFxuICAgICAgfSksXG4gICAgfSkpO1xuICAgIGNvbnN0IHpvbmUgPSBuZXcgUHVibGljSG9zdGVkWm9uZShzdGFjaywgJ0hvc3RlZFpvbmUnLCB7IHpvbmVOYW1lOiAnZXhhbXBsZS5jb20nIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBBcHBsaWNhdGlvbk11bHRpcGxlVGFyZ2V0R3JvdXBzRWMyU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgICBjbHVzdGVyLFxuICAgICAgbWVtb3J5TGltaXRNaUI6IDEwMjQsXG4gICAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ3Rlc3QnKSxcbiAgICAgICAgY29udGFpbmVyTmFtZTogJ215Q29udGFpbmVyJyxcbiAgICAgICAgY29udGFpbmVyUG9ydHM6IFs4MCwgOTBdLFxuICAgICAgICBlbmFibGVMb2dnaW5nOiBmYWxzZSxcbiAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICBURVNUX0VOVklST05NRU5UX1ZBUklBQkxFMTogJ3Rlc3QgZW52aXJvbm1lbnQgdmFyaWFibGUgMSB2YWx1ZScsXG4gICAgICAgICAgVEVTVF9FTlZJUk9OTUVOVF9WQVJJQUJMRTI6ICd0ZXN0IGVudmlyb25tZW50IHZhcmlhYmxlIDIgdmFsdWUnLFxuICAgICAgICB9LFxuICAgICAgICBsb2dEcml2ZXI6IG5ldyBBd3NMb2dEcml2ZXIoe1xuICAgICAgICAgIHN0cmVhbVByZWZpeDogJ1Rlc3RTdHJlYW0nLFxuICAgICAgICB9KSxcbiAgICAgICAgZmFtaWx5OiAnRWMyVGFza0RlZicsXG4gICAgICAgIGV4ZWN1dGlvblJvbGU6IG5ldyBSb2xlKHN0YWNrLCAnRXhlY3V0aW9uUm9sZScsIHtcbiAgICAgICAgICBwYXRoOiAnLycsXG4gICAgICAgICAgYXNzdW1lZEJ5OiBuZXcgQ29tcG9zaXRlUHJpbmNpcGFsKFxuICAgICAgICAgICAgbmV3IFNlcnZpY2VQcmluY2lwYWwoJ2Vjcy5hbWF6b25hd3MuY29tJyksXG4gICAgICAgICAgICBuZXcgU2VydmljZVByaW5jaXBhbCgnZWNzLXRhc2tzLmFtYXpvbmF3cy5jb20nKSxcbiAgICAgICAgICApLFxuICAgICAgICB9KSxcbiAgICAgICAgdGFza1JvbGU6IG5ldyBSb2xlKHN0YWNrLCAnVGFza1JvbGUnLCB7XG4gICAgICAgICAgYXNzdW1lZEJ5OiBuZXcgU2VydmljZVByaW5jaXBhbCgnZWNzLXRhc2tzLmFtYXpvbmF3cy5jb20nKSxcbiAgICAgICAgfSksXG4gICAgICAgIGRvY2tlckxhYmVsczogeyBsYWJlbDE6ICdsYWJlbFZhbHVlMScsIGxhYmVsMjogJ2xhYmVsVmFsdWUyJyB9LFxuICAgICAgfSxcbiAgICAgIGNwdTogMjU2LFxuICAgICAgZGVzaXJlZENvdW50OiAzLFxuICAgICAgZW5hYmxlRUNTTWFuYWdlZFRhZ3M6IHRydWUsXG4gICAgICBlbmFibGVFeGVjdXRlQ29tbWFuZDogdHJ1ZSxcbiAgICAgIGhlYWx0aENoZWNrR3JhY2VQZXJpb2Q6IER1cmF0aW9uLm1pbGxpcygyMDAwKSxcbiAgICAgIGxvYWRCYWxhbmNlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdsYicsXG4gICAgICAgICAgZG9tYWluTmFtZTogJ2FwaS5leGFtcGxlLmNvbScsXG4gICAgICAgICAgZG9tYWluWm9uZTogem9uZSxcbiAgICAgICAgICBwdWJsaWNMb2FkQmFsYW5jZXI6IGZhbHNlLFxuICAgICAgICAgIGxpc3RlbmVyczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAnbGlzdGVuZXInLFxuICAgICAgICAgICAgICBwcm90b2NvbDogQXBwbGljYXRpb25Qcm90b2NvbC5IVFRQUyxcbiAgICAgICAgICAgICAgY2VydGlmaWNhdGU6IENlcnRpZmljYXRlLmZyb21DZXJ0aWZpY2F0ZUFybihzdGFjaywgJ0NlcnQnLCAnaGVsbG93b3JsZCcpLFxuICAgICAgICAgICAgICBzc2xQb2xpY3k6IFNzbFBvbGljeS5UTFMxMl9FWFQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgcHJvcGFnYXRlVGFnczogUHJvcGFnYXRlZFRhZ1NvdXJjZS5TRVJWSUNFLFxuICAgICAgbWVtb3J5UmVzZXJ2YXRpb25NaUI6IDEwMjQsXG4gICAgICBzZXJ2aWNlTmFtZTogJ215U2VydmljZScsXG4gICAgICB0YXJnZXRHcm91cHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDgwLFxuICAgICAgICAgIGxpc3RlbmVyOiAnbGlzdGVuZXInLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgY29udGFpbmVyUG9ydDogOTAsXG4gICAgICAgICAgbGlzdGVuZXI6ICdsaXN0ZW5lcicsXG4gICAgICAgICAgcGF0aFBhdHRlcm46ICdhL2IvYycsXG4gICAgICAgICAgcHJpb3JpdHk6IDEwLFxuICAgICAgICAgIHByb3RvY29sOiBQcm90b2NvbC5UQ1AsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgcGxhY2VtZW50U3RyYXRlZ2llczogW1BsYWNlbWVudFN0cmF0ZWd5LnNwcmVhZEFjcm9zc0luc3RhbmNlcygpLCBQbGFjZW1lbnRTdHJhdGVneS5wYWNrZWRCeUNwdSgpLCBQbGFjZW1lbnRTdHJhdGVneS5yYW5kb21seSgpXSxcbiAgICAgIHBsYWNlbWVudENvbnN0cmFpbnRzOiBbUGxhY2VtZW50Q29uc3RyYWludC5tZW1iZXJPZignYXR0cmlidXRlOmVjcy5pbnN0YW5jZS10eXBlID1+IG01YS4qJyldLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6U2VydmljZScsIHtcbiAgICAgIERlc2lyZWRDb3VudDogMyxcbiAgICAgIExhdW5jaFR5cGU6ICdFQzInLFxuICAgICAgRW5hYmxlRUNTTWFuYWdlZFRhZ3M6IHRydWUsXG4gICAgICBFbmFibGVFeGVjdXRlQ29tbWFuZDogdHJ1ZSxcbiAgICAgIEhlYWx0aENoZWNrR3JhY2VQZXJpb2RTZWNvbmRzOiAyLFxuICAgICAgTG9hZEJhbGFuY2VyczogW1xuICAgICAgICB7XG4gICAgICAgICAgQ29udGFpbmVyTmFtZTogJ215Q29udGFpbmVyJyxcbiAgICAgICAgICBDb250YWluZXJQb3J0OiA4MCxcbiAgICAgICAgICBUYXJnZXRHcm91cEFybjoge1xuICAgICAgICAgICAgUmVmOiAnU2VydmljZWxibGlzdGVuZXJFQ1NUYXJnZXRHcm91cG15Q29udGFpbmVyODBHcm91cEFEODM1ODRBJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgQ29udGFpbmVyTmFtZTogJ215Q29udGFpbmVyJyxcbiAgICAgICAgICBDb250YWluZXJQb3J0OiA5MCxcbiAgICAgICAgICBUYXJnZXRHcm91cEFybjoge1xuICAgICAgICAgICAgUmVmOiAnU2VydmljZWxibGlzdGVuZXJFQ1NUYXJnZXRHcm91cG15Q29udGFpbmVyOTBHcm91cEY1QTZEM0EwJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIFByb3BhZ2F0ZVRhZ3M6ICdTRVJWSUNFJyxcbiAgICAgIFNlcnZpY2VOYW1lOiAnbXlTZXJ2aWNlJyxcbiAgICAgIFBsYWNlbWVudENvbnN0cmFpbnRzOiBbeyBUeXBlOiAnbWVtYmVyT2YnLCBFeHByZXNzaW9uOiAnYXR0cmlidXRlOmVjcy5pbnN0YW5jZS10eXBlID1+IG01YS4qJyB9XSxcbiAgICAgIFBsYWNlbWVudFN0cmF0ZWdpZXM6IFt7IEZpZWxkOiAnaW5zdGFuY2VJZCcsIFR5cGU6ICdzcHJlYWQnIH0sIHsgRmllbGQ6ICdDUFUnLCBUeXBlOiAnYmlucGFjaycgfSwgeyBUeXBlOiAncmFuZG9tJyB9XSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLCB7XG4gICAgICBDb250YWluZXJEZWZpbml0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgQ3B1OiAyNTYsXG4gICAgICAgICAgRW52aXJvbm1lbnQ6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgTmFtZTogJ1RFU1RfRU5WSVJPTk1FTlRfVkFSSUFCTEUxJyxcbiAgICAgICAgICAgICAgVmFsdWU6ICd0ZXN0IGVudmlyb25tZW50IHZhcmlhYmxlIDEgdmFsdWUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgTmFtZTogJ1RFU1RfRU5WSVJPTk1FTlRfVkFSSUFCTEUyJyxcbiAgICAgICAgICAgICAgVmFsdWU6ICd0ZXN0IGVudmlyb25tZW50IHZhcmlhYmxlIDIgdmFsdWUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIEVzc2VudGlhbDogdHJ1ZSxcbiAgICAgICAgICBJbWFnZTogJ3Rlc3QnLFxuICAgICAgICAgIExvZ0NvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICAgIExvZ0RyaXZlcjogJ2F3c2xvZ3MnLFxuICAgICAgICAgICAgT3B0aW9uczoge1xuICAgICAgICAgICAgICAnYXdzbG9ncy1ncm91cCc6IHtcbiAgICAgICAgICAgICAgICBSZWY6ICdTZXJ2aWNlVGFza0RlZm15Q29udGFpbmVyTG9nR3JvdXAwQTg3MzY4QicsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICdhd3Nsb2dzLXN0cmVhbS1wcmVmaXgnOiAnVGVzdFN0cmVhbScsXG4gICAgICAgICAgICAgICdhd3Nsb2dzLXJlZ2lvbic6IHtcbiAgICAgICAgICAgICAgICBSZWY6ICdBV1M6OlJlZ2lvbicsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgTWVtb3J5OiAxMDI0LFxuICAgICAgICAgIE1lbW9yeVJlc2VydmF0aW9uOiAxMDI0LFxuICAgICAgICAgIE5hbWU6ICdteUNvbnRhaW5lcicsXG4gICAgICAgICAgUG9ydE1hcHBpbmdzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIENvbnRhaW5lclBvcnQ6IDgwLFxuICAgICAgICAgICAgICBIb3N0UG9ydDogMCxcbiAgICAgICAgICAgICAgUHJvdG9jb2w6ICd0Y3AnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgQ29udGFpbmVyUG9ydDogOTAsXG4gICAgICAgICAgICAgIEhvc3RQb3J0OiAwLFxuICAgICAgICAgICAgICBQcm90b2NvbDogJ3RjcCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgRG9ja2VyTGFiZWxzOiB7XG4gICAgICAgICAgICBsYWJlbDE6ICdsYWJlbFZhbHVlMScsXG4gICAgICAgICAgICBsYWJlbDI6ICdsYWJlbFZhbHVlMicsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBFeGVjdXRpb25Sb2xlQXJuOiB7XG4gICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgICdFeGVjdXRpb25Sb2xlNjA1QTA0MEInLFxuICAgICAgICAgICdBcm4nLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIEZhbWlseTogJ1NlcnZpY2VUYXNrRGVmNzlENzk1MjEnLFxuICAgICAgTmV0d29ya01vZGU6ICdicmlkZ2UnLFxuICAgICAgUmVxdWlyZXNDb21wYXRpYmlsaXRpZXM6IFtcbiAgICAgICAgJ0VDMicsXG4gICAgICBdLFxuICAgICAgVGFza1JvbGVBcm46IHtcbiAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgJ1Rhc2tSb2xlMzBGQzBGQkInLFxuICAgICAgICAgICdBcm4nLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVsYXN0aWNMb2FkQmFsYW5jaW5nVjI6Okxpc3RlbmVyJywge1xuICAgICAgUG9ydDogNDQzLFxuICAgICAgUHJvdG9jb2w6ICdIVFRQUycsXG4gICAgICBDZXJ0aWZpY2F0ZXM6IFt7XG4gICAgICAgIENlcnRpZmljYXRlQXJuOiAnaGVsbG93b3JsZCcsXG4gICAgICB9XSxcbiAgICAgIFNzbFBvbGljeTogU3NsUG9saWN5LlRMUzEyX0VYVCxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnYWJsZSB0byBwYXNzIHByZS1kZWZpbmVkIHRhc2sgZGVmaW5pdGlvbicsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcbiAgICBjbHVzdGVyLmFkZEFzZ0NhcGFjaXR5UHJvdmlkZXIobmV3IEFzZ0NhcGFjaXR5UHJvdmlkZXIoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cFByb3ZpZGVyJywge1xuICAgICAgYXV0b1NjYWxpbmdHcm91cDogbmV3IEF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cCcsIHtcbiAgICAgICAgdnBjLFxuICAgICAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICAgICAgICBtYWNoaW5lSW1hZ2U6IE1hY2hpbmVJbWFnZS5sYXRlc3RBbWF6b25MaW51eCgpLFxuICAgICAgfSksXG4gICAgfSkpO1xuXG4gICAgY29uc3QgdGFza0RlZmluaXRpb24gPSBuZXcgRWMyVGFza0RlZmluaXRpb24oc3RhY2ssICdFYzJUYXNrRGVmJyk7XG4gICAgY29uc3QgY29udGFpbmVyID0gdGFza0RlZmluaXRpb24uYWRkQ29udGFpbmVyKCd3ZWInLCB7XG4gICAgICBpbWFnZTogQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhbWF6b24vYW1hem9uLWVjcy1zYW1wbGUnKSxcbiAgICAgIG1lbW9yeUxpbWl0TWlCOiA1MTIsXG4gICAgfSk7XG4gICAgY29udGFpbmVyLmFkZFBvcnRNYXBwaW5ncyh7XG4gICAgICBjb250YWluZXJQb3J0OiA4MCxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgQXBwbGljYXRpb25NdWx0aXBsZVRhcmdldEdyb3Vwc0VjMlNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgICAgY2x1c3RlcixcbiAgICAgIHRhc2tEZWZpbml0aW9uLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLCB7XG4gICAgICBDb250YWluZXJEZWZpbml0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgRXNzZW50aWFsOiB0cnVlLFxuICAgICAgICAgIEltYWdlOiAnYW1hem9uL2FtYXpvbi1lY3Mtc2FtcGxlJyxcbiAgICAgICAgICBNZW1vcnk6IDUxMixcbiAgICAgICAgICBOYW1lOiAnd2ViJyxcbiAgICAgICAgICBQb3J0TWFwcGluZ3M6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgQ29udGFpbmVyUG9ydDogODAsXG4gICAgICAgICAgICAgIEhvc3RQb3J0OiAwLFxuICAgICAgICAgICAgICBQcm90b2NvbDogJ3RjcCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgRmFtaWx5OiAnRWMyVGFza0RlZicsXG4gICAgICBOZXR3b3JrTW9kZTogJ2JyaWRnZScsXG4gICAgICBSZXF1aXJlc0NvbXBhdGliaWxpdGllczogW1xuICAgICAgICAnRUMyJyxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2FibGUgdG8gb3V0cHV0IGNvcnJlY3QgbG9hZCBiYWxhbmNlciBETlMgYW5kIFVSTHMgZm9yIGVhY2ggcHJvdG9jb2wgdHlwZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcbiAgICBjbHVzdGVyLmFkZEFzZ0NhcGFjaXR5UHJvdmlkZXIobmV3IEFzZ0NhcGFjaXR5UHJvdmlkZXIoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cFByb3ZpZGVyJywge1xuICAgICAgYXV0b1NjYWxpbmdHcm91cDogbmV3IEF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cCcsIHtcbiAgICAgICAgdnBjLFxuICAgICAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICAgICAgICBtYWNoaW5lSW1hZ2U6IE1hY2hpbmVJbWFnZS5sYXRlc3RBbWF6b25MaW51eCgpLFxuICAgICAgfSksXG4gICAgfSkpO1xuICAgIGNvbnN0IHpvbmUgPSBuZXcgUHVibGljSG9zdGVkWm9uZShzdGFjaywgJ0hvc3RlZFpvbmUnLCB7IHpvbmVOYW1lOiAnZXhhbXBsZS5jb20nIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBBcHBsaWNhdGlvbk11bHRpcGxlVGFyZ2V0R3JvdXBzRWMyU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgICBjbHVzdGVyLFxuICAgICAgbWVtb3J5TGltaXRNaUI6IDEwMjQsXG4gICAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ3Rlc3QnKSxcbiAgICAgIH0sXG4gICAgICBsb2FkQmFsYW5jZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnbGIxJyxcbiAgICAgICAgICBkb21haW5OYW1lOiAnYXBpLmV4YW1wbGUuY29tJyxcbiAgICAgICAgICBkb21haW5ab25lOiB6b25lLFxuICAgICAgICAgIGxpc3RlbmVyczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAnbGlzdGVuZXIxJyxcbiAgICAgICAgICAgICAgcHJvdG9jb2w6IEFwcGxpY2F0aW9uUHJvdG9jb2wuSFRUUFMsXG4gICAgICAgICAgICAgIGNlcnRpZmljYXRlOiBDZXJ0aWZpY2F0ZS5mcm9tQ2VydGlmaWNhdGVBcm4oc3RhY2ssICdDZXJ0JywgJ2hlbGxvd29ybGQnKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdsaXN0ZW5lcjInLFxuICAgICAgICAgICAgICBwcm90b2NvbDogQXBwbGljYXRpb25Qcm90b2NvbC5IVFRQLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ2xiMycsXG4gICAgICAgICAgbGlzdGVuZXJzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdsaXN0ZW5lcjMnLFxuICAgICAgICAgICAgICBwcm90b2NvbDogQXBwbGljYXRpb25Qcm90b2NvbC5IVFRQLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHRhcmdldEdyb3VwczogW1xuICAgICAgICB7XG4gICAgICAgICAgY29udGFpbmVyUG9ydDogODAsXG4gICAgICAgICAgbGlzdGVuZXI6ICdsaXN0ZW5lcjEnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgY29udGFpbmVyUG9ydDogOTAsXG4gICAgICAgICAgbGlzdGVuZXI6ICdsaXN0ZW5lcjInLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgY29udGFpbmVyUG9ydDogNzAsXG4gICAgICAgICAgbGlzdGVuZXI6ICdsaXN0ZW5lcjMnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBjb25zdCBvdXRwdXRzID0gVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5maW5kT3V0cHV0cygnKicpO1xuICAgIGV4cGVjdChvdXRwdXRzKS50b0VxdWFsKHtcbiAgICAgIFNlcnZpY2VMb2FkQmFsYW5jZXJETlNsYjE3NUU3OEJGRToge1xuICAgICAgICBWYWx1ZToge1xuICAgICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgICAgJ1NlcnZpY2VsYjE1MkM3RjRGOScsXG4gICAgICAgICAgICAnRE5TTmFtZScsXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBTZXJ2aWNlU2VydmljZVVSTGxiMWh0dHBzNUMwQzQwNzk6IHtcbiAgICAgICAgVmFsdWU6IHtcbiAgICAgICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICAgICAnJyxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgJ2h0dHBzOi8vJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFJlZjogJ1NlcnZpY2VETlNsYjEyQkExRkFEMycsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgU2VydmljZVNlcnZpY2VVUkxsYjFodHRwNjVGMDU0NkE6IHtcbiAgICAgICAgVmFsdWU6IHtcbiAgICAgICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICAgICAnJyxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgJ2h0dHA6Ly8nLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgUmVmOiAnU2VydmljZUROU2xiMTJCQTFGQUQzJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBTZXJ2aWNlTG9hZEJhbGFuY2VyRE5TbGIzMkYyNzNGMjc6IHtcbiAgICAgICAgVmFsdWU6IHtcbiAgICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAgICdTZXJ2aWNlbGIzQTU4M0Q1RTcnLFxuICAgICAgICAgICAgJ0ROU05hbWUnLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgU2VydmljZVNlcnZpY2VVUkxsYjNodHRwNDBGOUNBREM6IHtcbiAgICAgICAgVmFsdWU6IHtcbiAgICAgICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICAgICAnJyxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgJ2h0dHA6Ly8nLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgICAgICAgICAnU2VydmljZWxiM0E1ODNENUU3JyxcbiAgICAgICAgICAgICAgICAgICdETlNOYW1lJyxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnZXJyb3JzIGlmIG5vIGVzc2VudGlhbCBjb250YWluZXIgaW4gcHJlLWRlZmluZWQgdGFzayBkZWZpbml0aW9uJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgVnBjKHN0YWNrLCAnVlBDJyk7XG4gICAgY29uc3QgY2x1c3RlciA9IG5ldyBDbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuICAgIGNsdXN0ZXIuYWRkQXNnQ2FwYWNpdHlQcm92aWRlcihuZXcgQXNnQ2FwYWNpdHlQcm92aWRlcihzdGFjaywgJ0RlZmF1bHRBdXRvU2NhbGluZ0dyb3VwUHJvdmlkZXInLCB7XG4gICAgICBhdXRvU2NhbGluZ0dyb3VwOiBuZXcgQXV0b1NjYWxpbmdHcm91cChzdGFjaywgJ0RlZmF1bHRBdXRvU2NhbGluZ0dyb3VwJywge1xuICAgICAgICB2cGMsXG4gICAgICAgIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGUoJ3QyLm1pY3JvJyksXG4gICAgICAgIG1hY2hpbmVJbWFnZTogTWFjaGluZUltYWdlLmxhdGVzdEFtYXpvbkxpbnV4KCksXG4gICAgICB9KSxcbiAgICB9KSk7XG5cbiAgICBjb25zdCB0YXNrRGVmaW5pdGlvbiA9IG5ldyBFYzJUYXNrRGVmaW5pdGlvbihzdGFjaywgJ0VjMlRhc2tEZWYnKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgbmV3IEFwcGxpY2F0aW9uTXVsdGlwbGVUYXJnZXRHcm91cHNFYzJTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICAgICAgY2x1c3RlcixcbiAgICAgICAgdGFza0RlZmluaXRpb24sXG4gICAgICB9KTtcbiAgICB9KS50b1Rocm93KC9BdCBsZWFzdCBvbmUgZXNzZW50aWFsIGNvbnRhaW5lciBtdXN0IGJlIHNwZWNpZmllZC8pO1xuICB9KTtcblxuICB0ZXN0KCdzZXQgZGVmYXVsdCBsb2FkIGJhbGFuY2VyLCBsaXN0ZW5lciwgdGFyZ2V0IGdyb3VwIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IHpvbmUgPSBuZXcgUHVibGljSG9zdGVkWm9uZShzdGFjaywgJ0hvc3RlZFpvbmUnLCB7IHpvbmVOYW1lOiAnZXhhbXBsZS5jb20nIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGVjc1NlcnZpY2UgPSBuZXcgQXBwbGljYXRpb25NdWx0aXBsZVRhcmdldEdyb3Vwc0VjMlNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgICAgdnBjLFxuICAgICAgbWVtb3J5TGltaXRNaUI6IDEwMjQsXG4gICAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ3Rlc3QnKSxcbiAgICAgIH0sXG4gICAgICBsb2FkQmFsYW5jZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnbGIxJyxcbiAgICAgICAgICBsaXN0ZW5lcnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ2xpc3RlbmVyMScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnbGIyJyxcbiAgICAgICAgICBkb21haW5OYW1lOiAnYXBpLmV4YW1wbGUuY29tJyxcbiAgICAgICAgICBkb21haW5ab25lOiB6b25lLFxuICAgICAgICAgIGxpc3RlbmVyczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAnbGlzdGVuZXIyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdsaXN0ZW5lcjMnLFxuICAgICAgICAgICAgICBwcm90b2NvbDogQXBwbGljYXRpb25Qcm90b2NvbC5IVFRQUyxcbiAgICAgICAgICAgICAgY2VydGlmaWNhdGU6IENlcnRpZmljYXRlLmZyb21DZXJ0aWZpY2F0ZUFybihzdGFjaywgJ0NlcnQnLCAnaGVsbG93b3JsZCcpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHRhcmdldEdyb3VwczogW1xuICAgICAgICB7XG4gICAgICAgICAgY29udGFpbmVyUG9ydDogODAsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBjb250YWluZXJQb3J0OiA5MCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGVjc1NlcnZpY2UubG9hZEJhbGFuY2VyLm5vZGUuaWQpLnRvRXF1YWwoJ2xiMScpO1xuICAgIGV4cGVjdChlY3NTZXJ2aWNlLmxpc3RlbmVyLm5vZGUuaWQpLnRvRXF1YWwoJ2xpc3RlbmVyMScpO1xuICAgIGV4cGVjdChlY3NTZXJ2aWNlLnRhcmdldEdyb3VwLm5vZGUuaWQpLnRvRXF1YWwoJ0VDU1RhcmdldEdyb3Vwd2ViODBHcm91cCcpO1xuICB9KTtcblxuICB0ZXN0KCdzZXR0aW5nIHZwYyBhbmQgY2x1c3RlciB0aHJvd3MgZXJyb3InLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHZwYyA9IG5ldyBWcGMoc3RhY2ssICdWUEMnKTtcbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IENsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgZXhwZWN0KCgpID0+IG5ldyBBcHBsaWNhdGlvbk11bHRpcGxlVGFyZ2V0R3JvdXBzRWMyU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgICBjbHVzdGVyLFxuICAgICAgdnBjLFxuICAgICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgICBpbWFnZTogQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCcvYXdzL2F3cy1leGFtcGxlLWFwcCcpLFxuICAgICAgfSxcbiAgICB9KSkudG9UaHJvdygvWW91IGNhbiBvbmx5IHNwZWNpZnkgZWl0aGVyIHZwYyBvciBjbHVzdGVyLiBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIGxlYXZlIGJvdGggYmxhbmsvKTtcbiAgfSk7XG5cbiAgdGVzdCgnY3JlYXRlcyBBV1MgQ2xvdWQgTWFwIHNlcnZpY2UgZm9yIFByaXZhdGUgRE5TIG5hbWVzcGFjZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ015VnBjJywge30pO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0Vjc0NsdXN0ZXInLCB7IHZwYyB9KTtcbiAgICBjbHVzdGVyLmFkZEFzZ0NhcGFjaXR5UHJvdmlkZXIobmV3IEFzZ0NhcGFjaXR5UHJvdmlkZXIoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cFByb3ZpZGVyJywge1xuICAgICAgYXV0b1NjYWxpbmdHcm91cDogbmV3IEF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cCcsIHtcbiAgICAgICAgdnBjLFxuICAgICAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICAgICAgICBtYWNoaW5lSW1hZ2U6IE1hY2hpbmVJbWFnZS5sYXRlc3RBbWF6b25MaW51eCgpLFxuICAgICAgfSksXG4gICAgfSkpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNsdXN0ZXIuYWRkRGVmYXVsdENsb3VkTWFwTmFtZXNwYWNlKHtcbiAgICAgIG5hbWU6ICdmb28uY29tJyxcbiAgICAgIHR5cGU6IE5hbWVzcGFjZVR5cGUuRE5TX1BSSVZBVEUsXG4gICAgfSk7XG5cbiAgICBuZXcgQXBwbGljYXRpb25NdWx0aXBsZVRhcmdldEdyb3Vwc0VjMlNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgICAgY2x1c3RlcixcbiAgICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgICAgaW1hZ2U6IENvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnaGVsbG8nKSxcbiAgICAgIH0sXG4gICAgICBjbG91ZE1hcE9wdGlvbnM6IHtcbiAgICAgICAgbmFtZTogJ215QXBwJyxcbiAgICAgIH0sXG4gICAgICBtZW1vcnlMaW1pdE1pQjogNTEyLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6U2VydmljZScsIHtcbiAgICAgIFNlcnZpY2VSZWdpc3RyaWVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBDb250YWluZXJOYW1lOiAnd2ViJyxcbiAgICAgICAgICBDb250YWluZXJQb3J0OiA4MCxcbiAgICAgICAgICBSZWdpc3RyeUFybjoge1xuICAgICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgICAgICdTZXJ2aWNlQ2xvdWRtYXBTZXJ2aWNlREU3NkIyOUQnLFxuICAgICAgICAgICAgICAnQXJuJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpTZXJ2aWNlRGlzY292ZXJ5OjpTZXJ2aWNlJywge1xuICAgICAgRG5zQ29uZmlnOiB7XG4gICAgICAgIERuc1JlY29yZHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBUVEw6IDYwLFxuICAgICAgICAgICAgVHlwZTogJ1NSVicsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgTmFtZXNwYWNlSWQ6IHtcbiAgICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAgICdFY3NDbHVzdGVyRGVmYXVsdFNlcnZpY2VEaXNjb3ZlcnlOYW1lc3BhY2VCMDk3MUIyRicsXG4gICAgICAgICAgICAnSWQnLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIFJvdXRpbmdQb2xpY3k6ICdNVUxUSVZBTFVFJyxcbiAgICAgIH0sXG4gICAgICBIZWFsdGhDaGVja0N1c3RvbUNvbmZpZzoge1xuICAgICAgICBGYWlsdXJlVGhyZXNob2xkOiAxLFxuICAgICAgfSxcbiAgICAgIE5hbWU6ICdteUFwcCcsXG4gICAgICBOYW1lc3BhY2VJZDoge1xuICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAnRWNzQ2x1c3RlckRlZmF1bHRTZXJ2aWNlRGlzY292ZXJ5TmFtZXNwYWNlQjA5NzFCMkYnLFxuICAgICAgICAgICdJZCcsXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdlcnJvcnMgd2hlbiBzZXR0aW5nIGJvdGggdGFza0RlZmluaXRpb24gYW5kIHRhc2tJbWFnZU9wdGlvbnMnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHZwYyA9IG5ldyBWcGMoc3RhY2ssICdWUEMnKTtcbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IENsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG4gICAgY2x1c3Rlci5hZGRBc2dDYXBhY2l0eVByb3ZpZGVyKG5ldyBBc2dDYXBhY2l0eVByb3ZpZGVyKHN0YWNrLCAnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXBQcm92aWRlcicsIHtcbiAgICAgIGF1dG9TY2FsaW5nR3JvdXA6IG5ldyBBdXRvU2NhbGluZ0dyb3VwKHN0YWNrLCAnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXAnLCB7XG4gICAgICAgIHZwYyxcbiAgICAgICAgaW5zdGFuY2VUeXBlOiBuZXcgZWMyLkluc3RhbmNlVHlwZSgndDIubWljcm8nKSxcbiAgICAgICAgbWFjaGluZUltYWdlOiBNYWNoaW5lSW1hZ2UubGF0ZXN0QW1hem9uTGludXgoKSxcbiAgICAgIH0pLFxuICAgIH0pKTtcblxuICAgIGNvbnN0IHRhc2tEZWZpbml0aW9uID0gbmV3IEVjMlRhc2tEZWZpbml0aW9uKHN0YWNrLCAnRWMyVGFza0RlZicpO1xuICAgIHRhc2tEZWZpbml0aW9uLmFkZENvbnRhaW5lcigndGVzdCcsIHtcbiAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ2FtYXpvbi9hbWF6b24tZWNzLXNhbXBsZScpLFxuICAgICAgbWVtb3J5TGltaXRNaUI6IDUxMixcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgbmV3IEFwcGxpY2F0aW9uTXVsdGlwbGVUYXJnZXRHcm91cHNFYzJTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICAgICAgY2x1c3RlcixcbiAgICAgICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ3Rlc3QnKSxcbiAgICAgICAgfSxcbiAgICAgICAgdGFza0RlZmluaXRpb24sXG4gICAgICB9KTtcbiAgICB9KS50b1Rocm93KC9Zb3UgbXVzdCBzcGVjaWZ5IG9ubHkgb25lIG9mIFRhc2tEZWZpbml0aW9uIG9yIFRhc2tJbWFnZU9wdGlvbnMuLyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Vycm9ycyB3aGVuIHNldHRpbmcgbmVpdGhlciB0YXNrRGVmaW5pdGlvbiBub3IgdGFza0ltYWdlT3B0aW9ucycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcbiAgICBjbHVzdGVyLmFkZEFzZ0NhcGFjaXR5UHJvdmlkZXIobmV3IEFzZ0NhcGFjaXR5UHJvdmlkZXIoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cFByb3ZpZGVyJywge1xuICAgICAgYXV0b1NjYWxpbmdHcm91cDogbmV3IEF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cCcsIHtcbiAgICAgICAgdnBjLFxuICAgICAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICAgICAgICBtYWNoaW5lSW1hZ2U6IE1hY2hpbmVJbWFnZS5sYXRlc3RBbWF6b25MaW51eCgpLFxuICAgICAgfSksXG4gICAgfSkpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBuZXcgQXBwbGljYXRpb25NdWx0aXBsZVRhcmdldEdyb3Vwc0VjMlNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgICAgICBjbHVzdGVyLFxuICAgICAgfSk7XG4gICAgfSkudG9UaHJvdygvWW91IG11c3Qgc3BlY2lmeSBvbmUgb2Y6IHRhc2tEZWZpbml0aW9uIG9yIGltYWdlLyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Vycm9ycyB3aGVuIHNldHRpbmcgZG9tYWluTmFtZSBidXQgbm90IGRvbWFpblpvbmUnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHZwYyA9IG5ldyBWcGMoc3RhY2ssICdWUEMnKTtcbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IENsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG4gICAgY2x1c3Rlci5hZGRBc2dDYXBhY2l0eVByb3ZpZGVyKG5ldyBBc2dDYXBhY2l0eVByb3ZpZGVyKHN0YWNrLCAnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXBQcm92aWRlcicsIHtcbiAgICAgIGF1dG9TY2FsaW5nR3JvdXA6IG5ldyBBdXRvU2NhbGluZ0dyb3VwKHN0YWNrLCAnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXAnLCB7XG4gICAgICAgIHZwYyxcbiAgICAgICAgaW5zdGFuY2VUeXBlOiBuZXcgZWMyLkluc3RhbmNlVHlwZSgndDIubWljcm8nKSxcbiAgICAgICAgbWFjaGluZUltYWdlOiBNYWNoaW5lSW1hZ2UubGF0ZXN0QW1hem9uTGludXgoKSxcbiAgICAgIH0pLFxuICAgIH0pKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgbmV3IEFwcGxpY2F0aW9uTXVsdGlwbGVUYXJnZXRHcm91cHNFYzJTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICAgICAgY2x1c3RlcixcbiAgICAgICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ3Rlc3QnKSxcbiAgICAgICAgfSxcbiAgICAgICAgbG9hZEJhbGFuY2VyczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdsYjEnLFxuICAgICAgICAgICAgZG9tYWluTmFtZTogJ2FwaS5leGFtcGxlLmNvbScsXG4gICAgICAgICAgICBsaXN0ZW5lcnM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdsaXN0ZW5lcjEnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSk7XG4gICAgfSkudG9UaHJvdygvQSBSb3V0ZTUzIGhvc3RlZCBkb21haW4gem9uZSBuYW1lIGlzIHJlcXVpcmVkIHRvIGNvbmZpZ3VyZSB0aGUgc3BlY2lmaWVkIGRvbWFpbiBuYW1lLyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Vycm9ycyB3aGVuIGxvYWRCYWxhbmNlcnMgaXMgZW1wdHknLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHZwYyA9IG5ldyBWcGMoc3RhY2ssICdWUEMnKTtcbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IENsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIG5ldyBBcHBsaWNhdGlvbk11bHRpcGxlVGFyZ2V0R3JvdXBzRWMyU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgICAgIGNsdXN0ZXIsXG4gICAgICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgICAgICBpbWFnZTogQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCd0ZXN0JyksXG4gICAgICAgIH0sXG4gICAgICAgIGxvYWRCYWxhbmNlcnM6IFtdLFxuICAgICAgfSk7XG4gICAgfSkudG9UaHJvdygvQXQgbGVhc3Qgb25lIGxvYWQgYmFsYW5jZXIgbXVzdCBiZSBzcGVjaWZpZWQvKTtcbiAgfSk7XG5cbiAgdGVzdCgnZXJyb3JzIHdoZW4gdGFyZ2V0R3JvdXBzIGlzIGVtcHR5JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgVnBjKHN0YWNrLCAnVlBDJyk7XG4gICAgY29uc3QgY2x1c3RlciA9IG5ldyBDbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBuZXcgQXBwbGljYXRpb25NdWx0aXBsZVRhcmdldEdyb3Vwc0VjMlNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgICAgICBjbHVzdGVyLFxuICAgICAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICAgICAgaW1hZ2U6IENvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgndGVzdCcpLFxuICAgICAgICB9LFxuICAgICAgICB0YXJnZXRHcm91cHM6IFtdLFxuICAgICAgfSk7XG4gICAgfSkudG9UaHJvdygvQXQgbGVhc3Qgb25lIHRhcmdldCBncm91cCBzaG91bGQgYmUgc3BlY2lmaWVkLyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Vycm9ycyB3aGVuIG5vIGxpc3RlbmVyIHNwZWNpZmllZCcsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgbmV3IEFwcGxpY2F0aW9uTXVsdGlwbGVUYXJnZXRHcm91cHNFYzJTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICAgICAgY2x1c3RlcixcbiAgICAgICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ3Rlc3QnKSxcbiAgICAgICAgfSxcbiAgICAgICAgbG9hZEJhbGFuY2VyczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdsYicsXG4gICAgICAgICAgICBsaXN0ZW5lcnM6IFtdLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9KTtcbiAgICB9KS50b1Rocm93KC9BdCBsZWFzdCBvbmUgbGlzdGVuZXIgbXVzdCBiZSBzcGVjaWZpZWQvKTtcbiAgfSk7XG5cbiAgdGVzdCgnZXJyb3JzIHdoZW4gc2V0dGluZyBib3RoIEhUVFAgcHJvdG9jb2wgYW5kIGNlcnRpZmljYXRlJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgVnBjKHN0YWNrLCAnVlBDJyk7XG4gICAgY29uc3QgY2x1c3RlciA9IG5ldyBDbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBuZXcgQXBwbGljYXRpb25NdWx0aXBsZVRhcmdldEdyb3Vwc0VjMlNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgICAgICBjbHVzdGVyLFxuICAgICAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICAgICAgaW1hZ2U6IENvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgndGVzdCcpLFxuICAgICAgICB9LFxuICAgICAgICBsb2FkQmFsYW5jZXJzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ2xiJyxcbiAgICAgICAgICAgIGxpc3RlbmVyczogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2xpc3RlbmVyJyxcbiAgICAgICAgICAgICAgICBwcm90b2NvbDogQXBwbGljYXRpb25Qcm90b2NvbC5IVFRQLFxuICAgICAgICAgICAgICAgIGNlcnRpZmljYXRlOiBDZXJ0aWZpY2F0ZS5mcm9tQ2VydGlmaWNhdGVBcm4oc3RhY2ssICdDZXJ0JywgJ2hlbGxvd29ybGQnKSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0pO1xuICAgIH0pLnRvVGhyb3coL1RoZSBIVFRQUyBwcm90b2NvbCBtdXN0IGJlIHVzZWQgd2hlbiBhIGNlcnRpZmljYXRlIGlzIGdpdmVuLyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Vycm9ycyB3aGVuIHNldHRpbmcgSFRUUFMgcHJvdG9jb2wgYnV0IG5vdCBkb21haW4gbmFtZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgbmV3IEFwcGxpY2F0aW9uTXVsdGlwbGVUYXJnZXRHcm91cHNFYzJTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICAgICAgY2x1c3RlcixcbiAgICAgICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ3Rlc3QnKSxcbiAgICAgICAgfSxcbiAgICAgICAgbG9hZEJhbGFuY2VyczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdsYicsXG4gICAgICAgICAgICBsaXN0ZW5lcnM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdsaXN0ZW5lcicsXG4gICAgICAgICAgICAgICAgcHJvdG9jb2w6IEFwcGxpY2F0aW9uUHJvdG9jb2wuSFRUUFMsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9KTtcbiAgICB9KS50b1Rocm93KC9BIGRvbWFpbiBuYW1lIGFuZCB6b25lIGlzIHJlcXVpcmVkIHdoZW4gdXNpbmcgdGhlIEhUVFBTIHByb3RvY29sLyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Vycm9ycyB3aGVuIGxpc3RlbmVyIGlzIG5vdCBkZWZpbmVkIGJ1dCB1c2VkIGluIGNyZWF0aW5nIHRhcmdldCBncm91cHMnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHZwYyA9IG5ldyBWcGMoc3RhY2ssICdWUEMnKTtcbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IENsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIG5ldyBBcHBsaWNhdGlvbk11bHRpcGxlVGFyZ2V0R3JvdXBzRWMyU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgICAgIGNsdXN0ZXIsXG4gICAgICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgICAgICBpbWFnZTogQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCd0ZXN0JyksXG4gICAgICAgIH0sXG4gICAgICAgIGxvYWRCYWxhbmNlcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnbGInLFxuICAgICAgICAgICAgbGlzdGVuZXJzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnbGlzdGVuZXIxJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgdGFyZ2V0R3JvdXBzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29udGFpbmVyUG9ydDogODAsXG4gICAgICAgICAgICBsaXN0ZW5lcjogJ2xpc3RlbmVyMicsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0pO1xuICAgIH0pLnRvVGhyb3coL0xpc3RlbmVyIGxpc3RlbmVyMiBpcyBub3QgZGVmaW5lZC4gRGlkIHlvdSBkZWZpbmUgbGlzdGVuZXIgd2l0aCBuYW1lIGxpc3RlbmVyMj8vKTtcbiAgfSk7XG5cbiAgdGVzdCgnZXJyb3JzIGlmIGRlc2lyZWRUYXNrQ291bnQgaXMgMCcsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcbiAgICBjbHVzdGVyLmFkZEFzZ0NhcGFjaXR5UHJvdmlkZXIobmV3IEFzZ0NhcGFjaXR5UHJvdmlkZXIoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cFByb3ZpZGVyJywge1xuICAgICAgYXV0b1NjYWxpbmdHcm91cDogbmV3IEF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cCcsIHtcbiAgICAgICAgdnBjLFxuICAgICAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICAgICAgICBtYWNoaW5lSW1hZ2U6IE1hY2hpbmVJbWFnZS5sYXRlc3RBbWF6b25MaW51eCgpLFxuICAgICAgfSksXG4gICAgfSkpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCgoKSA9PlxuICAgICAgbmV3IEFwcGxpY2F0aW9uTXVsdGlwbGVUYXJnZXRHcm91cHNFYzJTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICAgICAgY2x1c3RlcixcbiAgICAgICAgbWVtb3J5TGltaXRNaUI6IDEwMjQsXG4gICAgICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgICAgICBpbWFnZTogQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCd0ZXN0JyksXG4gICAgICAgIH0sXG4gICAgICAgIGRlc2lyZWRDb3VudDogMCxcbiAgICAgIH0pKS50b1Rocm93KC9Zb3UgbXVzdCBzcGVjaWZ5IGEgZGVzaXJlZENvdW50IGdyZWF0ZXIgdGhhbiAwLyk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdXaGVuIE5ldHdvcmsgTG9hZCBCYWxhbmNlcicsICgpID0+IHtcbiAgdGVzdCgndGVzdCBFQ1MgTkxCIGNvbnN0cnVjdCB3aXRoIGRlZmF1bHQgc2V0dGluZ3MnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHZwYyA9IG5ldyBWcGMoc3RhY2ssICdWUEMnKTtcbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IENsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG4gICAgY2x1c3Rlci5hZGRBc2dDYXBhY2l0eVByb3ZpZGVyKG5ldyBBc2dDYXBhY2l0eVByb3ZpZGVyKHN0YWNrLCAnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXBQcm92aWRlcicsIHtcbiAgICAgIGF1dG9TY2FsaW5nR3JvdXA6IG5ldyBBdXRvU2NhbGluZ0dyb3VwKHN0YWNrLCAnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXAnLCB7XG4gICAgICAgIHZwYyxcbiAgICAgICAgaW5zdGFuY2VUeXBlOiBuZXcgZWMyLkluc3RhbmNlVHlwZSgndDIubWljcm8nKSxcbiAgICAgICAgbWFjaGluZUltYWdlOiBNYWNoaW5lSW1hZ2UubGF0ZXN0QW1hem9uTGludXgoKSxcbiAgICAgIH0pLFxuICAgIH0pKTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgTmV0d29ya011bHRpcGxlVGFyZ2V0R3JvdXBzRWMyU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgICBjbHVzdGVyLFxuICAgICAgbWVtb3J5TGltaXRNaUI6IDI1NixcbiAgICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgICAgaW1hZ2U6IENvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgndGVzdCcpLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU4gLSBzdGFjayBjb250YWlucyBhIGxvYWQgYmFsYW5jZXIgYW5kIGEgc2VydmljZVxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykucmVzb3VyY2VDb3VudElzKCdBV1M6OkVsYXN0aWNMb2FkQmFsYW5jaW5nVjI6OkxvYWRCYWxhbmNlcicsIDEpO1xuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6U2VydmljZScsIHtcbiAgICAgIExhdW5jaFR5cGU6ICdFQzInLFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUNTOjpUYXNrRGVmaW5pdGlvbicsIHtcbiAgICAgIENvbnRhaW5lckRlZmluaXRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBFc3NlbnRpYWw6IHRydWUsXG4gICAgICAgICAgSW1hZ2U6ICd0ZXN0JyxcbiAgICAgICAgICBMb2dDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgICBMb2dEcml2ZXI6ICdhd3Nsb2dzJyxcbiAgICAgICAgICAgIE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgJ2F3c2xvZ3MtZ3JvdXAnOiB7XG4gICAgICAgICAgICAgICAgUmVmOiAnU2VydmljZVRhc2tEZWZ3ZWJMb2dHcm91cDJBODk4RjYxJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ2F3c2xvZ3Mtc3RyZWFtLXByZWZpeCc6ICdTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgJ2F3c2xvZ3MtcmVnaW9uJzoge1xuICAgICAgICAgICAgICAgIFJlZjogJ0FXUzo6UmVnaW9uJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBNZW1vcnk6IDI1NixcbiAgICAgICAgICBOYW1lOiAnd2ViJyxcbiAgICAgICAgICBQb3J0TWFwcGluZ3M6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgQ29udGFpbmVyUG9ydDogODAsXG4gICAgICAgICAgICAgIEhvc3RQb3J0OiAwLFxuICAgICAgICAgICAgICBQcm90b2NvbDogJ3RjcCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgRXhlY3V0aW9uUm9sZUFybjoge1xuICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAnU2VydmljZVRhc2tEZWZFeGVjdXRpb25Sb2xlOTE5RjdCRTMnLFxuICAgICAgICAgICdBcm4nLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIEZhbWlseTogJ1NlcnZpY2VUYXNrRGVmNzlENzk1MjEnLFxuICAgICAgTmV0d29ya01vZGU6ICdicmlkZ2UnLFxuICAgICAgUmVxdWlyZXNDb21wYXRpYmlsaXRpZXM6IFtcbiAgICAgICAgJ0VDMicsXG4gICAgICBdLFxuICAgICAgVGFza1JvbGVBcm46IHtcbiAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgJ1NlcnZpY2VUYXNrRGVmVGFza1JvbGUwQ0ZFMkY1NycsXG4gICAgICAgICAgJ0FybicsXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuXG4gIHRlc3QoJ0Fzc2VydCBFbmFibGVFeGVjdXRlQ29tbWFuZCBpcyBtaXNzaW5nIGlmIG5vdCBzZXQnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHZwYyA9IG5ldyBWcGMoc3RhY2ssICdWUEMnKTtcbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IENsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG4gICAgY2x1c3Rlci5hZGRBc2dDYXBhY2l0eVByb3ZpZGVyKG5ldyBBc2dDYXBhY2l0eVByb3ZpZGVyKHN0YWNrLCAnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXBQcm92aWRlcicsIHtcbiAgICAgIGF1dG9TY2FsaW5nR3JvdXA6IG5ldyBBdXRvU2NhbGluZ0dyb3VwKHN0YWNrLCAnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXAnLCB7XG4gICAgICAgIHZwYyxcbiAgICAgICAgaW5zdGFuY2VUeXBlOiBuZXcgZWMyLkluc3RhbmNlVHlwZSgndDIubWljcm8nKSxcbiAgICAgICAgbWFjaGluZUltYWdlOiBNYWNoaW5lSW1hZ2UubGF0ZXN0QW1hem9uTGludXgoKSxcbiAgICAgIH0pLFxuICAgIH0pKTtcbiAgICBjb25zdCB6b25lID0gbmV3IFB1YmxpY0hvc3RlZFpvbmUoc3RhY2ssICdIb3N0ZWRab25lJywgeyB6b25lTmFtZTogJ2V4YW1wbGUuY29tJyB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgTmV0d29ya011bHRpcGxlVGFyZ2V0R3JvdXBzRWMyU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgICBjbHVzdGVyLFxuICAgICAgbWVtb3J5TGltaXRNaUI6IDI1NixcbiAgICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgICAgaW1hZ2U6IENvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgndGVzdCcpLFxuICAgICAgICBjb250YWluZXJOYW1lOiAnbXlDb250YWluZXInLFxuICAgICAgICBjb250YWluZXJQb3J0czogWzgwLCA5MF0sXG4gICAgICAgIGVuYWJsZUxvZ2dpbmc6IGZhbHNlLFxuICAgICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICAgIFRFU1RfRU5WSVJPTk1FTlRfVkFSSUFCTEUxOiAndGVzdCBlbnZpcm9ubWVudCB2YXJpYWJsZSAxIHZhbHVlJyxcbiAgICAgICAgICBURVNUX0VOVklST05NRU5UX1ZBUklBQkxFMjogJ3Rlc3QgZW52aXJvbm1lbnQgdmFyaWFibGUgMiB2YWx1ZScsXG4gICAgICAgIH0sXG4gICAgICAgIGxvZ0RyaXZlcjogbmV3IEF3c0xvZ0RyaXZlcih7XG4gICAgICAgICAgc3RyZWFtUHJlZml4OiAnVGVzdFN0cmVhbScsXG4gICAgICAgIH0pLFxuICAgICAgICBmYW1pbHk6ICdFYzJUYXNrRGVmJyxcbiAgICAgICAgZXhlY3V0aW9uUm9sZTogbmV3IFJvbGUoc3RhY2ssICdFeGVjdXRpb25Sb2xlJywge1xuICAgICAgICAgIHBhdGg6ICcvJyxcbiAgICAgICAgICBhc3N1bWVkQnk6IG5ldyBDb21wb3NpdGVQcmluY2lwYWwoXG4gICAgICAgICAgICBuZXcgU2VydmljZVByaW5jaXBhbCgnZWNzLmFtYXpvbmF3cy5jb20nKSxcbiAgICAgICAgICAgIG5ldyBTZXJ2aWNlUHJpbmNpcGFsKCdlY3MtdGFza3MuYW1hem9uYXdzLmNvbScpLFxuICAgICAgICAgICksXG4gICAgICAgIH0pLFxuICAgICAgICB0YXNrUm9sZTogbmV3IFJvbGUoc3RhY2ssICdUYXNrUm9sZScsIHtcbiAgICAgICAgICBhc3N1bWVkQnk6IG5ldyBTZXJ2aWNlUHJpbmNpcGFsKCdlY3MtdGFza3MuYW1hem9uYXdzLmNvbScpLFxuICAgICAgICB9KSxcbiAgICAgICAgZG9ja2VyTGFiZWxzOiB7IGxhYmVsMTogJ2xhYmVsVmFsdWUxJywgbGFiZWwyOiAnbGFiZWxWYWx1ZTInIH0sXG4gICAgICB9LFxuICAgICAgY3B1OiAyNTYsXG4gICAgICBkZXNpcmVkQ291bnQ6IDMsXG4gICAgICBlbmFibGVFQ1NNYW5hZ2VkVGFnczogdHJ1ZSxcbiAgICAgIGVuYWJsZUV4ZWN1dGVDb21tYW5kOiBmYWxzZSxcbiAgICAgIGhlYWx0aENoZWNrR3JhY2VQZXJpb2Q6IER1cmF0aW9uLm1pbGxpcygyMDAwKSxcbiAgICAgIGxvYWRCYWxhbmNlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdsYjEnLFxuICAgICAgICAgIGRvbWFpbk5hbWU6ICdhcGkuZXhhbXBsZS5jb20nLFxuICAgICAgICAgIGRvbWFpblpvbmU6IHpvbmUsXG4gICAgICAgICAgcHVibGljTG9hZEJhbGFuY2VyOiBmYWxzZSxcbiAgICAgICAgICBsaXN0ZW5lcnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ2xpc3RlbmVyMScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnbGIyJyxcbiAgICAgICAgICBsaXN0ZW5lcnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ2xpc3RlbmVyMicsXG4gICAgICAgICAgICAgIHBvcnQ6IDgxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHByb3BhZ2F0ZVRhZ3M6IFByb3BhZ2F0ZWRUYWdTb3VyY2UuU0VSVklDRSxcbiAgICAgIG1lbW9yeVJlc2VydmF0aW9uTWlCOiAyNTYsXG4gICAgICBzZXJ2aWNlTmFtZTogJ215U2VydmljZScsXG4gICAgICB0YXJnZXRHcm91cHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDgwLFxuICAgICAgICAgIGxpc3RlbmVyOiAnbGlzdGVuZXIxJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDkwLFxuICAgICAgICAgIGxpc3RlbmVyOiAnbGlzdGVuZXIyJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBwbGFjZW1lbnRTdHJhdGVnaWVzOiBbUGxhY2VtZW50U3RyYXRlZ3kuc3ByZWFkQWNyb3NzSW5zdGFuY2VzKCksIFBsYWNlbWVudFN0cmF0ZWd5LnBhY2tlZEJ5Q3B1KCksIFBsYWNlbWVudFN0cmF0ZWd5LnJhbmRvbWx5KCldLFxuICAgICAgcGxhY2VtZW50Q29uc3RyYWludHM6IFtQbGFjZW1lbnRDb25zdHJhaW50Lm1lbWJlck9mKCdhdHRyaWJ1dGU6ZWNzLmluc3RhbmNlLXR5cGUgPX4gbTVhLionKV0sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUNTOjpTZXJ2aWNlJywge1xuICAgICAgRW5hYmxlRXhlY3V0ZUNvbW1hbmQ6IGZhbHNlLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCd0ZXN0IEVDUyBOTEIgY29uc3RydWN0IHdpdGggYWxsIHNldHRpbmdzJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgVnBjKHN0YWNrLCAnVlBDJyk7XG4gICAgY29uc3QgY2x1c3RlciA9IG5ldyBDbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuICAgIGNsdXN0ZXIuYWRkQXNnQ2FwYWNpdHlQcm92aWRlcihuZXcgQXNnQ2FwYWNpdHlQcm92aWRlcihzdGFjaywgJ0RlZmF1bHRBdXRvU2NhbGluZ0dyb3VwUHJvdmlkZXInLCB7XG4gICAgICBhdXRvU2NhbGluZ0dyb3VwOiBuZXcgQXV0b1NjYWxpbmdHcm91cChzdGFjaywgJ0RlZmF1bHRBdXRvU2NhbGluZ0dyb3VwJywge1xuICAgICAgICB2cGMsXG4gICAgICAgIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGUoJ3QyLm1pY3JvJyksXG4gICAgICAgIG1hY2hpbmVJbWFnZTogTWFjaGluZUltYWdlLmxhdGVzdEFtYXpvbkxpbnV4KCksXG4gICAgICB9KSxcbiAgICB9KSk7XG4gICAgY29uc3Qgem9uZSA9IG5ldyBQdWJsaWNIb3N0ZWRab25lKHN0YWNrLCAnSG9zdGVkWm9uZScsIHsgem9uZU5hbWU6ICdleGFtcGxlLmNvbScgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgbmV3IE5ldHdvcmtNdWx0aXBsZVRhcmdldEdyb3Vwc0VjMlNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgICAgY2x1c3RlcixcbiAgICAgIG1lbW9yeUxpbWl0TWlCOiAyNTYsXG4gICAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ3Rlc3QnKSxcbiAgICAgICAgY29udGFpbmVyTmFtZTogJ215Q29udGFpbmVyJyxcbiAgICAgICAgY29udGFpbmVyUG9ydHM6IFs4MCwgOTBdLFxuICAgICAgICBlbmFibGVMb2dnaW5nOiBmYWxzZSxcbiAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICBURVNUX0VOVklST05NRU5UX1ZBUklBQkxFMTogJ3Rlc3QgZW52aXJvbm1lbnQgdmFyaWFibGUgMSB2YWx1ZScsXG4gICAgICAgICAgVEVTVF9FTlZJUk9OTUVOVF9WQVJJQUJMRTI6ICd0ZXN0IGVudmlyb25tZW50IHZhcmlhYmxlIDIgdmFsdWUnLFxuICAgICAgICB9LFxuICAgICAgICBsb2dEcml2ZXI6IG5ldyBBd3NMb2dEcml2ZXIoe1xuICAgICAgICAgIHN0cmVhbVByZWZpeDogJ1Rlc3RTdHJlYW0nLFxuICAgICAgICB9KSxcbiAgICAgICAgZmFtaWx5OiAnRWMyVGFza0RlZicsXG4gICAgICAgIGV4ZWN1dGlvblJvbGU6IG5ldyBSb2xlKHN0YWNrLCAnRXhlY3V0aW9uUm9sZScsIHtcbiAgICAgICAgICBwYXRoOiAnLycsXG4gICAgICAgICAgYXNzdW1lZEJ5OiBuZXcgQ29tcG9zaXRlUHJpbmNpcGFsKFxuICAgICAgICAgICAgbmV3IFNlcnZpY2VQcmluY2lwYWwoJ2Vjcy5hbWF6b25hd3MuY29tJyksXG4gICAgICAgICAgICBuZXcgU2VydmljZVByaW5jaXBhbCgnZWNzLXRhc2tzLmFtYXpvbmF3cy5jb20nKSxcbiAgICAgICAgICApLFxuICAgICAgICB9KSxcbiAgICAgICAgdGFza1JvbGU6IG5ldyBSb2xlKHN0YWNrLCAnVGFza1JvbGUnLCB7XG4gICAgICAgICAgYXNzdW1lZEJ5OiBuZXcgU2VydmljZVByaW5jaXBhbCgnZWNzLXRhc2tzLmFtYXpvbmF3cy5jb20nKSxcbiAgICAgICAgfSksXG4gICAgICAgIGRvY2tlckxhYmVsczogeyBsYWJlbDE6ICdsYWJlbFZhbHVlMScsIGxhYmVsMjogJ2xhYmVsVmFsdWUyJyB9LFxuICAgICAgfSxcbiAgICAgIGNwdTogMjU2LFxuICAgICAgZGVzaXJlZENvdW50OiAzLFxuICAgICAgZW5hYmxlRUNTTWFuYWdlZFRhZ3M6IHRydWUsXG4gICAgICBlbmFibGVFeGVjdXRlQ29tbWFuZDogdHJ1ZSxcbiAgICAgIGhlYWx0aENoZWNrR3JhY2VQZXJpb2Q6IER1cmF0aW9uLm1pbGxpcygyMDAwKSxcbiAgICAgIGxvYWRCYWxhbmNlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdsYjEnLFxuICAgICAgICAgIGRvbWFpbk5hbWU6ICdhcGkuZXhhbXBsZS5jb20nLFxuICAgICAgICAgIGRvbWFpblpvbmU6IHpvbmUsXG4gICAgICAgICAgcHVibGljTG9hZEJhbGFuY2VyOiBmYWxzZSxcbiAgICAgICAgICBsaXN0ZW5lcnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ2xpc3RlbmVyMScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnbGIyJyxcbiAgICAgICAgICBsaXN0ZW5lcnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ2xpc3RlbmVyMicsXG4gICAgICAgICAgICAgIHBvcnQ6IDgxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHByb3BhZ2F0ZVRhZ3M6IFByb3BhZ2F0ZWRUYWdTb3VyY2UuU0VSVklDRSxcbiAgICAgIG1lbW9yeVJlc2VydmF0aW9uTWlCOiAyNTYsXG4gICAgICBzZXJ2aWNlTmFtZTogJ215U2VydmljZScsXG4gICAgICB0YXJnZXRHcm91cHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDgwLFxuICAgICAgICAgIGxpc3RlbmVyOiAnbGlzdGVuZXIxJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDkwLFxuICAgICAgICAgIGxpc3RlbmVyOiAnbGlzdGVuZXIyJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBwbGFjZW1lbnRTdHJhdGVnaWVzOiBbUGxhY2VtZW50U3RyYXRlZ3kuc3ByZWFkQWNyb3NzSW5zdGFuY2VzKCksIFBsYWNlbWVudFN0cmF0ZWd5LnBhY2tlZEJ5Q3B1KCksIFBsYWNlbWVudFN0cmF0ZWd5LnJhbmRvbWx5KCldLFxuICAgICAgcGxhY2VtZW50Q29uc3RyYWludHM6IFtQbGFjZW1lbnRDb25zdHJhaW50Lm1lbWJlck9mKCdhdHRyaWJ1dGU6ZWNzLmluc3RhbmNlLXR5cGUgPX4gbTVhLionKV0sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUNTOjpTZXJ2aWNlJywge1xuICAgICAgRGVzaXJlZENvdW50OiAzLFxuICAgICAgRW5hYmxlRUNTTWFuYWdlZFRhZ3M6IHRydWUsXG4gICAgICBFbmFibGVFeGVjdXRlQ29tbWFuZDogdHJ1ZSxcbiAgICAgIEhlYWx0aENoZWNrR3JhY2VQZXJpb2RTZWNvbmRzOiAyLFxuICAgICAgTGF1bmNoVHlwZTogJ0VDMicsXG4gICAgICBMb2FkQmFsYW5jZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBDb250YWluZXJOYW1lOiAnbXlDb250YWluZXInLFxuICAgICAgICAgIENvbnRhaW5lclBvcnQ6IDgwLFxuICAgICAgICAgIFRhcmdldEdyb3VwQXJuOiB7XG4gICAgICAgICAgICBSZWY6ICdTZXJ2aWNlbGIxbGlzdGVuZXIxRUNTVGFyZ2V0R3JvdXBteUNvbnRhaW5lcjgwR3JvdXA0MzA5OEY4QicsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIENvbnRhaW5lck5hbWU6ICdteUNvbnRhaW5lcicsXG4gICAgICAgICAgQ29udGFpbmVyUG9ydDogOTAsXG4gICAgICAgICAgVGFyZ2V0R3JvdXBBcm46IHtcbiAgICAgICAgICAgIFJlZjogJ1NlcnZpY2VsYjJsaXN0ZW5lcjJFQ1NUYXJnZXRHcm91cG15Q29udGFpbmVyOTBHcm91cERFQjQxN0U0JyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIFByb3BhZ2F0ZVRhZ3M6ICdTRVJWSUNFJyxcbiAgICAgIFNjaGVkdWxpbmdTdHJhdGVneTogJ1JFUExJQ0EnLFxuICAgICAgU2VydmljZU5hbWU6ICdteVNlcnZpY2UnLFxuICAgICAgUGxhY2VtZW50Q29uc3RyYWludHM6IFt7IFR5cGU6ICdtZW1iZXJPZicsIEV4cHJlc3Npb246ICdhdHRyaWJ1dGU6ZWNzLmluc3RhbmNlLXR5cGUgPX4gbTVhLionIH1dLFxuICAgICAgUGxhY2VtZW50U3RyYXRlZ2llczogW3sgRmllbGQ6ICdpbnN0YW5jZUlkJywgVHlwZTogJ3NwcmVhZCcgfSwgeyBGaWVsZDogJ0NQVScsIFR5cGU6ICdiaW5wYWNrJyB9LCB7IFR5cGU6ICdyYW5kb20nIH1dLFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUNTOjpUYXNrRGVmaW5pdGlvbicsIHtcbiAgICAgIENvbnRhaW5lckRlZmluaXRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBDcHU6IDI1NixcbiAgICAgICAgICBFbnZpcm9ubWVudDogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBOYW1lOiAnVEVTVF9FTlZJUk9OTUVOVF9WQVJJQUJMRTEnLFxuICAgICAgICAgICAgICBWYWx1ZTogJ3Rlc3QgZW52aXJvbm1lbnQgdmFyaWFibGUgMSB2YWx1ZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBOYW1lOiAnVEVTVF9FTlZJUk9OTUVOVF9WQVJJQUJMRTInLFxuICAgICAgICAgICAgICBWYWx1ZTogJ3Rlc3QgZW52aXJvbm1lbnQgdmFyaWFibGUgMiB2YWx1ZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgRXNzZW50aWFsOiB0cnVlLFxuICAgICAgICAgIEltYWdlOiAndGVzdCcsXG4gICAgICAgICAgTG9nQ29uZmlndXJhdGlvbjoge1xuICAgICAgICAgICAgTG9nRHJpdmVyOiAnYXdzbG9ncycsXG4gICAgICAgICAgICBPcHRpb25zOiB7XG4gICAgICAgICAgICAgICdhd3Nsb2dzLWdyb3VwJzoge1xuICAgICAgICAgICAgICAgIFJlZjogJ1NlcnZpY2VUYXNrRGVmbXlDb250YWluZXJMb2dHcm91cDBBODczNjhCJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ2F3c2xvZ3Mtc3RyZWFtLXByZWZpeCc6ICdUZXN0U3RyZWFtJyxcbiAgICAgICAgICAgICAgJ2F3c2xvZ3MtcmVnaW9uJzoge1xuICAgICAgICAgICAgICAgIFJlZjogJ0FXUzo6UmVnaW9uJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBNZW1vcnk6IDI1NixcbiAgICAgICAgICBNZW1vcnlSZXNlcnZhdGlvbjogMjU2LFxuICAgICAgICAgIE5hbWU6ICdteUNvbnRhaW5lcicsXG4gICAgICAgICAgUG9ydE1hcHBpbmdzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIENvbnRhaW5lclBvcnQ6IDgwLFxuICAgICAgICAgICAgICBIb3N0UG9ydDogMCxcbiAgICAgICAgICAgICAgUHJvdG9jb2w6ICd0Y3AnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgQ29udGFpbmVyUG9ydDogOTAsXG4gICAgICAgICAgICAgIEhvc3RQb3J0OiAwLFxuICAgICAgICAgICAgICBQcm90b2NvbDogJ3RjcCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgRG9ja2VyTGFiZWxzOiB7XG4gICAgICAgICAgICBsYWJlbDE6ICdsYWJlbFZhbHVlMScsXG4gICAgICAgICAgICBsYWJlbDI6ICdsYWJlbFZhbHVlMicsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBFeGVjdXRpb25Sb2xlQXJuOiB7XG4gICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgICdFeGVjdXRpb25Sb2xlNjA1QTA0MEInLFxuICAgICAgICAgICdBcm4nLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIEZhbWlseTogJ1NlcnZpY2VUYXNrRGVmNzlENzk1MjEnLFxuICAgICAgTmV0d29ya01vZGU6ICdicmlkZ2UnLFxuICAgICAgUmVxdWlyZXNDb21wYXRpYmlsaXRpZXM6IFtcbiAgICAgICAgJ0VDMicsXG4gICAgICBdLFxuICAgICAgVGFza1JvbGVBcm46IHtcbiAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgJ1Rhc2tSb2xlMzBGQzBGQkInLFxuICAgICAgICAgICdBcm4nLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnRW5hYmxlRXhlY3V0ZUNvbW1hbmQgZmxhZyBnZW5lcmF0ZWQgSUFNIFBlcm1pc3Npb25zJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcbiAgICBjbHVzdGVyLmFkZEFzZ0NhcGFjaXR5UHJvdmlkZXIobmV3IEFzZ0NhcGFjaXR5UHJvdmlkZXIoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cFByb3ZpZGVyJywge1xuICAgICAgYXV0b1NjYWxpbmdHcm91cDogbmV3IEF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cCcsIHtcbiAgICAgICAgdnBjLFxuICAgICAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICAgICAgICBtYWNoaW5lSW1hZ2U6IE1hY2hpbmVJbWFnZS5sYXRlc3RBbWF6b25MaW51eCgpLFxuICAgICAgfSksXG4gICAgfSkpO1xuICAgIGNvbnN0IHpvbmUgPSBuZXcgUHVibGljSG9zdGVkWm9uZShzdGFjaywgJ0hvc3RlZFpvbmUnLCB7IHpvbmVOYW1lOiAnZXhhbXBsZS5jb20nIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBOZXR3b3JrTXVsdGlwbGVUYXJnZXRHcm91cHNFYzJTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICAgIGNsdXN0ZXIsXG4gICAgICBtZW1vcnlMaW1pdE1pQjogMjU2LFxuICAgICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgICBpbWFnZTogQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCd0ZXN0JyksXG4gICAgICAgIGNvbnRhaW5lck5hbWU6ICdteUNvbnRhaW5lcicsXG4gICAgICAgIGNvbnRhaW5lclBvcnRzOiBbODAsIDkwXSxcbiAgICAgICAgZW5hYmxlTG9nZ2luZzogZmFsc2UsXG4gICAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgICAgVEVTVF9FTlZJUk9OTUVOVF9WQVJJQUJMRTE6ICd0ZXN0IGVudmlyb25tZW50IHZhcmlhYmxlIDEgdmFsdWUnLFxuICAgICAgICAgIFRFU1RfRU5WSVJPTk1FTlRfVkFSSUFCTEUyOiAndGVzdCBlbnZpcm9ubWVudCB2YXJpYWJsZSAyIHZhbHVlJyxcbiAgICAgICAgfSxcbiAgICAgICAgbG9nRHJpdmVyOiBuZXcgQXdzTG9nRHJpdmVyKHtcbiAgICAgICAgICBzdHJlYW1QcmVmaXg6ICdUZXN0U3RyZWFtJyxcbiAgICAgICAgfSksXG4gICAgICAgIGZhbWlseTogJ0VjMlRhc2tEZWYnLFxuICAgICAgICBleGVjdXRpb25Sb2xlOiBuZXcgUm9sZShzdGFjaywgJ0V4ZWN1dGlvblJvbGUnLCB7XG4gICAgICAgICAgcGF0aDogJy8nLFxuICAgICAgICAgIGFzc3VtZWRCeTogbmV3IENvbXBvc2l0ZVByaW5jaXBhbChcbiAgICAgICAgICAgIG5ldyBTZXJ2aWNlUHJpbmNpcGFsKCdlY3MuYW1hem9uYXdzLmNvbScpLFxuICAgICAgICAgICAgbmV3IFNlcnZpY2VQcmluY2lwYWwoJ2Vjcy10YXNrcy5hbWF6b25hd3MuY29tJyksXG4gICAgICAgICAgKSxcbiAgICAgICAgfSksXG4gICAgICAgIHRhc2tSb2xlOiBuZXcgUm9sZShzdGFjaywgJ1Rhc2tSb2xlJywge1xuICAgICAgICAgIGFzc3VtZWRCeTogbmV3IFNlcnZpY2VQcmluY2lwYWwoJ2Vjcy10YXNrcy5hbWF6b25hd3MuY29tJyksXG4gICAgICAgIH0pLFxuICAgICAgICBkb2NrZXJMYWJlbHM6IHsgbGFiZWwxOiAnbGFiZWxWYWx1ZTEnLCBsYWJlbDI6ICdsYWJlbFZhbHVlMicgfSxcbiAgICAgIH0sXG4gICAgICBjcHU6IDI1NixcbiAgICAgIGRlc2lyZWRDb3VudDogMyxcbiAgICAgIGVuYWJsZUVDU01hbmFnZWRUYWdzOiB0cnVlLFxuICAgICAgZW5hYmxlRXhlY3V0ZUNvbW1hbmQ6IHRydWUsXG4gICAgICBoZWFsdGhDaGVja0dyYWNlUGVyaW9kOiBEdXJhdGlvbi5taWxsaXMoMjAwMCksXG4gICAgICBsb2FkQmFsYW5jZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnbGIxJyxcbiAgICAgICAgICBkb21haW5OYW1lOiAnYXBpLmV4YW1wbGUuY29tJyxcbiAgICAgICAgICBkb21haW5ab25lOiB6b25lLFxuICAgICAgICAgIHB1YmxpY0xvYWRCYWxhbmNlcjogZmFsc2UsXG4gICAgICAgICAgbGlzdGVuZXJzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdsaXN0ZW5lcjEnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ2xiMicsXG4gICAgICAgICAgbGlzdGVuZXJzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdsaXN0ZW5lcjInLFxuICAgICAgICAgICAgICBwb3J0OiA4MSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBwcm9wYWdhdGVUYWdzOiBQcm9wYWdhdGVkVGFnU291cmNlLlNFUlZJQ0UsXG4gICAgICBtZW1vcnlSZXNlcnZhdGlvbk1pQjogMjU2LFxuICAgICAgc2VydmljZU5hbWU6ICdteVNlcnZpY2UnLFxuICAgICAgdGFyZ2V0R3JvdXBzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBjb250YWluZXJQb3J0OiA4MCxcbiAgICAgICAgICBsaXN0ZW5lcjogJ2xpc3RlbmVyMScsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBjb250YWluZXJQb3J0OiA5MCxcbiAgICAgICAgICBsaXN0ZW5lcjogJ2xpc3RlbmVyMicsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgcGxhY2VtZW50U3RyYXRlZ2llczogW1BsYWNlbWVudFN0cmF0ZWd5LnNwcmVhZEFjcm9zc0luc3RhbmNlcygpLCBQbGFjZW1lbnRTdHJhdGVneS5wYWNrZWRCeUNwdSgpLCBQbGFjZW1lbnRTdHJhdGVneS5yYW5kb21seSgpXSxcbiAgICAgIHBsYWNlbWVudENvbnN0cmFpbnRzOiBbUGxhY2VtZW50Q29uc3RyYWludC5tZW1iZXJPZignYXR0cmlidXRlOmVjcy5pbnN0YW5jZS10eXBlID1+IG01YS4qJyldLFxuICAgIH0pO1xuXG4gICAgLy8gRUNTIEV4ZWNcbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpJQU06OlBvbGljeScsIHtcbiAgICAgIFBvbGljeURvY3VtZW50OiB7XG4gICAgICAgIFN0YXRlbWVudDogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIEFjdGlvbjogW1xuICAgICAgICAgICAgICAnc3NtbWVzc2FnZXM6Q3JlYXRlQ29udHJvbENoYW5uZWwnLFxuICAgICAgICAgICAgICAnc3NtbWVzc2FnZXM6Q3JlYXRlRGF0YUNoYW5uZWwnLFxuICAgICAgICAgICAgICAnc3NtbWVzc2FnZXM6T3BlbkNvbnRyb2xDaGFubmVsJyxcbiAgICAgICAgICAgICAgJ3NzbW1lc3NhZ2VzOk9wZW5EYXRhQ2hhbm5lbCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgRWZmZWN0OiAnQWxsb3cnLFxuICAgICAgICAgICAgUmVzb3VyY2U6ICcqJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIEFjdGlvbjogJ2xvZ3M6RGVzY3JpYmVMb2dHcm91cHMnLFxuICAgICAgICAgICAgRWZmZWN0OiAnQWxsb3cnLFxuICAgICAgICAgICAgUmVzb3VyY2U6ICcqJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIEFjdGlvbjogW1xuICAgICAgICAgICAgICAnbG9nczpDcmVhdGVMb2dTdHJlYW0nLFxuICAgICAgICAgICAgICAnbG9nczpEZXNjcmliZUxvZ1N0cmVhbXMnLFxuICAgICAgICAgICAgICAnbG9nczpQdXRMb2dFdmVudHMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIEVmZmVjdDogJ0FsbG93JyxcbiAgICAgICAgICAgIFJlc291cmNlOiAnKicsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgVmVyc2lvbjogJzIwMTItMTAtMTcnLFxuICAgICAgfSxcbiAgICAgIFBvbGljeU5hbWU6ICdUYXNrUm9sZURlZmF1bHRQb2xpY3kwN0ZDNTNERScsXG4gICAgICBSb2xlczogW1xuICAgICAgICB7XG4gICAgICAgICAgUmVmOiAnVGFza1JvbGUzMEZDMEZCQicsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdhYmxlIHRvIHBhc3MgcHJlLWRlZmluZWQgdGFzayBkZWZpbml0aW9uJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgVnBjKHN0YWNrLCAnVlBDJyk7XG4gICAgY29uc3QgY2x1c3RlciA9IG5ldyBDbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuICAgIGNsdXN0ZXIuYWRkQXNnQ2FwYWNpdHlQcm92aWRlcihuZXcgQXNnQ2FwYWNpdHlQcm92aWRlcihzdGFjaywgJ0RlZmF1bHRBdXRvU2NhbGluZ0dyb3VwUHJvdmlkZXInLCB7XG4gICAgICBhdXRvU2NhbGluZ0dyb3VwOiBuZXcgQXV0b1NjYWxpbmdHcm91cChzdGFjaywgJ0RlZmF1bHRBdXRvU2NhbGluZ0dyb3VwJywge1xuICAgICAgICB2cGMsXG4gICAgICAgIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGUoJ3QyLm1pY3JvJyksXG4gICAgICAgIG1hY2hpbmVJbWFnZTogTWFjaGluZUltYWdlLmxhdGVzdEFtYXpvbkxpbnV4KCksXG4gICAgICB9KSxcbiAgICB9KSk7XG5cbiAgICBjb25zdCB0YXNrRGVmaW5pdGlvbiA9IG5ldyBFYzJUYXNrRGVmaW5pdGlvbihzdGFjaywgJ0VjMlRhc2tEZWYnKTtcbiAgICBjb25zdCBjb250YWluZXIgPSB0YXNrRGVmaW5pdGlvbi5hZGRDb250YWluZXIoJ3dlYicsIHtcbiAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ2FtYXpvbi9hbWF6b24tZWNzLXNhbXBsZScpLFxuICAgICAgbWVtb3J5TGltaXRNaUI6IDUxMixcbiAgICB9KTtcbiAgICBjb250YWluZXIuYWRkUG9ydE1hcHBpbmdzKHtcbiAgICAgIGNvbnRhaW5lclBvcnQ6IDgwLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBOZXR3b3JrTXVsdGlwbGVUYXJnZXRHcm91cHNFYzJTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICAgIGNsdXN0ZXIsXG4gICAgICB0YXNrRGVmaW5pdGlvbixcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFQ1M6OlRhc2tEZWZpbml0aW9uJywge1xuICAgICAgQ29udGFpbmVyRGVmaW5pdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIEVzc2VudGlhbDogdHJ1ZSxcbiAgICAgICAgICBJbWFnZTogJ2FtYXpvbi9hbWF6b24tZWNzLXNhbXBsZScsXG4gICAgICAgICAgTWVtb3J5OiA1MTIsXG4gICAgICAgICAgTmFtZTogJ3dlYicsXG4gICAgICAgICAgUG9ydE1hcHBpbmdzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIENvbnRhaW5lclBvcnQ6IDgwLFxuICAgICAgICAgICAgICBIb3N0UG9ydDogMCxcbiAgICAgICAgICAgICAgUHJvdG9jb2w6ICd0Y3AnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIEZhbWlseTogJ0VjMlRhc2tEZWYnLFxuICAgICAgTmV0d29ya01vZGU6ICdicmlkZ2UnLFxuICAgICAgUmVxdWlyZXNDb21wYXRpYmlsaXRpZXM6IFtcbiAgICAgICAgJ0VDMicsXG4gICAgICBdLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdlcnJvcnMgaWYgbm8gZXNzZW50aWFsIGNvbnRhaW5lciBpbiBwcmUtZGVmaW5lZCB0YXNrIGRlZmluaXRpb24nLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHZwYyA9IG5ldyBWcGMoc3RhY2ssICdWUEMnKTtcbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IENsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG4gICAgY2x1c3Rlci5hZGRBc2dDYXBhY2l0eVByb3ZpZGVyKG5ldyBBc2dDYXBhY2l0eVByb3ZpZGVyKHN0YWNrLCAnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXBQcm92aWRlcicsIHtcbiAgICAgIGF1dG9TY2FsaW5nR3JvdXA6IG5ldyBBdXRvU2NhbGluZ0dyb3VwKHN0YWNrLCAnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXAnLCB7XG4gICAgICAgIHZwYyxcbiAgICAgICAgaW5zdGFuY2VUeXBlOiBuZXcgZWMyLkluc3RhbmNlVHlwZSgndDIubWljcm8nKSxcbiAgICAgICAgbWFjaGluZUltYWdlOiBNYWNoaW5lSW1hZ2UubGF0ZXN0QW1hem9uTGludXgoKSxcbiAgICAgIH0pLFxuICAgIH0pKTtcblxuICAgIGNvbnN0IHRhc2tEZWZpbml0aW9uID0gbmV3IEVjMlRhc2tEZWZpbml0aW9uKHN0YWNrLCAnRWMyVGFza0RlZicpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBuZXcgTmV0d29ya011bHRpcGxlVGFyZ2V0R3JvdXBzRWMyU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgICAgIGNsdXN0ZXIsXG4gICAgICAgIHRhc2tEZWZpbml0aW9uLFxuICAgICAgfSk7XG4gICAgfSkudG9UaHJvdygvQXQgbGVhc3Qgb25lIGVzc2VudGlhbCBjb250YWluZXIgbXVzdCBiZSBzcGVjaWZpZWQvKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2V0IGRlZmF1bHQgbG9hZCBiYWxhbmNlciwgbGlzdGVuZXIsIHRhcmdldCBncm91cCBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHZwYyA9IG5ldyBWcGMoc3RhY2ssICdWUEMnKTtcbiAgICBjb25zdCB6b25lID0gbmV3IFB1YmxpY0hvc3RlZFpvbmUoc3RhY2ssICdIb3N0ZWRab25lJywgeyB6b25lTmFtZTogJ2V4YW1wbGUuY29tJyB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBlY3NTZXJ2aWNlID0gbmV3IE5ldHdvcmtNdWx0aXBsZVRhcmdldEdyb3Vwc0VjMlNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgICAgdnBjLFxuICAgICAgbWVtb3J5TGltaXRNaUI6IDEwMjQsXG4gICAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ3Rlc3QnKSxcbiAgICAgIH0sXG4gICAgICBsb2FkQmFsYW5jZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnbGIxJyxcbiAgICAgICAgICBsaXN0ZW5lcnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ2xpc3RlbmVyMScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnbGIyJyxcbiAgICAgICAgICBkb21haW5OYW1lOiAnYXBpLmV4YW1wbGUuY29tJyxcbiAgICAgICAgICBkb21haW5ab25lOiB6b25lLFxuICAgICAgICAgIGxpc3RlbmVyczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAnbGlzdGVuZXIyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdsaXN0ZW5lcjMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHRhcmdldEdyb3VwczogW1xuICAgICAgICB7XG4gICAgICAgICAgY29udGFpbmVyUG9ydDogODAsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBjb250YWluZXJQb3J0OiA5MCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGVjc1NlcnZpY2UubG9hZEJhbGFuY2VyLm5vZGUuaWQpLnRvRXF1YWwoJ2xiMScpO1xuICAgIGV4cGVjdChlY3NTZXJ2aWNlLmxpc3RlbmVyLm5vZGUuaWQpLnRvRXF1YWwoJ2xpc3RlbmVyMScpO1xuICAgIGV4cGVjdChlY3NTZXJ2aWNlLnRhcmdldEdyb3VwLm5vZGUuaWQpLnRvRXF1YWwoJ0VDU1RhcmdldEdyb3Vwd2ViODBHcm91cCcpO1xuICB9KTtcblxuICB0ZXN0KCdzZXR0aW5nIHZwYyBhbmQgY2x1c3RlciB0aHJvd3MgZXJyb3InLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHZwYyA9IG5ldyBWcGMoc3RhY2ssICdWUEMnKTtcbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IENsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgZXhwZWN0KCgpID0+IG5ldyBOZXR3b3JrTXVsdGlwbGVUYXJnZXRHcm91cHNFYzJTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICAgIGNsdXN0ZXIsXG4gICAgICB2cGMsXG4gICAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJy9hd3MvYXdzLWV4YW1wbGUtYXBwJyksXG4gICAgICB9LFxuICAgIH0pKS50b1Rocm93KC9Zb3UgY2FuIG9ubHkgc3BlY2lmeSBlaXRoZXIgdnBjIG9yIGNsdXN0ZXIuIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gbGVhdmUgYm90aCBibGFuay8pO1xuICB9KTtcblxuICB0ZXN0KCdjcmVhdGVzIEFXUyBDbG91ZCBNYXAgc2VydmljZSBmb3IgUHJpdmF0ZSBETlMgbmFtZXNwYWNlJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgVnBjKHN0YWNrLCAnTXlWcGMnLCB7fSk7XG4gICAgY29uc3QgY2x1c3RlciA9IG5ldyBDbHVzdGVyKHN0YWNrLCAnRWNzQ2x1c3RlcicsIHsgdnBjIH0pO1xuICAgIGNsdXN0ZXIuYWRkQXNnQ2FwYWNpdHlQcm92aWRlcihuZXcgQXNnQ2FwYWNpdHlQcm92aWRlcihzdGFjaywgJ0RlZmF1bHRBdXRvU2NhbGluZ0dyb3VwUHJvdmlkZXInLCB7XG4gICAgICBhdXRvU2NhbGluZ0dyb3VwOiBuZXcgQXV0b1NjYWxpbmdHcm91cChzdGFjaywgJ0RlZmF1bHRBdXRvU2NhbGluZ0dyb3VwJywge1xuICAgICAgICB2cGMsXG4gICAgICAgIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGUoJ3QyLm1pY3JvJyksXG4gICAgICAgIG1hY2hpbmVJbWFnZTogTWFjaGluZUltYWdlLmxhdGVzdEFtYXpvbkxpbnV4KCksXG4gICAgICB9KSxcbiAgICB9KSk7XG5cbiAgICAvLyBXSEVOXG4gICAgY2x1c3Rlci5hZGREZWZhdWx0Q2xvdWRNYXBOYW1lc3BhY2Uoe1xuICAgICAgbmFtZTogJ2Zvby5jb20nLFxuICAgICAgdHlwZTogTmFtZXNwYWNlVHlwZS5ETlNfUFJJVkFURSxcbiAgICB9KTtcblxuICAgIG5ldyBOZXR3b3JrTXVsdGlwbGVUYXJnZXRHcm91cHNFYzJTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICAgIGNsdXN0ZXIsXG4gICAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ2hlbGxvJyksXG4gICAgICB9LFxuICAgICAgY2xvdWRNYXBPcHRpb25zOiB7XG4gICAgICAgIG5hbWU6ICdteUFwcCcsXG4gICAgICB9LFxuICAgICAgbWVtb3J5TGltaXRNaUI6IDUxMixcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFQ1M6OlNlcnZpY2UnLCB7XG4gICAgICBTZXJ2aWNlUmVnaXN0cmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgQ29udGFpbmVyTmFtZTogJ3dlYicsXG4gICAgICAgICAgQ29udGFpbmVyUG9ydDogODAsXG4gICAgICAgICAgUmVnaXN0cnlBcm46IHtcbiAgICAgICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgICAgICAnU2VydmljZUNsb3VkbWFwU2VydmljZURFNzZCMjlEJyxcbiAgICAgICAgICAgICAgJ0FybicsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6U2VydmljZURpc2NvdmVyeTo6U2VydmljZScsIHtcbiAgICAgIERuc0NvbmZpZzoge1xuICAgICAgICBEbnNSZWNvcmRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgVFRMOiA2MCxcbiAgICAgICAgICAgIFR5cGU6ICdTUlYnLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIE5hbWVzcGFjZUlkOiB7XG4gICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgICAnRWNzQ2x1c3RlckRlZmF1bHRTZXJ2aWNlRGlzY292ZXJ5TmFtZXNwYWNlQjA5NzFCMkYnLFxuICAgICAgICAgICAgJ0lkJyxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBSb3V0aW5nUG9saWN5OiAnTVVMVElWQUxVRScsXG4gICAgICB9LFxuICAgICAgSGVhbHRoQ2hlY2tDdXN0b21Db25maWc6IHtcbiAgICAgICAgRmFpbHVyZVRocmVzaG9sZDogMSxcbiAgICAgIH0sXG4gICAgICBOYW1lOiAnbXlBcHAnLFxuICAgICAgTmFtZXNwYWNlSWQ6IHtcbiAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgJ0Vjc0NsdXN0ZXJEZWZhdWx0U2VydmljZURpc2NvdmVyeU5hbWVzcGFjZUIwOTcxQjJGJyxcbiAgICAgICAgICAnSWQnLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnZXJyb3JzIHdoZW4gc2V0dGluZyBib3RoIHRhc2tEZWZpbml0aW9uIGFuZCB0YXNrSW1hZ2VPcHRpb25zJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgVnBjKHN0YWNrLCAnVlBDJyk7XG4gICAgY29uc3QgY2x1c3RlciA9IG5ldyBDbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuICAgIGNsdXN0ZXIuYWRkQXNnQ2FwYWNpdHlQcm92aWRlcihuZXcgQXNnQ2FwYWNpdHlQcm92aWRlcihzdGFjaywgJ0RlZmF1bHRBdXRvU2NhbGluZ0dyb3VwUHJvdmlkZXInLCB7XG4gICAgICBhdXRvU2NhbGluZ0dyb3VwOiBuZXcgQXV0b1NjYWxpbmdHcm91cChzdGFjaywgJ0RlZmF1bHRBdXRvU2NhbGluZ0dyb3VwJywge1xuICAgICAgICB2cGMsXG4gICAgICAgIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGUoJ3QyLm1pY3JvJyksXG4gICAgICAgIG1hY2hpbmVJbWFnZTogTWFjaGluZUltYWdlLmxhdGVzdEFtYXpvbkxpbnV4KCksXG4gICAgICB9KSxcbiAgICB9KSk7XG5cbiAgICBjb25zdCB0YXNrRGVmaW5pdGlvbiA9IG5ldyBFYzJUYXNrRGVmaW5pdGlvbihzdGFjaywgJ0VjMlRhc2tEZWYnKTtcbiAgICB0YXNrRGVmaW5pdGlvbi5hZGRDb250YWluZXIoJ3Rlc3QnLCB7XG4gICAgICBpbWFnZTogQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhbWF6b24vYW1hem9uLWVjcy1zYW1wbGUnKSxcbiAgICAgIG1lbW9yeUxpbWl0TWlCOiA1MTIsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIG5ldyBOZXR3b3JrTXVsdGlwbGVUYXJnZXRHcm91cHNFYzJTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICAgICAgY2x1c3RlcixcbiAgICAgICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ3Rlc3QnKSxcbiAgICAgICAgfSxcbiAgICAgICAgdGFza0RlZmluaXRpb24sXG4gICAgICB9KTtcbiAgICB9KS50b1Rocm93KC9Zb3UgbXVzdCBzcGVjaWZ5IG9ubHkgb25lIG9mIFRhc2tEZWZpbml0aW9uIG9yIFRhc2tJbWFnZU9wdGlvbnMuLyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Vycm9ycyB3aGVuIHNldHRpbmcgbmVpdGhlciB0YXNrRGVmaW5pdGlvbiBub3IgdGFza0ltYWdlT3B0aW9ucycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcbiAgICBjbHVzdGVyLmFkZEFzZ0NhcGFjaXR5UHJvdmlkZXIobmV3IEFzZ0NhcGFjaXR5UHJvdmlkZXIoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cFByb3ZpZGVyJywge1xuICAgICAgYXV0b1NjYWxpbmdHcm91cDogbmV3IEF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cCcsIHtcbiAgICAgICAgdnBjLFxuICAgICAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICAgICAgICBtYWNoaW5lSW1hZ2U6IE1hY2hpbmVJbWFnZS5sYXRlc3RBbWF6b25MaW51eCgpLFxuICAgICAgfSksXG4gICAgfSkpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBuZXcgTmV0d29ya011bHRpcGxlVGFyZ2V0R3JvdXBzRWMyU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgICAgIGNsdXN0ZXIsXG4gICAgICB9KTtcbiAgICB9KS50b1Rocm93KC9Zb3UgbXVzdCBzcGVjaWZ5IG9uZSBvZjogdGFza0RlZmluaXRpb24gb3IgaW1hZ2UvKTtcbiAgfSk7XG5cbiAgdGVzdCgnZXJyb3JzIHdoZW4gc2V0dGluZyBkb21haW5OYW1lIGJ1dCBub3QgZG9tYWluWm9uZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcbiAgICBjbHVzdGVyLmFkZEFzZ0NhcGFjaXR5UHJvdmlkZXIobmV3IEFzZ0NhcGFjaXR5UHJvdmlkZXIoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cFByb3ZpZGVyJywge1xuICAgICAgYXV0b1NjYWxpbmdHcm91cDogbmV3IEF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cCcsIHtcbiAgICAgICAgdnBjLFxuICAgICAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICAgICAgICBtYWNoaW5lSW1hZ2U6IE1hY2hpbmVJbWFnZS5sYXRlc3RBbWF6b25MaW51eCgpLFxuICAgICAgfSksXG4gICAgfSkpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBuZXcgTmV0d29ya011bHRpcGxlVGFyZ2V0R3JvdXBzRWMyU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgICAgIGNsdXN0ZXIsXG4gICAgICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgICAgICBpbWFnZTogQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCd0ZXN0JyksXG4gICAgICAgIH0sXG4gICAgICAgIGxvYWRCYWxhbmNlcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnbGIxJyxcbiAgICAgICAgICAgIGRvbWFpbk5hbWU6ICdhcGkuZXhhbXBsZS5jb20nLFxuICAgICAgICAgICAgbGlzdGVuZXJzOiBbe1xuICAgICAgICAgICAgICBuYW1lOiAnbGlzdGVuZXIxJyxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9KTtcbiAgICB9KS50b1Rocm93KC9BIFJvdXRlNTMgaG9zdGVkIGRvbWFpbiB6b25lIG5hbWUgaXMgcmVxdWlyZWQgdG8gY29uZmlndXJlIHRoZSBzcGVjaWZpZWQgZG9tYWluIG5hbWUvKTtcbiAgfSk7XG5cbiAgdGVzdCgnZXJyb3JzIHdoZW4gbG9hZEJhbGFuY2VycyBpcyBlbXB0eScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgbmV3IE5ldHdvcmtNdWx0aXBsZVRhcmdldEdyb3Vwc0VjMlNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgICAgICBjbHVzdGVyLFxuICAgICAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICAgICAgaW1hZ2U6IENvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgndGVzdCcpLFxuICAgICAgICB9LFxuICAgICAgICBsb2FkQmFsYW5jZXJzOiBbXSxcbiAgICAgIH0pO1xuICAgIH0pLnRvVGhyb3coL0F0IGxlYXN0IG9uZSBsb2FkIGJhbGFuY2VyIG11c3QgYmUgc3BlY2lmaWVkLyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Vycm9ycyB3aGVuIHRhcmdldEdyb3VwcyBpcyBlbXB0eScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgbmV3IE5ldHdvcmtNdWx0aXBsZVRhcmdldEdyb3Vwc0VjMlNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgICAgICBjbHVzdGVyLFxuICAgICAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICAgICAgaW1hZ2U6IENvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgndGVzdCcpLFxuICAgICAgICB9LFxuICAgICAgICB0YXJnZXRHcm91cHM6IFtdLFxuICAgICAgfSk7XG4gICAgfSkudG9UaHJvdygvQXQgbGVhc3Qgb25lIHRhcmdldCBncm91cCBzaG91bGQgYmUgc3BlY2lmaWVkLyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Vycm9ycyB3aGVuIG5vIGxpc3RlbmVyIHNwZWNpZmllZCcsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgbmV3IE5ldHdvcmtNdWx0aXBsZVRhcmdldEdyb3Vwc0VjMlNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgICAgICBjbHVzdGVyLFxuICAgICAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICAgICAgaW1hZ2U6IENvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgndGVzdCcpLFxuICAgICAgICB9LFxuICAgICAgICBsb2FkQmFsYW5jZXJzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ2xiJyxcbiAgICAgICAgICAgIGxpc3RlbmVyczogW10sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0pO1xuICAgIH0pLnRvVGhyb3coL0F0IGxlYXN0IG9uZSBsaXN0ZW5lciBtdXN0IGJlIHNwZWNpZmllZC8pO1xuICB9KTtcblxuICB0ZXN0KCdlcnJvcnMgd2hlbiBsaXN0ZW5lciBpcyBub3QgZGVmaW5lZCBidXQgdXNlZCBpbiBjcmVhdGluZyB0YXJnZXQgZ3JvdXBzJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgVnBjKHN0YWNrLCAnVlBDJyk7XG4gICAgY29uc3QgY2x1c3RlciA9IG5ldyBDbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBuZXcgTmV0d29ya011bHRpcGxlVGFyZ2V0R3JvdXBzRWMyU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgICAgIGNsdXN0ZXIsXG4gICAgICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgICAgICBpbWFnZTogQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCd0ZXN0JyksXG4gICAgICAgIH0sXG4gICAgICAgIGxvYWRCYWxhbmNlcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnbGInLFxuICAgICAgICAgICAgbGlzdGVuZXJzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnbGlzdGVuZXIxJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgdGFyZ2V0R3JvdXBzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29udGFpbmVyUG9ydDogODAsXG4gICAgICAgICAgICBsaXN0ZW5lcjogJ2xpc3RlbmVyMicsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0pO1xuICAgIH0pLnRvVGhyb3coL0xpc3RlbmVyIGxpc3RlbmVyMiBpcyBub3QgZGVmaW5lZC4gRGlkIHlvdSBkZWZpbmUgbGlzdGVuZXIgd2l0aCBuYW1lIGxpc3RlbmVyMj8vKTtcbiAgfSk7XG5cbiAgdGVzdCgnZXJyb3JzIGlmIGRlc2lyZWRUYXNrQ291bnQgaXMgMCcsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcbiAgICBjbHVzdGVyLmFkZEFzZ0NhcGFjaXR5UHJvdmlkZXIobmV3IEFzZ0NhcGFjaXR5UHJvdmlkZXIoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cFByb3ZpZGVyJywge1xuICAgICAgYXV0b1NjYWxpbmdHcm91cDogbmV3IEF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cCcsIHtcbiAgICAgICAgdnBjLFxuICAgICAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICAgICAgICBtYWNoaW5lSW1hZ2U6IE1hY2hpbmVJbWFnZS5sYXRlc3RBbWF6b25MaW51eCgpLFxuICAgICAgfSksXG4gICAgfSkpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCgoKSA9PlxuICAgICAgbmV3IE5ldHdvcmtNdWx0aXBsZVRhcmdldEdyb3Vwc0VjMlNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgICAgICBjbHVzdGVyLFxuICAgICAgICBtZW1vcnlMaW1pdE1pQjogMTAyNCxcbiAgICAgICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgICAgIGltYWdlOiBDb250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ3Rlc3QnKSxcbiAgICAgICAgfSxcbiAgICAgICAgZGVzaXJlZENvdW50OiAwLFxuICAgICAgfSkpLnRvVGhyb3coL1lvdSBtdXN0IHNwZWNpZnkgYSBkZXNpcmVkQ291bnQgZ3JlYXRlciB0aGFuIDAvKTtcbiAgfSk7XG59KTtcbiJdfQ==