"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const aws_autoscaling_1 = require("../../../aws-autoscaling");
const autoscaling = require("../../../aws-autoscaling");
const aws_ec2_1 = require("../../../aws-ec2");
const ec2 = require("../../../aws-ec2");
const aws_ecs_1 = require("../../../aws-ecs");
const ecs = require("../../../aws-ecs");
const sqs = require("../../../aws-sqs");
const aws_sqs_1 = require("../../../aws-sqs");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const cdk = require("../../../core");
const ecsPatterns = require("../../lib");
test('test ECS queue worker service construct - with only required props', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    // WHEN
    new ecsPatterns.QueueProcessingEc2Service(stack, 'Service', {
        cluster,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
    });
    // THEN - QueueWorker is of EC2 launch type, an SQS queue is created and all default properties are set.
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        LaunchType: 'EC2',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        RedrivePolicy: {
            deadLetterTargetArn: {
                'Fn::GetAtt': [
                    'ServiceEcsProcessingDeadLetterQueue4A89196E',
                    'Arn',
                ],
            },
            maxReceiveCount: 3,
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        MessageRetentionPeriod: 1209600,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Environment: [
                    {
                        Name: 'QUEUE_NAME',
                        Value: {
                            'Fn::GetAtt': [
                                'ServiceEcsProcessingQueueC266885C',
                                'QueueName',
                            ],
                        },
                    },
                ],
                LogConfiguration: {
                    LogDriver: 'awslogs',
                    Options: {
                        'awslogs-group': {
                            Ref: 'ServiceQueueProcessingTaskDefQueueProcessingContainerLogGroupD52338D1',
                        },
                        'awslogs-stream-prefix': 'Service',
                        'awslogs-region': {
                            Ref: 'AWS::Region',
                        },
                    },
                },
                Essential: true,
                Image: 'test',
                Memory: 512,
            }),
        ],
        Family: 'ServiceQueueProcessingTaskDef83DB34F1',
    });
});
test('test ECS queue worker service construct - with optional props for queues', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    // WHEN
    new ecsPatterns.QueueProcessingEc2Service(stack, 'Service', {
        cluster,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
        maxReceiveCount: 42,
        retentionPeriod: cdk.Duration.days(7),
        visibilityTimeout: cdk.Duration.minutes(5),
    });
    // THEN - QueueWorker is of EC2 launch type, an SQS queue is created and all default properties are set.
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        LaunchType: 'EC2',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        RedrivePolicy: {
            deadLetterTargetArn: {
                'Fn::GetAtt': [
                    'ServiceEcsProcessingDeadLetterQueue4A89196E',
                    'Arn',
                ],
            },
            maxReceiveCount: 42,
        },
        VisibilityTimeout: 300,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        MessageRetentionPeriod: 604800,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Environment: [
                    {
                        Name: 'QUEUE_NAME',
                        Value: {
                            'Fn::GetAtt': [
                                'ServiceEcsProcessingQueueC266885C',
                                'QueueName',
                            ],
                        },
                    },
                ],
                LogConfiguration: {
                    LogDriver: 'awslogs',
                    Options: {
                        'awslogs-group': {
                            Ref: 'ServiceQueueProcessingTaskDefQueueProcessingContainerLogGroupD52338D1',
                        },
                        'awslogs-stream-prefix': 'Service',
                        'awslogs-region': {
                            Ref: 'AWS::Region',
                        },
                    },
                },
                Essential: true,
                Image: 'test',
                Memory: 512,
            }),
        ],
        Family: 'ServiceQueueProcessingTaskDef83DB34F1',
    });
});
test('test ECS queue worker service construct - with ECS Exec', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    // WHEN
    new ecsPatterns.QueueProcessingFargateService(stack, 'Service', {
        cluster,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
        enableExecuteCommand: true,
    });
    // THEN
    // ECS Exec
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        EnableExecuteCommand: true,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: [
                        'ssmmessages:CreateControlChannel',
                        'ssmmessages:CreateDataChannel',
                        'ssmmessages:OpenControlChannel',
                        'ssmmessages:OpenDataChannel',
                    ],
                    Effect: 'Allow',
                    Resource: '*',
                },
                {
                    Action: 'logs:DescribeLogGroups',
                    Effect: 'Allow',
                    Resource: '*',
                },
                {
                    Action: [
                        'logs:CreateLogStream',
                        'logs:DescribeLogStreams',
                        'logs:PutLogEvents',
                    ],
                    Effect: 'Allow',
                    Resource: '*',
                },
                {
                    Action: [
                        'sqs:ReceiveMessage',
                        'sqs:ChangeMessageVisibility',
                        'sqs:GetQueueUrl',
                        'sqs:DeleteMessage',
                        'sqs:GetQueueAttributes',
                    ],
                    Effect: 'Allow',
                    Resource: {
                        'Fn::GetAtt': [
                            'ServiceEcsProcessingQueueC266885C',
                            'Arn',
                        ],
                    },
                },
            ],
            Version: '2012-10-17',
        },
        PolicyName: 'ServiceQueueProcessingTaskDefTaskRoleDefaultPolicy11D50174',
        Roles: [
            {
                Ref: 'ServiceQueueProcessingTaskDefTaskRoleBDE5D3C6',
            },
        ],
    });
});
(0, cdk_build_tools_1.testDeprecated)('test ECS queue worker service construct - with optional props', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    const queue = new sqs.Queue(stack, 'ecs-test-queue', {
        queueName: 'ecs-test-sqs-queue',
    });
    // WHEN
    new ecsPatterns.QueueProcessingEc2Service(stack, 'Service', {
        cluster,
        memoryLimitMiB: 1024,
        image: ecs.ContainerImage.fromRegistry('test'),
        command: ['-c', '4', 'amazon.com'],
        enableLogging: false,
        environment: {
            TEST_ENVIRONMENT_VARIABLE1: 'test environment variable 1 value',
            TEST_ENVIRONMENT_VARIABLE2: 'test environment variable 2 value',
        },
        queue,
        maxScalingCapacity: 5,
        minHealthyPercent: 60,
        maxHealthyPercent: 150,
        serviceName: 'ecs-test-service',
        family: 'ecs-task-family',
        circuitBreaker: { rollback: true },
        gpuCount: 256,
        placementStrategies: [ecs.PlacementStrategy.spreadAcrossInstances(), ecs.PlacementStrategy.packedByCpu(), ecs.PlacementStrategy.randomly()],
        placementConstraints: [ecs.PlacementConstraint.memberOf('attribute:ecs.instance-type =~ m5a.*')],
    });
    // THEN - QueueWorker is of EC2 launch type, an SQS queue is created and all optional properties are set.
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        DeploymentConfiguration: {
            MinimumHealthyPercent: 60,
            MaximumPercent: 150,
            DeploymentCircuitBreaker: {
                Enable: true,
                Rollback: true,
            },
        },
        LaunchType: 'EC2',
        ServiceName: 'ecs-test-service',
        DeploymentController: {
            Type: 'ECS',
        },
        PlacementConstraints: [{ Type: 'memberOf', Expression: 'attribute:ecs.instance-type =~ m5a.*' }],
        PlacementStrategies: [{ Field: 'instanceId', Type: 'spread' }, { Field: 'CPU', Type: 'binpack' }, { Type: 'random' }],
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        QueueName: 'ecs-test-sqs-queue',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Command: [
                    '-c',
                    '4',
                    'amazon.com',
                ],
                Environment: [
                    {
                        Name: 'TEST_ENVIRONMENT_VARIABLE1',
                        Value: 'test environment variable 1 value',
                    },
                    {
                        Name: 'TEST_ENVIRONMENT_VARIABLE2',
                        Value: 'test environment variable 2 value',
                    },
                    {
                        Name: 'QUEUE_NAME',
                        Value: {
                            'Fn::GetAtt': [
                                'ecstestqueueD1FDA34B',
                                'QueueName',
                            ],
                        },
                    },
                ],
                Image: 'test',
                Memory: 1024,
                ResourceRequirements: [
                    {
                        Type: 'GPU',
                        Value: '256',
                    },
                ],
            }),
        ],
        Family: 'ecs-task-family',
    });
});
(0, cdk_build_tools_1.testDeprecated)('throws if desiredTaskCount and maxScalingCapacity are 0', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    // THEN
    expect(() => new ecsPatterns.QueueProcessingEc2Service(stack, 'Service', {
        cluster,
        desiredTaskCount: 0,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
    })).toThrow(/maxScalingCapacity must be set and greater than 0 if desiredCount is 0/);
});
test('can set custom containerName', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    // WHEN
    new ecsPatterns.QueueProcessingEc2Service(stack, 'Service', {
        cluster,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
        containerName: 'my-container',
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Name: 'my-container',
            }),
        ],
    });
});
test('can set capacity provider strategies', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    const autoScalingGroup = new autoscaling.AutoScalingGroup(stack, 'asg', {
        vpc,
        instanceType: new ec2.InstanceType('bogus'),
        machineImage: ecs.EcsOptimizedImage.amazonLinux2(),
    });
    const capacityProvider = new ecs.AsgCapacityProvider(stack, 'provider', {
        autoScalingGroup,
    });
    cluster.addAsgCapacityProvider(capacityProvider);
    // WHEN
    new ecsPatterns.QueueProcessingEc2Service(stack, 'Service', {
        cluster,
        image: ecs.ContainerImage.fromRegistry('test'),
        memoryLimitMiB: 512,
        capacityProviderStrategies: [
            {
                capacityProvider: capacityProvider.capacityProviderName,
            },
        ],
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        LaunchType: assertions_1.Match.absent(),
        CapacityProviderStrategy: [
            {
                CapacityProvider: {
                    Ref: 'providerD3FF4D3A',
                },
            },
        ],
    });
});
it('can set queue props by queue construct', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    const queue = new aws_sqs_1.Queue(stack, 'Queue', {
        queueName: 'custom-queue',
        visibilityTimeout: cdk.Duration.seconds(200),
        deadLetterQueue: {
            queue: new aws_sqs_1.Queue(stack, 'DeadLetterQueue', {
                queueName: 'custom-dead-letter-queue',
                retentionPeriod: cdk.Duration.seconds(100),
            }),
            maxReceiveCount: 10,
        },
    });
    // WHEN
    new ecsPatterns.QueueProcessingEc2Service(stack, 'Service', {
        cluster: cluster,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
        queue: queue,
    });
    // Queue
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        QueueName: 'custom-queue',
        VisibilityTimeout: 200,
        RedrivePolicy: {
            maxReceiveCount: 10,
        },
    });
    // DLQ
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        QueueName: 'custom-dead-letter-queue',
        MessageRetentionPeriod: 100,
    });
});
it('can set queue props by QueueProcessingServiceBaseProps', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    // WHEN
    new ecsPatterns.QueueProcessingEc2Service(stack, 'Service', {
        cluster: cluster,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
        retentionPeriod: cdk.Duration.seconds(100),
        visibilityTimeout: cdk.Duration.seconds(200),
        maxReceiveCount: 10,
    });
    // Queue
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        QueueName: assertions_1.Match.absent(),
        VisibilityTimeout: 200,
        RedrivePolicy: {
            maxReceiveCount: 10,
        },
    });
    // DLQ
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        QueueName: assertions_1.Match.absent(),
        MessageRetentionPeriod: 100,
    });
});
it('throws validation errors of the specific queue prop, when setting queue and queue related props at same time', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const queue = new aws_sqs_1.Queue(stack, 'Queue');
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    // Setting all retentionPeriod, visibilityTimeout and maxReceiveCount
    expect(() => {
        new ecsPatterns.QueueProcessingEc2Service(stack, 'Service1', {
            cluster: cluster,
            memoryLimitMiB: 512,
            image: ecs.ContainerImage.fromRegistry('test'),
            queue: queue,
            retentionPeriod: cdk.Duration.seconds(100),
            visibilityTimeout: cdk.Duration.seconds(200),
            maxReceiveCount: 10,
        });
    }).toThrow(new Error('retentionPeriod, visibilityTimeout, maxReceiveCount can be set only when queue is not set. Specify them in the QueueProps of the queue'));
    // Setting only visibilityTimeout
    expect(() => {
        new ecsPatterns.QueueProcessingFargateService(stack, 'Service2', {
            image: ecs.ContainerImage.fromRegistry('test'),
            queue: queue,
            visibilityTimeout: cdk.Duration.seconds(200),
        });
    }).toThrow(new Error('visibilityTimeout can be set only when queue is not set. Specify them in the QueueProps of the queue'));
});
//# sourceMappingURL=data:application/json;base64,