"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const aws_autoscaling_1 = require("../../../aws-autoscaling");
const aws_certificatemanager_1 = require("../../../aws-certificatemanager");
const ec2 = require("../../../aws-ec2");
const aws_ec2_1 = require("../../../aws-ec2");
const ecs = require("../../../aws-ecs");
const aws_ecs_1 = require("../../../aws-ecs");
const aws_elasticloadbalancingv2_1 = require("../../../aws-elasticloadbalancingv2");
const iam = require("../../../aws-iam");
const route53 = require("../../../aws-route53");
const cdk = require("../../../core");
const ecsPatterns = require("../../lib");
test('setting loadBalancerType to Network creates an NLB Public', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        cluster,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::LoadBalancer', {
        Type: 'network',
        Scheme: 'internet-facing',
    });
});
test('setting loadBalancerType to Network and publicLoadBalancer to false creates an NLB Private', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        cluster,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
        publicLoadBalancer: false,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::LoadBalancer', {
        Type: 'network',
        Scheme: 'internal',
    });
});
test('setting vpc and cluster throws error', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    expect(() => new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        cluster,
        vpc,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
    })).toThrow();
});
test('setting executionRole updated taskDefinition with given execution role', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    const executionRole = new iam.Role(stack, 'ExecutionRole', {
        path: '/',
        assumedBy: new iam.CompositePrincipal(new iam.ServicePrincipal('ecs.amazonaws.com'), new iam.ServicePrincipal('ecs-tasks.amazonaws.com')),
    });
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        cluster,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
            executionRole,
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ExecutionRoleArn: { 'Fn::GetAtt': ['ExecutionRole605A040B', 'Arn'] },
    });
});
test('setting taskRole updated taskDefinition with given task role', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    const taskRole = new iam.Role(stack, 'taskRoleTest', {
        path: '/',
        assumedBy: new iam.CompositePrincipal(new iam.ServicePrincipal('ecs.amazonaws.com'), new iam.ServicePrincipal('ecs-tasks.amazonaws.com')),
    });
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        cluster,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
            taskRole,
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        TaskRoleArn: { 'Fn::GetAtt': ['taskRoleTest9DA66B6E', 'Arn'] },
    });
});
test('setting containerName updates container name with given name', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        cluster,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
            containerName: 'bob',
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Name: 'bob',
            }),
        ],
    });
});
test('not setting containerName updates container name with default', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        cluster,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Name: 'web',
            }),
        ],
    });
});
test('setting servicename updates service name with given name', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        cluster,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
        serviceName: 'bob',
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        ServiceName: 'bob',
    });
});
test('not setting servicename updates service name with default', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        cluster,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        ServiceName: assertions_1.Match.absent(),
    });
});
test('setting healthCheckGracePeriod works', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
        healthCheckGracePeriod: cdk.Duration.seconds(600),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        HealthCheckGracePeriodSeconds: 600,
    });
});
test('selecting correct vpcSubnets', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'Vpc', {
        maxAzs: 2,
        subnetConfiguration: [
            {
                subnetType: ec2.SubnetType.PUBLIC,
                cidrMask: 20,
                name: 'Public',
            },
            {
                subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
                cidrMask: 20,
                name: 'ISOLATED',
            },
        ],
    });
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        vpc,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
        taskSubnets: {
            subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        NetworkConfiguration: {
            AwsvpcConfiguration: {
                Subnets: [
                    {
                        Ref: 'VpcISOLATEDSubnet1Subnet80F07FA0',
                    },
                    {
                        Ref: 'VpcISOLATEDSubnet2SubnetB0B548C3',
                    },
                ],
            },
        },
    });
});
test('target group uses HTTP/80 as default', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::TargetGroup', {
        Port: 80,
        Protocol: 'HTTP',
    });
});
test('target group uses HTTPS/443 when configured', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
        targetProtocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::TargetGroup', {
        Port: 443,
        Protocol: 'HTTPS',
    });
});
test('setting platform version', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
        platformVersion: ecs.FargatePlatformVersion.VERSION1_4,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        PlatformVersion: ecs.FargatePlatformVersion.VERSION1_4,
    });
});
test('test load balanced service with family defined', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        cluster,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
            enableLogging: false,
            environment: {
                TEST_ENVIRONMENT_VARIABLE1: 'test environment variable 1 value',
                TEST_ENVIRONMENT_VARIABLE2: 'test environment variable 2 value',
            },
            family: 'fargate-task-family',
        },
        desiredCount: 2,
        memoryLimitMiB: 512,
        serviceName: 'fargate-test-service',
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        DesiredCount: 2,
        LaunchType: 'FARGATE',
        ServiceName: 'fargate-test-service',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Environment: [
                    {
                        Name: 'TEST_ENVIRONMENT_VARIABLE1',
                        Value: 'test environment variable 1 value',
                    },
                    {
                        Name: 'TEST_ENVIRONMENT_VARIABLE2',
                        Value: 'test environment variable 2 value',
                    },
                ],
                Image: '/aws/aws-example-app',
            }),
        ],
        Family: 'fargate-task-family',
    });
});
test('setting ALB deployment controller', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
        deploymentController: {
            type: ecs.DeploymentControllerType.CODE_DEPLOY,
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        DeploymentController: {
            Type: 'CODE_DEPLOY',
        },
    });
});
test('setting a command for taskImageOptions in an ApplicationLoadBalancedFargateService works', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
            command: ['./app/bin/start.sh', '--foo'],
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Image: '/aws/aws-example-app',
                Command: ['./app/bin/start.sh', '--foo'],
            }),
        ],
    });
});
test('setting an entryPoint for taskImageOptions in an ApplicationLoadBalancedFargateService works', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
            entryPoint: ['echo', 'foo'],
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Image: '/aws/aws-example-app',
                EntryPoint: ['echo', 'foo'],
            }),
        ],
    });
});
test('setting NLB deployment controller', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
        deploymentController: {
            type: ecs.DeploymentControllerType.CODE_DEPLOY,
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        DeploymentController: {
            Type: 'CODE_DEPLOY',
        },
    });
});
test('setting ALB circuitBreaker works', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
        circuitBreaker: { rollback: true },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        DeploymentConfiguration: {
            DeploymentCircuitBreaker: {
                Enable: true,
                Rollback: true,
            },
        },
        DeploymentController: {
            Type: 'ECS',
        },
    });
});
test('setting NLB circuitBreaker works', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
        },
        circuitBreaker: { rollback: true },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        DeploymentConfiguration: {
            DeploymentCircuitBreaker: {
                Enable: true,
                Rollback: true,
            },
        },
        DeploymentController: {
            Type: 'ECS',
        },
    });
});
test('setting NLB special listener port to create the listener', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'FargateNlbService', {
        cluster,
        listenerPort: 2015,
        taskImageOptions: {
            containerPort: 2015,
            image: ecs.ContainerImage.fromRegistry('abiosoft/caddy'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::Listener', {
        DefaultActions: [
            assertions_1.Match.objectLike({
                Type: 'forward',
            }),
        ],
        Port: 2015,
        Protocol: 'TCP',
    });
});
test('setting ALB special listener port to create the listener', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'FargateAlbService', {
        cluster,
        listenerPort: 2015,
        taskImageOptions: {
            containerPort: 2015,
            image: ecs.ContainerImage.fromRegistry('abiosoft/caddy'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::Listener', {
        DefaultActions: [
            assertions_1.Match.objectLike({
                Type: 'forward',
            }),
        ],
        Port: 2015,
        Protocol: 'HTTP',
    });
});
test('setting ALB HTTPS protocol to create the listener on 443', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'FargateAlbService', {
        cluster,
        protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
        domainName: 'domain.com',
        domainZone: route53.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
            hostedZoneId: 'fakeId',
            zoneName: 'domain.com',
        }),
        taskImageOptions: {
            containerPort: 2015,
            image: ecs.ContainerImage.fromRegistry('abiosoft/caddy'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::Listener', {
        DefaultActions: [
            assertions_1.Match.objectLike({
                Type: 'forward',
            }),
        ],
        Port: 443,
        Protocol: 'HTTPS',
    });
});
test('setting ALB HTTPS correctly sets the recordset name', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'FargateAlbService', {
        cluster,
        protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
        domainName: 'test.domain.com',
        domainZone: route53.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
            hostedZoneId: 'fakeId',
            zoneName: 'domain.com.',
        }),
        taskImageOptions: {
            containerPort: 2015,
            image: ecs.ContainerImage.fromRegistry('abiosoft/caddy'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Name: 'test.domain.com.',
    });
});
test('setting ALB cname option correctly sets the recordset type', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'FargateAlbService', {
        cluster,
        protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
        domainName: 'test.domain.com',
        domainZone: route53.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
            hostedZoneId: 'fakeId',
            zoneName: 'domain.com.',
        }),
        recordType: ecsPatterns.ApplicationLoadBalancedServiceRecordType.CNAME,
        taskImageOptions: {
            containerPort: 2015,
            image: ecs.ContainerImage.fromRegistry('abiosoft/caddy'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Name: 'test.domain.com.',
        Type: 'CNAME',
    });
});
test('setting ALB record type to NONE correctly omits the recordset', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'FargateAlbService', {
        cluster,
        protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
        domainName: 'test.domain.com',
        domainZone: route53.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
            hostedZoneId: 'fakeId',
            zoneName: 'domain.com.',
        }),
        recordType: ecsPatterns.ApplicationLoadBalancedServiceRecordType.NONE,
        taskImageOptions: {
            containerPort: 2015,
            image: ecs.ContainerImage.fromRegistry('abiosoft/caddy'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Route53::RecordSet', 0);
});
test('setting NLB cname option correctly sets the recordset type', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'FargateNlbService', {
        cluster,
        domainName: 'test.domain.com',
        domainZone: route53.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
            hostedZoneId: 'fakeId',
            zoneName: 'domain.com.',
        }),
        recordType: ecsPatterns.NetworkLoadBalancedServiceRecordType.CNAME,
        taskImageOptions: {
            containerPort: 2015,
            image: ecs.ContainerImage.fromRegistry('abiosoft/caddy'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Name: 'test.domain.com.',
        Type: 'CNAME',
    });
});
test('setting NLB record type to NONE correctly omits the recordset', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'FargateNlbService', {
        cluster,
        domainName: 'test.domain.com',
        domainZone: route53.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
            hostedZoneId: 'fakeId',
            zoneName: 'domain.com.',
        }),
        recordType: ecsPatterns.NetworkLoadBalancedServiceRecordType.NONE,
        taskImageOptions: {
            containerPort: 2015,
            image: ecs.ContainerImage.fromRegistry('abiosoft/caddy'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Route53::RecordSet', 0);
});
test('setting ALB HTTP protocol to create the listener on 80', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'FargateAlbService', {
        cluster,
        protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTP,
        taskImageOptions: {
            containerPort: 2015,
            image: ecs.ContainerImage.fromRegistry('abiosoft/caddy'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::Listener', {
        DefaultActions: [
            assertions_1.Match.objectLike({
                Type: 'forward',
            }),
        ],
        Port: 80,
        Protocol: 'HTTP',
    });
});
test('setting ALB without any protocol or listenerPort to create the listener on 80', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'FargateAlbService', {
        cluster,
        taskImageOptions: {
            containerPort: 2015,
            image: ecs.ContainerImage.fromRegistry('abiosoft/caddy'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::Listener', {
        DefaultActions: [
            assertions_1.Match.objectLike({
                Type: 'forward',
            }),
        ],
        Port: 80,
        Protocol: 'HTTP',
    });
});
test('passing in existing network load balancer to NLB Fargate Service', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const nlb = new aws_elasticloadbalancingv2_1.NetworkLoadBalancer(stack, 'NLB', { vpc });
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        vpc,
        loadBalancer: nlb,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        LaunchType: 'FARGATE',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::LoadBalancer', {
        Type: 'network',
    });
});
test('passing in imported network load balancer and resources to NLB Fargate service', () => {
    // GIVEN
    const app = new cdk.App();
    const stack1 = new cdk.Stack(app, 'MyStack');
    const vpc1 = new ec2.Vpc(stack1, 'VPC');
    const cluster1 = new ecs.Cluster(stack1, 'Cluster', { vpc: vpc1 });
    const nlbArn = 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188';
    const stack2 = new cdk.Stack(stack1, 'Stack2');
    const cluster2 = ecs.Cluster.fromClusterAttributes(stack2, 'ImportedCluster', {
        vpc: vpc1,
        securityGroups: cluster1.connections.securityGroups,
        clusterName: 'cluster-name',
    });
    // WHEN
    const nlb2 = aws_elasticloadbalancingv2_1.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack2, 'ImportedNLB', {
        loadBalancerArn: nlbArn,
        vpc: vpc1,
    });
    const taskDef = new ecs.FargateTaskDefinition(stack2, 'TaskDef', {
        cpu: 1024,
        memoryLimitMiB: 1024,
    });
    const container = taskDef.addContainer('myContainer', {
        image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),
        memoryLimitMiB: 1024,
    });
    container.addPortMappings({
        containerPort: 80,
    });
    new ecsPatterns.NetworkLoadBalancedFargateService(stack2, 'FargateNLBService', {
        cluster: cluster2,
        loadBalancer: nlb2,
        desiredCount: 1,
        taskDefinition: taskDef,
    });
    // THEN
    assertions_1.Template.fromStack(stack2).hasResourceProperties('AWS::ECS::Service', {
        LaunchType: 'FARGATE',
        LoadBalancers: [assertions_1.Match.objectLike({ ContainerName: 'myContainer', ContainerPort: 80 })],
    });
    assertions_1.Template.fromStack(stack2).resourceCountIs('AWS::ElasticLoadBalancingV2::TargetGroup', 1);
    assertions_1.Template.fromStack(stack2).hasResourceProperties('AWS::ElasticLoadBalancingV2::Listener', {
        LoadBalancerArn: nlb2.loadBalancerArn,
        Port: 80,
    });
});
test('passing in previously created application load balancer to ALB Fargate Service', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'Vpc');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc, clusterName: 'MyCluster' });
    const sg = new ec2.SecurityGroup(stack, 'SecurityGroup', { vpc });
    cluster.connections.addSecurityGroup(sg);
    const alb = new aws_elasticloadbalancingv2_1.ApplicationLoadBalancer(stack, 'ALB', { vpc, securityGroup: sg });
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        cluster,
        loadBalancer: alb,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        LaunchType: 'FARGATE',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::LoadBalancer', {
        Type: 'application',
    });
});
test('passing in imported application load balancer and resources to ALB Fargate Service', () => {
    // GIVEN
    const stack1 = new cdk.Stack();
    const albArn = 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188';
    const vpc = new ec2.Vpc(stack1, 'Vpc');
    const cluster = new ecs.Cluster(stack1, 'Cluster', { vpc, clusterName: 'MyClusterName' });
    const sg = new ec2.SecurityGroup(stack1, 'SecurityGroup', { vpc });
    cluster.connections.addSecurityGroup(sg);
    const alb = aws_elasticloadbalancingv2_1.ApplicationLoadBalancer.fromApplicationLoadBalancerAttributes(stack1, 'ALB', {
        loadBalancerArn: albArn,
        vpc,
        securityGroupId: sg.securityGroupId,
        loadBalancerDnsName: 'MyDnsName',
    });
    // WHEN
    const taskDef = new ecs.FargateTaskDefinition(stack1, 'TaskDef', {
        cpu: 1024,
        memoryLimitMiB: 1024,
    });
    const container = taskDef.addContainer('Container', {
        image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),
        memoryLimitMiB: 1024,
    });
    container.addPortMappings({
        containerPort: 80,
    });
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack1, 'FargateALBService', {
        cluster,
        loadBalancer: alb,
        desiredCount: 1,
        taskDefinition: taskDef,
    });
    // THEN
    assertions_1.Template.fromStack(stack1).hasResourceProperties('AWS::ECS::Service', {
        LaunchType: 'FARGATE',
        LoadBalancers: [assertions_1.Match.objectLike({ ContainerName: 'Container', ContainerPort: 80 })],
    });
    assertions_1.Template.fromStack(stack1).resourceCountIs('AWS::ElasticLoadBalancingV2::TargetGroup', 1);
    assertions_1.Template.fromStack(stack1).hasResourceProperties('AWS::ElasticLoadBalancingV2::Listener', {
        LoadBalancerArn: alb.loadBalancerArn,
        Port: 80,
    });
});
test('passing in previously created security groups to ALB Fargate Service', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'Vpc');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc, clusterName: 'MyCluster' });
    const securityGroup = new ec2.SecurityGroup(stack, 'SecurityGroup', {
        allowAllOutbound: false,
        description: 'Example',
        securityGroupName: 'Rolly',
        vpc,
    });
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        cluster,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),
        },
        securityGroups: [securityGroup],
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        LaunchType: 'FARGATE',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::SecurityGroup', {
        GroupDescription: 'Example',
        GroupName: 'Rolly',
        SecurityGroupEgress: [
            {
                CidrIp: '255.255.255.255/32',
                Description: 'Disallow all traffic',
                FromPort: 252,
                IpProtocol: 'icmp',
                ToPort: 86,
            },
        ],
        VpcId: {
            Ref: 'Vpc8378EB38',
        },
    });
});
test('domainName and domainZone not required for HTTPS listener with provided cert', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    const exampleDotComZone = new route53.PublicHostedZone(stack, 'ExampleDotCom', {
        zoneName: 'example.com',
    });
    const certificate = new aws_certificatemanager_1.Certificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        validation: aws_certificatemanager_1.CertificateValidation.fromDns(exampleDotComZone),
    });
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'FargateAlbService', {
        cluster,
        protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
        taskImageOptions: {
            containerPort: 2015,
            image: ecs.ContainerImage.fromRegistry('abiosoft/caddy'),
        },
        certificate: certificate,
    });
    // THEN
    assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Route53::RecordSet', 0);
});
test('test ALB load balanced service with docker labels defined', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        cluster,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
            dockerLabels: { label1: 'labelValue1', label2: 'labelValue2' },
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Image: '/aws/aws-example-app',
                DockerLabels: {
                    label1: 'labelValue1',
                    label2: 'labelValue2',
                },
            }),
        ],
    });
});
test('test Network load balanced service with docker labels defined', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        cluster,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
            dockerLabels: { label1: 'labelValue1', label2: 'labelValue2' },
        },
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Image: '/aws/aws-example-app',
                DockerLabels: {
                    label1: 'labelValue1',
                    label2: 'labelValue2',
                },
            }),
        ],
    });
});
test('Passing in token for desiredCount will not throw error', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    const param = new cdk.CfnParameter(stack, 'prammm', {
        type: 'Number',
        default: 1,
    });
    // WHEN
    const service = new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        cluster,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),
            dockerLabels: { label1: 'labelValue1', label2: 'labelValue2' },
        },
        desiredCount: param.valueAsNumber,
    });
    // THEN
    expect(() => {
        service.internalDesiredCount;
    }).toBeTruthy;
});
test('ApplicationLoadBalancedFargateService multiple capacity provider strategies are set', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.enableFargateCapacityProviders();
    // WHEN
    new ecsPatterns.ApplicationLoadBalancedFargateService(stack, 'Service', {
        cluster,
        memoryLimitMiB: 1024,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('test'),
        },
        capacityProviderStrategies: [
            {
                capacityProvider: 'FARGATE',
                base: 1,
                weight: 1,
            },
            {
                capacityProvider: 'FARGATE_SPOT',
                base: 0,
                weight: 2,
            },
        ],
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        CapacityProviderStrategy: assertions_1.Match.arrayEquals([
            {
                Base: 1,
                CapacityProvider: 'FARGATE',
                Weight: 1,
            },
            {
                Base: 0,
                CapacityProvider: 'FARGATE_SPOT',
                Weight: 2,
            },
        ]),
    });
});
test('NetworkLoadBalancedFargateService multiple capacity provider strategies are set', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.enableFargateCapacityProviders();
    // WHEN
    new ecsPatterns.NetworkLoadBalancedFargateService(stack, 'Service', {
        cluster,
        memoryLimitMiB: 1024,
        taskImageOptions: {
            image: ecs.ContainerImage.fromRegistry('test'),
        },
        capacityProviderStrategies: [
            {
                capacityProvider: 'FARGATE',
                base: 1,
                weight: 1,
            },
            {
                capacityProvider: 'FARGATE_SPOT',
                base: 0,
                weight: 2,
            },
        ],
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        CapacityProviderStrategy: assertions_1.Match.arrayEquals([
            {
                Base: 1,
                CapacityProvider: 'FARGATE',
                Weight: 1,
            },
            {
                Base: 0,
                CapacityProvider: 'FARGATE_SPOT',
                Weight: 2,
            },
        ]),
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1iYWxhbmNlZC1mYXJnYXRlLXNlcnZpY2UudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvYWQtYmFsYW5jZWQtZmFyZ2F0ZS1zZXJ2aWNlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvREFBc0Q7QUFDdEQsOERBQTREO0FBQzVELDRFQUFxRjtBQUNyRix3Q0FBd0M7QUFDeEMsOENBQWdEO0FBQ2hELHdDQUF3QztBQUN4Qyw4Q0FBdUQ7QUFDdkQsb0ZBQXdIO0FBQ3hILHdDQUF3QztBQUN4QyxnREFBZ0Q7QUFDaEQscUNBQXFDO0FBQ3JDLHlDQUF5QztBQUV6QyxJQUFJLENBQUMsMkRBQTJELEVBQUUsR0FBRyxFQUFFO0lBQ3JFLFFBQVE7SUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM5QixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUUzRCxPQUFPO0lBQ1AsSUFBSSxXQUFXLENBQUMsaUNBQWlDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtRQUNsRSxPQUFPO1FBQ1AsZ0JBQWdCLEVBQUU7WUFDaEIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDO1NBQy9EO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLDJDQUEyQyxFQUFFO1FBQzNGLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLGlCQUFpQjtLQUMxQixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElB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RUFBRSxDQUFDO2FBQ1Y7U0FDRjtLQUNGLENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxtQkFBbUIsRUFBRTtRQUNuRSx3QkFBd0IsRUFBRSxrQkFBSyxDQUFDLFdBQVcsQ0FBQztZQUMxQztnQkFDRSxJQUFJLEVBQUUsQ0FBQztnQkFDUCxnQkFBZ0IsRUFBRSxTQUFTO2dCQUMzQixNQUFNLEVBQUUsQ0FBQzthQUNWO1lBQ0Q7Z0JBQ0UsSUFBSSxFQUFFLENBQUM7Z0JBQ1AsZ0JBQWdCLEVBQUUsY0FBYztnQkFDaEMsTUFBTSxFQUFFLENBQUM7YUFDVjtTQUNGLENBQUM7S0FDSCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hdGNoLCBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0IHsgQXV0b1NjYWxpbmdHcm91cCB9IGZyb20gJy4uLy4uLy4uL2F3cy1hdXRvc2NhbGluZyc7XG5pbXBvcnQgeyBDZXJ0aWZpY2F0ZSwgQ2VydGlmaWNhdGVWYWxpZGF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vYXdzLWNlcnRpZmljYXRlbWFuYWdlcic7XG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnLi4vLi4vLi4vYXdzLWVjMic7XG5pbXBvcnQgeyBNYWNoaW5lSW1hZ2UgfSBmcm9tICcuLi8uLi8uLi9hd3MtZWMyJztcbmltcG9ydCAqIGFzIGVjcyBmcm9tICcuLi8uLi8uLi9hd3MtZWNzJztcbmltcG9ydCB7IEFzZ0NhcGFjaXR5UHJvdmlkZXIgfSBmcm9tICcuLi8uLi8uLi9hd3MtZWNzJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyLCBBcHBsaWNhdGlvblByb3RvY29sLCBOZXR3b3JrTG9hZEJhbGFuY2VyIH0gZnJvbSAnLi4vLi4vLi4vYXdzLWVsYXN0aWNsb2FkYmFsYW5jaW5ndjInO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJy4uLy4uLy4uL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgcm91dGU1MyBmcm9tICcuLi8uLi8uLi9hd3Mtcm91dGU1Myc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBlY3NQYXR0ZXJucyBmcm9tICcuLi8uLi9saWInO1xuXG50ZXN0KCdzZXR0aW5nIGxvYWRCYWxhbmNlclR5cGUgdG8gTmV0d29yayBjcmVhdGVzIGFuIE5MQiBQdWJsaWMnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuICBjb25zdCBjbHVzdGVyID0gbmV3IGVjcy5DbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuXG4gIC8vIFdIRU5cbiAgbmV3IGVjc1BhdHRlcm5zLk5ldHdvcmtMb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgY2x1c3RlcixcbiAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnL2F3cy9hd3MtZXhhbXBsZS1hcHAnKSxcbiAgICB9LFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVsYXN0aWNMb2FkQmFsYW5jaW5nVjI6OkxvYWRCYWxhbmNlcicsIHtcbiAgICBUeXBlOiAnbmV0d29yaycsXG4gICAgU2NoZW1lOiAnaW50ZXJuZXQtZmFjaW5nJyxcbiAgfSk7XG59KTtcblxudGVzdCgnc2V0dGluZyBsb2FkQmFsYW5jZXJUeXBlIHRvIE5ldHdvcmsgYW5kIHB1YmxpY0xvYWRCYWxhbmNlciB0byBmYWxzZSBjcmVhdGVzIGFuIE5MQiBQcml2YXRlJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcbiAgY29uc3QgY2x1c3RlciA9IG5ldyBlY3MuQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5OZXR3b3JrTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgIGNsdXN0ZXIsXG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJy9hd3MvYXdzLWV4YW1wbGUtYXBwJyksXG4gICAgfSxcbiAgICBwdWJsaWNMb2FkQmFsYW5jZXI6IGZhbHNlLFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVsYXN0aWNMb2FkQmFsYW5jaW5nVjI6OkxvYWRCYWxhbmNlcicsIHtcbiAgICBUeXBlOiAnbmV0d29yaycsXG4gICAgU2NoZW1lOiAnaW50ZXJuYWwnLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdzZXR0aW5nIHZwYyBhbmQgY2x1c3RlciB0aHJvd3MgZXJyb3InLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuICBjb25zdCBjbHVzdGVyID0gbmV3IGVjcy5DbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuXG4gIC8vIFdIRU5cbiAgZXhwZWN0KCgpID0+IG5ldyBlY3NQYXR0ZXJucy5OZXR3b3JrTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgIGNsdXN0ZXIsXG4gICAgdnBjLFxuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCcvYXdzL2F3cy1leGFtcGxlLWFwcCcpLFxuICAgIH0sXG4gIH0pKS50b1Rocm93KCk7XG59KTtcblxudGVzdCgnc2V0dGluZyBleGVjdXRpb25Sb2xlIHVwZGF0ZWQgdGFza0RlZmluaXRpb24gd2l0aCBnaXZlbiBleGVjdXRpb24gcm9sZScsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG4gIGNvbnN0IGNsdXN0ZXIgPSBuZXcgZWNzLkNsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG5cbiAgY29uc3QgZXhlY3V0aW9uUm9sZSA9IG5ldyBpYW0uUm9sZShzdGFjaywgJ0V4ZWN1dGlvblJvbGUnLCB7XG4gICAgcGF0aDogJy8nLFxuICAgIGFzc3VtZWRCeTogbmV3IGlhbS5Db21wb3NpdGVQcmluY2lwYWwoXG4gICAgICBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2Vjcy5hbWF6b25hd3MuY29tJyksXG4gICAgICBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2Vjcy10YXNrcy5hbWF6b25hd3MuY29tJyksXG4gICAgKSxcbiAgfSk7XG5cbiAgLy8gV0hFTlxuICBuZXcgZWNzUGF0dGVybnMuTmV0d29ya0xvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICBjbHVzdGVyLFxuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCcvYXdzL2F3cy1leGFtcGxlLWFwcCcpLFxuICAgICAgZXhlY3V0aW9uUm9sZSxcbiAgICB9LFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLCB7XG4gICAgRXhlY3V0aW9uUm9sZUFybjogeyAnRm46OkdldEF0dCc6IFsnRXhlY3V0aW9uUm9sZTYwNUEwNDBCJywgJ0FybiddIH0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3NldHRpbmcgdGFza1JvbGUgdXBkYXRlZCB0YXNrRGVmaW5pdGlvbiB3aXRoIGdpdmVuIHRhc2sgcm9sZScsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG4gIGNvbnN0IGNsdXN0ZXIgPSBuZXcgZWNzLkNsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG4gIGNvbnN0IHRhc2tSb2xlID0gbmV3IGlhbS5Sb2xlKHN0YWNrLCAndGFza1JvbGVUZXN0Jywge1xuICAgIHBhdGg6ICcvJyxcbiAgICBhc3N1bWVkQnk6IG5ldyBpYW0uQ29tcG9zaXRlUHJpbmNpcGFsKFxuICAgICAgbmV3IGlhbS5TZXJ2aWNlUHJpbmNpcGFsKCdlY3MuYW1hem9uYXdzLmNvbScpLFxuICAgICAgbmV3IGlhbS5TZXJ2aWNlUHJpbmNpcGFsKCdlY3MtdGFza3MuYW1hem9uYXdzLmNvbScpLFxuICAgICksXG4gIH0pO1xuXG4gIC8vIFdIRU5cbiAgbmV3IGVjc1BhdHRlcm5zLk5ldHdvcmtMb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgY2x1c3RlcixcbiAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnL2F3cy9hd3MtZXhhbXBsZS1hcHAnKSxcbiAgICAgIHRhc2tSb2xlLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUNTOjpUYXNrRGVmaW5pdGlvbicsIHtcbiAgICBUYXNrUm9sZUFybjogeyAnRm46OkdldEF0dCc6IFsndGFza1JvbGVUZXN0OURBNjZCNkUnLCAnQXJuJ10gfSxcbiAgfSk7XG59KTtcblxudGVzdCgnc2V0dGluZyBjb250YWluZXJOYW1lIHVwZGF0ZXMgY29udGFpbmVyIG5hbWUgd2l0aCBnaXZlbiBuYW1lJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcbiAgY29uc3QgY2x1c3RlciA9IG5ldyBlY3MuQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5OZXR3b3JrTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgIGNsdXN0ZXIsXG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJy9hd3MvYXdzLWV4YW1wbGUtYXBwJyksXG4gICAgICBjb250YWluZXJOYW1lOiAnYm9iJyxcbiAgICB9LFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLCB7XG4gICAgQ29udGFpbmVyRGVmaW5pdGlvbnM6IFtcbiAgICAgIE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICBOYW1lOiAnYm9iJyxcbiAgICAgIH0pLFxuICAgIF0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ25vdCBzZXR0aW5nIGNvbnRhaW5lck5hbWUgdXBkYXRlcyBjb250YWluZXIgbmFtZSB3aXRoIGRlZmF1bHQnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuICBjb25zdCBjbHVzdGVyID0gbmV3IGVjcy5DbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuXG4gIC8vIFdIRU5cbiAgbmV3IGVjc1BhdHRlcm5zLk5ldHdvcmtMb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgY2x1c3RlcixcbiAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnL2F3cy9hd3MtZXhhbXBsZS1hcHAnKSxcbiAgICB9LFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLCB7XG4gICAgQ29udGFpbmVyRGVmaW5pdGlvbnM6IFtcbiAgICAgIE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICBOYW1lOiAnd2ViJyxcbiAgICAgIH0pLFxuICAgIF0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3NldHRpbmcgc2VydmljZW5hbWUgdXBkYXRlcyBzZXJ2aWNlIG5hbWUgd2l0aCBnaXZlbiBuYW1lJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcbiAgY29uc3QgY2x1c3RlciA9IG5ldyBlY3MuQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5OZXR3b3JrTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgIGNsdXN0ZXIsXG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJy9hd3MvYXdzLWV4YW1wbGUtYXBwJyksXG4gICAgfSxcbiAgICBzZXJ2aWNlTmFtZTogJ2JvYicsXG4gIH0pO1xuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6U2VydmljZScsIHtcbiAgICBTZXJ2aWNlTmFtZTogJ2JvYicsXG4gIH0pO1xufSk7XG5cbnRlc3QoJ25vdCBzZXR0aW5nIHNlcnZpY2VuYW1lIHVwZGF0ZXMgc2VydmljZSBuYW1lIHdpdGggZGVmYXVsdCcsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG4gIGNvbnN0IGNsdXN0ZXIgPSBuZXcgZWNzLkNsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG5cbiAgLy8gV0hFTlxuICBuZXcgZWNzUGF0dGVybnMuTmV0d29ya0xvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICBjbHVzdGVyLFxuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCcvYXdzL2F3cy1leGFtcGxlLWFwcCcpLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUNTOjpTZXJ2aWNlJywge1xuICAgIFNlcnZpY2VOYW1lOiBNYXRjaC5hYnNlbnQoKSxcbiAgfSk7XG59KTtcblxudGVzdCgnc2V0dGluZyBoZWFsdGhDaGVja0dyYWNlUGVyaW9kIHdvcmtzJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnL2F3cy9hd3MtZXhhbXBsZS1hcHAnKSxcbiAgICB9LFxuICAgIGhlYWx0aENoZWNrR3JhY2VQZXJpb2Q6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDYwMCksXG4gIH0pO1xuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6U2VydmljZScsIHtcbiAgICBIZWFsdGhDaGVja0dyYWNlUGVyaW9kU2Vjb25kczogNjAwLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdzZWxlY3RpbmcgY29ycmVjdCB2cGNTdWJuZXRzJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWcGMnLCB7XG4gICAgbWF4QXpzOiAyLFxuICAgIHN1Ym5ldENvbmZpZ3VyYXRpb246IFtcbiAgICAgIHtcbiAgICAgICAgc3VibmV0VHlwZTogZWMyLlN1Ym5ldFR5cGUuUFVCTElDLFxuICAgICAgICBjaWRyTWFzazogMjAsXG4gICAgICAgIG5hbWU6ICdQdWJsaWMnLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3VibmV0VHlwZTogZWMyLlN1Ym5ldFR5cGUuUFJJVkFURV9JU09MQVRFRCxcbiAgICAgICAgY2lkck1hc2s6IDIwLFxuICAgICAgICBuYW1lOiAnSVNPTEFURUQnLFxuICAgICAgfSxcbiAgICBdLFxuICB9KTtcbiAgLy8gV0hFTlxuICBuZXcgZWNzUGF0dGVybnMuQXBwbGljYXRpb25Mb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgdnBjLFxuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCcvYXdzL2F3cy1leGFtcGxlLWFwcCcpLFxuICAgIH0sXG4gICAgdGFza1N1Ym5ldHM6IHtcbiAgICAgIHN1Ym5ldFR5cGU6IGVjMi5TdWJuZXRUeXBlLlBSSVZBVEVfSVNPTEFURUQsXG4gICAgfSxcbiAgfSk7XG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUNTOjpTZXJ2aWNlJywge1xuICAgIE5ldHdvcmtDb25maWd1cmF0aW9uOiB7XG4gICAgICBBd3N2cGNDb25maWd1cmF0aW9uOiB7XG4gICAgICAgIFN1Ym5ldHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBSZWY6ICdWcGNJU09MQVRFRFN1Ym5ldDFTdWJuZXQ4MEYwN0ZBMCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBSZWY6ICdWcGNJU09MQVRFRFN1Ym5ldDJTdWJuZXRCMEI1NDhDMycsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG59KTtcblxudGVzdCgndGFyZ2V0IGdyb3VwIHVzZXMgSFRUUC84MCBhcyBkZWZhdWx0JywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnL2F3cy9hd3MtZXhhbXBsZS1hcHAnKSxcbiAgICB9LFxuICB9KTtcbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFbGFzdGljTG9hZEJhbGFuY2luZ1YyOjpUYXJnZXRHcm91cCcsIHtcbiAgICBQb3J0OiA4MCxcbiAgICBQcm90b2NvbDogJ0hUVFAnLFxuICB9KTtcbn0pO1xuXG50ZXN0KCd0YXJnZXQgZ3JvdXAgdXNlcyBIVFRQUy80NDMgd2hlbiBjb25maWd1cmVkJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnL2F3cy9hd3MtZXhhbXBsZS1hcHAnKSxcbiAgICB9LFxuICAgIHRhcmdldFByb3RvY29sOiBBcHBsaWNhdGlvblByb3RvY29sLkhUVFBTLFxuICB9KTtcbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFbGFzdGljTG9hZEJhbGFuY2luZ1YyOjpUYXJnZXRHcm91cCcsIHtcbiAgICBQb3J0OiA0NDMsXG4gICAgUHJvdG9jb2w6ICdIVFRQUycsXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3NldHRpbmcgcGxhdGZvcm0gdmVyc2lvbicsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgLy8gV0hFTlxuICBuZXcgZWNzUGF0dGVybnMuQXBwbGljYXRpb25Mb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJy9hd3MvYXdzLWV4YW1wbGUtYXBwJyksXG4gICAgfSxcbiAgICBwbGF0Zm9ybVZlcnNpb246IGVjcy5GYXJnYXRlUGxhdGZvcm1WZXJzaW9uLlZFUlNJT04xXzQsXG4gIH0pO1xuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6U2VydmljZScsIHtcbiAgICBQbGF0Zm9ybVZlcnNpb246IGVjcy5GYXJnYXRlUGxhdGZvcm1WZXJzaW9uLlZFUlNJT04xXzQsXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3Rlc3QgbG9hZCBiYWxhbmNlZCBzZXJ2aWNlIHdpdGggZmFtaWx5IGRlZmluZWQnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuICBjb25zdCBjbHVzdGVyID0gbmV3IGVjcy5DbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuICBjbHVzdGVyLmFkZEFzZ0NhcGFjaXR5UHJvdmlkZXIobmV3IEFzZ0NhcGFjaXR5UHJvdmlkZXIoc3RhY2ssICdEZWZhdWx0QXV0b1NjYWxpbmdHcm91cFByb3ZpZGVyJywge1xuICAgIGF1dG9TY2FsaW5nR3JvdXA6IG5ldyBBdXRvU2NhbGluZ0dyb3VwKHN0YWNrLCAnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXAnLCB7XG4gICAgICB2cGMsXG4gICAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICAgICAgbWFjaGluZUltYWdlOiBNYWNoaW5lSW1hZ2UubGF0ZXN0QW1hem9uTGludXgoKSxcbiAgICB9KSxcbiAgfSkpO1xuXG4gIC8vIFdIRU5cbiAgbmV3IGVjc1BhdHRlcm5zLkFwcGxpY2F0aW9uTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgIGNsdXN0ZXIsXG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJy9hd3MvYXdzLWV4YW1wbGUtYXBwJyksXG4gICAgICBlbmFibGVMb2dnaW5nOiBmYWxzZSxcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIFRFU1RfRU5WSVJPTk1FTlRfVkFSSUFCTEUxOiAndGVzdCBlbnZpcm9ubWVudCB2YXJpYWJsZSAxIHZhbHVlJyxcbiAgICAgICAgVEVTVF9FTlZJUk9OTUVOVF9WQVJJQUJMRTI6ICd0ZXN0IGVudmlyb25tZW50IHZhcmlhYmxlIDIgdmFsdWUnLFxuICAgICAgfSxcbiAgICAgIGZhbWlseTogJ2ZhcmdhdGUtdGFzay1mYW1pbHknLFxuICAgIH0sXG4gICAgZGVzaXJlZENvdW50OiAyLFxuICAgIG1lbW9yeUxpbWl0TWlCOiA1MTIsXG4gICAgc2VydmljZU5hbWU6ICdmYXJnYXRlLXRlc3Qtc2VydmljZScsXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUNTOjpTZXJ2aWNlJywge1xuICAgIERlc2lyZWRDb3VudDogMixcbiAgICBMYXVuY2hUeXBlOiAnRkFSR0FURScsXG4gICAgU2VydmljZU5hbWU6ICdmYXJnYXRlLXRlc3Qtc2VydmljZScsXG4gIH0pO1xuXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLCB7XG4gICAgQ29udGFpbmVyRGVmaW5pdGlvbnM6IFtcbiAgICAgIE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICBFbnZpcm9ubWVudDogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIE5hbWU6ICdURVNUX0VOVklST05NRU5UX1ZBUklBQkxFMScsXG4gICAgICAgICAgICBWYWx1ZTogJ3Rlc3QgZW52aXJvbm1lbnQgdmFyaWFibGUgMSB2YWx1ZScsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBOYW1lOiAnVEVTVF9FTlZJUk9OTUVOVF9WQVJJQUJMRTInLFxuICAgICAgICAgICAgVmFsdWU6ICd0ZXN0IGVudmlyb25tZW50IHZhcmlhYmxlIDIgdmFsdWUnLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIEltYWdlOiAnL2F3cy9hd3MtZXhhbXBsZS1hcHAnLFxuICAgICAgfSksXG4gICAgXSxcbiAgICBGYW1pbHk6ICdmYXJnYXRlLXRhc2stZmFtaWx5JyxcbiAgfSk7XG59KTtcblxudGVzdCgnc2V0dGluZyBBTEIgZGVwbG95bWVudCBjb250cm9sbGVyJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnL2F3cy9hd3MtZXhhbXBsZS1hcHAnKSxcbiAgICB9LFxuICAgIGRlcGxveW1lbnRDb250cm9sbGVyOiB7XG4gICAgICB0eXBlOiBlY3MuRGVwbG95bWVudENvbnRyb2xsZXJUeXBlLkNPREVfREVQTE9ZLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUNTOjpTZXJ2aWNlJywge1xuICAgIERlcGxveW1lbnRDb250cm9sbGVyOiB7XG4gICAgICBUeXBlOiAnQ09ERV9ERVBMT1knLFxuICAgIH0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3NldHRpbmcgYSBjb21tYW5kIGZvciB0YXNrSW1hZ2VPcHRpb25zIGluIGFuIEFwcGxpY2F0aW9uTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Ugd29ya3MnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gIC8vIFdIRU5cbiAgbmV3IGVjc1BhdHRlcm5zLkFwcGxpY2F0aW9uTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCcvYXdzL2F3cy1leGFtcGxlLWFwcCcpLFxuICAgICAgY29tbWFuZDogWycuL2FwcC9iaW4vc3RhcnQuc2gnLCAnLS1mb28nXSxcbiAgICB9LFxuICB9KTtcbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFQ1M6OlRhc2tEZWZpbml0aW9uJywge1xuICAgIENvbnRhaW5lckRlZmluaXRpb25zOiBbXG4gICAgICBNYXRjaC5vYmplY3RMaWtlKHtcbiAgICAgICAgSW1hZ2U6ICcvYXdzL2F3cy1leGFtcGxlLWFwcCcsXG4gICAgICAgIENvbW1hbmQ6IFsnLi9hcHAvYmluL3N0YXJ0LnNoJywgJy0tZm9vJ10sXG4gICAgICB9KSxcbiAgICBdLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdzZXR0aW5nIGFuIGVudHJ5UG9pbnQgZm9yIHRhc2tJbWFnZU9wdGlvbnMgaW4gYW4gQXBwbGljYXRpb25Mb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZSB3b3JrcycsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgLy8gV0hFTlxuICBuZXcgZWNzUGF0dGVybnMuQXBwbGljYXRpb25Mb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJy9hd3MvYXdzLWV4YW1wbGUtYXBwJyksXG4gICAgICBlbnRyeVBvaW50OiBbJ2VjaG8nLCAnZm9vJ10sXG4gICAgfSxcbiAgfSk7XG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUNTOjpUYXNrRGVmaW5pdGlvbicsIHtcbiAgICBDb250YWluZXJEZWZpbml0aW9uczogW1xuICAgICAgTWF0Y2gub2JqZWN0TGlrZSh7XG4gICAgICAgIEltYWdlOiAnL2F3cy9hd3MtZXhhbXBsZS1hcHAnLFxuICAgICAgICBFbnRyeVBvaW50OiBbJ2VjaG8nLCAnZm9vJ10sXG4gICAgICB9KSxcbiAgICBdLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdzZXR0aW5nIE5MQiBkZXBsb3ltZW50IGNvbnRyb2xsZXInLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gIC8vIFdIRU5cbiAgbmV3IGVjc1BhdHRlcm5zLk5ldHdvcmtMb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJy9hd3MvYXdzLWV4YW1wbGUtYXBwJyksXG4gICAgfSxcbiAgICBkZXBsb3ltZW50Q29udHJvbGxlcjoge1xuICAgICAgdHlwZTogZWNzLkRlcGxveW1lbnRDb250cm9sbGVyVHlwZS5DT0RFX0RFUExPWSxcbiAgICB9LFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6U2VydmljZScsIHtcbiAgICBEZXBsb3ltZW50Q29udHJvbGxlcjoge1xuICAgICAgVHlwZTogJ0NPREVfREVQTE9ZJyxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCdzZXR0aW5nIEFMQiBjaXJjdWl0QnJlYWtlciB3b3JrcycsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgLy8gV0hFTlxuICBuZXcgZWNzUGF0dGVybnMuQXBwbGljYXRpb25Mb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJy9hd3MvYXdzLWV4YW1wbGUtYXBwJyksXG4gICAgfSxcbiAgICBjaXJjdWl0QnJlYWtlcjogeyByb2xsYmFjazogdHJ1ZSB9LFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6U2VydmljZScsIHtcbiAgICBEZXBsb3ltZW50Q29uZmlndXJhdGlvbjoge1xuICAgICAgRGVwbG95bWVudENpcmN1aXRCcmVha2VyOiB7XG4gICAgICAgIEVuYWJsZTogdHJ1ZSxcbiAgICAgICAgUm9sbGJhY2s6IHRydWUsXG4gICAgICB9LFxuICAgIH0sXG4gICAgRGVwbG95bWVudENvbnRyb2xsZXI6IHtcbiAgICAgIFR5cGU6ICdFQ1MnLFxuICAgIH0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3NldHRpbmcgTkxCIGNpcmN1aXRCcmVha2VyIHdvcmtzJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5OZXR3b3JrTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCcvYXdzL2F3cy1leGFtcGxlLWFwcCcpLFxuICAgIH0sXG4gICAgY2lyY3VpdEJyZWFrZXI6IHsgcm9sbGJhY2s6IHRydWUgfSxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFQ1M6OlNlcnZpY2UnLCB7XG4gICAgRGVwbG95bWVudENvbmZpZ3VyYXRpb246IHtcbiAgICAgIERlcGxveW1lbnRDaXJjdWl0QnJlYWtlcjoge1xuICAgICAgICBFbmFibGU6IHRydWUsXG4gICAgICAgIFJvbGxiYWNrOiB0cnVlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIERlcGxveW1lbnRDb250cm9sbGVyOiB7XG4gICAgICBUeXBlOiAnRUNTJyxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCdzZXR0aW5nIE5MQiBzcGVjaWFsIGxpc3RlbmVyIHBvcnQgdG8gY3JlYXRlIHRoZSBsaXN0ZW5lcicsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG4gIGNvbnN0IGNsdXN0ZXIgPSBuZXcgZWNzLkNsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG5cbiAgLy8gV0hFTlxuICBuZXcgZWNzUGF0dGVybnMuTmV0d29ya0xvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnRmFyZ2F0ZU5sYlNlcnZpY2UnLCB7XG4gICAgY2x1c3RlcixcbiAgICBsaXN0ZW5lclBvcnQ6IDIwMTUsXG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgY29udGFpbmVyUG9ydDogMjAxNSxcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhYmlvc29mdC9jYWRkeScpLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RWxhc3RpY0xvYWRCYWxhbmNpbmdWMjo6TGlzdGVuZXInLCB7XG4gICAgRGVmYXVsdEFjdGlvbnM6IFtcbiAgICAgIE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICBUeXBlOiAnZm9yd2FyZCcsXG4gICAgICB9KSxcbiAgICBdLFxuICAgIFBvcnQ6IDIwMTUsXG4gICAgUHJvdG9jb2w6ICdUQ1AnLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdzZXR0aW5nIEFMQiBzcGVjaWFsIGxpc3RlbmVyIHBvcnQgdG8gY3JlYXRlIHRoZSBsaXN0ZW5lcicsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG4gIGNvbnN0IGNsdXN0ZXIgPSBuZXcgZWNzLkNsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG5cbiAgLy8gV0hFTlxuICBuZXcgZWNzUGF0dGVybnMuQXBwbGljYXRpb25Mb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShzdGFjaywgJ0ZhcmdhdGVBbGJTZXJ2aWNlJywge1xuICAgIGNsdXN0ZXIsXG4gICAgbGlzdGVuZXJQb3J0OiAyMDE1LFxuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGNvbnRhaW5lclBvcnQ6IDIwMTUsXG4gICAgICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnYWJpb3NvZnQvY2FkZHknKSxcbiAgICB9LFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVsYXN0aWNMb2FkQmFsYW5jaW5nVjI6Okxpc3RlbmVyJywge1xuICAgIERlZmF1bHRBY3Rpb25zOiBbXG4gICAgICBNYXRjaC5vYmplY3RMaWtlKHtcbiAgICAgICAgVHlwZTogJ2ZvcndhcmQnLFxuICAgICAgfSksXG4gICAgXSxcbiAgICBQb3J0OiAyMDE1LFxuICAgIFByb3RvY29sOiAnSFRUUCcsXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3NldHRpbmcgQUxCIEhUVFBTIHByb3RvY29sIHRvIGNyZWF0ZSB0aGUgbGlzdGVuZXIgb24gNDQzJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcbiAgY29uc3QgY2x1c3RlciA9IG5ldyBlY3MuQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnRmFyZ2F0ZUFsYlNlcnZpY2UnLCB7XG4gICAgY2x1c3RlcixcbiAgICBwcm90b2NvbDogQXBwbGljYXRpb25Qcm90b2NvbC5IVFRQUyxcbiAgICBkb21haW5OYW1lOiAnZG9tYWluLmNvbScsXG4gICAgZG9tYWluWm9uZTogcm91dGU1My5Ib3N0ZWRab25lLmZyb21Ib3N0ZWRab25lQXR0cmlidXRlcyhzdGFjaywgJ0hvc3RlZFpvbmUnLCB7XG4gICAgICBob3N0ZWRab25lSWQ6ICdmYWtlSWQnLFxuICAgICAgem9uZU5hbWU6ICdkb21haW4uY29tJyxcbiAgICB9KSxcbiAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICBjb250YWluZXJQb3J0OiAyMDE1LFxuICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ2FiaW9zb2Z0L2NhZGR5JyksXG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFbGFzdGljTG9hZEJhbGFuY2luZ1YyOjpMaXN0ZW5lcicsIHtcbiAgICBEZWZhdWx0QWN0aW9uczogW1xuICAgICAgTWF0Y2gub2JqZWN0TGlrZSh7XG4gICAgICAgIFR5cGU6ICdmb3J3YXJkJyxcbiAgICAgIH0pLFxuICAgIF0sXG4gICAgUG9ydDogNDQzLFxuICAgIFByb3RvY29sOiAnSFRUUFMnLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdzZXR0aW5nIEFMQiBIVFRQUyBjb3JyZWN0bHkgc2V0cyB0aGUgcmVjb3Jkc2V0IG5hbWUnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuICBjb25zdCBjbHVzdGVyID0gbmV3IGVjcy5DbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuXG4gIC8vIFdIRU5cbiAgbmV3IGVjc1BhdHRlcm5zLkFwcGxpY2F0aW9uTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2ssICdGYXJnYXRlQWxiU2VydmljZScsIHtcbiAgICBjbHVzdGVyLFxuICAgIHByb3RvY29sOiBBcHBsaWNhdGlvblByb3RvY29sLkhUVFBTLFxuICAgIGRvbWFpbk5hbWU6ICd0ZXN0LmRvbWFpbi5jb20nLFxuICAgIGRvbWFpblpvbmU6IHJvdXRlNTMuSG9zdGVkWm9uZS5mcm9tSG9zdGVkWm9uZUF0dHJpYnV0ZXMoc3RhY2ssICdIb3N0ZWRab25lJywge1xuICAgICAgaG9zdGVkWm9uZUlkOiAnZmFrZUlkJyxcbiAgICAgIHpvbmVOYW1lOiAnZG9tYWluLmNvbS4nLFxuICAgIH0pLFxuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGNvbnRhaW5lclBvcnQ6IDIwMTUsXG4gICAgICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnYWJpb3NvZnQvY2FkZHknKSxcbiAgICB9LFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlJvdXRlNTM6OlJlY29yZFNldCcsIHtcbiAgICBOYW1lOiAndGVzdC5kb21haW4uY29tLicsXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3NldHRpbmcgQUxCIGNuYW1lIG9wdGlvbiBjb3JyZWN0bHkgc2V0cyB0aGUgcmVjb3Jkc2V0IHR5cGUnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuICBjb25zdCBjbHVzdGVyID0gbmV3IGVjcy5DbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuXG4gIC8vIFdIRU5cbiAgbmV3IGVjc1BhdHRlcm5zLkFwcGxpY2F0aW9uTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2ssICdGYXJnYXRlQWxiU2VydmljZScsIHtcbiAgICBjbHVzdGVyLFxuICAgIHByb3RvY29sOiBBcHBsaWNhdGlvblByb3RvY29sLkhUVFBTLFxuICAgIGRvbWFpbk5hbWU6ICd0ZXN0LmRvbWFpbi5jb20nLFxuICAgIGRvbWFpblpvbmU6IHJvdXRlNTMuSG9zdGVkWm9uZS5mcm9tSG9zdGVkWm9uZUF0dHJpYnV0ZXMoc3RhY2ssICdIb3N0ZWRab25lJywge1xuICAgICAgaG9zdGVkWm9uZUlkOiAnZmFrZUlkJyxcbiAgICAgIHpvbmVOYW1lOiAnZG9tYWluLmNvbS4nLFxuICAgIH0pLFxuICAgIHJlY29yZFR5cGU6IGVjc1BhdHRlcm5zLkFwcGxpY2F0aW9uTG9hZEJhbGFuY2VkU2VydmljZVJlY29yZFR5cGUuQ05BTUUsXG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgY29udGFpbmVyUG9ydDogMjAxNSxcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhYmlvc29mdC9jYWRkeScpLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Um91dGU1Mzo6UmVjb3JkU2V0Jywge1xuICAgIE5hbWU6ICd0ZXN0LmRvbWFpbi5jb20uJyxcbiAgICBUeXBlOiAnQ05BTUUnLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdzZXR0aW5nIEFMQiByZWNvcmQgdHlwZSB0byBOT05FIGNvcnJlY3RseSBvbWl0cyB0aGUgcmVjb3Jkc2V0JywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcbiAgY29uc3QgY2x1c3RlciA9IG5ldyBlY3MuQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnRmFyZ2F0ZUFsYlNlcnZpY2UnLCB7XG4gICAgY2x1c3RlcixcbiAgICBwcm90b2NvbDogQXBwbGljYXRpb25Qcm90b2NvbC5IVFRQUyxcbiAgICBkb21haW5OYW1lOiAndGVzdC5kb21haW4uY29tJyxcbiAgICBkb21haW5ab25lOiByb3V0ZTUzLkhvc3RlZFpvbmUuZnJvbUhvc3RlZFpvbmVBdHRyaWJ1dGVzKHN0YWNrLCAnSG9zdGVkWm9uZScsIHtcbiAgICAgIGhvc3RlZFpvbmVJZDogJ2Zha2VJZCcsXG4gICAgICB6b25lTmFtZTogJ2RvbWFpbi5jb20uJyxcbiAgICB9KSxcbiAgICByZWNvcmRUeXBlOiBlY3NQYXR0ZXJucy5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlZFNlcnZpY2VSZWNvcmRUeXBlLk5PTkUsXG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgY29udGFpbmVyUG9ydDogMjAxNSxcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhYmlvc29mdC9jYWRkeScpLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6Um91dGU1Mzo6UmVjb3JkU2V0JywgMCk7XG59KTtcblxuXG50ZXN0KCdzZXR0aW5nIE5MQiBjbmFtZSBvcHRpb24gY29ycmVjdGx5IHNldHMgdGhlIHJlY29yZHNldCB0eXBlJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcbiAgY29uc3QgY2x1c3RlciA9IG5ldyBlY3MuQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5OZXR3b3JrTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2ssICdGYXJnYXRlTmxiU2VydmljZScsIHtcbiAgICBjbHVzdGVyLFxuICAgIGRvbWFpbk5hbWU6ICd0ZXN0LmRvbWFpbi5jb20nLFxuICAgIGRvbWFpblpvbmU6IHJvdXRlNTMuSG9zdGVkWm9uZS5mcm9tSG9zdGVkWm9uZUF0dHJpYnV0ZXMoc3RhY2ssICdIb3N0ZWRab25lJywge1xuICAgICAgaG9zdGVkWm9uZUlkOiAnZmFrZUlkJyxcbiAgICAgIHpvbmVOYW1lOiAnZG9tYWluLmNvbS4nLFxuICAgIH0pLFxuICAgIHJlY29yZFR5cGU6IGVjc1BhdHRlcm5zLk5ldHdvcmtMb2FkQmFsYW5jZWRTZXJ2aWNlUmVjb3JkVHlwZS5DTkFNRSxcbiAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICBjb250YWluZXJQb3J0OiAyMDE1LFxuICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ2FiaW9zb2Z0L2NhZGR5JyksXG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpSb3V0ZTUzOjpSZWNvcmRTZXQnLCB7XG4gICAgTmFtZTogJ3Rlc3QuZG9tYWluLmNvbS4nLFxuICAgIFR5cGU6ICdDTkFNRScsXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3NldHRpbmcgTkxCIHJlY29yZCB0eXBlIHRvIE5PTkUgY29ycmVjdGx5IG9taXRzIHRoZSByZWNvcmRzZXQnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuICBjb25zdCBjbHVzdGVyID0gbmV3IGVjcy5DbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuXG4gIC8vIFdIRU5cbiAgbmV3IGVjc1BhdHRlcm5zLk5ldHdvcmtMb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShzdGFjaywgJ0ZhcmdhdGVObGJTZXJ2aWNlJywge1xuICAgIGNsdXN0ZXIsXG4gICAgZG9tYWluTmFtZTogJ3Rlc3QuZG9tYWluLmNvbScsXG4gICAgZG9tYWluWm9uZTogcm91dGU1My5Ib3N0ZWRab25lLmZyb21Ib3N0ZWRab25lQXR0cmlidXRlcyhzdGFjaywgJ0hvc3RlZFpvbmUnLCB7XG4gICAgICBob3N0ZWRab25lSWQ6ICdmYWtlSWQnLFxuICAgICAgem9uZU5hbWU6ICdkb21haW4uY29tLicsXG4gICAgfSksXG4gICAgcmVjb3JkVHlwZTogZWNzUGF0dGVybnMuTmV0d29ya0xvYWRCYWxhbmNlZFNlcnZpY2VSZWNvcmRUeXBlLk5PTkUsXG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgY29udGFpbmVyUG9ydDogMjAxNSxcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhYmlvc29mdC9jYWRkeScpLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6Um91dGU1Mzo6UmVjb3JkU2V0JywgMCk7XG59KTtcblxudGVzdCgnc2V0dGluZyBBTEIgSFRUUCBwcm90b2NvbCB0byBjcmVhdGUgdGhlIGxpc3RlbmVyIG9uIDgwJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcbiAgY29uc3QgY2x1c3RlciA9IG5ldyBlY3MuQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnRmFyZ2F0ZUFsYlNlcnZpY2UnLCB7XG4gICAgY2x1c3RlcixcbiAgICBwcm90b2NvbDogQXBwbGljYXRpb25Qcm90b2NvbC5IVFRQLFxuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGNvbnRhaW5lclBvcnQ6IDIwMTUsXG4gICAgICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnYWJpb3NvZnQvY2FkZHknKSxcbiAgICB9LFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVsYXN0aWNMb2FkQmFsYW5jaW5nVjI6Okxpc3RlbmVyJywge1xuICAgIERlZmF1bHRBY3Rpb25zOiBbXG4gICAgICBNYXRjaC5vYmplY3RMaWtlKHtcbiAgICAgICAgVHlwZTogJ2ZvcndhcmQnLFxuICAgICAgfSksXG4gICAgXSxcbiAgICBQb3J0OiA4MCxcbiAgICBQcm90b2NvbDogJ0hUVFAnLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdzZXR0aW5nIEFMQiB3aXRob3V0IGFueSBwcm90b2NvbCBvciBsaXN0ZW5lclBvcnQgdG8gY3JlYXRlIHRoZSBsaXN0ZW5lciBvbiA4MCcsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG4gIGNvbnN0IGNsdXN0ZXIgPSBuZXcgZWNzLkNsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG5cbiAgLy8gV0hFTlxuICBuZXcgZWNzUGF0dGVybnMuQXBwbGljYXRpb25Mb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShzdGFjaywgJ0ZhcmdhdGVBbGJTZXJ2aWNlJywge1xuICAgIGNsdXN0ZXIsXG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgY29udGFpbmVyUG9ydDogMjAxNSxcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhYmlvc29mdC9jYWRkeScpLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RWxhc3RpY0xvYWRCYWxhbmNpbmdWMjo6TGlzdGVuZXInLCB7XG4gICAgRGVmYXVsdEFjdGlvbnM6IFtcbiAgICAgIE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICBUeXBlOiAnZm9yd2FyZCcsXG4gICAgICB9KSxcbiAgICBdLFxuICAgIFBvcnQ6IDgwLFxuICAgIFByb3RvY29sOiAnSFRUUCcsXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3Bhc3NpbmcgaW4gZXhpc3RpbmcgbmV0d29yayBsb2FkIGJhbGFuY2VyIHRvIE5MQiBGYXJnYXRlIFNlcnZpY2UnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuICBjb25zdCBubGIgPSBuZXcgTmV0d29ya0xvYWRCYWxhbmNlcihzdGFjaywgJ05MQicsIHsgdnBjIH0pO1xuXG4gIC8vIFdIRU5cbiAgbmV3IGVjc1BhdHRlcm5zLk5ldHdvcmtMb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgdnBjLFxuICAgIGxvYWRCYWxhbmNlcjogbmxiLFxuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhbWF6b24vYW1hem9uLWVjcy1zYW1wbGUnKSxcbiAgICB9LFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6U2VydmljZScsIHtcbiAgICBMYXVuY2hUeXBlOiAnRkFSR0FURScsXG4gIH0pO1xuXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVsYXN0aWNMb2FkQmFsYW5jaW5nVjI6OkxvYWRCYWxhbmNlcicsIHtcbiAgICBUeXBlOiAnbmV0d29yaycsXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3Bhc3NpbmcgaW4gaW1wb3J0ZWQgbmV0d29yayBsb2FkIGJhbGFuY2VyIGFuZCByZXNvdXJjZXMgdG8gTkxCIEZhcmdhdGUgc2VydmljZScsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbiAgY29uc3Qgc3RhY2sxID0gbmV3IGNkay5TdGFjayhhcHAsICdNeVN0YWNrJyk7XG4gIGNvbnN0IHZwYzEgPSBuZXcgZWMyLlZwYyhzdGFjazEsICdWUEMnKTtcbiAgY29uc3QgY2x1c3RlcjEgPSBuZXcgZWNzLkNsdXN0ZXIoc3RhY2sxLCAnQ2x1c3RlcicsIHsgdnBjOiB2cGMxIH0pO1xuICBjb25zdCBubGJBcm4gPSAnYXJuOmF3czplbGFzdGljbG9hZGJhbGFuY2luZzp1cy13ZXN0LTI6MTIzNDU2Nzg5MDEyOmxvYWRiYWxhbmNlci9hcHAvbXktbG9hZC1iYWxhbmNlci81MGRjNmM0OTVjMGM5MTg4JztcbiAgY29uc3Qgc3RhY2syID0gbmV3IGNkay5TdGFjayhzdGFjazEsICdTdGFjazInKTtcbiAgY29uc3QgY2x1c3RlcjIgPSBlY3MuQ2x1c3Rlci5mcm9tQ2x1c3RlckF0dHJpYnV0ZXMoc3RhY2syLCAnSW1wb3J0ZWRDbHVzdGVyJywge1xuICAgIHZwYzogdnBjMSxcbiAgICBzZWN1cml0eUdyb3VwczogY2x1c3RlcjEuY29ubmVjdGlvbnMuc2VjdXJpdHlHcm91cHMsXG4gICAgY2x1c3Rlck5hbWU6ICdjbHVzdGVyLW5hbWUnLFxuICB9KTtcblxuICAvLyBXSEVOXG4gIGNvbnN0IG5sYjIgPSBOZXR3b3JrTG9hZEJhbGFuY2VyLmZyb21OZXR3b3JrTG9hZEJhbGFuY2VyQXR0cmlidXRlcyhzdGFjazIsICdJbXBvcnRlZE5MQicsIHtcbiAgICBsb2FkQmFsYW5jZXJBcm46IG5sYkFybixcbiAgICB2cGM6IHZwYzEsXG4gIH0pO1xuICBjb25zdCB0YXNrRGVmID0gbmV3IGVjcy5GYXJnYXRlVGFza0RlZmluaXRpb24oc3RhY2syLCAnVGFza0RlZicsIHtcbiAgICBjcHU6IDEwMjQsXG4gICAgbWVtb3J5TGltaXRNaUI6IDEwMjQsXG4gIH0pO1xuICBjb25zdCBjb250YWluZXIgPSB0YXNrRGVmLmFkZENvbnRhaW5lcignbXlDb250YWluZXInLCB7XG4gICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ2FtYXpvbi9hbWF6b24tZWNzLXNhbXBsZScpLFxuICAgIG1lbW9yeUxpbWl0TWlCOiAxMDI0LFxuICB9KTtcbiAgY29udGFpbmVyLmFkZFBvcnRNYXBwaW5ncyh7XG4gICAgY29udGFpbmVyUG9ydDogODAsXG4gIH0pO1xuXG4gIG5ldyBlY3NQYXR0ZXJucy5OZXR3b3JrTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2syLCAnRmFyZ2F0ZU5MQlNlcnZpY2UnLCB7XG4gICAgY2x1c3RlcjogY2x1c3RlcjIsXG4gICAgbG9hZEJhbGFuY2VyOiBubGIyLFxuICAgIGRlc2lyZWRDb3VudDogMSxcbiAgICB0YXNrRGVmaW5pdGlvbjogdGFza0RlZixcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2syKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUNTOjpTZXJ2aWNlJywge1xuICAgIExhdW5jaFR5cGU6ICdGQVJHQVRFJyxcbiAgICBMb2FkQmFsYW5jZXJzOiBbTWF0Y2gub2JqZWN0TGlrZSh7IENvbnRhaW5lck5hbWU6ICdteUNvbnRhaW5lcicsIENvbnRhaW5lclBvcnQ6IDgwIH0pXSxcbiAgfSk7XG5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrMikucmVzb3VyY2VDb3VudElzKCdBV1M6OkVsYXN0aWNMb2FkQmFsYW5jaW5nVjI6OlRhcmdldEdyb3VwJywgMSk7XG5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrMikuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVsYXN0aWNMb2FkQmFsYW5jaW5nVjI6Okxpc3RlbmVyJywge1xuICAgIExvYWRCYWxhbmNlckFybjogbmxiMi5sb2FkQmFsYW5jZXJBcm4sXG4gICAgUG9ydDogODAsXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3Bhc3NpbmcgaW4gcHJldmlvdXNseSBjcmVhdGVkIGFwcGxpY2F0aW9uIGxvYWQgYmFsYW5jZXIgdG8gQUxCIEZhcmdhdGUgU2VydmljZScsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVnBjJyk7XG4gIGNvbnN0IGNsdXN0ZXIgPSBuZXcgZWNzLkNsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMsIGNsdXN0ZXJOYW1lOiAnTXlDbHVzdGVyJyB9KTtcbiAgY29uc3Qgc2cgPSBuZXcgZWMyLlNlY3VyaXR5R3JvdXAoc3RhY2ssICdTZWN1cml0eUdyb3VwJywgeyB2cGMgfSk7XG4gIGNsdXN0ZXIuY29ubmVjdGlvbnMuYWRkU2VjdXJpdHlHcm91cChzZyk7XG4gIGNvbnN0IGFsYiA9IG5ldyBBcHBsaWNhdGlvbkxvYWRCYWxhbmNlcihzdGFjaywgJ0FMQicsIHsgdnBjLCBzZWN1cml0eUdyb3VwOiBzZyB9KTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICBjbHVzdGVyLFxuICAgIGxvYWRCYWxhbmNlcjogYWxiLFxuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhbWF6b24vYW1hem9uLWVjcy1zYW1wbGUnKSxcbiAgICB9LFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDUzo6U2VydmljZScsIHtcbiAgICBMYXVuY2hUeXBlOiAnRkFSR0FURScsXG4gIH0pO1xuXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVsYXN0aWNMb2FkQmFsYW5jaW5nVjI6OkxvYWRCYWxhbmNlcicsIHtcbiAgICBUeXBlOiAnYXBwbGljYXRpb24nLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdwYXNzaW5nIGluIGltcG9ydGVkIGFwcGxpY2F0aW9uIGxvYWQgYmFsYW5jZXIgYW5kIHJlc291cmNlcyB0byBBTEIgRmFyZ2F0ZSBTZXJ2aWNlJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjazEgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IGFsYkFybiA9ICdhcm46YXdzOmVsYXN0aWNsb2FkYmFsYW5jaW5nOnVzLXdlc3QtMjoxMjM0NTY3ODkwMTI6bG9hZGJhbGFuY2VyL2FwcC9teS1sb2FkLWJhbGFuY2VyLzUwZGM2YzQ5NWMwYzkxODgnO1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjazEsICdWcGMnKTtcbiAgY29uc3QgY2x1c3RlciA9IG5ldyBlY3MuQ2x1c3RlcihzdGFjazEsICdDbHVzdGVyJywgeyB2cGMsIGNsdXN0ZXJOYW1lOiAnTXlDbHVzdGVyTmFtZScgfSk7XG4gIGNvbnN0IHNnID0gbmV3IGVjMi5TZWN1cml0eUdyb3VwKHN0YWNrMSwgJ1NlY3VyaXR5R3JvdXAnLCB7IHZwYyB9KTtcbiAgY2x1c3Rlci5jb25uZWN0aW9ucy5hZGRTZWN1cml0eUdyb3VwKHNnKTtcbiAgY29uc3QgYWxiID0gQXBwbGljYXRpb25Mb2FkQmFsYW5jZXIuZnJvbUFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyQXR0cmlidXRlcyhzdGFjazEsICdBTEInLCB7XG4gICAgbG9hZEJhbGFuY2VyQXJuOiBhbGJBcm4sXG4gICAgdnBjLFxuICAgIHNlY3VyaXR5R3JvdXBJZDogc2cuc2VjdXJpdHlHcm91cElkLFxuICAgIGxvYWRCYWxhbmNlckRuc05hbWU6ICdNeURuc05hbWUnLFxuICB9KTtcblxuICAvLyBXSEVOXG4gIGNvbnN0IHRhc2tEZWYgPSBuZXcgZWNzLkZhcmdhdGVUYXNrRGVmaW5pdGlvbihzdGFjazEsICdUYXNrRGVmJywge1xuICAgIGNwdTogMTAyNCxcbiAgICBtZW1vcnlMaW1pdE1pQjogMTAyNCxcbiAgfSk7XG4gIGNvbnN0IGNvbnRhaW5lciA9IHRhc2tEZWYuYWRkQ29udGFpbmVyKCdDb250YWluZXInLCB7XG4gICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ2FtYXpvbi9hbWF6b24tZWNzLXNhbXBsZScpLFxuICAgIG1lbW9yeUxpbWl0TWlCOiAxMDI0LFxuICB9KTtcbiAgY29udGFpbmVyLmFkZFBvcnRNYXBwaW5ncyh7XG4gICAgY29udGFpbmVyUG9ydDogODAsXG4gIH0pO1xuXG4gIG5ldyBlY3NQYXR0ZXJucy5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrMSwgJ0ZhcmdhdGVBTEJTZXJ2aWNlJywge1xuICAgIGNsdXN0ZXIsXG4gICAgbG9hZEJhbGFuY2VyOiBhbGIsXG4gICAgZGVzaXJlZENvdW50OiAxLFxuICAgIHRhc2tEZWZpbml0aW9uOiB0YXNrRGVmLFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjazEpLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFQ1M6OlNlcnZpY2UnLCB7XG4gICAgTGF1bmNoVHlwZTogJ0ZBUkdBVEUnLFxuICAgIExvYWRCYWxhbmNlcnM6IFtNYXRjaC5vYmplY3RMaWtlKHsgQ29udGFpbmVyTmFtZTogJ0NvbnRhaW5lcicsIENvbnRhaW5lclBvcnQ6IDgwIH0pXSxcbiAgfSk7XG5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrMSkucmVzb3VyY2VDb3VudElzKCdBV1M6OkVsYXN0aWNMb2FkQmFsYW5jaW5nVjI6OlRhcmdldEdyb3VwJywgMSk7XG5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrMSkuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVsYXN0aWNMb2FkQmFsYW5jaW5nVjI6Okxpc3RlbmVyJywge1xuICAgIExvYWRCYWxhbmNlckFybjogYWxiLmxvYWRCYWxhbmNlckFybixcbiAgICBQb3J0OiA4MCxcbiAgfSk7XG59KTtcblxudGVzdCgncGFzc2luZyBpbiBwcmV2aW91c2x5IGNyZWF0ZWQgc2VjdXJpdHkgZ3JvdXBzIHRvIEFMQiBGYXJnYXRlIFNlcnZpY2UnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZwYycpO1xuICBjb25zdCBjbHVzdGVyID0gbmV3IGVjcy5DbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjLCBjbHVzdGVyTmFtZTogJ015Q2x1c3RlcicgfSk7XG4gIGNvbnN0IHNlY3VyaXR5R3JvdXAgPSBuZXcgZWMyLlNlY3VyaXR5R3JvdXAoc3RhY2ssICdTZWN1cml0eUdyb3VwJywge1xuICAgIGFsbG93QWxsT3V0Ym91bmQ6IGZhbHNlLFxuICAgIGRlc2NyaXB0aW9uOiAnRXhhbXBsZScsXG4gICAgc2VjdXJpdHlHcm91cE5hbWU6ICdSb2xseScsXG4gICAgdnBjLFxuICB9KTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICBjbHVzdGVyLFxuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhbWF6b24vYW1hem9uLWVjcy1zYW1wbGUnKSxcbiAgICB9LFxuICAgIHNlY3VyaXR5R3JvdXBzOiBbc2VjdXJpdHlHcm91cF0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUNTOjpTZXJ2aWNlJywge1xuICAgIExhdW5jaFR5cGU6ICdGQVJHQVRFJyxcbiAgfSk7XG5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUMyOjpTZWN1cml0eUdyb3VwJywge1xuICAgIEdyb3VwRGVzY3JpcHRpb246ICdFeGFtcGxlJyxcbiAgICBHcm91cE5hbWU6ICdSb2xseScsXG4gICAgU2VjdXJpdHlHcm91cEVncmVzczogW1xuICAgICAge1xuICAgICAgICBDaWRySXA6ICcyNTUuMjU1LjI1NS4yNTUvMzInLFxuICAgICAgICBEZXNjcmlwdGlvbjogJ0Rpc2FsbG93IGFsbCB0cmFmZmljJyxcbiAgICAgICAgRnJvbVBvcnQ6IDI1MixcbiAgICAgICAgSXBQcm90b2NvbDogJ2ljbXAnLFxuICAgICAgICBUb1BvcnQ6IDg2LFxuICAgICAgfSxcbiAgICBdLFxuICAgIFZwY0lkOiB7XG4gICAgICBSZWY6ICdWcGM4Mzc4RUIzOCcsXG4gICAgfSxcbiAgfSk7XG59KTtcblxudGVzdCgnZG9tYWluTmFtZSBhbmQgZG9tYWluWm9uZSBub3QgcmVxdWlyZWQgZm9yIEhUVFBTIGxpc3RlbmVyIHdpdGggcHJvdmlkZWQgY2VydCcsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG4gIGNvbnN0IGNsdXN0ZXIgPSBuZXcgZWNzLkNsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG4gIGNvbnN0IGV4YW1wbGVEb3RDb21ab25lID0gbmV3IHJvdXRlNTMuUHVibGljSG9zdGVkWm9uZShzdGFjaywgJ0V4YW1wbGVEb3RDb20nLCB7XG4gICAgem9uZU5hbWU6ICdleGFtcGxlLmNvbScsXG4gIH0pO1xuICBjb25zdCBjZXJ0aWZpY2F0ZSA9IG5ldyBDZXJ0aWZpY2F0ZShzdGFjaywgJ0NlcnRpZmljYXRlJywge1xuICAgIGRvbWFpbk5hbWU6ICd0ZXN0LmV4YW1wbGUuY29tJyxcbiAgICB2YWxpZGF0aW9uOiBDZXJ0aWZpY2F0ZVZhbGlkYXRpb24uZnJvbURucyhleGFtcGxlRG90Q29tWm9uZSksXG4gIH0pO1xuXG4gIC8vIFdIRU5cbiAgbmV3IGVjc1BhdHRlcm5zLkFwcGxpY2F0aW9uTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2ssICdGYXJnYXRlQWxiU2VydmljZScsIHtcbiAgICBjbHVzdGVyLFxuICAgIHByb3RvY29sOiBBcHBsaWNhdGlvblByb3RvY29sLkhUVFBTLFxuXG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgY29udGFpbmVyUG9ydDogMjAxNSxcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhYmlvc29mdC9jYWRkeScpLFxuICAgIH0sXG4gICAgY2VydGlmaWNhdGU6IGNlcnRpZmljYXRlLFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykucmVzb3VyY2VDb3VudElzKCdBV1M6OlJvdXRlNTM6OlJlY29yZFNldCcsIDApO1xufSk7XG5cbnRlc3QoJ3Rlc3QgQUxCIGxvYWQgYmFsYW5jZWQgc2VydmljZSB3aXRoIGRvY2tlciBsYWJlbHMgZGVmaW5lZCcsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG4gIGNvbnN0IGNsdXN0ZXIgPSBuZXcgZWNzLkNsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG5cbiAgLy8gV0hFTlxuICBuZXcgZWNzUGF0dGVybnMuQXBwbGljYXRpb25Mb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gICAgY2x1c3RlcixcbiAgICB0YXNrSW1hZ2VPcHRpb25zOiB7XG4gICAgICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnL2F3cy9hd3MtZXhhbXBsZS1hcHAnKSxcbiAgICAgIGRvY2tlckxhYmVsczogeyBsYWJlbDE6ICdsYWJlbFZhbHVlMScsIGxhYmVsMjogJ2xhYmVsVmFsdWUyJyB9LFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUNTOjpUYXNrRGVmaW5pdGlvbicsIHtcbiAgICBDb250YWluZXJEZWZpbml0aW9uczogW1xuICAgICAgTWF0Y2gub2JqZWN0TGlrZSh7XG4gICAgICAgIEltYWdlOiAnL2F3cy9hd3MtZXhhbXBsZS1hcHAnLFxuICAgICAgICBEb2NrZXJMYWJlbHM6IHtcbiAgICAgICAgICBsYWJlbDE6ICdsYWJlbFZhbHVlMScsXG4gICAgICAgICAgbGFiZWwyOiAnbGFiZWxWYWx1ZTInLFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgXSxcbiAgfSk7XG59KTtcblxudGVzdCgndGVzdCBOZXR3b3JrIGxvYWQgYmFsYW5jZWQgc2VydmljZSB3aXRoIGRvY2tlciBsYWJlbHMgZGVmaW5lZCcsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG4gIGNvbnN0IGNsdXN0ZXIgPSBuZXcgZWNzLkNsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywgeyB2cGMgfSk7XG5cbiAgLy8gV0hFTlxuICBuZXcgZWNzUGF0dGVybnMuTmV0d29ya0xvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICBjbHVzdGVyLFxuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCcvYXdzL2F3cy1leGFtcGxlLWFwcCcpLFxuICAgICAgZG9ja2VyTGFiZWxzOiB7IGxhYmVsMTogJ2xhYmVsVmFsdWUxJywgbGFiZWwyOiAnbGFiZWxWYWx1ZTInIH0sXG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFQ1M6OlRhc2tEZWZpbml0aW9uJywge1xuICAgIENvbnRhaW5lckRlZmluaXRpb25zOiBbXG4gICAgICBNYXRjaC5vYmplY3RMaWtlKHtcbiAgICAgICAgSW1hZ2U6ICcvYXdzL2F3cy1leGFtcGxlLWFwcCcsXG4gICAgICAgIERvY2tlckxhYmVsczoge1xuICAgICAgICAgIGxhYmVsMTogJ2xhYmVsVmFsdWUxJyxcbiAgICAgICAgICBsYWJlbDI6ICdsYWJlbFZhbHVlMicsXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICBdLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdQYXNzaW5nIGluIHRva2VuIGZvciBkZXNpcmVkQ291bnQgd2lsbCBub3QgdGhyb3cgZXJyb3InLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuICBjb25zdCBjbHVzdGVyID0gbmV3IGVjcy5DbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuICBjb25zdCBwYXJhbSA9IG5ldyBjZGsuQ2ZuUGFyYW1ldGVyKHN0YWNrLCAncHJhbW1tJywge1xuICAgIHR5cGU6ICdOdW1iZXInLFxuICAgIGRlZmF1bHQ6IDEsXG4gIH0pO1xuXG4gIC8vIFdIRU5cbiAgY29uc3Qgc2VydmljZSA9IG5ldyBlY3NQYXR0ZXJucy5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHN0YWNrLCAnU2VydmljZScsIHtcbiAgICBjbHVzdGVyLFxuICAgIHRhc2tJbWFnZU9wdGlvbnM6IHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCcvYXdzL2F3cy1leGFtcGxlLWFwcCcpLFxuICAgICAgZG9ja2VyTGFiZWxzOiB7IGxhYmVsMTogJ2xhYmVsVmFsdWUxJywgbGFiZWwyOiAnbGFiZWxWYWx1ZTInIH0sXG4gICAgfSxcbiAgICBkZXNpcmVkQ291bnQ6IHBhcmFtLnZhbHVlQXNOdW1iZXIsXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KCgpID0+IHtcbiAgICBzZXJ2aWNlLmludGVybmFsRGVzaXJlZENvdW50O1xuICB9KS50b0JlVHJ1dGh5O1xufSk7XG5cbnRlc3QoJ0FwcGxpY2F0aW9uTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2UgbXVsdGlwbGUgY2FwYWNpdHkgcHJvdmlkZXIgc3RyYXRlZ2llcyBhcmUgc2V0JywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuICBjb25zdCBjbHVzdGVyID0gbmV3IGVjcy5DbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHsgdnBjIH0pO1xuICBjbHVzdGVyLmVuYWJsZUZhcmdhdGVDYXBhY2l0eVByb3ZpZGVycygpO1xuXG4gIC8vIFdIRU5cbiAgbmV3IGVjc1BhdHRlcm5zLkFwcGxpY2F0aW9uTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgIGNsdXN0ZXIsXG4gICAgbWVtb3J5TGltaXRNaUI6IDEwMjQsXG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ3Rlc3QnKSxcbiAgICB9LFxuICAgIGNhcGFjaXR5UHJvdmlkZXJTdHJhdGVnaWVzOiBbXG4gICAgICB7XG4gICAgICAgIGNhcGFjaXR5UHJvdmlkZXI6ICdGQVJHQVRFJyxcbiAgICAgICAgYmFzZTogMSxcbiAgICAgICAgd2VpZ2h0OiAxLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2FwYWNpdHlQcm92aWRlcjogJ0ZBUkdBVEVfU1BPVCcsXG4gICAgICAgIGJhc2U6IDAsXG4gICAgICAgIHdlaWdodDogMixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFQ1M6OlNlcnZpY2UnLCB7XG4gICAgQ2FwYWNpdHlQcm92aWRlclN0cmF0ZWd5OiBNYXRjaC5hcnJheUVxdWFscyhbXG4gICAgICB7XG4gICAgICAgIEJhc2U6IDEsXG4gICAgICAgIENhcGFjaXR5UHJvdmlkZXI6ICdGQVJHQVRFJyxcbiAgICAgICAgV2VpZ2h0OiAxLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgQmFzZTogMCxcbiAgICAgICAgQ2FwYWNpdHlQcm92aWRlcjogJ0ZBUkdBVEVfU1BPVCcsXG4gICAgICAgIFdlaWdodDogMixcbiAgICAgIH0sXG4gICAgXSksXG4gIH0pO1xufSk7XG5cblxudGVzdCgnTmV0d29ya0xvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlIG11bHRpcGxlIGNhcGFjaXR5IHByb3ZpZGVyIHN0cmF0ZWdpZXMgYXJlIHNldCcsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcbiAgY29uc3QgY2x1c3RlciA9IG5ldyBlY3MuQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7IHZwYyB9KTtcbiAgY2x1c3Rlci5lbmFibGVGYXJnYXRlQ2FwYWNpdHlQcm92aWRlcnMoKTtcblxuICAvLyBXSEVOXG4gIG5ldyBlY3NQYXR0ZXJucy5OZXR3b3JrTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2Uoc3RhY2ssICdTZXJ2aWNlJywge1xuICAgIGNsdXN0ZXIsXG4gICAgbWVtb3J5TGltaXRNaUI6IDEwMjQsXG4gICAgdGFza0ltYWdlT3B0aW9uczoge1xuICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ3Rlc3QnKSxcbiAgICB9LFxuICAgIGNhcGFjaXR5UHJvdmlkZXJTdHJhdGVnaWVzOiBbXG4gICAgICB7XG4gICAgICAgIGNhcGFjaXR5UHJvdmlkZXI6ICdGQVJHQVRFJyxcbiAgICAgICAgYmFzZTogMSxcbiAgICAgICAgd2VpZ2h0OiAxLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2FwYWNpdHlQcm92aWRlcjogJ0ZBUkdBVEVfU1BPVCcsXG4gICAgICAgIGJhc2U6IDAsXG4gICAgICAgIHdlaWdodDogMixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFQ1M6OlNlcnZpY2UnLCB7XG4gICAgQ2FwYWNpdHlQcm92aWRlclN0cmF0ZWd5OiBNYXRjaC5hcnJheUVxdWFscyhbXG4gICAgICB7XG4gICAgICAgIEJhc2U6IDEsXG4gICAgICAgIENhcGFjaXR5UHJvdmlkZXI6ICdGQVJHQVRFJyxcbiAgICAgICAgV2VpZ2h0OiAxLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgQmFzZTogMCxcbiAgICAgICAgQ2FwYWNpdHlQcm92aWRlcjogJ0ZBUkdBVEVfU1BPVCcsXG4gICAgICAgIFdlaWdodDogMixcbiAgICAgIH0sXG4gICAgXSksXG4gIH0pO1xufSk7XG4iXX0=