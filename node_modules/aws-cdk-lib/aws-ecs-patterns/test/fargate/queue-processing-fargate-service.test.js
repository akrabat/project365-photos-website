"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const aws_autoscaling_1 = require("../../../aws-autoscaling");
const ec2 = require("../../../aws-ec2");
const aws_ec2_1 = require("../../../aws-ec2");
const ecs = require("../../../aws-ecs");
const aws_ecs_1 = require("../../../aws-ecs");
const sqs = require("../../../aws-sqs");
const aws_sqs_1 = require("../../../aws-sqs");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const cdk = require("../../../core");
const ecsPatterns = require("../../lib");
test('test fargate queue worker service construct - with only required props', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    // WHEN
    new ecsPatterns.QueueProcessingFargateService(stack, 'Service', {
        cluster,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
    });
    // THEN - QueueWorker is of FARGATE launch type, an SQS queue is created and all default properties are set.
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        LaunchType: 'FARGATE',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        RedrivePolicy: {
            deadLetterTargetArn: {
                'Fn::GetAtt': [
                    'ServiceEcsProcessingDeadLetterQueue4A89196E',
                    'Arn',
                ],
            },
            maxReceiveCount: 3,
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        MessageRetentionPeriod: 1209600,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: [
                        'sqs:ReceiveMessage',
                        'sqs:ChangeMessageVisibility',
                        'sqs:GetQueueUrl',
                        'sqs:DeleteMessage',
                        'sqs:GetQueueAttributes',
                    ],
                    Effect: 'Allow',
                    Resource: {
                        'Fn::GetAtt': [
                            'ServiceEcsProcessingQueueC266885C',
                            'Arn',
                        ],
                    },
                },
            ],
            Version: '2012-10-17',
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Environment: [
                    {
                        Name: 'QUEUE_NAME',
                        Value: {
                            'Fn::GetAtt': [
                                'ServiceEcsProcessingQueueC266885C',
                                'QueueName',
                            ],
                        },
                    },
                ],
                LogConfiguration: {
                    LogDriver: 'awslogs',
                    Options: {
                        'awslogs-group': {
                            Ref: 'ServiceQueueProcessingTaskDefQueueProcessingContainerLogGroupD52338D1',
                        },
                        'awslogs-stream-prefix': 'Service',
                        'awslogs-region': {
                            Ref: 'AWS::Region',
                        },
                    },
                },
                Image: 'test',
            }),
        ],
        Family: 'ServiceQueueProcessingTaskDef83DB34F1',
    });
});
test('test fargate queue worker service construct - with remove default desiredCount feature flag', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.QueueProcessingFargateService(stack, 'Service', {
        cluster,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
    });
    // THEN - QueueWorker is of FARGATE launch type, and desiredCount is not defined on the FargateService.
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        DesiredCount: assertions_1.Match.absent(),
        LaunchType: 'FARGATE',
    });
});
test('test fargate queue worker service construct - with optional props for queues', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    // WHEN
    new ecsPatterns.QueueProcessingFargateService(stack, 'Service', {
        cluster,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
        maxReceiveCount: 42,
        retentionPeriod: cdk.Duration.days(7),
        visibilityTimeout: cdk.Duration.minutes(5),
    });
    // THEN - QueueWorker is of FARGATE launch type, an SQS queue is created and all default properties are set.
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        LaunchType: 'FARGATE',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        RedrivePolicy: {
            deadLetterTargetArn: {
                'Fn::GetAtt': [
                    'ServiceEcsProcessingDeadLetterQueue4A89196E',
                    'Arn',
                ],
            },
            maxReceiveCount: 42,
        },
        VisibilityTimeout: 300,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        MessageRetentionPeriod: 604800,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: [
                        'sqs:ReceiveMessage',
                        'sqs:ChangeMessageVisibility',
                        'sqs:GetQueueUrl',
                        'sqs:DeleteMessage',
                        'sqs:GetQueueAttributes',
                    ],
                    Effect: 'Allow',
                    Resource: {
                        'Fn::GetAtt': [
                            'ServiceEcsProcessingQueueC266885C',
                            'Arn',
                        ],
                    },
                },
            ],
            Version: '2012-10-17',
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Environment: [
                    {
                        Name: 'QUEUE_NAME',
                        Value: {
                            'Fn::GetAtt': [
                                'ServiceEcsProcessingQueueC266885C',
                                'QueueName',
                            ],
                        },
                    },
                ],
                LogConfiguration: {
                    LogDriver: 'awslogs',
                    Options: {
                        'awslogs-group': {
                            Ref: 'ServiceQueueProcessingTaskDefQueueProcessingContainerLogGroupD52338D1',
                        },
                        'awslogs-stream-prefix': 'Service',
                        'awslogs-region': {
                            Ref: 'AWS::Region',
                        },
                    },
                },
                Image: 'test',
            }),
        ],
        Family: 'ServiceQueueProcessingTaskDef83DB34F1',
    });
});
test('test Fargate queue worker service construct - with ECS Exec', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    // WHEN
    new ecsPatterns.QueueProcessingFargateService(stack, 'Service', {
        cluster,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
        enableExecuteCommand: true,
    });
    // THEN
    // ECS Exec
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: [
                        'ssmmessages:CreateControlChannel',
                        'ssmmessages:CreateDataChannel',
                        'ssmmessages:OpenControlChannel',
                        'ssmmessages:OpenDataChannel',
                    ],
                    Effect: 'Allow',
                    Resource: '*',
                },
                {
                    Action: 'logs:DescribeLogGroups',
                    Effect: 'Allow',
                    Resource: '*',
                },
                {
                    Action: [
                        'logs:CreateLogStream',
                        'logs:DescribeLogStreams',
                        'logs:PutLogEvents',
                    ],
                    Effect: 'Allow',
                    Resource: '*',
                },
                {
                    Action: [
                        'sqs:ReceiveMessage',
                        'sqs:ChangeMessageVisibility',
                        'sqs:GetQueueUrl',
                        'sqs:DeleteMessage',
                        'sqs:GetQueueAttributes',
                    ],
                    Effect: 'Allow',
                    Resource: {
                        'Fn::GetAtt': [
                            'ServiceEcsProcessingQueueC266885C',
                            'Arn',
                        ],
                    },
                },
            ],
            Version: '2012-10-17',
        },
        PolicyName: 'ServiceQueueProcessingTaskDefTaskRoleDefaultPolicy11D50174',
        Roles: [
            {
                Ref: 'ServiceQueueProcessingTaskDefTaskRoleBDE5D3C6',
            },
        ],
    });
});
test('test Fargate queue worker service construct - without desiredCount specified', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    const queue = new sqs.Queue(stack, 'fargate-test-queue', {
        queueName: 'fargate-test-sqs-queue',
    });
    // WHEN
    new ecsPatterns.QueueProcessingFargateService(stack, 'Service', {
        cluster,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
        command: ['-c', '4', 'amazon.com'],
        enableLogging: false,
        environment: {
            TEST_ENVIRONMENT_VARIABLE1: 'test environment variable 1 value',
            TEST_ENVIRONMENT_VARIABLE2: 'test environment variable 2 value',
        },
        queue,
        maxScalingCapacity: 5,
        minScalingCapacity: 2,
        minHealthyPercent: 60,
        maxHealthyPercent: 150,
        serviceName: 'fargate-test-service',
        family: 'fargate-task-family',
        platformVersion: ecs.FargatePlatformVersion.VERSION1_4,
        deploymentController: {
            type: ecs.DeploymentControllerType.CODE_DEPLOY,
        },
    });
    // THEN - QueueWorker is of FARGATE launch type, an SQS queue is created and all optional properties are set.
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        DeploymentConfiguration: {
            MinimumHealthyPercent: 60,
            MaximumPercent: 150,
        },
        LaunchType: 'FARGATE',
        ServiceName: 'fargate-test-service',
        PlatformVersion: ecs.FargatePlatformVersion.VERSION1_4,
        DeploymentController: {
            Type: 'CODE_DEPLOY',
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApplicationAutoScaling::ScalableTarget', {
        MaxCapacity: 5,
        MinCapacity: 2,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', { QueueName: 'fargate-test-sqs-queue' });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Command: [
                    '-c',
                    '4',
                    'amazon.com',
                ],
                Environment: [
                    {
                        Name: 'TEST_ENVIRONMENT_VARIABLE1',
                        Value: 'test environment variable 1 value',
                    },
                    {
                        Name: 'TEST_ENVIRONMENT_VARIABLE2',
                        Value: 'test environment variable 2 value',
                    },
                    {
                        Name: 'QUEUE_NAME',
                        Value: {
                            'Fn::GetAtt': [
                                'fargatetestqueue28B43841',
                                'QueueName',
                            ],
                        },
                    },
                ],
                Image: 'test',
            }),
        ],
        Family: 'fargate-task-family',
    });
});
(0, cdk_build_tools_1.testDeprecated)('test Fargate queue worker service construct - with optional props', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    const queue = new sqs.Queue(stack, 'fargate-test-queue', {
        queueName: 'fargate-test-sqs-queue',
    });
    // WHEN
    new ecsPatterns.QueueProcessingFargateService(stack, 'Service', {
        cluster,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
        command: ['-c', '4', 'amazon.com'],
        enableLogging: false,
        environment: {
            TEST_ENVIRONMENT_VARIABLE1: 'test environment variable 1 value',
            TEST_ENVIRONMENT_VARIABLE2: 'test environment variable 2 value',
        },
        queue,
        maxScalingCapacity: 5,
        minHealthyPercent: 60,
        maxHealthyPercent: 150,
        serviceName: 'fargate-test-service',
        family: 'fargate-task-family',
        platformVersion: ecs.FargatePlatformVersion.VERSION1_4,
        circuitBreaker: { rollback: true },
    });
    // THEN - QueueWorker is of FARGATE launch type, an SQS queue is created and all optional properties are set.
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        DeploymentConfiguration: {
            MinimumHealthyPercent: 60,
            MaximumPercent: 150,
            DeploymentCircuitBreaker: {
                Enable: true,
                Rollback: true,
            },
        },
        LaunchType: 'FARGATE',
        ServiceName: 'fargate-test-service',
        PlatformVersion: ecs.FargatePlatformVersion.VERSION1_4,
        DeploymentController: {
            Type: 'ECS',
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', { QueueName: 'fargate-test-sqs-queue' });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Command: [
                    '-c',
                    '4',
                    'amazon.com',
                ],
                Environment: [
                    {
                        Name: 'TEST_ENVIRONMENT_VARIABLE1',
                        Value: 'test environment variable 1 value',
                    },
                    {
                        Name: 'TEST_ENVIRONMENT_VARIABLE2',
                        Value: 'test environment variable 2 value',
                    },
                    {
                        Name: 'QUEUE_NAME',
                        Value: {
                            'Fn::GetAtt': [
                                'fargatetestqueue28B43841',
                                'QueueName',
                            ],
                        },
                    },
                ],
                Image: 'test',
            }),
        ],
        Family: 'fargate-task-family',
    });
});
test('can set custom containerName', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
    cluster.addAsgCapacityProvider(new aws_ecs_1.AsgCapacityProvider(stack, 'DefaultAutoScalingGroupProvider', {
        autoScalingGroup: new aws_autoscaling_1.AutoScalingGroup(stack, 'DefaultAutoScalingGroup', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: aws_ec2_1.MachineImage.latestAmazonLinux(),
        }),
    }));
    // WHEN
    new ecsPatterns.QueueProcessingFargateService(stack, 'Service', {
        cluster,
        containerName: 'my-container',
        image: ecs.ContainerImage.fromRegistry('test'),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::TaskDefinition', {
        ContainerDefinitions: [
            assertions_1.Match.objectLike({
                Name: 'my-container',
            }),
        ],
    });
});
test('can set custom networking options', () => {
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC', {
        subnetConfiguration: [
            {
                cidrMask: 24,
                name: 'Public',
                subnetType: ec2.SubnetType.PUBLIC,
            },
            {
                cidrMask: 24,
                name: 'Isolated',
                subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
            },
        ],
    });
    const securityGroup = new ec2.SecurityGroup(stack, 'MyCustomSG', {
        vpc,
    });
    // WHEN - SecurityGroups and taskSubnets selection is defined
    new ecsPatterns.QueueProcessingFargateService(stack, 'Service', {
        vpc,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
        securityGroups: [securityGroup],
        taskSubnets: { subnetType: ec2.SubnetType.PRIVATE_ISOLATED },
    });
    // THEN - NetworkConfiguration is created with the specific security groups and selected subnets
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        LaunchType: 'FARGATE',
        NetworkConfiguration: {
            AwsvpcConfiguration: {
                AssignPublicIp: 'DISABLED',
                SecurityGroups: [
                    {
                        'Fn::GetAtt': [
                            'MyCustomSGDE27C661',
                            'GroupId',
                        ],
                    },
                ],
                Subnets: [
                    {
                        Ref: 'VPCIsolatedSubnet1SubnetEBD00FC6',
                    },
                    {
                        Ref: 'VPCIsolatedSubnet2Subnet4B1C8CAA',
                    },
                ],
            },
        },
    });
});
test('can set use public IP', () => {
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'VPC');
    // WHEN - Assign Public IP is set to True
    new ecsPatterns.QueueProcessingFargateService(stack, 'Service', {
        vpc,
        memoryLimitMiB: 512,
        image: ecs.ContainerImage.fromRegistry('test'),
        assignPublicIp: true,
    });
    // THEN - The Subnets defaults to Public and AssignPublicIp settings change to ENABLED
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        LaunchType: 'FARGATE',
        NetworkConfiguration: {
            AwsvpcConfiguration: {
                AssignPublicIp: 'ENABLED',
                SecurityGroups: [
                    {
                        'Fn::GetAtt': [
                            'ServiceQueueProcessingFargateServiceSecurityGroup6E981512',
                            'GroupId',
                        ],
                    },
                ],
                Subnets: [
                    {
                        Ref: 'VPCPublicSubnet1SubnetB4246D30',
                    },
                    {
                        Ref: 'VPCPublicSubnet2Subnet74179F39',
                    },
                ],
            },
        },
    });
});
test('can set capacity provider strategies', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const vpc = new ec2.Vpc(stack, 'MyVpc', {});
    const cluster = new ecs.Cluster(stack, 'EcsCluster', {
        vpc,
    });
    cluster.enableFargateCapacityProviders();
    // WHEN
    new ecsPatterns.QueueProcessingFargateService(stack, 'Service', {
        cluster,
        image: ecs.ContainerImage.fromRegistry('test'),
        capacityProviderStrategies: [
            {
                capacityProvider: 'FARGATE_SPOT',
                weight: 2,
            },
            {
                capacityProvider: 'FARGATE',
                weight: 1,
            },
        ],
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ECS::Service', {
        LaunchType: assertions_1.Match.absent(),
        CapacityProviderStrategy: [
            {
                CapacityProvider: 'FARGATE_SPOT',
                Weight: 2,
            },
            {
                CapacityProvider: 'FARGATE',
                Weight: 1,
            },
        ],
    });
});
it('can set queue props by queue construct', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const queue = new aws_sqs_1.Queue(stack, 'Queue', {
        queueName: 'custom-queue',
        visibilityTimeout: cdk.Duration.seconds(200),
        deadLetterQueue: {
            queue: new aws_sqs_1.Queue(stack, 'DeadLetterQueue', {
                queueName: 'custom-dead-letter-queue',
                retentionPeriod: cdk.Duration.seconds(100),
            }),
            maxReceiveCount: 10,
        },
    });
    // WHEN
    new ecsPatterns.QueueProcessingFargateService(stack, 'Service', {
        image: ecs.ContainerImage.fromRegistry('test'),
        queue: queue,
    });
    // Queue
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        QueueName: 'custom-queue',
        VisibilityTimeout: 200,
        RedrivePolicy: {
            maxReceiveCount: 10,
        },
    });
    // DLQ
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        QueueName: 'custom-dead-letter-queue',
        MessageRetentionPeriod: 100,
    });
});
it('can set queue props by QueueProcessingServiceBaseProps', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    new ecsPatterns.QueueProcessingFargateService(stack, 'Service', {
        image: ecs.ContainerImage.fromRegistry('test'),
        retentionPeriod: cdk.Duration.seconds(100),
        visibilityTimeout: cdk.Duration.seconds(200),
        maxReceiveCount: 10,
    });
    // Queue
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        QueueName: assertions_1.Match.absent(),
        VisibilityTimeout: 200,
        RedrivePolicy: {
            maxReceiveCount: 10,
        },
    });
    // DLQ
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
        QueueName: assertions_1.Match.absent(),
        MessageRetentionPeriod: 100,
    });
});
it('throws validation errors of the specific queue prop, when setting queue and queue related props at same time', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const queue = new aws_sqs_1.Queue(stack, 'Queue');
    // Setting all retentionPeriod, visibilityTimeout and maxReceiveCount
    expect(() => {
        new ecsPatterns.QueueProcessingFargateService(stack, 'Service1', {
            image: ecs.ContainerImage.fromRegistry('test'),
            queue: queue,
            retentionPeriod: cdk.Duration.seconds(100),
            visibilityTimeout: cdk.Duration.seconds(200),
            maxReceiveCount: 10,
        });
    }).toThrow(new Error('retentionPeriod, visibilityTimeout, maxReceiveCount can be set only when queue is not set. Specify them in the QueueProps of the queue'));
    // Setting only visibilityTimeout
    expect(() => {
        new ecsPatterns.QueueProcessingFargateService(stack, 'Service2', {
            image: ecs.ContainerImage.fromRegistry('test'),
            queue: queue,
            visibilityTimeout: cdk.Duration.seconds(200),
        });
    }).toThrow(new Error('visibilityTimeout can be set only when queue is not set. Specify them in the QueueProps of the queue'));
});
//# sourceMappingURL=data:application/json;base64,