"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const ec2 = require("../../../aws-ec2");
const elbv2 = require("../../../aws-elasticloadbalancingv2");
const core_1 = require("../../../core");
const ecs = require("../../lib");
const util_1 = require("../util");
// Test various cross-stack Cluster/Service/ALB scenario's
let app;
let stack1;
let stack2;
let cluster;
let service;
describe('cross stack', () => {
    beforeEach(() => {
        app = new core_1.App();
        stack1 = new core_1.Stack(app, 'Stack1');
        const vpc = new ec2.Vpc(stack1, 'Vpc');
        cluster = new ecs.Cluster(stack1, 'Cluster', {
            vpc,
        });
        (0, util_1.addDefaultCapacityProvider)(cluster, stack1, vpc);
        stack2 = new core_1.Stack(app, 'Stack2');
        const taskDefinition = new ecs.Ec2TaskDefinition(stack2, 'TD');
        const container = taskDefinition.addContainer('Main', {
            image: ecs.ContainerImage.fromRegistry('asdf'),
            memoryLimitMiB: 512,
        });
        container.addPortMappings({ containerPort: 8000 });
        service = new ecs.Ec2Service(stack2, 'Service', {
            cluster,
            taskDefinition,
        });
    });
    test('ALB next to Service', () => {
        // WHEN
        const lb = new elbv2.ApplicationLoadBalancer(stack2, 'ALB', { vpc: cluster.vpc });
        const listener = lb.addListener('listener', { port: 80 });
        listener.addTargets('target', {
            port: 80,
            targets: [service],
        });
        // THEN: it shouldn't throw due to cyclic dependencies
        assertions_1.Template.fromStack(stack2).resourceCountIs('AWS::ECS::Service', 1);
        expectIngress(stack2);
    });
    test('ALB next to Cluster', () => {
        // WHEN
        const lb = new elbv2.ApplicationLoadBalancer(stack1, 'ALB', { vpc: cluster.vpc });
        const listener = lb.addListener('listener', { port: 80 });
        listener.addTargets('target', {
            port: 80,
            targets: [service],
        });
        // THEN: it shouldn't throw due to cyclic dependencies
        assertions_1.Template.fromStack(stack2).resourceCountIs('AWS::ECS::Service', 1);
        expectIngress(stack2);
    });
    test('ALB in its own stack', () => {
        // WHEN
        const stack3 = new core_1.Stack(app, 'Stack3');
        const lb = new elbv2.ApplicationLoadBalancer(stack3, 'ALB', { vpc: cluster.vpc });
        const listener = lb.addListener('listener', { port: 80 });
        listener.addTargets('target', {
            port: 80,
            targets: [service],
        });
        // THEN: it shouldn't throw due to cyclic dependencies
        assertions_1.Template.fromStack(stack2).resourceCountIs('AWS::ECS::Service', 1);
        expectIngress(stack2);
    });
});
function expectIngress(stack) {
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::SecurityGroupIngress', {
        FromPort: 32768,
        ToPort: 65535,
        GroupId: { 'Fn::ImportValue': 'Stack1:ExportsOutputFnGetAttDefaultAutoScalingGroupInstanceSecurityGroupFBA881D0GroupId2F7C804A' },
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvc3Mtc3RhY2sudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNyb3NzLXN0YWNrLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvREFBK0M7QUFDL0Msd0NBQXdDO0FBQ3hDLDZEQUE2RDtBQUM3RCx3Q0FBMkM7QUFDM0MsaUNBQWlDO0FBQ2pDLGtDQUFxRDtBQUVyRCwwREFBMEQ7QUFFMUQsSUFBSSxHQUFRLENBQUM7QUFDYixJQUFJLE1BQWEsQ0FBQztBQUNsQixJQUFJLE1BQWEsQ0FBQztBQUNsQixJQUFJLE9BQW9CLENBQUM7QUFDekIsSUFBSSxPQUF1QixDQUFDO0FBRTVCLFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO0lBQzNCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxHQUFHLEdBQUcsSUFBSSxVQUFHLEVBQUUsQ0FBQztRQUVoQixNQUFNLEdBQUcsSUFBSSxZQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkMsT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFO1lBQzNDLEdBQUc7U0FDSixDQUFDLENBQUM7UUFDSCxJQUFBLGlDQUEwQixFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFakQsTUFBTSxHQUFHLElBQUksWUFBSyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNsQyxNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDL0QsTUFBTSxTQUFTLEdBQUcsY0FBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDcEQsS0FBSyxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztZQUM5QyxjQUFjLEVBQUUsR0FBRztTQUNwQixDQUFDLENBQUM7UUFDSCxTQUFTLENBQUMsZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFFbkQsT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFO1lBQzlDLE9BQU87WUFDUCxjQUFjO1NBQ2YsQ0FBQyxDQUFDO0lBR0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO1FBQy9CLE9BQU87UUFDUCxNQUFNLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2xGLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUQsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUU7WUFDNUIsSUFBSSxFQUFFLEVBQUU7WUFDUixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUM7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsc0RBQXNEO1FBQ3RELHFCQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVuRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFHeEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO1FBQy9CLE9BQU87UUFDUCxNQUFNLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2xGLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUQsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUU7WUFDNUIsSUFBSSxFQUFFLEVBQUU7WUFDUixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUM7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsc0RBQXNEO1FBQ3RELHFCQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFHeEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1FBQ2hDLE9BQU87UUFDUCxNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDeEMsTUFBTSxFQUFFLEdBQUcsSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNsRixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFELFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFO1lBQzVCLElBQUksRUFBRSxFQUFFO1lBQ1IsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDO1NBQ25CLENBQUMsQ0FBQztRQUVILHNEQUFzRDtRQUN0RCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbkUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBR3hCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLGFBQWEsQ0FBQyxLQUFZO0lBQ2pDLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLGdDQUFnQyxFQUFFO1FBQ2hGLFFBQVEsRUFBRSxLQUFLO1FBQ2YsTUFBTSxFQUFFLEtBQUs7UUFDYixPQUFPLEVBQUUsRUFBRSxpQkFBaUIsRUFBRSxpR0FBaUcsRUFBRTtLQUNsSSxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIGVjMiBmcm9tICcuLi8uLi8uLi9hd3MtZWMyJztcbmltcG9ydCAqIGFzIGVsYnYyIGZyb20gJy4uLy4uLy4uL2F3cy1lbGFzdGljbG9hZGJhbGFuY2luZ3YyJztcbmltcG9ydCB7IEFwcCwgU3RhY2sgfSBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIGVjcyBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IHsgYWRkRGVmYXVsdENhcGFjaXR5UHJvdmlkZXIgfSBmcm9tICcuLi91dGlsJztcblxuLy8gVGVzdCB2YXJpb3VzIGNyb3NzLXN0YWNrIENsdXN0ZXIvU2VydmljZS9BTEIgc2NlbmFyaW8nc1xuXG5sZXQgYXBwOiBBcHA7XG5sZXQgc3RhY2sxOiBTdGFjaztcbmxldCBzdGFjazI6IFN0YWNrO1xubGV0IGNsdXN0ZXI6IGVjcy5DbHVzdGVyO1xubGV0IHNlcnZpY2U6IGVjcy5FYzJTZXJ2aWNlO1xuXG5kZXNjcmliZSgnY3Jvc3Mgc3RhY2snLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGFwcCA9IG5ldyBBcHAoKTtcblxuICAgIHN0YWNrMSA9IG5ldyBTdGFjayhhcHAsICdTdGFjazEnKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjazEsICdWcGMnKTtcbiAgICBjbHVzdGVyID0gbmV3IGVjcy5DbHVzdGVyKHN0YWNrMSwgJ0NsdXN0ZXInLCB7XG4gICAgICB2cGMsXG4gICAgfSk7XG4gICAgYWRkRGVmYXVsdENhcGFjaXR5UHJvdmlkZXIoY2x1c3Rlciwgc3RhY2sxLCB2cGMpO1xuXG4gICAgc3RhY2syID0gbmV3IFN0YWNrKGFwcCwgJ1N0YWNrMicpO1xuICAgIGNvbnN0IHRhc2tEZWZpbml0aW9uID0gbmV3IGVjcy5FYzJUYXNrRGVmaW5pdGlvbihzdGFjazIsICdURCcpO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRhc2tEZWZpbml0aW9uLmFkZENvbnRhaW5lcignTWFpbicsIHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhc2RmJyksXG4gICAgICBtZW1vcnlMaW1pdE1pQjogNTEyLFxuICAgIH0pO1xuICAgIGNvbnRhaW5lci5hZGRQb3J0TWFwcGluZ3MoeyBjb250YWluZXJQb3J0OiA4MDAwIH0pO1xuXG4gICAgc2VydmljZSA9IG5ldyBlY3MuRWMyU2VydmljZShzdGFjazIsICdTZXJ2aWNlJywge1xuICAgICAgY2x1c3RlcixcbiAgICAgIHRhc2tEZWZpbml0aW9uLFxuICAgIH0pO1xuXG5cbiAgfSk7XG5cbiAgdGVzdCgnQUxCIG5leHQgdG8gU2VydmljZScsICgpID0+IHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgbGIgPSBuZXcgZWxidjIuQXBwbGljYXRpb25Mb2FkQmFsYW5jZXIoc3RhY2syLCAnQUxCJywgeyB2cGM6IGNsdXN0ZXIudnBjIH0pO1xuICAgIGNvbnN0IGxpc3RlbmVyID0gbGIuYWRkTGlzdGVuZXIoJ2xpc3RlbmVyJywgeyBwb3J0OiA4MCB9KTtcbiAgICBsaXN0ZW5lci5hZGRUYXJnZXRzKCd0YXJnZXQnLCB7XG4gICAgICBwb3J0OiA4MCxcbiAgICAgIHRhcmdldHM6IFtzZXJ2aWNlXSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU46IGl0IHNob3VsZG4ndCB0aHJvdyBkdWUgdG8gY3ljbGljIGRlcGVuZGVuY2llc1xuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjazIpLnJlc291cmNlQ291bnRJcygnQVdTOjpFQ1M6OlNlcnZpY2UnLCAxKTtcblxuICAgIGV4cGVjdEluZ3Jlc3Moc3RhY2syKTtcblxuXG4gIH0pO1xuXG4gIHRlc3QoJ0FMQiBuZXh0IHRvIENsdXN0ZXInLCAoKSA9PiB7XG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGxiID0gbmV3IGVsYnYyLkFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyKHN0YWNrMSwgJ0FMQicsIHsgdnBjOiBjbHVzdGVyLnZwYyB9KTtcbiAgICBjb25zdCBsaXN0ZW5lciA9IGxiLmFkZExpc3RlbmVyKCdsaXN0ZW5lcicsIHsgcG9ydDogODAgfSk7XG4gICAgbGlzdGVuZXIuYWRkVGFyZ2V0cygndGFyZ2V0Jywge1xuICAgICAgcG9ydDogODAsXG4gICAgICB0YXJnZXRzOiBbc2VydmljZV0sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOOiBpdCBzaG91bGRuJ3QgdGhyb3cgZHVlIHRvIGN5Y2xpYyBkZXBlbmRlbmNpZXNcbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2syKS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6RUNTOjpTZXJ2aWNlJywgMSk7XG4gICAgZXhwZWN0SW5ncmVzcyhzdGFjazIpO1xuXG5cbiAgfSk7XG5cbiAgdGVzdCgnQUxCIGluIGl0cyBvd24gc3RhY2snLCAoKSA9PiB7XG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHN0YWNrMyA9IG5ldyBTdGFjayhhcHAsICdTdGFjazMnKTtcbiAgICBjb25zdCBsYiA9IG5ldyBlbGJ2Mi5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlcihzdGFjazMsICdBTEInLCB7IHZwYzogY2x1c3Rlci52cGMgfSk7XG4gICAgY29uc3QgbGlzdGVuZXIgPSBsYi5hZGRMaXN0ZW5lcignbGlzdGVuZXInLCB7IHBvcnQ6IDgwIH0pO1xuICAgIGxpc3RlbmVyLmFkZFRhcmdldHMoJ3RhcmdldCcsIHtcbiAgICAgIHBvcnQ6IDgwLFxuICAgICAgdGFyZ2V0czogW3NlcnZpY2VdLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTjogaXQgc2hvdWxkbid0IHRocm93IGR1ZSB0byBjeWNsaWMgZGVwZW5kZW5jaWVzXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrMikucmVzb3VyY2VDb3VudElzKCdBV1M6OkVDUzo6U2VydmljZScsIDEpO1xuICAgIGV4cGVjdEluZ3Jlc3Moc3RhY2syKTtcblxuXG4gIH0pO1xufSk7XG5cbmZ1bmN0aW9uIGV4cGVjdEluZ3Jlc3Moc3RhY2s6IFN0YWNrKSB7XG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDMjo6U2VjdXJpdHlHcm91cEluZ3Jlc3MnLCB7XG4gICAgRnJvbVBvcnQ6IDMyNzY4LFxuICAgIFRvUG9ydDogNjU1MzUsXG4gICAgR3JvdXBJZDogeyAnRm46OkltcG9ydFZhbHVlJzogJ1N0YWNrMTpFeHBvcnRzT3V0cHV0Rm5HZXRBdHREZWZhdWx0QXV0b1NjYWxpbmdHcm91cEluc3RhbmNlU2VjdXJpdHlHcm91cEZCQTg4MUQwR3JvdXBJZDJGN0M4MDRBJyB9LFxuICB9KTtcbn1cbiJdfQ==