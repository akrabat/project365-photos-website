"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const ec2 = require("../../aws-ec2");
const iam = require("../../aws-iam");
const kms = require("../../aws-kms");
const core_1 = require("../../core");
const lib_1 = require("../lib");
let stack = new core_1.Stack();
let vpc = new ec2.Vpc(stack, 'VPC');
beforeEach(() => {
    stack = new core_1.Stack();
    vpc = new ec2.Vpc(stack, 'VPC');
});
test('encryption is enabled by default', () => {
    const customStack = new core_1.Stack();
    const customVpc = new ec2.Vpc(customStack, 'VPC');
    new lib_1.FileSystem(customVpc, 'EfsFileSystem', {
        vpc: customVpc,
    });
    assertions_1.Template.fromStack(customStack).hasResourceProperties('AWS::EFS::FileSystem', {
        Encrypted: true,
    });
});
test('default file system is created correctly', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
    });
    // THEN
    const assertions = assertions_1.Template.fromStack(stack);
    assertions.hasResource('AWS::EFS::FileSystem', {
        DeletionPolicy: 'Retain',
        UpdateReplacePolicy: 'Retain',
    });
    assertions.resourceCountIs('AWS::EFS::MountTarget', 2);
    assertions.resourceCountIs('AWS::EC2::SecurityGroup', 1);
});
test('unencrypted file system is created correctly with default KMS', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        encrypted: false,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        Encrypted: false,
    });
});
test('encrypted file system is created correctly with default KMS', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        encrypted: true,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        Encrypted: true,
    });
});
test('encrypted file system is created correctly with custom KMS', () => {
    const key = new kms.Key(stack, 'customKeyFS');
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        encrypted: true,
        kmsKey: key,
    });
    // THEN
    /*
     * CDK appends 8-digit MD5 hash of the resource path to the logical Id of the resource in order to make sure
     * that the id is unique across multiple stacks. There isnt a direct way to identify the exact name of the resource
     * in generated CDK, hence hardcoding the MD5 hash here for assertion. Assumption is that the path of the Key wont
     * change in this UT. Checked the unique id by generating the cloud formation stack.
     */
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        Encrypted: true,
        KmsKeyId: {
            'Fn::GetAtt': [
                'customKeyFSDDB87C6D',
                'Arn',
            ],
        },
    });
});
test('file system is created correctly with a life cycle property', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        lifecyclePolicy: lib_1.LifecyclePolicy.AFTER_7_DAYS,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        LifecyclePolicies: [{
                TransitionToIA: 'AFTER_7_DAYS',
            }],
    });
});
test('file system is created correctly with a life cycle property and out of infrequent access property', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        lifecyclePolicy: lib_1.LifecyclePolicy.AFTER_7_DAYS,
        outOfInfrequentAccessPolicy: lib_1.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        LifecyclePolicies: [
            {
                TransitionToIA: 'AFTER_7_DAYS',
            },
            {
                TransitionToPrimaryStorageClass: 'AFTER_1_ACCESS',
            },
        ],
    });
});
test('LifecyclePolicies should be disabled when lifecyclePolicy and outInfrequentAccessPolicy are not specified', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        LifecyclePolicies: assertions_1.Match.absent(),
    });
});
test('file system is created correctly with performance mode', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        performanceMode: lib_1.PerformanceMode.MAX_IO,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        PerformanceMode: 'maxIO',
    });
});
test('file system is created correctly with bursting throughput mode', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        throughputMode: lib_1.ThroughputMode.BURSTING,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        ThroughputMode: 'bursting',
    });
});
test('file system is created correctly with elastic throughput mode', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        throughputMode: lib_1.ThroughputMode.ELASTIC,
        performanceMode: lib_1.PerformanceMode.GENERAL_PURPOSE,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        ThroughputMode: 'elastic',
    });
});
test('Exception when throughput mode is set to ELASTIC, performance mode cannot be MaxIO', () => {
    expect(() => {
        new lib_1.FileSystem(stack, 'EfsFileSystem', {
            vpc,
            throughputMode: lib_1.ThroughputMode.ELASTIC,
            performanceMode: lib_1.PerformanceMode.MAX_IO,
        });
    }).toThrowError(/ThroughputMode ELASTIC is not supported for file systems with performanceMode MAX_IO/);
});
test('Exception when throughput mode is set to PROVISIONED, but provisioned throughput is not set', () => {
    expect(() => {
        new lib_1.FileSystem(stack, 'EfsFileSystem', {
            vpc,
            throughputMode: lib_1.ThroughputMode.PROVISIONED,
        });
    }).toThrowError(/Property provisionedThroughputPerSecond is required when throughputMode is PROVISIONED/);
});
test('fails when provisioned throughput is less than the valid range', () => {
    expect(() => new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        throughputMode: lib_1.ThroughputMode.PROVISIONED,
        provisionedThroughputPerSecond: core_1.Size.kibibytes(10),
    })).toThrow(/cannot be converted into a whole number/);
});
test('fails when provisioned throughput is not a whole number of mebibytes', () => {
    expect(() => {
        new lib_1.FileSystem(stack, 'EfsFileSystem2', {
            vpc,
            throughputMode: lib_1.ThroughputMode.PROVISIONED,
            provisionedThroughputPerSecond: core_1.Size.kibibytes(2050),
        });
    }).toThrowError(/cannot be converted into a whole number/);
});
test('file system is created correctly with provisioned throughput mode', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        throughputMode: lib_1.ThroughputMode.PROVISIONED,
        provisionedThroughputPerSecond: core_1.Size.mebibytes(5),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        ThroughputMode: 'provisioned',
        ProvisionedThroughputInMibps: 5,
    });
});
test('existing file system is imported correctly using id', () => {
    // WHEN
    const fs = lib_1.FileSystem.fromFileSystemAttributes(stack, 'existingFS', {
        fileSystemId: 'fs123',
        securityGroup: ec2.SecurityGroup.fromSecurityGroupId(stack, 'SG', 'sg-123456789', {
            allowAllOutbound: false,
        }),
    });
    fs.connections.allowToAnyIpv4(ec2.Port.tcp(443));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::SecurityGroupEgress', {
        GroupId: 'sg-123456789',
    });
});
test('existing file system is imported correctly using arn', () => {
    // WHEN
    const arn = stack.formatArn({
        service: 'elasticfilesystem',
        resource: 'file-system',
        resourceName: 'fs-12912923',
    });
    const fs = lib_1.FileSystem.fromFileSystemAttributes(stack, 'existingFS', {
        fileSystemArn: arn,
        securityGroup: ec2.SecurityGroup.fromSecurityGroupId(stack, 'SG', 'sg-123456789', {
            allowAllOutbound: false,
        }),
    });
    fs.connections.allowToAnyIpv4(ec2.Port.tcp(443));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::SecurityGroupEgress', {
        GroupId: 'sg-123456789',
    });
    expect(fs.fileSystemArn).toEqual(arn);
    expect(fs.fileSystemId).toEqual('fs-12912923');
});
test('must throw an error when trying to import a fileSystem without specifying id or arn', () => {
    // WHEN
    expect(() => {
        lib_1.FileSystem.fromFileSystemAttributes(stack, 'existingFS', {
            securityGroup: ec2.SecurityGroup.fromSecurityGroupId(stack, 'SG', 'sg-123456789', {
                allowAllOutbound: false,
            }),
        });
    }).toThrow(/One of fileSystemId or fileSystemArn, but not both, must be provided./);
});
test('must throw an error when trying to import a fileSystem specifying both id and arn', () => {
    // WHEN
    const arn = stack.formatArn({
        service: 'elasticfilesystem',
        resource: 'file-system',
        resourceName: 'fs-12912923',
    });
    expect(() => {
        lib_1.FileSystem.fromFileSystemAttributes(stack, 'existingFS', {
            fileSystemArn: arn,
            fileSystemId: 'fs-12343435',
            securityGroup: ec2.SecurityGroup.fromSecurityGroupId(stack, 'SG', 'sg-123456789', {
                allowAllOutbound: false,
            }),
        });
    }).toThrow(/One of fileSystemId or fileSystemArn, but not both, must be provided./);
});
test('support granting permissions', () => {
    const fileSystem = new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
    });
    const role = new iam.Role(stack, 'Role', {
        assumedBy: new iam.AnyPrincipal(),
    });
    fileSystem.grant(role, 'elasticfilesystem:ClientWrite');
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: 'elasticfilesystem:ClientWrite',
                    Effect: 'Allow',
                    Resource: {
                        'Fn::GetAtt': [
                            'EfsFileSystem37910666',
                            'Arn',
                        ],
                    },
                },
            ],
            Version: '2012-10-17',
        },
        PolicyName: 'RoleDefaultPolicy5FFB7DAB',
        Roles: [
            {
                Ref: 'Role1ABCC5F0',
            },
        ],
    });
});
test('support tags', () => {
    // WHEN
    const fileSystem = new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
    });
    core_1.Tags.of(fileSystem).add('Name', 'LookAtMeAndMyFancyTags');
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        FileSystemTags: [
            { Key: 'Name', Value: 'LookAtMeAndMyFancyTags' },
        ],
    });
});
test('file system is created correctly when given a name', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        fileSystemName: 'MyNameableFileSystem',
        vpc,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        FileSystemTags: [
            { Key: 'Name', Value: 'MyNameableFileSystem' },
        ],
    });
});
test('auto-named if none provided', () => {
    // WHEN
    const fileSystem = new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        FileSystemTags: [
            { Key: 'Name', Value: fileSystem.node.path },
        ],
    });
});
test('removalPolicy is DESTROY', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', { vpc, removalPolicy: core_1.RemovalPolicy.DESTROY });
    // THEN
    assertions_1.Template.fromStack(stack).hasResource('AWS::EFS::FileSystem', {
        DeletionPolicy: 'Delete',
        UpdateReplacePolicy: 'Delete',
    });
});
test('can specify backup policy', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', { vpc, enableAutomaticBackups: true });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        BackupPolicy: {
            Status: 'ENABLED',
        },
    });
});
test('can create when using a VPC with multiple subnets per availability zone', () => {
    // create a vpc with two subnets in the same availability zone.
    const oneAzVpc = new ec2.Vpc(stack, 'Vpc', {
        maxAzs: 1,
        subnetConfiguration: [{ name: 'One', subnetType: ec2.SubnetType.PRIVATE_ISOLATED }, { name: 'Two', subnetType: ec2.SubnetType.PRIVATE_ISOLATED }],
        natGateways: 0,
    });
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc: oneAzVpc,
    });
    // make sure only one mount target is created.
    assertions_1.Template.fromStack(stack).resourceCountIs('AWS::EFS::MountTarget', 1);
});
test('can specify file system policy', () => {
    // WHEN
    const myFileSystemPolicy = new iam.PolicyDocument({
        statements: [new iam.PolicyStatement({
                actions: [
                    'elasticfilesystem:ClientWrite',
                    'elasticfilesystem:ClientMount',
                ],
                principals: [new iam.ArnPrincipal('arn:aws:iam::111122223333:role/Testing_Role')],
                resources: ['arn:aws:elasticfilesystem:us-east-2:111122223333:file-system/fs-1234abcd'],
                conditions: {
                    Bool: {
                        'elasticfilesystem:AccessedViaMountTarget': 'true',
                    },
                },
            })],
    });
    new lib_1.FileSystem(stack, 'EfsFileSystem', { vpc, fileSystemPolicy: myFileSystemPolicy });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        FileSystemPolicy: {
            Statement: [
                {
                    Effect: 'Allow',
                    Principal: {
                        AWS: 'arn:aws:iam::111122223333:role/Testing_Role',
                    },
                    Action: [
                        'elasticfilesystem:ClientWrite',
                        'elasticfilesystem:ClientMount',
                    ],
                    Resource: 'arn:aws:elasticfilesystem:us-east-2:111122223333:file-system/fs-1234abcd',
                    Condition: {
                        Bool: {
                            'elasticfilesystem:AccessedViaMountTarget': 'true',
                        },
                    },
                },
            ],
        },
    });
});
test('can add statements to file system policy', () => {
    // WHEN
    const statement1 = new iam.PolicyStatement({
        actions: [
            'elasticfilesystem:ClientMount',
        ],
        principals: [new iam.ArnPrincipal('arn:aws:iam::111122223333:role/Testing_Role1')],
        resources: ['arn:aws:elasticfilesystem:us-east-2:111122223333:file-system/fs-1234abcd'],
        conditions: {
            Bool: {
                'elasticfilesystem:AccessedViaMountTarget': 'true',
            },
        },
    });
    const statement2 = new iam.PolicyStatement({
        actions: [
            'elasticfilesystem:ClientMount',
            'elasticfilesystem:ClientWrite',
        ],
        principals: [new iam.ArnPrincipal('arn:aws:iam::111122223333:role/Testing_Role2')],
        resources: ['arn:aws:elasticfilesystem:us-east-2:111122223333:file-system/fs-1234abcd'],
        conditions: {
            Bool: {
                'elasticfilesystem:AccessedViaMountTarget': 'true',
            },
        },
    });
    const fileSystem = new lib_1.FileSystem(stack, 'EfsFileSystem', { vpc });
    fileSystem.addToResourcePolicy(statement1);
    fileSystem.addToResourcePolicy(statement2);
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EFS::FileSystem', {
        FileSystemPolicy: {
            Statement: [
                {
                    Effect: 'Allow',
                    Principal: {
                        AWS: 'arn:aws:iam::111122223333:role/Testing_Role1',
                    },
                    Action: 'elasticfilesystem:ClientMount',
                    Resource: 'arn:aws:elasticfilesystem:us-east-2:111122223333:file-system/fs-1234abcd',
                    Condition: {
                        Bool: {
                            'elasticfilesystem:AccessedViaMountTarget': 'true',
                        },
                    },
                },
                {
                    Effect: 'Allow',
                    Principal: {
                        AWS: 'arn:aws:iam::111122223333:role/Testing_Role2',
                    },
                    Action: [
                        'elasticfilesystem:ClientMount',
                        'elasticfilesystem:ClientWrite',
                    ],
                    Resource: 'arn:aws:elasticfilesystem:us-east-2:111122223333:file-system/fs-1234abcd',
                    Condition: {
                        Bool: {
                            'elasticfilesystem:AccessedViaMountTarget': 'true',
                        },
                    },
                },
            ],
        },
    });
});
test('imported file system can not add statements to file system policy', () => {
    // WHEN
    const statement = new iam.PolicyStatement({
        actions: [
            'elasticfilesystem:ClientMount',
        ],
        principals: [new iam.ArnPrincipal('arn:aws:iam::111122223333:role/Testing_Role')],
        resources: ['arn:aws:elasticfilesystem:us-east-2:111122223333:file-system/fs-1234abcd'],
        conditions: {
            Bool: {
                'elasticfilesystem:AccessedViaMountTarget': 'true',
            },
        },
    });
    const fileSystem = new lib_1.FileSystem(stack, 'FileSystem', { vpc });
    const importedFileSystem = lib_1.FileSystem.fromFileSystemAttributes(stack, 'ImportedFileSystem', {
        securityGroup: fileSystem.connections.securityGroups[0],
        fileSystemArn: fileSystem.fileSystemArn,
    });
    const fileSystemResult = fileSystem.addToResourcePolicy(statement);
    const importedFileSystemResult = importedFileSystem.addToResourcePolicy(statement);
    // THEN
    expect(fileSystemResult).toStrictEqual({
        statementAdded: true,
        policyDependable: fileSystem,
    });
    expect(importedFileSystemResult).toStrictEqual({
        statementAdded: false,
    });
});
//# sourceMappingURL=data:application/json;base64,