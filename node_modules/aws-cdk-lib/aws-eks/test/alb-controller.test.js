"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const assertions_1 = require("../../assertions");
const iam = require("../../aws-iam");
const util_1 = require("./util");
const lib_1 = require("../lib");
test('all vended policies are valid', () => {
    const addOnsDir = path.join(__dirname, '..', 'lib', 'addons');
    for (const addOn of fs.readdirSync(addOnsDir)) {
        if (addOn.startsWith('alb-iam_policy')) {
            const policy = JSON.parse(fs.readFileSync(path.join(addOnsDir, addOn)).toString());
            try {
                for (const statement of policy.Statement) {
                    iam.PolicyStatement.fromJson(statement);
                }
            }
            catch (error) {
                throw new Error(`Invalid policy: ${addOn}: ${error}`);
            }
        }
    }
});
test('can configure a custom repository', () => {
    const { stack } = (0, util_1.testFixture)();
    const cluster = new lib_1.Cluster(stack, 'Cluster', {
        version: lib_1.KubernetesVersion.V1_21,
    });
    lib_1.AlbController.create(stack, {
        cluster,
        version: lib_1.AlbControllerVersion.V2_4_1,
        repository: 'custom',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties(lib_1.HelmChart.RESOURCE_TYPE, {
        Values: {
            'Fn::Join': [
                '',
                [
                    '{"clusterName":"',
                    {
                        Ref: 'Cluster9EE0221C',
                    },
                    '","serviceAccount":{"create":false,"name":"aws-load-balancer-controller"},"region":"us-east-1","vpcId":"',
                    {
                        Ref: 'ClusterDefaultVpcFA9F2722',
                    },
                    '","image":{"repository":"custom","tag":"v2.4.1"}}',
                ],
            ],
        },
    });
});
test('throws when a policy is not defined for a custom version', () => {
    const { stack } = (0, util_1.testFixture)();
    const cluster = new lib_1.Cluster(stack, 'Cluster', {
        version: lib_1.KubernetesVersion.V1_21,
    });
    expect(() => lib_1.AlbController.create(stack, {
        cluster,
        version: lib_1.AlbControllerVersion.of('custom'),
    })).toThrowError("'albControllerOptions.policy' is required when using a custom controller version");
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxiLWNvbnRyb2xsZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFsYi1jb250cm9sbGVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLGlEQUE0QztBQUM1QyxxQ0FBcUM7QUFDckMsaUNBQXFDO0FBQ3JDLGdDQUFvRztBQUVwRyxJQUFJLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO0lBQ3pDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFOUQsS0FBSyxNQUFNLEtBQUssSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQzdDLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQ3RDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDbkYsSUFBSTtnQkFFRixLQUFLLE1BQU0sU0FBUyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7b0JBQ3hDLEdBQUcsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUN6QzthQUVGO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsS0FBSyxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUM7YUFDdkQ7U0FDRjtLQUNGO0FBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFO0lBQzdDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFBLGtCQUFXLEdBQUUsQ0FBQztJQUVoQyxNQUFNLE9BQU8sR0FBRyxJQUFJLGFBQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO1FBQzVDLE9BQU8sRUFBRSx1QkFBaUIsQ0FBQyxLQUFLO0tBQ2pDLENBQUMsQ0FBQztJQUVILG1CQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUMxQixPQUFPO1FBQ1AsT0FBTyxFQUFFLDBCQUFvQixDQUFDLE1BQU07UUFDcEMsVUFBVSxFQUFFLFFBQVE7S0FDckIsQ0FBQyxDQUFDO0lBRUgscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsZUFBUyxDQUFDLGFBQWEsRUFBRTtRQUN2RSxNQUFNLEVBQUU7WUFDTixVQUFVLEVBQUU7Z0JBQ1YsRUFBRTtnQkFDRjtvQkFDRSxrQkFBa0I7b0JBQ2xCO3dCQUNFLEdBQUcsRUFBRSxpQkFBaUI7cUJBQ3ZCO29CQUNELDBHQUEwRztvQkFDMUc7d0JBQ0UsR0FBRyxFQUFFLDJCQUEyQjtxQkFDakM7b0JBQ0QsbURBQW1EO2lCQUNwRDthQUNGO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQywwREFBMEQsRUFBRSxHQUFHLEVBQUU7SUFDcEUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUEsa0JBQVcsR0FBRSxDQUFDO0lBRWhDLE1BQU0sT0FBTyxHQUFHLElBQUksYUFBTyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7UUFDNUMsT0FBTyxFQUFFLHVCQUFpQixDQUFDLEtBQUs7S0FDakMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUN2QyxPQUFPO1FBQ1AsT0FBTyxFQUFFLDBCQUFvQixDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUM7S0FDM0MsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLGtGQUFrRixDQUFDLENBQUM7QUFDdkcsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIGlhbSBmcm9tICcuLi8uLi9hd3MtaWFtJztcbmltcG9ydCB7IHRlc3RGaXh0dXJlIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IENsdXN0ZXIsIEt1YmVybmV0ZXNWZXJzaW9uLCBBbGJDb250cm9sbGVyLCBBbGJDb250cm9sbGVyVmVyc2lvbiwgSGVsbUNoYXJ0IH0gZnJvbSAnLi4vbGliJztcblxudGVzdCgnYWxsIHZlbmRlZCBwb2xpY2llcyBhcmUgdmFsaWQnLCAoKSA9PiB7XG4gIGNvbnN0IGFkZE9uc0RpciA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicsICdsaWInLCAnYWRkb25zJyk7XG5cbiAgZm9yIChjb25zdCBhZGRPbiBvZiBmcy5yZWFkZGlyU3luYyhhZGRPbnNEaXIpKSB7XG4gICAgaWYgKGFkZE9uLnN0YXJ0c1dpdGgoJ2FsYi1pYW1fcG9saWN5JykpIHtcbiAgICAgIGNvbnN0IHBvbGljeSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihhZGRPbnNEaXIsIGFkZE9uKSkudG9TdHJpbmcoKSk7XG4gICAgICB0cnkge1xuXG4gICAgICAgIGZvciAoY29uc3Qgc3RhdGVtZW50IG9mIHBvbGljeS5TdGF0ZW1lbnQpIHtcbiAgICAgICAgICBpYW0uUG9saWN5U3RhdGVtZW50LmZyb21Kc29uKHN0YXRlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHBvbGljeTogJHthZGRPbn06ICR7ZXJyb3J9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxudGVzdCgnY2FuIGNvbmZpZ3VyZSBhIGN1c3RvbSByZXBvc2l0b3J5JywgKCkgPT4ge1xuICBjb25zdCB7IHN0YWNrIH0gPSB0ZXN0Rml4dHVyZSgpO1xuXG4gIGNvbnN0IGNsdXN0ZXIgPSBuZXcgQ2x1c3RlcihzdGFjaywgJ0NsdXN0ZXInLCB7XG4gICAgdmVyc2lvbjogS3ViZXJuZXRlc1ZlcnNpb24uVjFfMjEsXG4gIH0pO1xuXG4gIEFsYkNvbnRyb2xsZXIuY3JlYXRlKHN0YWNrLCB7XG4gICAgY2x1c3RlcixcbiAgICB2ZXJzaW9uOiBBbGJDb250cm9sbGVyVmVyc2lvbi5WMl80XzEsXG4gICAgcmVwb3NpdG9yeTogJ2N1c3RvbScsXG4gIH0pO1xuXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKEhlbG1DaGFydC5SRVNPVVJDRV9UWVBFLCB7XG4gICAgVmFsdWVzOiB7XG4gICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICcnLFxuICAgICAgICBbXG4gICAgICAgICAgJ3tcImNsdXN0ZXJOYW1lXCI6XCInLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFJlZjogJ0NsdXN0ZXI5RUUwMjIxQycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnXCIsXCJzZXJ2aWNlQWNjb3VudFwiOntcImNyZWF0ZVwiOmZhbHNlLFwibmFtZVwiOlwiYXdzLWxvYWQtYmFsYW5jZXItY29udHJvbGxlclwifSxcInJlZ2lvblwiOlwidXMtZWFzdC0xXCIsXCJ2cGNJZFwiOlwiJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBSZWY6ICdDbHVzdGVyRGVmYXVsdFZwY0ZBOUYyNzIyJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgICdcIixcImltYWdlXCI6e1wicmVwb3NpdG9yeVwiOlwiY3VzdG9tXCIsXCJ0YWdcIjpcInYyLjQuMVwifX0nLFxuICAgICAgICBdLFxuICAgICAgXSxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCd0aHJvd3Mgd2hlbiBhIHBvbGljeSBpcyBub3QgZGVmaW5lZCBmb3IgYSBjdXN0b20gdmVyc2lvbicsICgpID0+IHtcbiAgY29uc3QgeyBzdGFjayB9ID0gdGVzdEZpeHR1cmUoKTtcblxuICBjb25zdCBjbHVzdGVyID0gbmV3IENsdXN0ZXIoc3RhY2ssICdDbHVzdGVyJywge1xuICAgIHZlcnNpb246IEt1YmVybmV0ZXNWZXJzaW9uLlYxXzIxLFxuICB9KTtcblxuICBleHBlY3QoKCkgPT4gQWxiQ29udHJvbGxlci5jcmVhdGUoc3RhY2ssIHtcbiAgICBjbHVzdGVyLFxuICAgIHZlcnNpb246IEFsYkNvbnRyb2xsZXJWZXJzaW9uLm9mKCdjdXN0b20nKSxcbiAgfSkpLnRvVGhyb3dFcnJvcihcIidhbGJDb250cm9sbGVyT3B0aW9ucy5wb2xpY3knIGlzIHJlcXVpcmVkIHdoZW4gdXNpbmcgYSBjdXN0b20gY29udHJvbGxlciB2ZXJzaW9uXCIpO1xufSk7XG4iXX0=