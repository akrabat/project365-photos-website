"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const eks = require("../lib");
const compareLogging_1 = require("../lib/cluster-resource-handler/compareLogging");
describe('compareLoggingProps', () => {
    const oldEnabledTypes = [eks.ClusterLoggingTypes.API, eks.ClusterLoggingTypes.AUDIT];
    test('when newProps.logging.clusterLogging is undefined, should disable all types with enabled:true in oldProps', () => {
        const oldProps = {
            logging: {
                clusterLogging: [{ types: oldEnabledTypes, enabled: true }],
            },
        };
        const newProps = {
            logging: {},
        };
        const result = (0, compareLogging_1.compareLoggingProps)(oldProps, newProps);
        expect(result.logging?.clusterLogging).toEqual([{ types: oldEnabledTypes, enabled: false }]);
    });
    test('when newProps.logging is undefined, should disable all types with enabled:true in oldProps', () => {
        const oldProps = {
            logging: {
                clusterLogging: [{ types: oldEnabledTypes, enabled: true }],
            },
        };
        const newProps = {};
        const result = (0, compareLogging_1.compareLoggingProps)(oldProps, newProps);
        expect(result.logging?.clusterLogging).toEqual([{ types: oldEnabledTypes, enabled: false }]);
    });
    test('should disable types with enabled:true but not defined as enabled:true in newProps', () => {
        const oldProps = {
            logging: {
                clusterLogging: [{ types: oldEnabledTypes, enabled: true }],
            },
        };
        const newProps = {
            logging: {
                clusterLogging: [{ types: [eks.ClusterLoggingTypes.AUDIT], enabled: true }],
            },
        };
        const result = (0, compareLogging_1.compareLoggingProps)(oldProps, newProps);
        expect(result.logging?.clusterLogging).toEqual([{ types: [eks.ClusterLoggingTypes.AUDIT], enabled: true },
            { types: [eks.ClusterLoggingTypes.API], enabled: false }]);
    });
    test('when oldProps.logging.clusterLogging is undefined and newProps.logging.clusterLogging is undefined, result should be newProps', () => {
        const oldProps = {
            logging: {},
        };
        const newProps = {
            logging: {},
        };
        const result = (0, compareLogging_1.compareLoggingProps)(oldProps, newProps);
        expect(result).toEqual(newProps);
    });
    test('multiple enabled:true types in oldProps with clusterLogging undefined in newProps should all be disabled', () => {
        const oldProps = {
            logging: {
                clusterLogging: [{ types: oldEnabledTypes, enabled: true }],
            },
        };
        const newProps = {
            logging: {},
        };
        const result = (0, compareLogging_1.compareLoggingProps)(oldProps, newProps);
        expect(result.logging?.clusterLogging).toEqual([{ types: oldEnabledTypes, enabled: false }]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyZUxvZy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29tcGFyZUxvZy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsOEJBQThCO0FBQzlCLG1GQUFxRjtBQUVyRixRQUFRLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO0lBR25DLE1BQU0sZUFBZSxHQUFxQixDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQywyR0FBMkcsRUFBRSxHQUFHLEVBQUU7UUFDckgsTUFBTSxRQUFRLEdBQVU7WUFDdEIsT0FBTyxFQUFFO2dCQUNQLGNBQWMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDNUQ7U0FDRixDQUFDO1FBRUYsTUFBTSxRQUFRLEdBQVU7WUFDdEIsT0FBTyxFQUFFLEVBQUU7U0FDWixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsSUFBQSxvQ0FBbUIsRUFBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFdkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsNEZBQTRGLEVBQUUsR0FBRyxFQUFFO1FBQ3RHLE1BQU0sUUFBUSxHQUFVO1lBQ3RCLE9BQU8sRUFBRTtnQkFDUCxjQUFjLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO2FBQzVEO1NBQ0YsQ0FBQztRQUVGLE1BQU0sUUFBUSxHQUFVLEVBQUUsQ0FBQztRQUUzQixNQUFNLE1BQU0sR0FBRyxJQUFBLG9DQUFtQixFQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV2RCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvRixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxvRkFBb0YsRUFBRSxHQUFHLEVBQUU7UUFDOUYsTUFBTSxRQUFRLEdBQVU7WUFDdEIsT0FBTyxFQUFFO2dCQUNQLGNBQWMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDNUQ7U0FDRixDQUFDO1FBRUYsTUFBTSxRQUFRLEdBQVU7WUFDdEIsT0FBTyxFQUFFO2dCQUNQLGNBQWMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUM1RTtTQUNGLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxJQUFBLG9DQUFtQixFQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV2RCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO1lBQ3ZHLEVBQUUsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsK0hBQStILEVBQUUsR0FBRyxFQUFFO1FBQ3pJLE1BQU0sUUFBUSxHQUFVO1lBQ3RCLE9BQU8sRUFBRSxFQUFFO1NBQ1osQ0FBQztRQUVGLE1BQU0sUUFBUSxHQUFVO1lBQ3RCLE9BQU8sRUFBRSxFQUFFO1NBQ1osQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLElBQUEsb0NBQW1CLEVBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXZELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsMEdBQTBHLEVBQUUsR0FBRyxFQUFFO1FBQ3BILE1BQU0sUUFBUSxHQUFVO1lBQ3RCLE9BQU8sRUFBRTtnQkFDUCxjQUFjLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO2FBQzVEO1NBQ0YsQ0FBQztRQUVGLE1BQU0sUUFBUSxHQUFVO1lBQ3RCLE9BQU8sRUFBRSxFQUFFO1NBQ1osQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLElBQUEsb0NBQW1CLEVBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXZELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9GLENBQUMsQ0FBQyxDQUFDO0FBRUwsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhd3MgZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgKiBhcyBla3MgZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IGNvbXBhcmVMb2dnaW5nUHJvcHMgfSBmcm9tICcuLi9saWIvY2x1c3Rlci1yZXNvdXJjZS1oYW5kbGVyL2NvbXBhcmVMb2dnaW5nJztcblxuZGVzY3JpYmUoJ2NvbXBhcmVMb2dnaW5nUHJvcHMnLCAoKSA9PiB7XG5cbiAgdHlwZSBQcm9wcyA9IFBhcnRpYWw8YXdzLkVLUy5DcmVhdGVDbHVzdGVyUmVxdWVzdD47XG4gIGNvbnN0IG9sZEVuYWJsZWRUeXBlczogYXdzLkVLUy5Mb2dUeXBlcyA9IFtla3MuQ2x1c3RlckxvZ2dpbmdUeXBlcy5BUEksIGVrcy5DbHVzdGVyTG9nZ2luZ1R5cGVzLkFVRElUXTtcblxuICB0ZXN0KCd3aGVuIG5ld1Byb3BzLmxvZ2dpbmcuY2x1c3RlckxvZ2dpbmcgaXMgdW5kZWZpbmVkLCBzaG91bGQgZGlzYWJsZSBhbGwgdHlwZXMgd2l0aCBlbmFibGVkOnRydWUgaW4gb2xkUHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgb2xkUHJvcHM6IFByb3BzID0ge1xuICAgICAgbG9nZ2luZzoge1xuICAgICAgICBjbHVzdGVyTG9nZ2luZzogW3sgdHlwZXM6IG9sZEVuYWJsZWRUeXBlcywgZW5hYmxlZDogdHJ1ZSB9XSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IG5ld1Byb3BzOiBQcm9wcyA9IHtcbiAgICAgIGxvZ2dpbmc6IHt9LFxuICAgIH07XG5cbiAgICBjb25zdCByZXN1bHQgPSBjb21wYXJlTG9nZ2luZ1Byb3BzKG9sZFByb3BzLCBuZXdQcm9wcyk7XG5cbiAgICBleHBlY3QocmVzdWx0LmxvZ2dpbmc/LmNsdXN0ZXJMb2dnaW5nKS50b0VxdWFsKFt7IHR5cGVzOiBvbGRFbmFibGVkVHlwZXMsIGVuYWJsZWQ6IGZhbHNlIH1dKTtcbiAgfSk7XG5cbiAgdGVzdCgnd2hlbiBuZXdQcm9wcy5sb2dnaW5nIGlzIHVuZGVmaW5lZCwgc2hvdWxkIGRpc2FibGUgYWxsIHR5cGVzIHdpdGggZW5hYmxlZDp0cnVlIGluIG9sZFByb3BzJywgKCkgPT4ge1xuICAgIGNvbnN0IG9sZFByb3BzOiBQcm9wcyA9IHtcbiAgICAgIGxvZ2dpbmc6IHtcbiAgICAgICAgY2x1c3RlckxvZ2dpbmc6IFt7IHR5cGVzOiBvbGRFbmFibGVkVHlwZXMsIGVuYWJsZWQ6IHRydWUgfV0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCBuZXdQcm9wczogUHJvcHMgPSB7fTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmVMb2dnaW5nUHJvcHMob2xkUHJvcHMsIG5ld1Byb3BzKTtcblxuICAgIGV4cGVjdChyZXN1bHQubG9nZ2luZz8uY2x1c3RlckxvZ2dpbmcpLnRvRXF1YWwoW3sgdHlwZXM6IG9sZEVuYWJsZWRUeXBlcywgZW5hYmxlZDogZmFsc2UgfV0pO1xuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgZGlzYWJsZSB0eXBlcyB3aXRoIGVuYWJsZWQ6dHJ1ZSBidXQgbm90IGRlZmluZWQgYXMgZW5hYmxlZDp0cnVlIGluIG5ld1Byb3BzJywgKCkgPT4ge1xuICAgIGNvbnN0IG9sZFByb3BzOiBQcm9wcyA9IHtcbiAgICAgIGxvZ2dpbmc6IHtcbiAgICAgICAgY2x1c3RlckxvZ2dpbmc6IFt7IHR5cGVzOiBvbGRFbmFibGVkVHlwZXMsIGVuYWJsZWQ6IHRydWUgfV0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCBuZXdQcm9wczogUHJvcHMgPSB7XG4gICAgICBsb2dnaW5nOiB7XG4gICAgICAgIGNsdXN0ZXJMb2dnaW5nOiBbeyB0eXBlczogW2Vrcy5DbHVzdGVyTG9nZ2luZ1R5cGVzLkFVRElUXSwgZW5hYmxlZDogdHJ1ZSB9XSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmVMb2dnaW5nUHJvcHMob2xkUHJvcHMsIG5ld1Byb3BzKTtcblxuICAgIGV4cGVjdChyZXN1bHQubG9nZ2luZz8uY2x1c3RlckxvZ2dpbmcpLnRvRXF1YWwoW3sgdHlwZXM6IFtla3MuQ2x1c3RlckxvZ2dpbmdUeXBlcy5BVURJVF0sIGVuYWJsZWQ6IHRydWUgfSxcbiAgICAgIHsgdHlwZXM6IFtla3MuQ2x1c3RlckxvZ2dpbmdUeXBlcy5BUEldLCBlbmFibGVkOiBmYWxzZSB9XSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3doZW4gb2xkUHJvcHMubG9nZ2luZy5jbHVzdGVyTG9nZ2luZyBpcyB1bmRlZmluZWQgYW5kIG5ld1Byb3BzLmxvZ2dpbmcuY2x1c3RlckxvZ2dpbmcgaXMgdW5kZWZpbmVkLCByZXN1bHQgc2hvdWxkIGJlIG5ld1Byb3BzJywgKCkgPT4ge1xuICAgIGNvbnN0IG9sZFByb3BzOiBQcm9wcyA9IHtcbiAgICAgIGxvZ2dpbmc6IHt9LFxuICAgIH07XG5cbiAgICBjb25zdCBuZXdQcm9wczogUHJvcHMgPSB7XG4gICAgICBsb2dnaW5nOiB7fSxcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzdWx0ID0gY29tcGFyZUxvZ2dpbmdQcm9wcyhvbGRQcm9wcywgbmV3UHJvcHMpO1xuXG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChuZXdQcm9wcyk7XG4gIH0pO1xuXG4gIHRlc3QoJ211bHRpcGxlIGVuYWJsZWQ6dHJ1ZSB0eXBlcyBpbiBvbGRQcm9wcyB3aXRoIGNsdXN0ZXJMb2dnaW5nIHVuZGVmaW5lZCBpbiBuZXdQcm9wcyBzaG91bGQgYWxsIGJlIGRpc2FibGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9sZFByb3BzOiBQcm9wcyA9IHtcbiAgICAgIGxvZ2dpbmc6IHtcbiAgICAgICAgY2x1c3RlckxvZ2dpbmc6IFt7IHR5cGVzOiBvbGRFbmFibGVkVHlwZXMsIGVuYWJsZWQ6IHRydWUgfV0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCBuZXdQcm9wczogUHJvcHMgPSB7XG4gICAgICBsb2dnaW5nOiB7fSxcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzdWx0ID0gY29tcGFyZUxvZ2dpbmdQcm9wcyhvbGRQcm9wcywgbmV3UHJvcHMpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5sb2dnaW5nPy5jbHVzdGVyTG9nZ2luZykudG9FcXVhbChbeyB0eXBlczogb2xkRW5hYmxlZFR5cGVzLCBlbmFibGVkOiBmYWxzZSB9XSk7XG4gIH0pO1xuXG59KTsiXX0=