"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../../core");
const eks = require("../lib");
const k8s_object_value_1 = require("../lib/k8s-object-value");
const CLUSTER_VERSION = eks.KubernetesVersion.V1_16;
describe('k8s object value', () => {
    test('creates the correct custom resource with explicit values for all properties', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const cluster = new eks.Cluster(stack, 'MyCluster', { version: CLUSTER_VERSION });
        // WHEN
        const attribute = new k8s_object_value_1.KubernetesObjectValue(stack, 'MyAttribute', {
            cluster: cluster,
            jsonPath: '.status',
            objectName: 'mydeployment',
            objectType: 'deployment',
            objectNamespace: 'mynamespace',
            timeout: core_1.Duration.seconds(5),
        });
        const expectedCustomResourceId = 'MyAttributeF1E9B10D';
        const app = stack.node.root;
        const stackTemplate = app.synth().getStackArtifact(stack.stackName).template;
        expect(stackTemplate.Resources[expectedCustomResourceId]).toEqual({
            Type: 'Custom::AWSCDK-EKS-KubernetesObjectValue',
            Properties: {
                ServiceToken: {
                    'Fn::GetAtt': [
                        'awscdkawseksKubectlProviderNestedStackawscdkawseksKubectlProviderNestedStackResourceA7AEBA6B',
                        'Outputs.awscdkawseksKubectlProviderframeworkonEvent0A650005Arn',
                    ],
                },
                ClusterName: { Ref: 'MyCluster8AD82BF8' },
                RoleArn: { 'Fn::GetAtt': ['MyClusterCreationRoleB5FA4FF3', 'Arn'] },
                ObjectType: 'deployment',
                ObjectName: 'mydeployment',
                ObjectNamespace: 'mynamespace',
                JsonPath: '.status',
                TimeoutSeconds: 5,
            },
            DependsOn: ['MyClusterKubectlReadyBarrier7547948A'],
            UpdateReplacePolicy: 'Delete',
            DeletionPolicy: 'Delete',
        });
        expect(stack.resolve(attribute.value)).toEqual({ 'Fn::GetAtt': [expectedCustomResourceId, 'Value'] });
    });
    test('creates the correct custom resource with defaults', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const cluster = new eks.Cluster(stack, 'MyCluster', { version: CLUSTER_VERSION });
        // WHEN
        const attribute = new k8s_object_value_1.KubernetesObjectValue(stack, 'MyAttribute', {
            cluster: cluster,
            jsonPath: '.status',
            objectName: 'mydeployment',
            objectType: 'deployment',
        });
        const expectedCustomResourceId = 'MyAttributeF1E9B10D';
        const app = stack.node.root;
        const stackTemplate = app.synth().getStackArtifact(stack.stackName).template;
        expect(stackTemplate.Resources[expectedCustomResourceId]).toEqual({
            Type: 'Custom::AWSCDK-EKS-KubernetesObjectValue',
            Properties: {
                ServiceToken: {
                    'Fn::GetAtt': [
                        'awscdkawseksKubectlProviderNestedStackawscdkawseksKubectlProviderNestedStackResourceA7AEBA6B',
                        'Outputs.awscdkawseksKubectlProviderframeworkonEvent0A650005Arn',
                    ],
                },
                ClusterName: { Ref: 'MyCluster8AD82BF8' },
                RoleArn: { 'Fn::GetAtt': ['MyClusterCreationRoleB5FA4FF3', 'Arn'] },
                ObjectType: 'deployment',
                ObjectName: 'mydeployment',
                ObjectNamespace: 'default',
                JsonPath: '.status',
                TimeoutSeconds: 300,
            },
            DependsOn: ['MyClusterKubectlReadyBarrier7547948A'],
            UpdateReplacePolicy: 'Delete',
            DeletionPolicy: 'Delete',
        });
        expect(stack.resolve(attribute.value)).toEqual({ 'Fn::GetAtt': [expectedCustomResourceId, 'Value'] });
    });
});
//# sourceMappingURL=data:application/json;base64,