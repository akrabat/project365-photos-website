"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const eks = require("../lib");
const k8s_patch_1 = require("../lib/k8s-patch");
const CLUSTER_VERSION = eks.KubernetesVersion.V1_16;
describe('k8s patch', () => {
    test('applies a patch to k8s', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const cluster = new eks.Cluster(stack, 'MyCluster', { version: CLUSTER_VERSION });
        // WHEN
        const patch = new k8s_patch_1.KubernetesPatch(stack, 'MyPatch', {
            cluster,
            applyPatch: { patch: { to: 'apply' } },
            restorePatch: { restore: { patch: 123 } },
            resourceName: 'myResourceName',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::AWSCDK-EKS-KubernetesPatch', {
            ServiceToken: {
                'Fn::GetAtt': [
                    'awscdkawseksKubectlProviderNestedStackawscdkawseksKubectlProviderNestedStackResourceA7AEBA6B',
                    'Outputs.awscdkawseksKubectlProviderframeworkonEvent0A650005Arn',
                ],
            },
            ResourceName: 'myResourceName',
            ResourceNamespace: 'default',
            ApplyPatchJson: '{"patch":{"to":"apply"}}',
            RestorePatchJson: '{"restore":{"patch":123}}',
            ClusterName: {
                Ref: 'MyCluster8AD82BF8',
            },
            RoleArn: {
                'Fn::GetAtt': [
                    'MyClusterCreationRoleB5FA4FF3',
                    'Arn',
                ],
            },
        });
        // also make sure a dependency on the barrier is added to the patch construct.
        expect(patch.node.dependencies.map(d => core_1.Names.nodeUniqueId(d.node))).toEqual(['MyClusterKubectlReadyBarrier7547948A']);
    });
    test('defaults to "strategic" patch type if no patchType is specified', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const cluster = new eks.Cluster(stack, 'MyCluster', { version: CLUSTER_VERSION });
        // WHEN
        new k8s_patch_1.KubernetesPatch(stack, 'MyPatch', {
            cluster,
            applyPatch: { patch: { to: 'apply' } },
            restorePatch: { restore: { patch: 123 } },
            resourceName: 'myResourceName',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::AWSCDK-EKS-KubernetesPatch', {
            PatchType: 'strategic',
        });
    });
    test('uses specified to patch type if specified', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const cluster = new eks.Cluster(stack, 'MyCluster', { version: CLUSTER_VERSION });
        // WHEN
        new k8s_patch_1.KubernetesPatch(stack, 'jsonPatch', {
            cluster,
            applyPatch: { patch: { to: 'apply' } },
            restorePatch: { restore: { patch: 123 } },
            resourceName: 'jsonPatchResource',
            patchType: k8s_patch_1.PatchType.JSON,
        });
        new k8s_patch_1.KubernetesPatch(stack, 'mergePatch', {
            cluster,
            applyPatch: { patch: { to: 'apply' } },
            restorePatch: { restore: { patch: 123 } },
            resourceName: 'mergePatchResource',
            patchType: k8s_patch_1.PatchType.MERGE,
        });
        new k8s_patch_1.KubernetesPatch(stack, 'strategicPatch', {
            cluster,
            applyPatch: { patch: { to: 'apply' } },
            restorePatch: { restore: { patch: 123 } },
            resourceName: 'strategicPatchResource',
            patchType: k8s_patch_1.PatchType.STRATEGIC,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::AWSCDK-EKS-KubernetesPatch', {
            ResourceName: 'jsonPatchResource',
            PatchType: 'json',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::AWSCDK-EKS-KubernetesPatch', {
            ResourceName: 'mergePatchResource',
            PatchType: 'merge',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::AWSCDK-EKS-KubernetesPatch', {
            ResourceName: 'strategicPatchResource',
            PatchType: 'strategic',
        });
    });
});
//# sourceMappingURL=data:application/json;base64,