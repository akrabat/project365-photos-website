"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const iam = require("../../aws-iam");
const util_1 = require("./util");
const eks = require("../lib");
/* eslint-disable max-len */
describe('service account', () => {
    describe('add Service Account', () => {
        test('defaults should have default namespace and lowercase unique id', () => {
            // GIVEN
            const { stack, cluster } = (0, util_1.testFixtureCluster)();
            // WHEN
            new eks.ServiceAccount(stack, 'MyServiceAccount', { cluster });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties(eks.KubernetesManifest.RESOURCE_TYPE, {
                ServiceToken: {
                    'Fn::GetAtt': [
                        'awscdkawseksKubectlProviderNestedStackawscdkawseksKubectlProviderNestedStackResourceA7AEBA6B',
                        'Outputs.StackawscdkawseksKubectlProviderframeworkonEvent8897FD9BArn',
                    ],
                },
                Manifest: {
                    'Fn::Join': [
                        '',
                        [
                            '[{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"name\":\"stackmyserviceaccount58b9529e\",\"namespace\":\"default\",\"labels\":{\"app.kubernetes.io/name\":\"stackmyserviceaccount58b9529e\"},\"annotations\":{\"eks.amazonaws.com/role-arn\":\"',
                            {
                                'Fn::GetAtt': [
                                    'MyServiceAccountRoleB41709FF',
                                    'Arn',
                                ],
                            },
                            '\"}}}]',
                        ],
                    ],
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties(iam.CfnRole.CFN_RESOURCE_TYPE_NAME, {
                AssumeRolePolicyDocument: {
                    Statement: [
                        {
                            Action: 'sts:AssumeRoleWithWebIdentity',
                            Effect: 'Allow',
                            Principal: {
                                Federated: {
                                    Ref: 'ClusterOpenIdConnectProviderE7EB0530',
                                },
                            },
                            Condition: {
                                StringEquals: {
                                    'Fn::GetAtt': [
                                        'MyServiceAccountConditionJson1ED3BC54',
                                        'Value',
                                    ],
                                },
                            },
                        },
                    ],
                    Version: '2012-10-17',
                },
            });
        });
        test('it is possible to add annotations and labels', () => {
            // GIVEN
            const { stack, cluster } = (0, util_1.testFixtureCluster)();
            // WHEN
            new eks.ServiceAccount(stack, 'MyServiceAccount', {
                cluster,
                annotations: {
                    'eks.amazonaws.com/sts-regional-endpoints': 'false',
                },
                labels: {
                    'some-label': 'with-some-value',
                },
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties(eks.KubernetesManifest.RESOURCE_TYPE, {
                ServiceToken: {
                    'Fn::GetAtt': [
                        'awscdkawseksKubectlProviderNestedStackawscdkawseksKubectlProviderNestedStackResourceA7AEBA6B',
                        'Outputs.StackawscdkawseksKubectlProviderframeworkonEvent8897FD9BArn',
                    ],
                },
                Manifest: {
                    'Fn::Join': [
                        '',
                        [
                            '[{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"name\":\"stackmyserviceaccount58b9529e\",\"namespace\":\"default\",\"labels\":{\"app.kubernetes.io/name\":\"stackmyserviceaccount58b9529e\",\"some-label\":\"with-some-value\"},\"annotations\":{\"eks.amazonaws.com/role-arn\":\"',
                            {
                                'Fn::GetAtt': [
                                    'MyServiceAccountRoleB41709FF',
                                    'Arn',
                                ],
                            },
                            '\",\"eks.amazonaws.com/sts-regional-endpoints\":\"false\"}}}]',
                        ],
                    ],
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties(iam.CfnRole.CFN_RESOURCE_TYPE_NAME, {
                AssumeRolePolicyDocument: {
                    Statement: [
                        {
                            Action: 'sts:AssumeRoleWithWebIdentity',
                            Effect: 'Allow',
                            Principal: {
                                Federated: {
                                    Ref: 'ClusterOpenIdConnectProviderE7EB0530',
                                },
                            },
                            Condition: {
                                StringEquals: {
                                    'Fn::GetAtt': [
                                        'MyServiceAccountConditionJson1ED3BC54',
                                        'Value',
                                    ],
                                },
                            },
                        },
                    ],
                    Version: '2012-10-17',
                },
            });
        });
        test('should have allow multiple services accounts', () => {
            // GIVEN
            const { stack, cluster } = (0, util_1.testFixtureCluster)();
            // WHEN
            cluster.addServiceAccount('MyServiceAccount');
            cluster.addServiceAccount('MyOtherServiceAccount');
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties(eks.KubernetesManifest.RESOURCE_TYPE, {
                ServiceToken: {
                    'Fn::GetAtt': [
                        'awscdkawseksKubectlProviderNestedStackawscdkawseksKubectlProviderNestedStackResourceA7AEBA6B',
                        'Outputs.StackawscdkawseksKubectlProviderframeworkonEvent8897FD9BArn',
                    ],
                },
                Manifest: {
                    'Fn::Join': [
                        '',
                        [
                            '[{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"name\":\"stackclustermyotherserviceaccounta472761a\",\"namespace\":\"default\",\"labels\":{\"app.kubernetes.io/name\":\"stackclustermyotherserviceaccounta472761a\"},\"annotations\":{\"eks.amazonaws.com/role-arn\":\"',
                            {
                                'Fn::GetAtt': [
                                    'ClusterMyOtherServiceAccountRole764583C5',
                                    'Arn',
                                ],
                            },
                            '\"}}}]',
                        ],
                    ],
                },
            });
        });
        test('should have unique resource name', () => {
            // GIVEN
            const { cluster } = (0, util_1.testFixtureCluster)();
            // WHEN
            cluster.addServiceAccount('MyServiceAccount');
            // THEN
            expect(() => cluster.addServiceAccount('MyServiceAccount')).toThrow();
        });
        test('addServiceAccount for imported cluster', () => {
            const { stack } = (0, util_1.testFixture)();
            const oidcProvider = new iam.OpenIdConnectProvider(stack, 'ClusterOpenIdConnectProvider', {
                url: 'oidc_issuer',
            });
            const cluster = eks.Cluster.fromClusterAttributes(stack, 'Cluster', {
                clusterName: 'Cluster',
                openIdConnectProvider: oidcProvider,
                kubectlRoleArn: 'arn:aws:iam::123456:role/service-role/k8sservicerole',
            });
            cluster.addServiceAccount('MyServiceAccount');
            assertions_1.Template.fromStack(stack).hasResourceProperties(eks.KubernetesManifest.RESOURCE_TYPE, {
                ServiceToken: {
                    'Fn::GetAtt': [
                        'StackClusterF0EB02FAKubectlProviderNestedStackStackClusterF0EB02FAKubectlProviderNestedStackResource739D12C4',
                        'Outputs.StackStackClusterF0EB02FAKubectlProviderframeworkonEvent8377F076Arn',
                    ],
                },
                PruneLabel: 'aws.cdk.eks/prune-c8d8e1722a4f3ed332f8ac74cb3d962f01fbb62291',
                Manifest: {
                    'Fn::Join': [
                        '',
                        [
                            '[{"apiVersion":"v1","kind":"ServiceAccount","metadata":{"name":"stackclustermyserviceaccount373b933c","namespace":"default","labels":{"aws.cdk.eks/prune-c8d8e1722a4f3ed332f8ac74cb3d962f01fbb62291":"","app.kubernetes.io/name":"stackclustermyserviceaccount373b933c"},"annotations":{"eks.amazonaws.com/role-arn":"',
                            {
                                'Fn::GetAtt': [
                                    'ClusterMyServiceAccountRole85337B29',
                                    'Arn',
                                ],
                            },
                            '"}}}]',
                        ],
                    ],
                },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties(iam.CfnRole.CFN_RESOURCE_TYPE_NAME, {
                AssumeRolePolicyDocument: {
                    Statement: [
                        {
                            Action: 'sts:AssumeRoleWithWebIdentity',
                            Condition: {
                                StringEquals: {
                                    'Fn::GetAtt': [
                                        'ClusterMyServiceAccountConditionJson671C0633',
                                        'Value',
                                    ],
                                },
                            },
                            Effect: 'Allow',
                            Principal: {
                                Federated: {
                                    Ref: 'ClusterOpenIdConnectProviderA8B8E987',
                                },
                            },
                        },
                    ],
                    Version: '2012-10-17',
                },
            });
        });
    });
    describe('Service Account name must follow Kubernetes spec', () => {
        test('throw error on capital letters', () => {
            // GIVEN
            const { cluster } = (0, util_1.testFixtureCluster)();
            // WHEN
            expect(() => cluster.addServiceAccount('InvalidServiceAccount', {
                name: 'XXX',
            }))
                // THEN
                .toThrowError(RangeError);
        });
        test('throw error if ends with dot', () => {
            // GIVEN
            const { cluster } = (0, util_1.testFixtureCluster)();
            // WHEN
            expect(() => cluster.addServiceAccount('InvalidServiceAccount', {
                name: 'test.',
            }))
                // THEN
                .toThrowError(RangeError);
        });
        test('dot in the name is allowed', () => {
            // GIVEN
            const { cluster } = (0, util_1.testFixtureCluster)();
            const valueWithDot = 'test.name';
            // WHEN
            const sa = cluster.addServiceAccount('InvalidServiceAccount', {
                name: valueWithDot,
            });
            // THEN
            expect(sa.serviceAccountName).toEqual(valueWithDot);
        });
        test('throw error if name is too long', () => {
            // GIVEN
            const { cluster } = (0, util_1.testFixtureCluster)();
            // WHEN
            expect(() => cluster.addServiceAccount('InvalidServiceAccount', {
                name: 'x'.repeat(255),
            }))
                // THEN
                .toThrowError(RangeError);
        });
    });
    describe('Service Account namespace must follow Kubernetes spec', () => {
        test('throw error on capital letters', () => {
            // GIVEN
            const { cluster } = (0, util_1.testFixtureCluster)();
            // WHEN
            expect(() => cluster.addServiceAccount('InvalidServiceAccount', {
                namespace: 'XXX',
            }))
                // THEN
                .toThrowError(RangeError);
        });
        test('throw error if ends with dot', () => {
            // GIVEN
            const { cluster } = (0, util_1.testFixtureCluster)();
            // WHEN
            expect(() => cluster.addServiceAccount('InvalidServiceAccount', {
                namespace: 'test.',
            }))
                // THEN
                .toThrowError(RangeError);
        });
        test('throw error if dot is in the name', () => {
            // GIVEN
            const { cluster } = (0, util_1.testFixtureCluster)();
            const valueWithDot = 'test.name';
            // WHEN
            expect(() => cluster.addServiceAccount('InvalidServiceAccount', {
                namespace: valueWithDot,
            }))
                // THEN
                .toThrowError(RangeError);
        });
        test('throw error if name is too long', () => {
            // GIVEN
            const { cluster } = (0, util_1.testFixtureCluster)();
            // WHEN
            expect(() => cluster.addServiceAccount('InvalidServiceAccount', {
                namespace: 'x'.repeat(65),
            }))
                // THEN
                .toThrowError(RangeError);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,