"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const autoscaling = require("../../aws-autoscaling");
const ec2 = require("../../aws-ec2");
const core_1 = require("../../core");
const cluster_1 = require("../lib/cluster");
const user_data_1 = require("../lib/user-data");
/* eslint-disable max-len */
describe('user data', () => {
    test('default user data', () => {
        // GIVEN
        const { asg, stack, cluster } = newFixtures();
        // WHEN
        const userData = stack.resolve((0, user_data_1.renderAmazonLinuxUserData)(cluster, asg));
        // THEN
        expect(userData).toEqual([
            'set -o xtrace',
            {
                'Fn::Join': [
                    '',
                    [
                        '/etc/eks/bootstrap.sh ',
                        { Ref: 'clusterC5B25D0D' },
                        ' --kubelet-extra-args "--node-labels lifecycle=OnDemand" --apiserver-endpoint \'',
                        { 'Fn::GetAtt': ['clusterC5B25D0D', 'Endpoint'] },
                        "' --b64-cluster-ca '",
                        {
                            'Fn::GetAtt': ['clusterC5B25D0D', 'CertificateAuthorityData'],
                        },
                        "' --use-max-pods true",
                    ],
                ],
            },
            '/opt/aws/bin/cfn-signal --exit-code $? --stack my-stack --resource ASG46ED3070 --region us-west-33',
        ]);
    });
    test('imported cluster without clusterEndpoint', () => {
        // GIVEN
        const { asg, stack, cluster } = newFixtures();
        const importedCluster = cluster_1.Cluster.fromClusterAttributes(stack, 'ImportedCluster', {
            clusterName: cluster.clusterName,
            openIdConnectProvider: cluster.openIdConnectProvider,
            clusterCertificateAuthorityData: cluster.clusterCertificateAuthorityData,
        });
        // WHEN
        const userData = stack.resolve((0, user_data_1.renderAmazonLinuxUserData)(importedCluster, asg));
        // THEN
        expect(userData).toEqual([
            'set -o xtrace',
            {
                'Fn::Join': [
                    '',
                    [
                        '/etc/eks/bootstrap.sh ',
                        { Ref: 'clusterC5B25D0D' },
                        ' --kubelet-extra-args "--node-labels lifecycle=OnDemand" --use-max-pods true',
                    ],
                ],
            },
            '/opt/aws/bin/cfn-signal --exit-code $? --stack my-stack --resource ASG46ED3070 --region us-west-33',
        ]);
    });
    test('imported cluster without clusterCertificateAuthorityData', () => {
        // GIVEN
        const { asg, stack, cluster } = newFixtures();
        const importedCluster = cluster_1.Cluster.fromClusterAttributes(stack, 'ImportedCluster', {
            clusterName: cluster.clusterName,
            openIdConnectProvider: cluster.openIdConnectProvider,
            clusterEndpoint: cluster.clusterEndpoint,
        });
        // WHEN
        const userData = stack.resolve((0, user_data_1.renderAmazonLinuxUserData)(importedCluster, asg));
        // THEN
        expect(userData).toEqual([
            'set -o xtrace',
            {
                'Fn::Join': [
                    '',
                    [
                        '/etc/eks/bootstrap.sh ',
                        { Ref: 'clusterC5B25D0D' },
                        ' --kubelet-extra-args "--node-labels lifecycle=OnDemand" --use-max-pods true',
                    ],
                ],
            },
            '/opt/aws/bin/cfn-signal --exit-code $? --stack my-stack --resource ASG46ED3070 --region us-west-33',
        ]);
    });
    test('--use-max-pods=true', () => {
        // GIVEN
        const { asg, stack, cluster } = newFixtures();
        // WHEN
        const userData = stack.resolve((0, user_data_1.renderAmazonLinuxUserData)(cluster, asg, {
            useMaxPods: true,
        }));
        // THEN
        expect(userData[1]).toEqual({
            'Fn::Join': [
                '',
                [
                    '/etc/eks/bootstrap.sh ',
                    { Ref: 'clusterC5B25D0D' },
                    ' --kubelet-extra-args "--node-labels lifecycle=OnDemand" --apiserver-endpoint \'',
                    { 'Fn::GetAtt': ['clusterC5B25D0D', 'Endpoint'] },
                    "' --b64-cluster-ca '",
                    {
                        'Fn::GetAtt': ['clusterC5B25D0D', 'CertificateAuthorityData'],
                    },
                    "' --use-max-pods true",
                ],
            ],
        });
    });
    test('--use-max-pods=false', () => {
        // GIVEN
        const { asg, stack, cluster } = newFixtures();
        // WHEN
        const userData = stack.resolve((0, user_data_1.renderAmazonLinuxUserData)(cluster, asg, {
            useMaxPods: false,
        }));
        // THEN
        expect(userData[1]).toEqual({
            'Fn::Join': [
                '',
                [
                    '/etc/eks/bootstrap.sh ',
                    { Ref: 'clusterC5B25D0D' },
                    ' --kubelet-extra-args "--node-labels lifecycle=OnDemand" --apiserver-endpoint \'',
                    { 'Fn::GetAtt': ['clusterC5B25D0D', 'Endpoint'] },
                    "' --b64-cluster-ca '",
                    {
                        'Fn::GetAtt': ['clusterC5B25D0D', 'CertificateAuthorityData'],
                    },
                    "' --use-max-pods false",
                ],
            ],
        });
    });
    test('--aws-api-retry-attempts', () => {
        // GIVEN
        const { asg, stack, cluster } = newFixtures();
        // WHEN
        const userData = stack.resolve((0, user_data_1.renderAmazonLinuxUserData)(cluster, asg, {
            awsApiRetryAttempts: 123,
        }));
        // THEN
        expect(userData[1]).toEqual({
            'Fn::Join': [
                '',
                [
                    '/etc/eks/bootstrap.sh ',
                    { Ref: 'clusterC5B25D0D' },
                    ' --kubelet-extra-args "--node-labels lifecycle=OnDemand" --apiserver-endpoint \'',
                    { 'Fn::GetAtt': ['clusterC5B25D0D', 'Endpoint'] },
                    "' --b64-cluster-ca '",
                    {
                        'Fn::GetAtt': ['clusterC5B25D0D', 'CertificateAuthorityData'],
                    },
                    "' --use-max-pods true --aws-api-retry-attempts 123",
                ],
            ],
        });
    });
    test('--dns-cluster-ip', () => {
        // GIVEN
        const { asg, stack, cluster } = newFixtures();
        // WHEN
        const userData = stack.resolve((0, user_data_1.renderAmazonLinuxUserData)(cluster, asg, {
            dnsClusterIp: '192.0.2.53',
        }));
        // THEN
        expect(userData[1]).toEqual({
            'Fn::Join': [
                '',
                [
                    '/etc/eks/bootstrap.sh ',
                    { Ref: 'clusterC5B25D0D' },
                    ' --kubelet-extra-args "--node-labels lifecycle=OnDemand" --apiserver-endpoint \'',
                    { 'Fn::GetAtt': ['clusterC5B25D0D', 'Endpoint'] },
                    "' --b64-cluster-ca '",
                    {
                        'Fn::GetAtt': ['clusterC5B25D0D', 'CertificateAuthorityData'],
                    },
                    "' --use-max-pods true --dns-cluster-ip 192.0.2.53",
                ],
            ],
        });
    });
    test('--docker-config-json', () => {
        // GIVEN
        const { asg, stack, cluster } = newFixtures();
        // WHEN
        const userData = stack.resolve((0, user_data_1.renderAmazonLinuxUserData)(cluster, asg, {
            dockerConfigJson: '{"docker":123}',
        }));
        // THEN
        expect(userData[1]).toEqual({
            'Fn::Join': [
                '',
                [
                    '/etc/eks/bootstrap.sh ',
                    { Ref: 'clusterC5B25D0D' },
                    ' --kubelet-extra-args "--node-labels lifecycle=OnDemand" --apiserver-endpoint \'',
                    { 'Fn::GetAtt': ['clusterC5B25D0D', 'Endpoint'] },
                    "' --b64-cluster-ca '",
                    {
                        'Fn::GetAtt': ['clusterC5B25D0D', 'CertificateAuthorityData'],
                    },
                    '\' --use-max-pods true --docker-config-json \'{"docker":123}\'',
                ],
            ],
        });
    });
    test('--enable-docker-bridge=true', () => {
        // GIVEN
        const { asg, stack, cluster } = newFixtures();
        // WHEN
        const userData = stack.resolve((0, user_data_1.renderAmazonLinuxUserData)(cluster, asg, {
            enableDockerBridge: true,
        }));
        // THEN
        expect(userData[1]).toEqual({
            'Fn::Join': [
                '',
                [
                    '/etc/eks/bootstrap.sh ',
                    { Ref: 'clusterC5B25D0D' },
                    ' --kubelet-extra-args "--node-labels lifecycle=OnDemand" --apiserver-endpoint \'',
                    { 'Fn::GetAtt': ['clusterC5B25D0D', 'Endpoint'] },
                    "' --b64-cluster-ca '",
                    {
                        'Fn::GetAtt': ['clusterC5B25D0D', 'CertificateAuthorityData'],
                    },
                    "' --use-max-pods true --enable-docker-bridge true",
                ],
            ],
        });
    });
    test('--enable-docker-bridge=false', () => {
        // GIVEN
        const { asg, stack, cluster } = newFixtures();
        // WHEN
        const userData = stack.resolve((0, user_data_1.renderAmazonLinuxUserData)(cluster, asg, {
            enableDockerBridge: false,
        }));
        // THEN
        expect(userData[1]).toEqual({
            'Fn::Join': [
                '',
                [
                    '/etc/eks/bootstrap.sh ',
                    { Ref: 'clusterC5B25D0D' },
                    ' --kubelet-extra-args "--node-labels lifecycle=OnDemand" --apiserver-endpoint \'',
                    { 'Fn::GetAtt': ['clusterC5B25D0D', 'Endpoint'] },
                    "' --b64-cluster-ca '",
                    {
                        'Fn::GetAtt': ['clusterC5B25D0D', 'CertificateAuthorityData'],
                    },
                    "' --use-max-pods true",
                ],
            ],
        });
    });
    test('--kubelet-extra-args', () => {
        // GIVEN
        const { asg, stack, cluster } = newFixtures();
        // WHEN
        const userData = stack.resolve((0, user_data_1.renderAmazonLinuxUserData)(cluster, asg, {
            kubeletExtraArgs: '--extra-args-for --kubelet',
        }));
        // THEN
        expect(userData[1]).toEqual({
            'Fn::Join': [
                '',
                [
                    '/etc/eks/bootstrap.sh ',
                    { Ref: 'clusterC5B25D0D' },
                    ' --kubelet-extra-args "--node-labels lifecycle=OnDemand  --extra-args-for --kubelet" --apiserver-endpoint \'',
                    { 'Fn::GetAtt': ['clusterC5B25D0D', 'Endpoint'] },
                    "' --b64-cluster-ca '",
                    {
                        'Fn::GetAtt': ['clusterC5B25D0D', 'CertificateAuthorityData'],
                    },
                    "' --use-max-pods true",
                ],
            ],
        });
    });
    test('arbitrary additional bootstrap arguments can be passed through "additionalArgs"', () => {
        // GIVEN
        const { asg, stack, cluster } = newFixtures();
        // WHEN
        const userData = stack.resolve((0, user_data_1.renderAmazonLinuxUserData)(cluster, asg, {
            additionalArgs: '--apiserver-endpoint 1111 --foo-bar',
        }));
        // THEN
        // NB: duplicated --apiserver-endpoint is fine.  Last wins.
        expect(userData[1]).toEqual({
            'Fn::Join': [
                '',
                [
                    '/etc/eks/bootstrap.sh ',
                    { Ref: 'clusterC5B25D0D' },
                    ' --kubelet-extra-args "--node-labels lifecycle=OnDemand" --apiserver-endpoint \'',
                    { 'Fn::GetAtt': ['clusterC5B25D0D', 'Endpoint'] },
                    "' --b64-cluster-ca '",
                    {
                        'Fn::GetAtt': ['clusterC5B25D0D', 'CertificateAuthorityData'],
                    },
                    "' --use-max-pods true --apiserver-endpoint 1111 --foo-bar",
                ],
            ],
        });
    });
    test('if asg has spot instances, the correct label and taint is used', () => {
        // GIVEN
        const { asg, stack, cluster } = newFixtures(true);
        // WHEN
        const userData = stack.resolve((0, user_data_1.renderAmazonLinuxUserData)(cluster, asg, {
            kubeletExtraArgs: '--node-labels X=y',
        }));
        // THEN
        expect(userData[1]).toEqual({
            'Fn::Join': [
                '',
                [
                    '/etc/eks/bootstrap.sh ',
                    { Ref: 'clusterC5B25D0D' },
                    ' --kubelet-extra-args "--node-labels lifecycle=Ec2Spot --register-with-taints=spotInstance=true:PreferNoSchedule --node-labels X=y" --apiserver-endpoint \'',
                    { 'Fn::GetAtt': ['clusterC5B25D0D', 'Endpoint'] },
                    "' --b64-cluster-ca '",
                    {
                        'Fn::GetAtt': ['clusterC5B25D0D', 'CertificateAuthorityData'],
                    },
                    "' --use-max-pods true",
                ],
            ],
        });
    });
});
function newFixtures(spot = false) {
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'my-stack', { env: { region: 'us-west-33' } });
    const vpc = new ec2.Vpc(stack, 'vpc');
    const cluster = new cluster_1.Cluster(stack, 'cluster', {
        version: cluster_1.KubernetesVersion.V1_21,
        clusterName: 'my-cluster-name',
        vpc,
    });
    const asg = new autoscaling.AutoScalingGroup(stack, 'ASG', {
        instanceType: new ec2.InstanceType('m4.xlarge'),
        machineImage: new ec2.AmazonLinuxImage(),
        spotPrice: spot ? '0.01' : undefined,
        vpc,
    });
    return { stack, vpc, cluster, asg };
}
//# sourceMappingURL=data:application/json;base64,