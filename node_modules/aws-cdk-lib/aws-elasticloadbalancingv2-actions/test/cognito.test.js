"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const cognito = require("../../aws-cognito");
const ec2 = require("../../aws-ec2");
const elbv2 = require("../../aws-elasticloadbalancingv2");
const core_1 = require("../../core");
const actions = require("../lib");
test('Cognito Action', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const vpc = new ec2.Vpc(stack, 'Stack');
    const lb = new elbv2.ApplicationLoadBalancer(stack, 'LB', { vpc });
    const userPool = new cognito.UserPool(stack, 'UserPool');
    const userPoolClient = new cognito.UserPoolClient(stack, 'Client', { userPool });
    const userPoolDomain = new cognito.UserPoolDomain(stack, 'Domain', {
        userPool,
        cognitoDomain: {
            domainPrefix: 'prefix',
        },
    });
    // WHEN
    lb.addListener('Listener', {
        port: 80,
        defaultAction: new actions.AuthenticateCognitoAction({
            userPool,
            userPoolClient,
            userPoolDomain,
            next: elbv2.ListenerAction.fixedResponse(200, {
                contentType: 'text/plain',
                messageBody: 'Authenticated',
            }),
        }),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::Listener', {
        DefaultActions: [
            {
                AuthenticateCognitoConfig: {
                    UserPoolArn: { 'Fn::GetAtt': ['UserPool6BA7E5F2', 'Arn'] },
                    UserPoolClientId: { Ref: 'Client4A7F64DF' },
                    UserPoolDomain: { Ref: 'Domain66AC69E0' },
                },
                Order: 1,
                Type: 'authenticate-cognito',
            },
            {
                FixedResponseConfig: {
                    ContentType: 'text/plain',
                    MessageBody: 'Authenticated',
                    StatusCode: '200',
                },
                Order: 2,
                Type: 'fixed-response',
            },
        ],
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29nbml0by50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29nbml0by50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLDZDQUE2QztBQUM3QyxxQ0FBcUM7QUFDckMsMERBQTBEO0FBQzFELHFDQUFtQztBQUNuQyxrQ0FBa0M7QUFFbEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUMxQixRQUFRO0lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztJQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sRUFBRSxHQUFHLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sUUFBUSxHQUFHLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDekQsTUFBTSxjQUFjLEdBQUcsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2pGLE1BQU0sY0FBYyxHQUFHLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO1FBQ2pFLFFBQVE7UUFDUixhQUFhLEVBQUU7WUFDYixZQUFZLEVBQUUsUUFBUTtTQUN2QjtLQUNGLENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxFQUFFLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRTtRQUN6QixJQUFJLEVBQUUsRUFBRTtRQUNSLGFBQWEsRUFBRSxJQUFJLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztZQUNuRCxRQUFRO1lBQ1IsY0FBYztZQUNkLGNBQWM7WUFDZCxJQUFJLEVBQUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFO2dCQUM1QyxXQUFXLEVBQUUsWUFBWTtnQkFDekIsV0FBVyxFQUFFLGVBQWU7YUFDN0IsQ0FBQztTQUNILENBQUM7S0FDSCxDQUFDLENBQUM7SUFFSCxPQUFPO0lBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsdUNBQXVDLEVBQUU7UUFDdkYsY0FBYyxFQUFFO1lBQ2Q7Z0JBQ0UseUJBQXlCLEVBQUU7b0JBQ3pCLFdBQVcsRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxFQUFFO29CQUMxRCxnQkFBZ0IsRUFBRSxFQUFFLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRTtvQkFDM0MsY0FBYyxFQUFFLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFO2lCQUMxQztnQkFDRCxLQUFLLEVBQUUsQ0FBQztnQkFDUixJQUFJLEVBQUUsc0JBQXNCO2FBQzdCO1lBQ0Q7Z0JBQ0UsbUJBQW1CLEVBQUU7b0JBQ25CLFdBQVcsRUFBRSxZQUFZO29CQUN6QixXQUFXLEVBQUUsZUFBZTtvQkFDNUIsVUFBVSxFQUFFLEtBQUs7aUJBQ2xCO2dCQUNELEtBQUssRUFBRSxDQUFDO2dCQUNSLElBQUksRUFBRSxnQkFBZ0I7YUFDdkI7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIGNvZ25pdG8gZnJvbSAnLi4vLi4vYXdzLWNvZ25pdG8nO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJy4uLy4uL2F3cy1lYzInO1xuaW1wb3J0ICogYXMgZWxidjIgZnJvbSAnLi4vLi4vYXdzLWVsYXN0aWNsb2FkYmFsYW5jaW5ndjInO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vbGliJztcblxudGVzdCgnQ29nbml0byBBY3Rpb24nLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnU3RhY2snKTtcbiAgY29uc3QgbGIgPSBuZXcgZWxidjIuQXBwbGljYXRpb25Mb2FkQmFsYW5jZXIoc3RhY2ssICdMQicsIHsgdnBjIH0pO1xuXG4gIGNvbnN0IHVzZXJQb29sID0gbmV3IGNvZ25pdG8uVXNlclBvb2woc3RhY2ssICdVc2VyUG9vbCcpO1xuICBjb25zdCB1c2VyUG9vbENsaWVudCA9IG5ldyBjb2duaXRvLlVzZXJQb29sQ2xpZW50KHN0YWNrLCAnQ2xpZW50JywgeyB1c2VyUG9vbCB9KTtcbiAgY29uc3QgdXNlclBvb2xEb21haW4gPSBuZXcgY29nbml0by5Vc2VyUG9vbERvbWFpbihzdGFjaywgJ0RvbWFpbicsIHtcbiAgICB1c2VyUG9vbCxcbiAgICBjb2duaXRvRG9tYWluOiB7XG4gICAgICBkb21haW5QcmVmaXg6ICdwcmVmaXgnLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFdIRU5cbiAgbGIuYWRkTGlzdGVuZXIoJ0xpc3RlbmVyJywge1xuICAgIHBvcnQ6IDgwLFxuICAgIGRlZmF1bHRBY3Rpb246IG5ldyBhY3Rpb25zLkF1dGhlbnRpY2F0ZUNvZ25pdG9BY3Rpb24oe1xuICAgICAgdXNlclBvb2wsXG4gICAgICB1c2VyUG9vbENsaWVudCxcbiAgICAgIHVzZXJQb29sRG9tYWluLFxuICAgICAgbmV4dDogZWxidjIuTGlzdGVuZXJBY3Rpb24uZml4ZWRSZXNwb25zZSgyMDAsIHtcbiAgICAgICAgY29udGVudFR5cGU6ICd0ZXh0L3BsYWluJyxcbiAgICAgICAgbWVzc2FnZUJvZHk6ICdBdXRoZW50aWNhdGVkJyxcbiAgICAgIH0pLFxuICAgIH0pLFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVsYXN0aWNMb2FkQmFsYW5jaW5nVjI6Okxpc3RlbmVyJywge1xuICAgIERlZmF1bHRBY3Rpb25zOiBbXG4gICAgICB7XG4gICAgICAgIEF1dGhlbnRpY2F0ZUNvZ25pdG9Db25maWc6IHtcbiAgICAgICAgICBVc2VyUG9vbEFybjogeyAnRm46OkdldEF0dCc6IFsnVXNlclBvb2w2QkE3RTVGMicsICdBcm4nXSB9LFxuICAgICAgICAgIFVzZXJQb29sQ2xpZW50SWQ6IHsgUmVmOiAnQ2xpZW50NEE3RjY0REYnIH0sXG4gICAgICAgICAgVXNlclBvb2xEb21haW46IHsgUmVmOiAnRG9tYWluNjZBQzY5RTAnIH0sXG4gICAgICAgIH0sXG4gICAgICAgIE9yZGVyOiAxLFxuICAgICAgICBUeXBlOiAnYXV0aGVudGljYXRlLWNvZ25pdG8nLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgRml4ZWRSZXNwb25zZUNvbmZpZzoge1xuICAgICAgICAgIENvbnRlbnRUeXBlOiAndGV4dC9wbGFpbicsXG4gICAgICAgICAgTWVzc2FnZUJvZHk6ICdBdXRoZW50aWNhdGVkJyxcbiAgICAgICAgICBTdGF0dXNDb2RlOiAnMjAwJyxcbiAgICAgICAgfSxcbiAgICAgICAgT3JkZXI6IDIsXG4gICAgICAgIFR5cGU6ICdmaXhlZC1yZXNwb25zZScsXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xufSk7XG4iXX0=