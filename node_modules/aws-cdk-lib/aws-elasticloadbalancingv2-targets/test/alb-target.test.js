"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const ec2 = require("../../aws-ec2");
const elbv2 = require("../../aws-elasticloadbalancingv2");
const core_1 = require("../../core");
const targets = require("../lib");
test('Can create target groups with alb target', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const vpc = new ec2.Vpc(stack, 'Stack');
    const alb = new elbv2.ApplicationLoadBalancer(stack, 'ALB', { vpc });
    const nlb = new elbv2.NetworkLoadBalancer(stack, 'NLB', { vpc });
    const listener = nlb.addListener('Listener', { port: 80 });
    // WHEN
    listener.addTargets('Targets', {
        targets: [new targets.AlbTarget(alb, 80)],
        port: 80,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::TargetGroup', {
        Port: 80,
        Protocol: 'TCP',
        Targets: [
            {
                Id: {
                    Ref: 'ALBAEE750D2',
                },
                Port: 80,
            },
        ],
        TargetType: 'alb',
        VpcId: {
            Ref: 'Stack8A423254',
        },
    });
});
test('Can create target groups with alb arn target', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const vpc = new ec2.Vpc(stack, 'Stack');
    const nlb = new elbv2.NetworkLoadBalancer(stack, 'NLB', { vpc });
    const listener = nlb.addListener('Listener', { port: 80 });
    // WHEN
    listener.addTargets('Targets', {
        targets: [new targets.AlbArnTarget('MOCK_ARN', 80)],
        port: 80,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancingV2::TargetGroup', {
        Port: 80,
        Protocol: 'TCP',
        Targets: [
            {
                Id: 'MOCK_ARN',
                Port: 80,
            },
        ],
        TargetType: 'alb',
        VpcId: {
            Ref: 'Stack8A423254',
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxiLXRhcmdldC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWxiLXRhcmdldC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLHFDQUFxQztBQUNyQywwREFBMEQ7QUFDMUQscUNBQW1DO0FBQ25DLGtDQUFrQztBQUVsQyxJQUFJLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO0lBQ3BELFFBQVE7SUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO0lBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckUsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDakUsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUUzRCxPQUFPO0lBQ1AsUUFBUSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUU7UUFDN0IsT0FBTyxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6QyxJQUFJLEVBQUUsRUFBRTtLQUNULENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQywwQ0FBMEMsRUFBRTtRQUMxRixJQUFJLEVBQUUsRUFBRTtRQUNSLFFBQVEsRUFBRSxLQUFLO1FBQ2YsT0FBTyxFQUFFO1lBQ1A7Z0JBQ0UsRUFBRSxFQUFFO29CQUNGLEdBQUcsRUFBRSxhQUFhO2lCQUNuQjtnQkFDRCxJQUFJLEVBQUUsRUFBRTthQUNUO1NBQ0Y7UUFDRCxVQUFVLEVBQUUsS0FBSztRQUNqQixLQUFLLEVBQUU7WUFDTCxHQUFHLEVBQUUsZUFBZTtTQUNyQjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDhDQUE4QyxFQUFFLEdBQUcsRUFBRTtJQUN4RCxRQUFRO0lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztJQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFM0QsT0FBTztJQUNQLFFBQVEsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFO1FBQzdCLE9BQU8sRUFBRSxDQUFDLElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDbkQsSUFBSSxFQUFFLEVBQUU7S0FDVCxDQUFDLENBQUM7SUFFSCxPQUFPO0lBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsMENBQTBDLEVBQUU7UUFDMUYsSUFBSSxFQUFFLEVBQUU7UUFDUixRQUFRLEVBQUUsS0FBSztRQUNmLE9BQU8sRUFBRTtZQUNQO2dCQUNFLEVBQUUsRUFBRSxVQUFVO2dCQUNkLElBQUksRUFBRSxFQUFFO2FBQ1Q7U0FDRjtRQUNELFVBQVUsRUFBRSxLQUFLO1FBQ2pCLEtBQUssRUFBRTtZQUNMLEdBQUcsRUFBRSxlQUFlO1NBQ3JCO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJy4uLy4uL2F3cy1lYzInO1xuaW1wb3J0ICogYXMgZWxidjIgZnJvbSAnLi4vLi4vYXdzLWVsYXN0aWNsb2FkYmFsYW5jaW5ndjInO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIHRhcmdldHMgZnJvbSAnLi4vbGliJztcblxudGVzdCgnQ2FuIGNyZWF0ZSB0YXJnZXQgZ3JvdXBzIHdpdGggYWxiIHRhcmdldCcsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdTdGFjaycpO1xuICBjb25zdCBhbGIgPSBuZXcgZWxidjIuQXBwbGljYXRpb25Mb2FkQmFsYW5jZXIoc3RhY2ssICdBTEInLCB7IHZwYyB9KTtcbiAgY29uc3QgbmxiID0gbmV3IGVsYnYyLk5ldHdvcmtMb2FkQmFsYW5jZXIoc3RhY2ssICdOTEInLCB7IHZwYyB9KTtcbiAgY29uc3QgbGlzdGVuZXIgPSBubGIuYWRkTGlzdGVuZXIoJ0xpc3RlbmVyJywgeyBwb3J0OiA4MCB9KTtcblxuICAvLyBXSEVOXG4gIGxpc3RlbmVyLmFkZFRhcmdldHMoJ1RhcmdldHMnLCB7XG4gICAgdGFyZ2V0czogW25ldyB0YXJnZXRzLkFsYlRhcmdldChhbGIsIDgwKV0sXG4gICAgcG9ydDogODAsXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RWxhc3RpY0xvYWRCYWxhbmNpbmdWMjo6VGFyZ2V0R3JvdXAnLCB7XG4gICAgUG9ydDogODAsXG4gICAgUHJvdG9jb2w6ICdUQ1AnLFxuICAgIFRhcmdldHM6IFtcbiAgICAgIHtcbiAgICAgICAgSWQ6IHtcbiAgICAgICAgICBSZWY6ICdBTEJBRUU3NTBEMicsXG4gICAgICAgIH0sXG4gICAgICAgIFBvcnQ6IDgwLFxuICAgICAgfSxcbiAgICBdLFxuICAgIFRhcmdldFR5cGU6ICdhbGInLFxuICAgIFZwY0lkOiB7XG4gICAgICBSZWY6ICdTdGFjazhBNDIzMjU0JyxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCdDYW4gY3JlYXRlIHRhcmdldCBncm91cHMgd2l0aCBhbGIgYXJuIHRhcmdldCcsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdTdGFjaycpO1xuICBjb25zdCBubGIgPSBuZXcgZWxidjIuTmV0d29ya0xvYWRCYWxhbmNlcihzdGFjaywgJ05MQicsIHsgdnBjIH0pO1xuICBjb25zdCBsaXN0ZW5lciA9IG5sYi5hZGRMaXN0ZW5lcignTGlzdGVuZXInLCB7IHBvcnQ6IDgwIH0pO1xuXG4gIC8vIFdIRU5cbiAgbGlzdGVuZXIuYWRkVGFyZ2V0cygnVGFyZ2V0cycsIHtcbiAgICB0YXJnZXRzOiBbbmV3IHRhcmdldHMuQWxiQXJuVGFyZ2V0KCdNT0NLX0FSTicsIDgwKV0sXG4gICAgcG9ydDogODAsXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RWxhc3RpY0xvYWRCYWxhbmNpbmdWMjo6VGFyZ2V0R3JvdXAnLCB7XG4gICAgUG9ydDogODAsXG4gICAgUHJvdG9jb2w6ICdUQ1AnLFxuICAgIFRhcmdldHM6IFtcbiAgICAgIHtcbiAgICAgICAgSWQ6ICdNT0NLX0FSTicsXG4gICAgICAgIFBvcnQ6IDgwLFxuICAgICAgfSxcbiAgICBdLFxuICAgIFRhcmdldFR5cGU6ICdhbGInLFxuICAgIFZwY0lkOiB7XG4gICAgICBSZWY6ICdTdGFjazhBNDIzMjU0JyxcbiAgICB9LFxuICB9KTtcbn0pOyJdfQ==