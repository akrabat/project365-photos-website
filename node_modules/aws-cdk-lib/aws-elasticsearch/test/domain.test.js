"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable jest/expect-expect */
const assertions_1 = require("../../assertions");
const acm = require("../../aws-certificatemanager");
const aws_cloudwatch_1 = require("../../aws-cloudwatch");
const aws_ec2_1 = require("../../aws-ec2");
const iam = require("../../aws-iam");
const kms = require("../../aws-kms");
const logs = require("../../aws-logs");
const route53 = require("../../aws-route53");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../core");
const domain_1 = require("../lib/domain");
let app;
let stack;
beforeEach(() => {
    app = new core_1.App();
    stack = new core_1.Stack(app, 'Stack', {
        env: { account: '1234', region: 'testregion' },
    });
    jest.resetAllMocks();
});
const readActions = ['ESHttpGet', 'ESHttpHead'];
const writeActions = ['ESHttpDelete', 'ESHttpPost', 'ESHttpPut', 'ESHttpPatch'];
const readWriteActions = [
    ...readActions,
    ...writeActions,
];
(0, cdk_build_tools_1.testDeprecated)('connections throws if domain is placed inside a vpc', () => {
    expect(() => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_1,
        }).connections;
    }).toThrowError("Connections are only available on VPC enabled domains. Use the 'vpc' property to place a domain inside a VPC");
});
(0, cdk_build_tools_1.testDeprecated)('subnets and security groups can be provided when vpc is used', () => {
    const vpc = new aws_ec2_1.Vpc(stack, 'Vpc');
    const securityGroup = new aws_ec2_1.SecurityGroup(stack, 'CustomSecurityGroup', {
        vpc,
    });
    const domain = new domain_1.Domain(stack, 'Domain', {
        version: domain_1.ElasticsearchVersion.V7_10,
        vpc,
        vpcSubnets: [{ subnets: [vpc.privateSubnets[0]] }],
        securityGroups: [securityGroup],
    });
    expect(domain.connections.securityGroups[0].securityGroupId).toEqual(securityGroup.securityGroupId);
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
        VPCOptions: {
            SecurityGroupIds: [
                {
                    'Fn::GetAtt': [
                        'CustomSecurityGroupE5E500E5',
                        'GroupId',
                    ],
                },
            ],
            SubnetIds: [
                {
                    Ref: 'VpcPrivateSubnet1Subnet536B997A',
                },
            ],
        },
    });
});
(0, cdk_build_tools_1.testDeprecated)('default subnets and security group when vpc is used', () => {
    const vpc = new aws_ec2_1.Vpc(stack, 'Vpc');
    const domain = new domain_1.Domain(stack, 'Domain', {
        version: domain_1.ElasticsearchVersion.V7_10,
        vpc,
    });
    expect(stack.resolve(domain.connections.securityGroups[0].securityGroupId)).toEqual({ 'Fn::GetAtt': ['DomainSecurityGroup48AA5FD6', 'GroupId'] });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
        VPCOptions: {
            SecurityGroupIds: [
                {
                    'Fn::GetAtt': [
                        'DomainSecurityGroup48AA5FD6',
                        'GroupId',
                    ],
                },
            ],
            SubnetIds: [
                {
                    Ref: 'VpcPrivateSubnet1Subnet536B997A',
                },
                {
                    Ref: 'VpcPrivateSubnet2Subnet3788AAA1',
                },
                {
                    Ref: 'VpcPrivateSubnet3SubnetF258B56E',
                },
            ],
        },
    });
});
(0, cdk_build_tools_1.testDeprecated)('default removalpolicy is retain', () => {
    new domain_1.Domain(stack, 'Domain', {
        version: domain_1.ElasticsearchVersion.V7_1,
    });
    assertions_1.Template.fromStack(stack).hasResource('AWS::Elasticsearch::Domain', {
        DeletionPolicy: 'Retain',
    });
});
(0, cdk_build_tools_1.testDeprecated)('grants kms permissions if needed', () => {
    const key = new kms.Key(stack, 'Key');
    new domain_1.Domain(stack, 'Domain', {
        version: domain_1.ElasticsearchVersion.V7_1,
        encryptionAtRest: {
            kmsKey: key,
        },
        // so that the access policy custom resource will be used.
        useUnsignedBasicAuth: true,
    });
    const expectedPolicy = {
        Statement: [
            {
                Action: [
                    'kms:List*',
                    'kms:Describe*',
                    'kms:CreateGrant',
                ],
                Effect: 'Allow',
                Resource: {
                    'Fn::GetAtt': [
                        'Key961B73FD',
                        'Arn',
                    ],
                },
            },
        ],
        Version: '2012-10-17',
    };
    const resources = assertions_1.Template.fromStack(stack).toJSON().Resources;
    expect(resources.AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E.Properties.PolicyDocument).toStrictEqual(expectedPolicy);
});
(0, cdk_build_tools_1.testDeprecated)('minimal example renders correctly', () => {
    new domain_1.Domain(stack, 'Domain', { version: domain_1.ElasticsearchVersion.V7_1 });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
        CognitoOptions: {
            Enabled: false,
        },
        EBSOptions: {
            EBSEnabled: true,
            VolumeSize: 10,
            VolumeType: 'gp2',
        },
        ElasticsearchClusterConfig: {
            DedicatedMasterEnabled: false,
            InstanceCount: 1,
            InstanceType: 'r5.large.elasticsearch',
            ZoneAwarenessEnabled: false,
        },
        ElasticsearchVersion: '7.1',
        EncryptionAtRestOptions: {
            Enabled: false,
        },
        LogPublishingOptions: {
            AUDIT_LOGS: assertions_1.Match.absent(),
            ES_APPLICATION_LOGS: assertions_1.Match.absent(),
            SEARCH_SLOW_LOGS: assertions_1.Match.absent(),
            INDEX_SLOW_LOGS: assertions_1.Match.absent(),
        },
        NodeToNodeEncryptionOptions: {
            Enabled: false,
        },
    });
});
(0, cdk_build_tools_1.testDeprecated)('can enable version upgrade update policy', () => {
    new domain_1.Domain(stack, 'Domain', {
        version: domain_1.ElasticsearchVersion.V7_1,
        enableVersionUpgrade: true,
    });
    assertions_1.Template.fromStack(stack).hasResource('AWS::Elasticsearch::Domain', {
        UpdatePolicy: {
            EnableVersionUpgrade: true,
        },
    });
});
(0, cdk_build_tools_1.testDeprecated)('can set a self-referencing custom policy', () => {
    const domain = new domain_1.Domain(stack, 'Domain', {
        version: domain_1.ElasticsearchVersion.V7_1,
    });
    domain.addAccessPolicies(new iam.PolicyStatement({
        actions: ['es:ESHttpPost', 'es:ESHttpPut'],
        effect: iam.Effect.ALLOW,
        principals: [new iam.AccountPrincipal('5678')],
        resources: [domain.domainArn, `${domain.domainArn}/*`],
    }));
    const expectedPolicy = {
        'Fn::Join': [
            '',
            [
                '{"action":"updateElasticsearchDomainConfig","service":"ES","parameters":{"DomainName":"',
                {
                    Ref: 'Domain66AC69E0',
                },
                '","AccessPolicies":"{\\"Statement\\":[{\\"Action\\":[\\"es:ESHttpPost\\",\\"es:ESHttpPut\\"],\\"Effect\\":\\"Allow\\",\\"Principal\\":{\\"AWS\\":\\"arn:',
                {
                    Ref: 'AWS::Partition',
                },
                ':iam::5678:root\\"},\\"Resource\\":[\\"',
                {
                    'Fn::GetAtt': [
                        'Domain66AC69E0',
                        'Arn',
                    ],
                },
                '\\",\\"',
                {
                    'Fn::GetAtt': [
                        'Domain66AC69E0',
                        'Arn',
                    ],
                },
                '/*\\"]}],\\"Version\\":\\"2012-10-17\\"}"},"outputPaths":["DomainConfig.ElasticsearchClusterConfig.AccessPolicies"],"physicalResourceId":{"id":"',
                {
                    Ref: 'Domain66AC69E0',
                },
                'AccessPolicy"}}',
            ],
        ],
    };
    assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::ElasticsearchAccessPolicy', {
        ServiceToken: {
            'Fn::GetAtt': [
                'AWS679f53fac002430cb0da5b7982bd22872D164C4C',
                'Arn',
            ],
        },
        Create: expectedPolicy,
        Update: expectedPolicy,
    });
});
describe('UltraWarm instances', () => {
    (0, cdk_build_tools_1.testDeprecated)('can enable UltraWarm instances', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_1,
            capacity: {
                masterNodes: 2,
                warmNodes: 2,
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            ElasticsearchClusterConfig: {
                DedicatedMasterEnabled: true,
                WarmEnabled: true,
                WarmCount: 2,
                WarmType: 'ultrawarm1.medium.elasticsearch',
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('can enable UltraWarm instances with specific instance type', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_1,
            capacity: {
                masterNodes: 2,
                warmNodes: 2,
                warmInstanceType: 'ultrawarm1.large.elasticsearch',
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            ElasticsearchClusterConfig: {
                DedicatedMasterEnabled: true,
                WarmEnabled: true,
                WarmCount: 2,
                WarmType: 'ultrawarm1.large.elasticsearch',
            },
        });
    });
});
(0, cdk_build_tools_1.testDeprecated)('can use tokens in capacity configuration', () => {
    new domain_1.Domain(stack, 'Domain', {
        version: domain_1.ElasticsearchVersion.V7_10,
        capacity: {
            dataNodeInstanceType: core_1.Token.asString({ Ref: 'dataNodeInstanceType' }),
            dataNodes: core_1.Token.asNumber({ Ref: 'dataNodes' }),
            masterNodeInstanceType: core_1.Token.asString({ Ref: 'masterNodeInstanceType' }),
            masterNodes: core_1.Token.asNumber({ Ref: 'masterNodes' }),
            warmInstanceType: core_1.Token.asString({ Ref: 'warmInstanceType' }),
            warmNodes: core_1.Token.asNumber({ Ref: 'warmNodes' }),
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
        ElasticsearchClusterConfig: {
            InstanceCount: {
                Ref: 'dataNodes',
            },
            InstanceType: {
                Ref: 'dataNodeInstanceType',
            },
            DedicatedMasterEnabled: true,
            DedicatedMasterCount: {
                Ref: 'masterNodes',
            },
            DedicatedMasterType: {
                Ref: 'masterNodeInstanceType',
            },
            WarmEnabled: true,
            WarmCount: {
                Ref: 'warmNodes',
            },
            WarmType: {
                Ref: 'warmInstanceType',
            },
        },
    });
});
describe('log groups', () => {
    (0, cdk_build_tools_1.testDeprecated)('slowSearchLogEnabled should create a custom log group', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_4,
            logging: {
                slowSearchLogEnabled: true,
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            LogPublishingOptions: {
                SEARCH_SLOW_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'DomainSlowSearchLogs5B35A97A',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                AUDIT_LOGS: assertions_1.Match.absent(),
                ES_APPLICATION_LOGS: assertions_1.Match.absent(),
                INDEX_SLOW_LOGS: assertions_1.Match.absent(),
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('slowIndexLogEnabled should create a custom log group', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_4,
            logging: {
                slowIndexLogEnabled: true,
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            LogPublishingOptions: {
                INDEX_SLOW_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'DomainSlowIndexLogsFE2F1061',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                AUDIT_LOGS: assertions_1.Match.absent(),
                ES_APPLICATION_LOGS: assertions_1.Match.absent(),
                SEARCH_SLOW_LOGS: assertions_1.Match.absent(),
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('appLogEnabled should create a custom log group', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_4,
            logging: {
                appLogEnabled: true,
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            LogPublishingOptions: {
                ES_APPLICATION_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'DomainAppLogs21698C1B',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                AUDIT_LOGS: assertions_1.Match.absent(),
                SEARCH_SLOW_LOGS: assertions_1.Match.absent(),
                INDEX_SLOW_LOGS: assertions_1.Match.absent(),
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('auditLogEnabled should create a custom log group', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_4,
            logging: {
                auditLogEnabled: true,
            },
            fineGrainedAccessControl: {
                masterUserName: 'username',
            },
            nodeToNodeEncryption: true,
            encryptionAtRest: {
                enabled: true,
            },
            enforceHttps: true,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            LogPublishingOptions: {
                AUDIT_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'DomainAuditLogs608E0FA6',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                ES_APPLICATION_LOGS: assertions_1.Match.absent(),
                SEARCH_SLOW_LOGS: assertions_1.Match.absent(),
                INDEX_SLOW_LOGS: assertions_1.Match.absent(),
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('two domains with logging enabled can be created in same stack', () => {
        new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V7_7,
            logging: {
                appLogEnabled: true,
                slowSearchLogEnabled: true,
                slowIndexLogEnabled: true,
            },
        });
        new domain_1.Domain(stack, 'Domain2', {
            version: domain_1.ElasticsearchVersion.V7_7,
            logging: {
                appLogEnabled: true,
                slowSearchLogEnabled: true,
                slowIndexLogEnabled: true,
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            LogPublishingOptions: {
                ES_APPLICATION_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'Domain1AppLogs6E8D1D67',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                SEARCH_SLOW_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'Domain1SlowSearchLogs8F3B0506',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                INDEX_SLOW_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'Domain1SlowIndexLogs9354D098',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                AUDIT_LOGS: assertions_1.Match.absent(),
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            LogPublishingOptions: {
                ES_APPLICATION_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'Domain2AppLogs810876E2',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                SEARCH_SLOW_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'Domain2SlowSearchLogs0C75F64B',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                INDEX_SLOW_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'Domain2SlowIndexLogs0CB900D0',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                AUDIT_LOGS: assertions_1.Match.absent(),
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('log group policy is uniquely named for each domain', () => {
        new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V7_4,
            logging: {
                appLogEnabled: true,
            },
        });
        new domain_1.Domain(stack, 'Domain2', {
            version: domain_1.ElasticsearchVersion.V7_4,
            logging: {
                appLogEnabled: true,
            },
        });
        // Domain1
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::CloudwatchLogResourcePolicy', {
            Create: {
                'Fn::Join': [
                    '',
                    [
                        '{"service":"CloudWatchLogs","action":"putResourcePolicy","parameters":{"policyName":"ESLogPolicyc836fd92f07ec41eb70c2f6f08dc4b43cfb7c25391","policyDocument":"{\\"Statement\\":[{\\"Action\\":[\\"logs:PutLogEvents\\",\\"logs:CreateLogStream\\"],\\"Effect\\":\\"Allow\\",\\"Principal\\":{\\"Service\\":\\"es.amazonaws.com\\"},\\"Resource\\":\\"',
                        {
                            'Fn::GetAtt': [
                                'Domain1AppLogs6E8D1D67',
                                'Arn',
                            ],
                        },
                        '\\"}],\\"Version\\":\\"2012-10-17\\"}"},"physicalResourceId":{"id":"ESLogGroupPolicyc836fd92f07ec41eb70c2f6f08dc4b43cfb7c25391"}}',
                    ],
                ],
            },
        });
        // Domain2
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::CloudwatchLogResourcePolicy', {
            Create: {
                'Fn::Join': [
                    '',
                    [
                        '{"service":"CloudWatchLogs","action":"putResourcePolicy","parameters":{"policyName":"ESLogPolicyc8f05f015be3baf6ec1ee06cd1ee5cc8706ebbe5b2","policyDocument":"{\\"Statement\\":[{\\"Action\\":[\\"logs:PutLogEvents\\",\\"logs:CreateLogStream\\"],\\"Effect\\":\\"Allow\\",\\"Principal\\":{\\"Service\\":\\"es.amazonaws.com\\"},\\"Resource\\":\\"',
                        {
                            'Fn::GetAtt': [
                                'Domain2AppLogs810876E2',
                                'Arn',
                            ],
                        },
                        '\\"}],\\"Version\\":\\"2012-10-17\\"}"},"physicalResourceId":{"id":"ESLogGroupPolicyc8f05f015be3baf6ec1ee06cd1ee5cc8706ebbe5b2"}}',
                    ],
                ],
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('enabling audit logs throws without fine grained access control enabled', () => {
        expect(() => new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V6_7,
            logging: {
                auditLogEnabled: true,
            },
        })).toThrow(/Fine-grained access control is required when audit logs publishing is enabled\./);
    });
    (0, cdk_build_tools_1.testDeprecated)('slowSearchLogGroup should use a custom log group', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_4,
            logging: {
                slowSearchLogEnabled: true,
                slowSearchLogGroup: new logs.LogGroup(stack, 'SlowSearchLogs', {
                    retention: logs.RetentionDays.THREE_MONTHS,
                }),
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            LogPublishingOptions: {
                SEARCH_SLOW_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'SlowSearchLogsE00DC2E7',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                AUDIT_LOGS: assertions_1.Match.absent(),
                ES_APPLICATION_LOGS: assertions_1.Match.absent(),
                INDEX_SLOW_LOGS: assertions_1.Match.absent(),
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('slowIndexLogEnabled should use a custom log group', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_4,
            logging: {
                slowIndexLogEnabled: true,
                slowIndexLogGroup: new logs.LogGroup(stack, 'SlowIndexLogs', {
                    retention: logs.RetentionDays.THREE_MONTHS,
                }),
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            LogPublishingOptions: {
                INDEX_SLOW_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'SlowIndexLogsAD49DED0',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                AUDIT_LOGS: assertions_1.Match.absent(),
                ES_APPLICATION_LOGS: assertions_1.Match.absent(),
                SEARCH_SLOW_LOGS: assertions_1.Match.absent(),
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('appLogGroup should use a custom log group', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_4,
            logging: {
                appLogEnabled: true,
                appLogGroup: new logs.LogGroup(stack, 'AppLogs', {
                    retention: logs.RetentionDays.THREE_MONTHS,
                }),
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            LogPublishingOptions: {
                ES_APPLICATION_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'AppLogsC5DF83A6',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                AUDIT_LOGS: assertions_1.Match.absent(),
                SEARCH_SLOW_LOGS: assertions_1.Match.absent(),
                INDEX_SLOW_LOGS: assertions_1.Match.absent(),
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('auditLOgGroup should use a custom log group', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_4,
            fineGrainedAccessControl: {
                masterUserName: 'username',
            },
            nodeToNodeEncryption: true,
            encryptionAtRest: {
                enabled: true,
            },
            enforceHttps: true,
            logging: {
                auditLogEnabled: true,
                auditLogGroup: new logs.LogGroup(stack, 'AuditLogs', {
                    retention: logs.RetentionDays.THREE_MONTHS,
                }),
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            LogPublishingOptions: {
                AUDIT_LOGS: {
                    CloudWatchLogsLogGroupArn: {
                        'Fn::GetAtt': [
                            'AuditLogsB945E340',
                            'Arn',
                        ],
                    },
                    Enabled: true,
                },
                ES_APPLICATION_LOGS: assertions_1.Match.absent(),
                SEARCH_SLOW_LOGS: assertions_1.Match.absent(),
                INDEX_SLOW_LOGS: assertions_1.Match.absent(),
            },
        });
    });
});
describe('grants', () => {
    (0, cdk_build_tools_1.testDeprecated)('"grantRead" allows read actions associated with this domain resource', () => {
        testGrant(readActions, (p, d) => d.grantRead(p));
    });
    (0, cdk_build_tools_1.testDeprecated)('"grantWrite" allows write actions associated with this domain resource', () => {
        testGrant(writeActions, (p, d) => d.grantWrite(p));
    });
    (0, cdk_build_tools_1.testDeprecated)('"grantReadWrite" allows read and write actions associated with this domain resource', () => {
        testGrant(readWriteActions, (p, d) => d.grantReadWrite(p));
    });
    (0, cdk_build_tools_1.testDeprecated)('"grantIndexRead" allows read actions associated with an index in this domain resource', () => {
        testGrant(readActions, (p, d) => d.grantIndexRead('my-index', p), false, ['/my-index', '/my-index/*']);
    });
    (0, cdk_build_tools_1.testDeprecated)('"grantIndexWrite" allows write actions associated with an index in this domain resource', () => {
        testGrant(writeActions, (p, d) => d.grantIndexWrite('my-index', p), false, ['/my-index', '/my-index/*']);
    });
    (0, cdk_build_tools_1.testDeprecated)('"grantIndexReadWrite" allows read and write actions associated with an index in this domain resource', () => {
        testGrant(readWriteActions, (p, d) => d.grantIndexReadWrite('my-index', p), false, ['/my-index', '/my-index/*']);
    });
    (0, cdk_build_tools_1.testDeprecated)('"grantPathRead" allows read actions associated with a given path in this domain resource', () => {
        testGrant(readActions, (p, d) => d.grantPathRead('my-index/my-path', p), false, ['/my-index/my-path']);
    });
    (0, cdk_build_tools_1.testDeprecated)('"grantPathWrite" allows write actions associated with a given path in this domain resource', () => {
        testGrant(writeActions, (p, d) => d.grantPathWrite('my-index/my-path', p), false, ['/my-index/my-path']);
    });
    (0, cdk_build_tools_1.testDeprecated)('"grantPathReadWrite" allows read and write actions associated with a given path in this domain resource', () => {
        testGrant(readWriteActions, (p, d) => d.grantPathReadWrite('my-index/my-path', p), false, ['/my-index/my-path']);
    });
    (0, cdk_build_tools_1.testDeprecated)('"grant" for an imported domain', () => {
        const domainEndpoint = 'https://test-domain-2w2x2u3tifly-jcjotrt6f7otem4sqcwbch3c4u.testregion.es.amazonaws.com';
        const domain = domain_1.Domain.fromDomainEndpoint(stack, 'Domain', domainEndpoint);
        const user = new iam.User(stack, 'user');
        domain.grantReadWrite(user);
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: [
                            'es:ESHttpGet',
                            'es:ESHttpHead',
                            'es:ESHttpDelete',
                            'es:ESHttpPost',
                            'es:ESHttpPut',
                            'es:ESHttpPatch',
                        ],
                        Effect: 'Allow',
                        Resource: [
                            {
                                'Fn::Join': [
                                    '',
                                    [
                                        'arn:',
                                        {
                                            Ref: 'AWS::Partition',
                                        },
                                        ':es:testregion:1234:domain/test-domain-2w2x2u3tifly',
                                    ],
                                ],
                            },
                            {
                                'Fn::Join': [
                                    '',
                                    [
                                        'arn:',
                                        {
                                            Ref: 'AWS::Partition',
                                        },
                                        ':es:testregion:1234:domain/test-domain-2w2x2u3tifly/*',
                                    ],
                                ],
                            },
                        ],
                    },
                ],
                Version: '2012-10-17',
            },
            PolicyName: 'userDefaultPolicy083DF682',
            Users: [
                {
                    Ref: 'user2C2B57AE',
                },
            ],
        });
    });
});
describe('metrics', () => {
    (0, cdk_build_tools_1.testDeprecated)('Can use metricClusterStatusRed on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricClusterStatusRed(), 'ClusterStatus.red', aws_cloudwatch_1.Statistic.MAXIMUM);
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricClusterStatusYellow on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricClusterStatusYellow(), 'ClusterStatus.yellow', aws_cloudwatch_1.Statistic.MAXIMUM);
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricFreeStorageSpace on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricFreeStorageSpace(), 'FreeStorageSpace', aws_cloudwatch_1.Statistic.MINIMUM);
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricClusterIndexWriteBlocked on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricClusterIndexWritesBlocked(), 'ClusterIndexWritesBlocked', aws_cloudwatch_1.Statistic.MAXIMUM, core_1.Duration.minutes(1));
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricNodes on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricNodes(), 'Nodes', aws_cloudwatch_1.Statistic.MINIMUM, core_1.Duration.hours(1));
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricAutomatedSnapshotFailure on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricAutomatedSnapshotFailure(), 'AutomatedSnapshotFailure', aws_cloudwatch_1.Statistic.MAXIMUM);
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricCPUUtilization on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricCPUUtilization(), 'CPUUtilization', aws_cloudwatch_1.Statistic.MAXIMUM);
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricJVMMemoryPressure on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricJVMMemoryPressure(), 'JVMMemoryPressure', aws_cloudwatch_1.Statistic.MAXIMUM);
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricMasterCPUUtilization on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricMasterCPUUtilization(), 'MasterCPUUtilization', aws_cloudwatch_1.Statistic.MAXIMUM);
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricMasterJVMMemoryPressure on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricMasterJVMMemoryPressure(), 'MasterJVMMemoryPressure', aws_cloudwatch_1.Statistic.MAXIMUM);
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricKMSKeyError on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricKMSKeyError(), 'KMSKeyError', aws_cloudwatch_1.Statistic.MAXIMUM);
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricKMSKeyInaccessible on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricKMSKeyInaccessible(), 'KMSKeyInaccessible', aws_cloudwatch_1.Statistic.MAXIMUM);
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricSearchableDocuments on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricSearchableDocuments(), 'SearchableDocuments', aws_cloudwatch_1.Statistic.MAXIMUM);
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricSearchLatency on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricSearchLatency(), 'SearchLatency', 'p99');
    });
    (0, cdk_build_tools_1.testDeprecated)('Can use metricIndexingLatency on an Elasticsearch Domain', () => {
        testMetric((domain) => domain.metricIndexingLatency(), 'IndexingLatency', 'p99');
    });
});
describe('import', () => {
    (0, cdk_build_tools_1.testDeprecated)('static fromDomainEndpoint(endpoint) allows importing an external/existing domain', () => {
        const domainName = 'test-domain-2w2x2u3tifly';
        const domainEndpointWithoutHttps = `${domainName}-jcjotrt6f7otem4sqcwbch3c4u.testregion.es.amazonaws.com`;
        const domainEndpoint = `https://${domainEndpointWithoutHttps}`;
        const imported = domain_1.Domain.fromDomainEndpoint(stack, 'Domain', domainEndpoint);
        expect(imported.domainName).toEqual(domainName);
        expect(imported.domainArn).toMatch(RegExp(`es:testregion:1234:domain/${domainName}$`));
        expect(imported.domainEndpoint).toEqual(domainEndpointWithoutHttps);
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Elasticsearch::Domain', 0);
    });
    (0, cdk_build_tools_1.testDeprecated)('static fromDomainAttributes(attributes) allows importing an external/existing domain', () => {
        const domainName = 'test-domain-2w2x2u3tifly';
        const domainArn = `arn:aws:es:testregion:1234:domain/${domainName}`;
        const domainEndpointWithoutHttps = `${domainName}-jcjotrt6f7otem4sqcwbch3c4u.testregion.es.amazonaws.com`;
        const domainEndpoint = `https://${domainEndpointWithoutHttps}`;
        const imported = domain_1.Domain.fromDomainAttributes(stack, 'Domain', {
            domainArn,
            domainEndpoint,
        });
        expect(imported.domainName).toEqual(domainName);
        expect(imported.domainArn).toEqual(domainArn);
        expect(imported.domainEndpoint).toEqual(domainEndpointWithoutHttps);
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Elasticsearch::Domain', 0);
    });
    (0, cdk_build_tools_1.testDeprecated)('static fromDomainAttributes(attributes) allows importing with token arn and endpoint', () => {
        const domainArn = new core_1.CfnParameter(stack, 'domainArn', { type: 'String' }).valueAsString;
        const domainEndpoint = new core_1.CfnParameter(stack, 'domainEndpoint', { type: 'String' }).valueAsString;
        const imported = domain_1.Domain.fromDomainAttributes(stack, 'Domain', {
            domainArn,
            domainEndpoint,
        });
        const expectedDomainName = {
            'Fn::Select': [
                1,
                {
                    'Fn::Split': [
                        '/',
                        {
                            'Fn::Select': [
                                5,
                                {
                                    'Fn::Split': [
                                        ':',
                                        {
                                            Ref: 'domainArn',
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
            ],
        };
        expect(stack.resolve(imported.domainName)).toEqual(expectedDomainName);
        expect(imported.domainArn).toEqual(domainArn);
        expect(imported.domainEndpoint).toEqual(domainEndpoint);
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Elasticsearch::Domain', 0);
    });
});
describe('advanced security options', () => {
    const masterUserArn = 'arn:aws:iam::123456789012:user/JohnDoe';
    const masterUserName = 'JohnDoe';
    const password = 'password';
    const masterUserPassword = core_1.SecretValue.unsafePlainText(password);
    (0, cdk_build_tools_1.testDeprecated)('enable fine-grained access control with a master user ARN', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_1,
            fineGrainedAccessControl: {
                masterUserArn,
            },
            encryptionAtRest: {
                enabled: true,
            },
            nodeToNodeEncryption: true,
            enforceHttps: true,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            AdvancedSecurityOptions: {
                Enabled: true,
                InternalUserDatabaseEnabled: false,
                MasterUserOptions: {
                    MasterUserARN: masterUserArn,
                },
            },
            EncryptionAtRestOptions: {
                Enabled: true,
            },
            NodeToNodeEncryptionOptions: {
                Enabled: true,
            },
            DomainEndpointOptions: {
                EnforceHTTPS: true,
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('enable fine-grained access control with a master user name and password', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_1,
            fineGrainedAccessControl: {
                masterUserName,
                masterUserPassword,
            },
            encryptionAtRest: {
                enabled: true,
            },
            nodeToNodeEncryption: true,
            enforceHttps: true,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            AdvancedSecurityOptions: {
                Enabled: true,
                InternalUserDatabaseEnabled: true,
                MasterUserOptions: {
                    MasterUserName: masterUserName,
                    MasterUserPassword: password,
                },
            },
            EncryptionAtRestOptions: {
                Enabled: true,
            },
            NodeToNodeEncryptionOptions: {
                Enabled: true,
            },
            DomainEndpointOptions: {
                EnforceHTTPS: true,
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('enable fine-grained access control with a master user name and dynamically generated password', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_1,
            fineGrainedAccessControl: {
                masterUserName,
            },
            encryptionAtRest: {
                enabled: true,
            },
            nodeToNodeEncryption: true,
            enforceHttps: true,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            AdvancedSecurityOptions: {
                Enabled: true,
                InternalUserDatabaseEnabled: true,
                MasterUserOptions: {
                    MasterUserName: masterUserName,
                    MasterUserPassword: {
                        'Fn::Join': [
                            '',
                            [
                                '{{resolve:secretsmanager:',
                                {
                                    Ref: 'DomainMasterUserBFAFA7D9',
                                },
                                ':SecretString:password::}}',
                            ],
                        ],
                    },
                },
            },
            EncryptionAtRestOptions: {
                Enabled: true,
            },
            NodeToNodeEncryptionOptions: {
                Enabled: true,
            },
            DomainEndpointOptions: {
                EnforceHTTPS: true,
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SecretsManager::Secret', {
            GenerateSecretString: {
                GenerateStringKey: 'password',
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('enabling fine-grained access control throws with Elasticsearch < 6.7', () => {
        expect(() => new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V6_5,
            fineGrainedAccessControl: {
                masterUserArn,
            },
            encryptionAtRest: {
                enabled: true,
            },
            nodeToNodeEncryption: true,
            enforceHttps: true,
        })).toThrow(/Fine-grained access control requires Elasticsearch version 6\.7 or later/);
    });
    (0, cdk_build_tools_1.testDeprecated)('enabling fine-grained access control throws without node-to-node encryption enabled', () => {
        expect(() => new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_7,
            fineGrainedAccessControl: {
                masterUserArn,
            },
            encryptionAtRest: {
                enabled: true,
            },
            nodeToNodeEncryption: false,
            enforceHttps: true,
        })).toThrow(/Node-to-node encryption is required when fine-grained access control is enabled/);
    });
    (0, cdk_build_tools_1.testDeprecated)('enabling fine-grained access control throws without encryption-at-rest enabled', () => {
        expect(() => new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_7,
            fineGrainedAccessControl: {
                masterUserArn,
            },
            encryptionAtRest: {
                enabled: false,
            },
            nodeToNodeEncryption: true,
            enforceHttps: true,
        })).toThrow(/Encryption-at-rest is required when fine-grained access control is enabled/);
    });
    (0, cdk_build_tools_1.testDeprecated)('enabling fine-grained access control throws without enforceHttps enabled', () => {
        expect(() => new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_7,
            fineGrainedAccessControl: {
                masterUserArn,
            },
            encryptionAtRest: {
                enabled: true,
            },
            nodeToNodeEncryption: true,
            enforceHttps: false,
        })).toThrow(/Enforce HTTPS is required when fine-grained access control is enabled/);
    });
});
describe('custom endpoints', () => {
    const customDomainName = 'search.example.com';
    (0, cdk_build_tools_1.testDeprecated)('custom domain without hosted zone and default cert', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_1,
            nodeToNodeEncryption: true,
            enforceHttps: true,
            customEndpoint: {
                domainName: customDomainName,
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            DomainEndpointOptions: {
                EnforceHTTPS: true,
                CustomEndpointEnabled: true,
                CustomEndpoint: customDomainName,
                CustomEndpointCertificateArn: {
                    Ref: 'DomainCustomEndpointCertificateD080A69E', // Auto-generated certificate
                },
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
            DomainName: customDomainName,
            ValidationMethod: 'EMAIL',
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('custom domain with hosted zone and default cert', () => {
        const zone = new route53.HostedZone(stack, 'DummyZone', { zoneName: 'example.com' });
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_1,
            nodeToNodeEncryption: true,
            enforceHttps: true,
            customEndpoint: {
                domainName: customDomainName,
                hostedZone: zone,
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            DomainEndpointOptions: {
                EnforceHTTPS: true,
                CustomEndpointEnabled: true,
                CustomEndpoint: customDomainName,
                CustomEndpointCertificateArn: {
                    Ref: 'DomainCustomEndpointCertificateD080A69E', // Auto-generated certificate
                },
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
            DomainName: customDomainName,
            DomainValidationOptions: [
                {
                    DomainName: customDomainName,
                    HostedZoneId: {
                        Ref: 'DummyZone03E0FE81',
                    },
                },
            ],
            ValidationMethod: 'DNS',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
            Name: 'search.example.com.',
            Type: 'CNAME',
            HostedZoneId: {
                Ref: 'DummyZone03E0FE81',
            },
            ResourceRecords: [
                {
                    'Fn::GetAtt': [
                        'Domain66AC69E0',
                        'DomainEndpoint',
                    ],
                },
            ],
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('custom domain with hosted zone and given cert', () => {
        const zone = new route53.HostedZone(stack, 'DummyZone', {
            zoneName: 'example.com',
        });
        const certificate = new acm.Certificate(stack, 'DummyCert', {
            domainName: customDomainName,
        });
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_1,
            nodeToNodeEncryption: true,
            enforceHttps: true,
            customEndpoint: {
                domainName: customDomainName,
                hostedZone: zone,
                certificate,
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            DomainEndpointOptions: {
                EnforceHTTPS: true,
                CustomEndpointEnabled: true,
                CustomEndpoint: customDomainName,
                CustomEndpointCertificateArn: {
                    Ref: 'DummyCertFA37670B',
                },
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
            Name: 'search.example.com.',
            Type: 'CNAME',
            HostedZoneId: {
                Ref: 'DummyZone03E0FE81',
            },
            ResourceRecords: [
                {
                    'Fn::GetAtt': [
                        'Domain66AC69E0',
                        'DomainEndpoint',
                    ],
                },
            ],
        });
    });
});
describe('custom error responses', () => {
    (0, cdk_build_tools_1.testDeprecated)('error when availabilityZoneCount does not match vpcOptions.subnets length', () => {
        const vpc = new aws_ec2_1.Vpc(stack, 'Vpc', {
            maxAzs: 1,
        });
        expect(() => new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_4,
            zoneAwareness: {
                enabled: true,
                availabilityZoneCount: 2,
            },
            vpc,
        })).toThrow(/you need to provide a subnet for each AZ you are using/);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when master, data or Ultra Warm instance types do not end with .elasticsearch', () => {
        const error = /instance types must end with ".elasticsearch"/;
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V7_4,
            capacity: {
                masterNodeInstanceType: 'c5.large',
            },
        })).toThrow(error);
        expect(() => new domain_1.Domain(stack, 'Domain2', {
            version: domain_1.ElasticsearchVersion.V7_4,
            capacity: {
                dataNodeInstanceType: 'c5.2xlarge',
            },
        })).toThrow(error);
        expect(() => new domain_1.Domain(stack, 'Domain3', {
            version: domain_1.ElasticsearchVersion.V7_4,
            capacity: {
                warmInstanceType: 'ultrawarm1.medium',
            },
        })).toThrow(error);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when Ultra Warm instance types do not start with ultrawarm', () => {
        const error = /UltraWarm node instance type must start with "ultrawarm"./;
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V7_4,
            capacity: {
                warmInstanceType: 't3.small.elasticsearch',
            },
        })).toThrow(error);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when elasticsearchVersion is unsupported/unknown', () => {
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.of('5.4'),
        })).toThrow(/Unknown Elasticsearch version: 5\.4/);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when invalid domain name is given', () => {
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V7_4,
            domainName: 'InvalidName',
        })).toThrow(/Valid characters are a-z/);
        expect(() => new domain_1.Domain(stack, 'Domain2', {
            version: domain_1.ElasticsearchVersion.V7_4,
            domainName: 'a'.repeat(29),
        })).toThrow(/It must be between 3 and 28 characters/);
        expect(() => new domain_1.Domain(stack, 'Domain3', {
            version: domain_1.ElasticsearchVersion.V7_4,
            domainName: '123domain',
        })).toThrow(/It must start with a lowercase letter/);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when error log publishing is enabled for elasticsearch version < 5.1', () => {
        const error = /Error logs publishing requires Elasticsearch version 5.1 or later/;
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V2_3,
            logging: {
                appLogEnabled: true,
            },
        })).toThrow(error);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when encryption at rest is enabled for elasticsearch version < 5.1', () => {
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V2_3,
            encryptionAtRest: {
                enabled: true,
            },
        })).toThrow(/Encryption of data at rest requires Elasticsearch version 5.1 or later/);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when cognito for kibana is enabled for elasticsearch version < 5.1', () => {
        const user = new iam.User(stack, 'user');
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V2_3,
            cognitoKibanaAuth: {
                identityPoolId: 'test-identity-pool-id',
                role: new iam.Role(stack, 'Role', { assumedBy: user }),
                userPoolId: 'test-user-pool-id',
            },
        })).toThrow(/Cognito authentication for Kibana requires Elasticsearch version 5.1 or later/);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when C5, I3, M5, or R5 instance types are specified for elasticsearch version < 5.1', () => {
        const error = /C5, I3, M5, and R5 instance types require Elasticsearch version 5.1 or later/;
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V2_3,
            capacity: {
                masterNodeInstanceType: 'c5.medium.elasticsearch',
            },
        })).toThrow(error);
        expect(() => new domain_1.Domain(stack, 'Domain2', {
            version: domain_1.ElasticsearchVersion.V1_5,
            capacity: {
                dataNodeInstanceType: 'i3.2xlarge.elasticsearch',
            },
        })).toThrow(error);
        expect(() => new domain_1.Domain(stack, 'Domain3', {
            version: domain_1.ElasticsearchVersion.V1_5,
            capacity: {
                dataNodeInstanceType: 'm5.2xlarge.elasticsearch',
            },
        })).toThrow(error);
        expect(() => new domain_1.Domain(stack, 'Domain4', {
            version: domain_1.ElasticsearchVersion.V1_5,
            capacity: {
                masterNodeInstanceType: 'r5.2xlarge.elasticsearch',
            },
        })).toThrow(error);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when node to node encryption is enabled for elasticsearch version < 6.0', () => {
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V5_6,
            nodeToNodeEncryption: true,
        })).toThrow(/Node-to-node encryption requires Elasticsearch version 6.0 or later/);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when i3 or r6g instance types are specified with EBS enabled', () => {
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V7_4,
            capacity: {
                dataNodeInstanceType: 'i3.2xlarge.elasticsearch',
            },
            ebs: {
                volumeSize: 100,
                volumeType: aws_ec2_1.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,
            },
        })).toThrow(/I3 and R6GD instance types do not support EBS storage volumes/);
        expect(() => new domain_1.Domain(stack, 'Domain2', {
            version: domain_1.ElasticsearchVersion.V7_4,
            capacity: {
                dataNodeInstanceType: 'r6gd.large.elasticsearch',
            },
            ebs: {
                volumeSize: 100,
                volumeType: aws_ec2_1.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,
            },
        })).toThrow(/I3 and R6GD instance types do not support EBS storage volumes/);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when m3, r3, or t2 instance types are specified with encryption at rest enabled', () => {
        const error = /M3, R3, and T2 instance types do not support encryption of data at rest/;
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V7_4,
            capacity: {
                masterNodeInstanceType: 'm3.2xlarge.elasticsearch',
            },
            encryptionAtRest: {
                enabled: true,
            },
        })).toThrow(error);
        expect(() => new domain_1.Domain(stack, 'Domain2', {
            version: domain_1.ElasticsearchVersion.V7_4,
            capacity: {
                dataNodeInstanceType: 'r3.2xlarge.elasticsearch',
            },
            encryptionAtRest: {
                enabled: true,
            },
        })).toThrow(error);
        expect(() => new domain_1.Domain(stack, 'Domain3', {
            version: domain_1.ElasticsearchVersion.V7_4,
            capacity: {
                masterNodeInstanceType: 't2.2xlarge.elasticsearch',
            },
            encryptionAtRest: {
                enabled: true,
            },
        })).toThrow(error);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when t2.micro is specified with elasticsearch version > 2.3', () => {
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V6_7,
            capacity: {
                masterNodeInstanceType: 't2.micro.elasticsearch',
            },
        })).toThrow(/t2.micro.elasticsearch instance type supports only Elasticsearch 1.5 and 2.3/);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when any instance type other than R3, I3 and R6GD are specified without EBS enabled', () => {
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V7_4,
            ebs: {
                enabled: false,
            },
            capacity: {
                masterNodeInstanceType: 'm5.large.elasticsearch',
            },
        })).toThrow(/EBS volumes are required when using instance types other than r3, i3 or r6gd/);
        expect(() => new domain_1.Domain(stack, 'Domain2', {
            version: domain_1.ElasticsearchVersion.V7_4,
            ebs: {
                enabled: false,
            },
            capacity: {
                dataNodeInstanceType: 'm5.large.elasticsearch',
            },
        })).toThrow(/EBS volumes are required when using instance types other than r3, i3 or r6gd/);
    });
    (0, cdk_build_tools_1.testDeprecated)('can use compatible master instance types that does not have local storage when data node type is i3 or r6gd', () => {
        new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V7_4,
            ebs: {
                enabled: false,
            },
            capacity: {
                masterNodeInstanceType: 'c5.2xlarge.elasticsearch',
                dataNodeInstanceType: 'i3.2xlarge.elasticsearch',
            },
        });
        new domain_1.Domain(stack, 'Domain2', {
            version: domain_1.ElasticsearchVersion.V7_4,
            ebs: {
                enabled: false,
            },
            capacity: {
                masterNodes: 3,
                masterNodeInstanceType: 'c6g.large.elasticsearch',
                dataNodeInstanceType: 'r6gd.large.elasticsearch',
            },
        });
        // both configurations pass synth-time validation
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Elasticsearch::Domain', 2);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when availabilityZoneCount is not 2 or 3', () => {
        const vpc = new aws_ec2_1.Vpc(stack, 'Vpc');
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V7_4,
            vpc,
            zoneAwareness: {
                availabilityZoneCount: 4,
            },
        })).toThrow(/Invalid zone awareness configuration; availabilityZoneCount must be 2 or 3/);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when UltraWarm instance is used and not supported by elasticsearchVersion', () => {
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V6_7,
            capacity: {
                masterNodes: 1,
                warmNodes: 1,
            },
        })).toThrow(/UltraWarm requires Elasticsearch 6\.8 or later/);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when t2 or t3 instance types are specified with UltramWarm enabled', () => {
        const error = /T2 and T3 instance types do not support UltraWarm storage/;
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V7_4,
            capacity: {
                masterNodeInstanceType: 't2.2xlarge.elasticsearch',
                warmNodes: 1,
            },
        })).toThrow(error);
        expect(() => new domain_1.Domain(stack, 'Domain2', {
            version: domain_1.ElasticsearchVersion.V7_4,
            capacity: {
                masterNodeInstanceType: 't3.2xlarge.elasticsearch',
                warmNodes: 1,
            },
        })).toThrow(error);
    });
    (0, cdk_build_tools_1.testDeprecated)('error when UltraWarm instance is used and no dedicated master instance specified', () => {
        expect(() => new domain_1.Domain(stack, 'Domain1', {
            version: domain_1.ElasticsearchVersion.V7_4,
            capacity: {
                warmNodes: 1,
                masterNodes: 0,
            },
        })).toThrow(/Dedicated master node is required when UltraWarm storage is enabled/);
    });
});
(0, cdk_build_tools_1.testDeprecated)('can specify future version', () => {
    new domain_1.Domain(stack, 'Domain', { version: domain_1.ElasticsearchVersion.of('8.2') });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
        ElasticsearchVersion: '8.2',
    });
});
describe('unsigned basic auth', () => {
    (0, cdk_build_tools_1.testDeprecated)('can create a domain with unsigned basic auth', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_7,
            useUnsignedBasicAuth: true,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            AdvancedSecurityOptions: {
                Enabled: true,
                InternalUserDatabaseEnabled: true,
                MasterUserOptions: {
                    MasterUserName: 'admin',
                },
            },
            EncryptionAtRestOptions: {
                Enabled: true,
            },
            NodeToNodeEncryptionOptions: {
                Enabled: true,
            },
            DomainEndpointOptions: {
                EnforceHTTPS: true,
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('does not overwrite master user ARN configuration', () => {
        const masterUserArn = 'arn:aws:iam::123456789012:user/JohnDoe';
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_7,
            fineGrainedAccessControl: {
                masterUserArn,
            },
            useUnsignedBasicAuth: true,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            AdvancedSecurityOptions: {
                Enabled: true,
                InternalUserDatabaseEnabled: false,
                MasterUserOptions: {
                    MasterUserARN: masterUserArn,
                },
            },
            EncryptionAtRestOptions: {
                Enabled: true,
            },
            NodeToNodeEncryptionOptions: {
                Enabled: true,
            },
            DomainEndpointOptions: {
                EnforceHTTPS: true,
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('does not overwrite master user name and password', () => {
        const masterUserName = 'JohnDoe';
        const password = 'password';
        const masterUserPassword = core_1.SecretValue.unsafePlainText(password);
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_1,
            fineGrainedAccessControl: {
                masterUserName,
                masterUserPassword,
            },
            useUnsignedBasicAuth: true,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            AdvancedSecurityOptions: {
                Enabled: true,
                InternalUserDatabaseEnabled: true,
                MasterUserOptions: {
                    MasterUserName: masterUserName,
                    MasterUserPassword: password,
                },
            },
            EncryptionAtRestOptions: {
                Enabled: true,
            },
            NodeToNodeEncryptionOptions: {
                Enabled: true,
            },
            DomainEndpointOptions: {
                EnforceHTTPS: true,
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('fails to create a domain with unsigned basic auth when enforce HTTPS is disabled', () => {
        expect(() => new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_7,
            useUnsignedBasicAuth: true,
            enforceHttps: false,
        })).toThrow(/You cannot disable HTTPS and use unsigned basic auth/);
    });
    (0, cdk_build_tools_1.testDeprecated)('fails to create a domain with unsigned basic auth when node to node encryption is disabled', () => {
        expect(() => new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_7,
            useUnsignedBasicAuth: true,
            nodeToNodeEncryption: false,
        })).toThrow(/You cannot disable node to node encryption and use unsigned basic auth/);
    });
    (0, cdk_build_tools_1.testDeprecated)('fails to create a domain with unsigned basic auth when encryption at rest is disabled', () => {
        expect(() => new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_7,
            useUnsignedBasicAuth: true,
            encryptionAtRest: { enabled: false },
        })).toThrow(/You cannot disable encryption at rest and use unsigned basic auth/);
    });
    (0, cdk_build_tools_1.testDeprecated)('using unsigned basic auth throws with Elasticsearch < 6.7', () => {
        expect(() => new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V6_5,
            useUnsignedBasicAuth: true,
        })).toThrow(/Using unsigned basic auth requires Elasticsearch version 6\.7 or later./);
    });
});
describe('advanced options', () => {
    (0, cdk_build_tools_1.testDeprecated)('use advanced options', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_1,
            advancedOptions: {
                'rest.action.multi.allow_explicit_index': 'true',
                'indices.fielddata.cache.size': '50',
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            AdvancedOptions: {
                'rest.action.multi.allow_explicit_index': 'true',
                'indices.fielddata.cache.size': '50',
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('advanced options absent by default', () => {
        new domain_1.Domain(stack, 'Domain', {
            version: domain_1.ElasticsearchVersion.V7_1,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Elasticsearch::Domain', {
            AdvancedOptions: assertions_1.Match.absent(),
        });
    });
});
function testGrant(expectedActions, invocation, appliesToDomainRoot = true, paths = ['/*']) {
    const domain = new domain_1.Domain(stack, 'Domain', { version: domain_1.ElasticsearchVersion.V7_4 });
    const user = new iam.User(stack, 'user');
    invocation(user, domain);
    const action = expectedActions.length > 1 ? expectedActions.map(a => `es:${a}`) : `es:${expectedActions[0]}`;
    const domainArn = {
        'Fn::GetAtt': [
            'Domain66AC69E0',
            'Arn',
        ],
    };
    const resolvedPaths = paths.map(path => {
        return {
            'Fn::Join': [
                '',
                [
                    domainArn,
                    path,
                ],
            ],
        };
    });
    const resource = appliesToDomainRoot
        ? [domainArn, ...resolvedPaths]
        : resolvedPaths.length > 1
            ? resolvedPaths
            : resolvedPaths[0];
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: action,
                    Effect: 'Allow',
                    Resource: resource,
                },
            ],
            Version: '2012-10-17',
        },
        PolicyName: 'userDefaultPolicy083DF682',
        Users: [
            {
                Ref: 'user2C2B57AE',
            },
        ],
    });
}
function testMetric(invocation, metricName, statistic = aws_cloudwatch_1.Statistic.SUM, period = core_1.Duration.minutes(5)) {
    const domain = new domain_1.Domain(stack, 'Domain', { version: domain_1.ElasticsearchVersion.V7_4 });
    const metric = invocation(domain);
    expect(metric).toMatchObject({
        metricName,
        namespace: 'AWS/ES',
        period,
        statistic,
        dimensions: {
            ClientId: '1234',
        },
    });
    expect(metric.dimensions).toHaveProperty('DomainName');
}
//# sourceMappingURL=data:application/json;base64,