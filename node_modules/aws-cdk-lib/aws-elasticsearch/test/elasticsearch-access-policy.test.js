"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const iam = require("../../aws-iam");
const core_1 = require("../../core");
const elasticsearch_access_policy_1 = require("../lib/elasticsearch-access-policy");
let app;
let stack;
beforeEach(() => {
    app = new core_1.App();
    stack = new core_1.Stack(app, 'Stack', {
        env: { account: '1234', region: 'testregion' },
    });
});
test('minimal example renders correctly', () => {
    new elasticsearch_access_policy_1.ElasticsearchAccessPolicy(stack, 'ElasticsearchAccessPolicy', {
        domainName: 'TestDomain',
        domainArn: 'test:arn',
        accessPolicies: [new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                actions: ['es:ESHttp*'],
                principals: [new iam.AnyPrincipal()],
                resources: ['test:arn'],
            })],
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::ElasticsearchAccessPolicy', {
        ServiceToken: {
            'Fn::GetAtt': [
                'AWS679f53fac002430cb0da5b7982bd22872D164C4C',
                'Arn',
            ],
        },
        Create: JSON.stringify({
            action: 'updateElasticsearchDomainConfig',
            service: 'ES',
            parameters: {
                DomainName: 'TestDomain',
                AccessPolicies: '{"Statement":[{"Action":"es:ESHttp*","Effect":"Allow","Principal":{"AWS":"*"},"Resource":"test:arn"}],"Version":"2012-10-17"}',
            },
            outputPaths: ['DomainConfig.ElasticsearchClusterConfig.AccessPolicies'],
            physicalResourceId: { id: 'TestDomainAccessPolicy' },
        }),
        Update: JSON.stringify({
            action: 'updateElasticsearchDomainConfig',
            service: 'ES',
            parameters: {
                DomainName: 'TestDomain',
                AccessPolicies: '{"Statement":[{"Action":"es:ESHttp*","Effect":"Allow","Principal":{"AWS":"*"},"Resource":"test:arn"}],"Version":"2012-10-17"}',
            },
            outputPaths: ['DomainConfig.ElasticsearchClusterConfig.AccessPolicies'],
            physicalResourceId: { id: 'TestDomainAccessPolicy' },
        }),
    });
});
test('support access policy added inline and later', () => {
    const elasticsearchAccessPolicy = new elasticsearch_access_policy_1.ElasticsearchAccessPolicy(stack, 'ElasticsearchAccessPolicy', {
        domainName: 'TestDomain',
        domainArn: 'test:arn',
        accessPolicies: [
            new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                actions: ['es:ESHttp*'],
                principals: [new iam.AnyPrincipal()],
                resources: ['test:arn'],
            }),
        ],
    });
    elasticsearchAccessPolicy.addAccessPolicies(new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['*'],
        principals: [new iam.AnyPrincipal()],
        resources: ['test:arn'],
    }));
    assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::ElasticsearchAccessPolicy', {
        ServiceToken: {
            'Fn::GetAtt': [
                'AWS679f53fac002430cb0da5b7982bd22872D164C4C',
                'Arn',
            ],
        },
        Create: JSON.stringify({
            action: 'updateElasticsearchDomainConfig',
            service: 'ES',
            parameters: {
                DomainName: 'TestDomain',
                AccessPolicies: '{"Statement":[{"Action":"es:ESHttp*","Effect":"Allow","Principal":{"AWS":"*"},"Resource":"test:arn"},{"Action":"*","Effect":"Allow","Principal":{"AWS":"*"},"Resource":"test:arn"}],"Version":"2012-10-17"}',
            },
            outputPaths: ['DomainConfig.ElasticsearchClusterConfig.AccessPolicies'],
            physicalResourceId: { id: 'TestDomainAccessPolicy' },
        }),
        Update: JSON.stringify({
            action: 'updateElasticsearchDomainConfig',
            service: 'ES',
            parameters: {
                DomainName: 'TestDomain',
                AccessPolicies: '{"Statement":[{"Action":"es:ESHttp*","Effect":"Allow","Principal":{"AWS":"*"},"Resource":"test:arn"},{"Action":"*","Effect":"Allow","Principal":{"AWS":"*"},"Resource":"test:arn"}],"Version":"2012-10-17"}',
            },
            outputPaths: ['DomainConfig.ElasticsearchClusterConfig.AccessPolicies'],
            physicalResourceId: { id: 'TestDomainAccessPolicy' },
        }),
    });
});
//# sourceMappingURL=data:application/json;base64,