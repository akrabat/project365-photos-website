"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const events = require("../../../aws-events");
const iam = require("../../../aws-iam");
const core_1 = require("../../../core");
const targets = require("../../lib");
describe('with basic auth connection', () => {
    let stack;
    let connection;
    let destination;
    let rule;
    beforeEach(() => {
        stack = new core_1.Stack();
        connection = new events.Connection(stack, 'Connection', {
            authorization: events.Authorization.basic('username', core_1.SecretValue.unsafePlainText('password')),
            description: 'ConnectionDescription',
            connectionName: 'testConnection',
        });
        destination = new events.ApiDestination(stack, 'Destination', {
            connection,
            endpoint: 'https://endpoint.com',
        });
        rule = new events.Rule(stack, 'Rule', {
            schedule: events.Schedule.rate(core_1.Duration.minutes(1)),
        });
    });
    test('use api destination as an eventrule target', () => {
        // WHEN
        rule.addTarget(new targets.ApiDestination(destination));
        // THEN
        const template = assertions_1.Template.fromStack(stack);
        template.hasResourceProperties('AWS::Events::Rule', {
            ScheduleExpression: 'rate(1 minute)',
            State: 'ENABLED',
            Targets: [
                {
                    Arn: { 'Fn::GetAtt': ['DestinationApiDestinationA879FAE5', 'Arn'] },
                    Id: 'Target0',
                    RoleArn: { 'Fn::GetAtt': ['DestinationEventsRole7DA63556', 'Arn'] },
                },
            ],
        });
    });
    test('with an explicit event role', () => {
        // WHEN
        const eventRole = new iam.Role(stack, 'Role', {
            assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),
        });
        rule.addTarget(new targets.ApiDestination(destination, { eventRole }));
        // THEN
        const template = assertions_1.Template.fromStack(stack);
        template.hasResourceProperties('AWS::Events::Rule', {
            Targets: [
                {
                    RoleArn: { 'Fn::GetAtt': ['Role1ABCC5F0', 'Arn'] },
                    Id: 'Target0',
                },
            ],
        });
    });
    test('with header parameter', () => {
        // WHEN
        rule.addTarget(new targets.ApiDestination(destination, {
            headerParameters: { headerName: 'headerValue' },
        }));
        // THEN
        const template = assertions_1.Template.fromStack(stack);
        template.hasResourceProperties('AWS::Events::Rule', {
            Targets: [
                {
                    Arn: { 'Fn::GetAtt': ['DestinationApiDestinationA879FAE5', 'Arn'] },
                    Id: 'Target0',
                    RoleArn: { 'Fn::GetAtt': ['DestinationEventsRole7DA63556', 'Arn'] },
                    HttpParameters: { HeaderParameters: { headerName: 'headerValue' } },
                },
            ],
        });
    });
    test('with query parameter', () => {
        // WHEN
        rule.addTarget(new targets.ApiDestination(destination, {
            queryStringParameters: { queryName: 'queryValue' },
        }));
        // THEN
        const template = assertions_1.Template.fromStack(stack);
        template.hasResourceProperties('AWS::Events::Rule', {
            Targets: [
                {
                    Arn: { 'Fn::GetAtt': ['DestinationApiDestinationA879FAE5', 'Arn'] },
                    Id: 'Target0',
                    RoleArn: { 'Fn::GetAtt': ['DestinationEventsRole7DA63556', 'Arn'] },
                    HttpParameters: { QueryStringParameters: { queryName: 'queryValue' } },
                },
            ],
        });
    });
    test('with path parameter', () => {
        // WHEN
        rule.addTarget(new targets.ApiDestination(destination, {
            pathParameterValues: ['pathValue'],
        }));
        // THEN
        const template = assertions_1.Template.fromStack(stack);
        template.hasResourceProperties('AWS::Events::Rule', {
            Targets: [
                {
                    Arn: { 'Fn::GetAtt': ['DestinationApiDestinationA879FAE5', 'Arn'] },
                    Id: 'Target0',
                    RoleArn: { 'Fn::GetAtt': ['DestinationEventsRole7DA63556', 'Arn'] },
                    HttpParameters: { PathParameterValues: ['pathValue'] },
                },
            ],
        });
    });
});
//# sourceMappingURL=data:application/json;base64,