"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk-mock");
const aws_api_handler_1 = require("../../lib/aws-api-handler");
AWS.setSDK(require.resolve('aws-sdk'));
console.log = jest.fn();
const event = {
    service: 'ECS',
    action: 'updateService',
    parameters: {
        service: 'cool-service',
        forceNewDeployment: true,
    },
};
beforeEach(() => {
    AWS.restore();
});
test('calls the SDK with the right parameters', async () => {
    const updateServiceMock = jest.fn().mockResolvedValue({ success: true });
    AWS.mock('ECS', 'updateService', updateServiceMock);
    await (0, aws_api_handler_1.handler)(event);
    expect(updateServiceMock).toHaveBeenCalledWith({
        service: 'cool-service',
        forceNewDeployment: true,
    }, expect.any(Function));
    expect(console.log).toHaveBeenLastCalledWith('Response: %j', {
        success: true,
    });
});
test('throws and logs in case of error', async () => {
    const updateServiceMock = jest.fn().mockRejectedValue({ code: 'Error' });
    AWS.mock('ECS', 'updateService', updateServiceMock);
    await expect((0, aws_api_handler_1.handler)(event)).rejects.toEqual({ code: 'Error' });
    expect(console.log).toHaveBeenLastCalledWith({ code: 'Error' });
});
test('catches and logs error', async () => {
    const catchEvent = {
        ...event,
        catchErrorPattern: 'Invalid',
    };
    const updateServiceMock = jest.fn().mockRejectedValue({ code: 'Invalid' });
    AWS.mock('ECS', 'updateService', updateServiceMock);
    await (0, aws_api_handler_1.handler)(catchEvent);
    expect(console.log).toHaveBeenLastCalledWith({ code: 'Invalid' });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLWFwaS1oYW5kbGVyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhd3MtYXBpLWhhbmRsZXIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLG9DQUFvQztBQUVwQywrREFBb0Q7QUFFcEQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFFdkMsT0FBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFFeEIsTUFBTSxLQUFLLEdBQWdCO0lBQ3pCLE9BQU8sRUFBRSxLQUFLO0lBQ2QsTUFBTSxFQUFFLGVBQWU7SUFDdkIsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGNBQWM7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSTtLQUNPO0NBQ2xDLENBQUM7QUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2hCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHlDQUF5QyxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3pELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFFekUsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFFcEQsTUFBTSxJQUFBLHlCQUFPLEVBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsb0JBQW9CLENBQUM7UUFDN0MsT0FBTyxFQUFFLGNBQWM7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSTtLQUN6QixFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUV6QixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLGNBQWMsRUFBRTtRQUMzRCxPQUFPLEVBQUUsSUFBSTtLQUNkLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ2xELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFekUsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFFcEQsTUFBTSxNQUFNLENBQUMsSUFBQSx5QkFBTyxFQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBRWhFLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsd0JBQXdCLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNsRSxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx3QkFBd0IsRUFBRSxLQUFLLElBQUksRUFBRTtJQUN4QyxNQUFNLFVBQVUsR0FBZ0I7UUFDOUIsR0FBRyxLQUFLO1FBQ1IsaUJBQWlCLEVBQUUsU0FBUztLQUM3QixDQUFDO0lBRUYsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUUzRSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUVwRCxNQUFNLElBQUEseUJBQU8sRUFBQyxVQUFVLENBQUMsQ0FBQztJQUUxQixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFDcEUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5pbXBvcnQgKiBhcyBTREsgZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkay1tb2NrJztcbmltcG9ydCB7IEF3c0FwaVByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCB7IGhhbmRsZXIgfSBmcm9tICcuLi8uLi9saWIvYXdzLWFwaS1oYW5kbGVyJztcblxuQVdTLnNldFNESyhyZXF1aXJlLnJlc29sdmUoJ2F3cy1zZGsnKSk7XG5cbmNvbnNvbGUubG9nID0gamVzdC5mbigpO1xuXG5jb25zdCBldmVudDogQXdzQXBpUHJvcHMgPSB7XG4gIHNlcnZpY2U6ICdFQ1MnLFxuICBhY3Rpb246ICd1cGRhdGVTZXJ2aWNlJyxcbiAgcGFyYW1ldGVyczoge1xuICAgIHNlcnZpY2U6ICdjb29sLXNlcnZpY2UnLFxuICAgIGZvcmNlTmV3RGVwbG95bWVudDogdHJ1ZSxcbiAgfSBhcyBTREsuRUNTLlVwZGF0ZVNlcnZpY2VSZXF1ZXN0LFxufTtcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIEFXUy5yZXN0b3JlKCk7XG59KTtcblxudGVzdCgnY2FsbHMgdGhlIFNESyB3aXRoIHRoZSByaWdodCBwYXJhbWV0ZXJzJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCB1cGRhdGVTZXJ2aWNlTW9jayA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHN1Y2Nlc3M6IHRydWUgfSk7XG5cbiAgQVdTLm1vY2soJ0VDUycsICd1cGRhdGVTZXJ2aWNlJywgdXBkYXRlU2VydmljZU1vY2spO1xuXG4gIGF3YWl0IGhhbmRsZXIoZXZlbnQpO1xuXG4gIGV4cGVjdCh1cGRhdGVTZXJ2aWNlTW9jaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgIHNlcnZpY2U6ICdjb29sLXNlcnZpY2UnLFxuICAgIGZvcmNlTmV3RGVwbG95bWVudDogdHJ1ZSxcbiAgfSwgZXhwZWN0LmFueShGdW5jdGlvbikpO1xuXG4gIGV4cGVjdChjb25zb2xlLmxvZykudG9IYXZlQmVlbkxhc3RDYWxsZWRXaXRoKCdSZXNwb25zZTogJWonLCB7XG4gICAgc3VjY2VzczogdHJ1ZSxcbiAgfSk7XG59KTtcblxudGVzdCgndGhyb3dzIGFuZCBsb2dzIGluIGNhc2Ugb2YgZXJyb3InLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHVwZGF0ZVNlcnZpY2VNb2NrID0gamVzdC5mbigpLm1vY2tSZWplY3RlZFZhbHVlKHsgY29kZTogJ0Vycm9yJyB9KTtcblxuICBBV1MubW9jaygnRUNTJywgJ3VwZGF0ZVNlcnZpY2UnLCB1cGRhdGVTZXJ2aWNlTW9jayk7XG5cbiAgYXdhaXQgZXhwZWN0KGhhbmRsZXIoZXZlbnQpKS5yZWplY3RzLnRvRXF1YWwoeyBjb2RlOiAnRXJyb3InIH0pO1xuXG4gIGV4cGVjdChjb25zb2xlLmxvZykudG9IYXZlQmVlbkxhc3RDYWxsZWRXaXRoKHsgY29kZTogJ0Vycm9yJyB9KTtcbn0pO1xuXG50ZXN0KCdjYXRjaGVzIGFuZCBsb2dzIGVycm9yJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjYXRjaEV2ZW50OiBBd3NBcGlQcm9wcyA9IHtcbiAgICAuLi5ldmVudCxcbiAgICBjYXRjaEVycm9yUGF0dGVybjogJ0ludmFsaWQnLFxuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZVNlcnZpY2VNb2NrID0gamVzdC5mbigpLm1vY2tSZWplY3RlZFZhbHVlKHsgY29kZTogJ0ludmFsaWQnIH0pO1xuXG4gIEFXUy5tb2NrKCdFQ1MnLCAndXBkYXRlU2VydmljZScsIHVwZGF0ZVNlcnZpY2VNb2NrKTtcblxuICBhd2FpdCBoYW5kbGVyKGNhdGNoRXZlbnQpO1xuXG4gIGV4cGVjdChjb25zb2xlLmxvZykudG9IYXZlQmVlbkxhc3RDYWxsZWRXaXRoKHsgY29kZTogJ0ludmFsaWQnIH0pO1xufSk7XG4iXX0=