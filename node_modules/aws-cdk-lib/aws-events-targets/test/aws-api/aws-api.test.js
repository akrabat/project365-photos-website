"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const events = require("../../../aws-events");
const iam = require("../../../aws-iam");
const core_1 = require("../../../core");
const targets = require("../../lib");
test('use AwsApi as an event rule target', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const rule = new events.Rule(stack, 'Rule', {
        schedule: events.Schedule.expression('rate(15 minutes)'),
    });
    // WHEN
    rule.addTarget(new targets.AwsApi({
        service: 'ECS',
        action: 'updateService',
        parameters: {
            service: 'cool-service',
            forceNewDeployment: true,
        },
        catchErrorPattern: 'error',
        apiVersion: '2019-01-01',
    }));
    rule.addTarget(new targets.AwsApi({
        service: 'RDS',
        action: 'createDBSnapshot',
        parameters: {
            DBInstanceIdentifier: 'cool-instance',
        },
    }));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
        Targets: [
            {
                Arn: {
                    'Fn::GetAtt': [
                        'AWSb4cf1abd4e4f4bc699441af7ccd9ec371511E620',
                        'Arn',
                    ],
                },
                Id: 'Target0',
                Input: JSON.stringify({
                    service: 'ECS',
                    action: 'updateService',
                    parameters: {
                        service: 'cool-service',
                        forceNewDeployment: true,
                    },
                    catchErrorPattern: 'error',
                    apiVersion: '2019-01-01',
                }),
            },
            {
                Arn: {
                    'Fn::GetAtt': [
                        'AWSb4cf1abd4e4f4bc699441af7ccd9ec371511E620',
                        'Arn',
                    ],
                },
                Id: 'Target1',
                Input: JSON.stringify({
                    service: 'RDS',
                    action: 'createDBSnapshot',
                    parameters: {
                        DBInstanceIdentifier: 'cool-instance',
                    },
                }),
            },
        ],
    });
    // Uses a singleton function
    assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Lambda::Function', 1);
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: 'ecs:UpdateService',
                    Effect: 'Allow',
                    Resource: '*',
                },
                {
                    Action: 'rds:CreateDBSnapshot',
                    Effect: 'Allow',
                    Resource: '*',
                },
            ],
            Version: '2012-10-17',
        },
    });
});
test('with policy statement', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const rule = new events.Rule(stack, 'Rule', {
        schedule: events.Schedule.expression('rate(15 minutes)'),
    });
    // WHEN
    rule.addTarget(new targets.AwsApi({
        service: 'service',
        action: 'action',
        policyStatement: new iam.PolicyStatement({
            actions: ['s3:GetObject'],
            resources: ['resource'],
        }),
    }));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
        Targets: [
            {
                Arn: {
                    'Fn::GetAtt': [
                        'AWSb4cf1abd4e4f4bc699441af7ccd9ec371511E620',
                        'Arn',
                    ],
                },
                Id: 'Target0',
                Input: JSON.stringify({
                    service: 'service',
                    action: 'action',
                }),
            },
        ],
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: 's3:GetObject',
                    Effect: 'Allow',
                    Resource: 'resource',
                },
            ],
            Version: '2012-10-17',
        },
    });
});
test('with service not in AWS SDK', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const rule = new events.Rule(stack, 'Rule', {
        schedule: events.Schedule.expression('rate(15 minutes)'),
    });
    const awsApi = new targets.AwsApi({
        service: 'no-such-service',
        action: 'no-such-action',
        policyStatement: new iam.PolicyStatement({
            actions: ['s3:GetObject'],
            resources: ['resource'],
        }),
    });
    // WHEN
    rule.addTarget(awsApi);
    // THEN
    assertions_1.Annotations.fromStack(stack).hasWarning('*', 'Service no-such-service does not exist in the AWS SDK. Check the list of available services and actions from https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html');
});
//# sourceMappingURL=data:application/json;base64,