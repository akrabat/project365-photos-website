"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const codepipeline = require("../../../aws-codepipeline");
const events = require("../../../aws-events");
const iam = require("../../../aws-iam");
const sqs = require("../../../aws-sqs");
const core_1 = require("../../../core");
const targets = require("../../lib");
describe('CodePipeline event target', () => {
    let stack;
    let pipeline;
    let pipelineArn;
    beforeEach(() => {
        stack = new core_1.Stack();
        pipeline = new codepipeline.Pipeline(stack, 'Pipeline');
        const srcArtifact = new codepipeline.Artifact('Src');
        const buildArtifact = new codepipeline.Artifact('Bld');
        pipeline.addStage({
            stageName: 'Source',
            actions: [new TestAction({
                    actionName: 'Hello',
                    category: codepipeline.ActionCategory.SOURCE,
                    provider: 'x',
                    artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 1 },
                    outputs: [srcArtifact],
                })],
        });
        pipeline.addStage({
            stageName: 'Build',
            actions: [new TestAction({
                    actionName: 'Hello',
                    category: codepipeline.ActionCategory.BUILD,
                    provider: 'y',
                    inputs: [srcArtifact],
                    outputs: [buildArtifact],
                    artifactBounds: { minInputs: 1, maxInputs: 1, minOutputs: 1, maxOutputs: 1 },
                })],
        });
        pipelineArn = {
            'Fn::Join': ['', [
                    'arn:',
                    { Ref: 'AWS::Partition' },
                    ':codepipeline:',
                    { Ref: 'AWS::Region' },
                    ':',
                    { Ref: 'AWS::AccountId' },
                    ':',
                    { Ref: 'PipelineC660917D' },
                ]],
        };
    });
    describe('when added to an event rule as a target', () => {
        let rule;
        beforeEach(() => {
            rule = new events.Rule(stack, 'rule', {
                schedule: events.Schedule.expression('rate(1 minute)'),
            });
        });
        describe('with default settings', () => {
            beforeEach(() => {
                rule.addTarget(new targets.CodePipeline(pipeline));
            });
            test("adds the pipeline's ARN and role to the targets of the rule", () => {
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
                    Targets: [
                        {
                            Arn: pipelineArn,
                            Id: 'Target0',
                            RoleArn: { 'Fn::GetAtt': ['PipelineEventsRole46BEEA7C', 'Arn'] },
                        },
                    ],
                });
            });
            test("creates a policy that has StartPipeline permissions on the pipeline's ARN", () => {
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                    PolicyDocument: {
                        Statement: [
                            {
                                Action: 'codepipeline:StartPipelineExecution',
                                Effect: 'Allow',
                                Resource: pipelineArn,
                            },
                        ],
                        Version: '2012-10-17',
                    },
                });
            });
        });
        describe('with retry policy and dead letter queue', () => {
            test('adds retry attempts and maxEventAge to the target configuration', () => {
                // WHEN
                let queue = new sqs.Queue(stack, 'dlq');
                rule.addTarget(new targets.CodePipeline(pipeline, {
                    retryAttempts: 2,
                    maxEventAge: core_1.Duration.hours(2),
                    deadLetterQueue: queue,
                }));
                // THEN
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
                    ScheduleExpression: 'rate(1 minute)',
                    State: 'ENABLED',
                    Targets: [
                        {
                            Arn: {
                                'Fn::Join': [
                                    '',
                                    [
                                        'arn:',
                                        {
                                            Ref: 'AWS::Partition',
                                        },
                                        ':codepipeline:',
                                        {
                                            Ref: 'AWS::Region',
                                        },
                                        ':',
                                        {
                                            Ref: 'AWS::AccountId',
                                        },
                                        ':',
                                        {
                                            Ref: 'PipelineC660917D',
                                        },
                                    ],
                                ],
                            },
                            DeadLetterConfig: {
                                Arn: {
                                    'Fn::GetAtt': [
                                        'dlq09C78ACC',
                                        'Arn',
                                    ],
                                },
                            },
                            Id: 'Target0',
                            RetryPolicy: {
                                MaximumEventAgeInSeconds: 7200,
                                MaximumRetryAttempts: 2,
                            },
                            RoleArn: {
                                'Fn::GetAtt': [
                                    'PipelineEventsRole46BEEA7C',
                                    'Arn',
                                ],
                            },
                        },
                    ],
                });
            });
            test('adds 0 retry attempts to the target configuration', () => {
                // WHEN
                rule.addTarget(new targets.CodePipeline(pipeline, {
                    retryAttempts: 0,
                }));
                // THEN
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
                    ScheduleExpression: 'rate(1 minute)',
                    State: 'ENABLED',
                    Targets: [
                        {
                            Arn: {
                                'Fn::Join': [
                                    '',
                                    [
                                        'arn:',
                                        {
                                            Ref: 'AWS::Partition',
                                        },
                                        ':codepipeline:',
                                        {
                                            Ref: 'AWS::Region',
                                        },
                                        ':',
                                        {
                                            Ref: 'AWS::AccountId',
                                        },
                                        ':',
                                        {
                                            Ref: 'PipelineC660917D',
                                        },
                                    ],
                                ],
                            },
                            Id: 'Target0',
                            RetryPolicy: {
                                MaximumRetryAttempts: 0,
                            },
                            RoleArn: {
                                'Fn::GetAtt': [
                                    'PipelineEventsRole46BEEA7C',
                                    'Arn',
                                ],
                            },
                        },
                    ],
                });
            });
        });
        describe('with an explicit event role', () => {
            beforeEach(() => {
                const role = new iam.Role(stack, 'MyExampleRole', {
                    assumedBy: new iam.AnyPrincipal(),
                });
                const roleResource = role.node.defaultChild;
                roleResource.overrideLogicalId('MyRole'); // to make it deterministic in the assertion below
                rule.addTarget(new targets.CodePipeline(pipeline, {
                    eventRole: role,
                }));
            });
            test("points at the given event role in the rule's targets", () => {
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
                    Targets: [
                        {
                            Arn: pipelineArn,
                            RoleArn: { 'Fn::GetAtt': ['MyRole', 'Arn'] },
                        },
                    ],
                });
            });
        });
    });
});
class TestAction {
    constructor(actionProperties) {
        this.actionProperties = actionProperties;
    }
    bind(_scope, _stage, _options) {
        return {};
    }
    onStateChange(_name, _target, _options) {
        throw new Error('onStateChange() is not available on MockAction');
    }
}
//# sourceMappingURL=data:application/json;base64,