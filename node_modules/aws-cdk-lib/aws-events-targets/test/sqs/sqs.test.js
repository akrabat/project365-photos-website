"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const events = require("../../../aws-events");
const kms = require("../../../aws-kms");
const sqs = require("../../../aws-sqs");
const core_1 = require("../../../core");
const cxapi = require("../../../cx-api");
const targets = require("../../lib");
test('sqs queue as an event rule target', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const queue = new sqs.Queue(stack, 'MyQueue');
    const rule = new events.Rule(stack, 'MyRule', {
        schedule: events.Schedule.rate(core_1.Duration.hours(1)),
    });
    // WHEN
    rule.addTarget(new targets.SqsQueue(queue));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::QueuePolicy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: [
                        'sqs:SendMessage',
                        'sqs:GetQueueAttributes',
                        'sqs:GetQueueUrl',
                    ],
                    Condition: {
                        ArnEquals: {
                            'aws:SourceArn': {
                                'Fn::GetAtt': [
                                    'MyRuleA44AB831',
                                    'Arn',
                                ],
                            },
                        },
                    },
                    Effect: 'Allow',
                    Principal: { Service: 'events.amazonaws.com' },
                    Resource: {
                        'Fn::GetAtt': [
                            'MyQueueE6CA6235',
                            'Arn',
                        ],
                    },
                },
            ],
            Version: '2012-10-17',
        },
        Queues: [{ Ref: 'MyQueueE6CA6235' }],
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
        ScheduleExpression: 'rate(1 hour)',
        State: 'ENABLED',
        Targets: [
            {
                Arn: {
                    'Fn::GetAtt': [
                        'MyQueueE6CA6235',
                        'Arn',
                    ],
                },
                Id: 'Target0',
            },
        ],
    });
});
test('multiple uses of a queue as a target results in multi policy statement because of condition', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const queue = new sqs.Queue(stack, 'MyQueue');
    // WHEN
    for (let i = 0; i < 2; ++i) {
        const rule = new events.Rule(stack, `Rule${i}`, {
            schedule: events.Schedule.rate(core_1.Duration.hours(1)),
        });
        rule.addTarget(new targets.SqsQueue(queue));
    }
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::QueuePolicy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: [
                        'sqs:SendMessage',
                        'sqs:GetQueueAttributes',
                        'sqs:GetQueueUrl',
                    ],
                    Condition: {
                        ArnEquals: {
                            'aws:SourceArn': {
                                'Fn::GetAtt': [
                                    'Rule071281D88',
                                    'Arn',
                                ],
                            },
                        },
                    },
                    Effect: 'Allow',
                    Principal: { Service: 'events.amazonaws.com' },
                    Resource: {
                        'Fn::GetAtt': [
                            'MyQueueE6CA6235',
                            'Arn',
                        ],
                    },
                },
                {
                    Action: [
                        'sqs:SendMessage',
                        'sqs:GetQueueAttributes',
                        'sqs:GetQueueUrl',
                    ],
                    Condition: {
                        ArnEquals: {
                            'aws:SourceArn': {
                                'Fn::GetAtt': [
                                    'Rule136483A30',
                                    'Arn',
                                ],
                            },
                        },
                    },
                    Effect: 'Allow',
                    Principal: { Service: 'events.amazonaws.com' },
                    Resource: {
                        'Fn::GetAtt': [
                            'MyQueueE6CA6235',
                            'Arn',
                        ],
                    },
                },
            ],
            Version: '2012-10-17',
        },
        Queues: [{ Ref: 'MyQueueE6CA6235' }],
    });
});
test('Encrypted queues result in a policy statement with aws:sourceAccount condition when the feature flag is on', () => {
    const app = new core_1.App();
    // GIVEN
    const ruleStack = new core_1.Stack(app, 'ruleStack', {
        env: {
            account: '111111111111',
            region: 'us-east-1',
        },
    });
    ruleStack.node.setContext(cxapi.EVENTS_TARGET_QUEUE_SAME_ACCOUNT, true);
    const rule = new events.Rule(ruleStack, 'MyRule', {
        schedule: events.Schedule.rate(core_1.Duration.hours(1)),
    });
    const queueStack = new core_1.Stack(app, 'queueStack', {
        env: {
            account: '222222222222',
            region: 'us-east-1',
        },
    });
    const queue = new sqs.Queue(queueStack, 'MyQueue', {
        encryptionMasterKey: kms.Key.fromKeyArn(queueStack, 'key', 'arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'),
    });
    // WHEN
    rule.addTarget(new targets.SqsQueue(queue));
    // THEN
    assertions_1.Template.fromStack(queueStack).hasResourceProperties('AWS::SQS::QueuePolicy', {
        PolicyDocument: {
            Statement: assertions_1.Match.arrayWith([
                {
                    Action: [
                        'sqs:SendMessage',
                        'sqs:GetQueueAttributes',
                        'sqs:GetQueueUrl',
                    ],
                    Condition: {
                        StringEquals: {
                            'aws:SourceAccount': '111111111111',
                        },
                    },
                    Effect: 'Allow',
                    Principal: { Service: 'events.amazonaws.com' },
                    Resource: {
                        'Fn::GetAtt': [
                            'MyQueueE6CA6235',
                            'Arn',
                        ],
                    },
                },
            ]),
            Version: '2012-10-17',
        },
        Queues: [{ Ref: 'MyQueueE6CA6235' }],
    });
});
test('Encrypted queues result in a permissive policy statement when the feature flag is off', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const queue = new sqs.Queue(stack, 'MyQueue', {
        encryptionMasterKey: kms.Key.fromKeyArn(stack, 'key', 'arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'),
    });
    const rule = new events.Rule(stack, 'MyRule', {
        schedule: events.Schedule.rate(core_1.Duration.hours(1)),
    });
    // WHEN
    rule.addTarget(new targets.SqsQueue(queue));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::QueuePolicy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: [
                        'sqs:SendMessage',
                        'sqs:GetQueueAttributes',
                        'sqs:GetQueueUrl',
                    ],
                    Effect: 'Allow',
                    Principal: { Service: 'events.amazonaws.com' },
                    Resource: {
                        'Fn::GetAtt': [
                            'MyQueueE6CA6235',
                            'Arn',
                        ],
                    },
                },
            ],
            Version: '2012-10-17',
        },
        Queues: [{ Ref: 'MyQueueE6CA6235' }],
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
        ScheduleExpression: 'rate(1 hour)',
        State: 'ENABLED',
        Targets: [
            {
                Arn: {
                    'Fn::GetAtt': [
                        'MyQueueE6CA6235',
                        'Arn',
                    ],
                },
                Id: 'Target0',
            },
        ],
    });
});
test('fail if messageGroupId is specified on non-fifo queues', () => {
    const stack = new core_1.Stack();
    const queue = new sqs.Queue(stack, 'MyQueue');
    expect(() => new targets.SqsQueue(queue, { messageGroupId: 'MyMessageGroupId' }))
        .toThrow(/messageGroupId cannot be specified/);
});
test('fifo queues are synthesized correctly', () => {
    const stack = new core_1.Stack();
    const queue = new sqs.Queue(stack, 'MyQueue', { fifo: true });
    const rule = new events.Rule(stack, 'MyRule', {
        schedule: events.Schedule.rate(core_1.Duration.hours(1)),
    });
    // WHEN
    rule.addTarget(new targets.SqsQueue(queue, {
        messageGroupId: 'MyMessageGroupId',
    }));
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
        ScheduleExpression: 'rate(1 hour)',
        State: 'ENABLED',
        Targets: [
            {
                Arn: {
                    'Fn::GetAtt': [
                        'MyQueueE6CA6235',
                        'Arn',
                    ],
                },
                Id: 'Target0',
                SqsParameters: {
                    MessageGroupId: 'MyMessageGroupId',
                },
            },
        ],
    });
});
test('dead letter queue is configured correctly', () => {
    const stack = new core_1.Stack();
    const queue = new sqs.Queue(stack, 'MyQueue', { fifo: true });
    const deadLetterQueue = new sqs.Queue(stack, 'MyDeadLetterQueue');
    const rule = new events.Rule(stack, 'MyRule', {
        schedule: events.Schedule.rate(core_1.Duration.hours(1)),
    });
    // WHEN
    rule.addTarget(new targets.SqsQueue(queue, {
        deadLetterQueue,
    }));
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
        ScheduleExpression: 'rate(1 hour)',
        State: 'ENABLED',
        Targets: [
            {
                Arn: {
                    'Fn::GetAtt': [
                        'MyQueueE6CA6235',
                        'Arn',
                    ],
                },
                Id: 'Target0',
                DeadLetterConfig: {
                    Arn: {
                        'Fn::GetAtt': [
                            'MyDeadLetterQueueD997968A',
                            'Arn',
                        ],
                    },
                },
            },
        ],
    });
});
test('specifying retry policy', () => {
    const stack = new core_1.Stack();
    const queue = new sqs.Queue(stack, 'MyQueue', { fifo: true });
    const rule = new events.Rule(stack, 'MyRule', {
        schedule: events.Schedule.rate(core_1.Duration.hours(1)),
    });
    // WHEN
    rule.addTarget(new targets.SqsQueue(queue, {
        retryAttempts: 2,
        maxEventAge: core_1.Duration.hours(2),
    }));
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
        ScheduleExpression: 'rate(1 hour)',
        State: 'ENABLED',
        Targets: [
            {
                Arn: {
                    'Fn::GetAtt': [
                        'MyQueueE6CA6235',
                        'Arn',
                    ],
                },
                Id: 'Target0',
                RetryPolicy: {
                    MaximumEventAgeInSeconds: 7200,
                    MaximumRetryAttempts: 2,
                },
            },
        ],
    });
});
test('specifying retry policy with 0 retryAttempts', () => {
    const stack = new core_1.Stack();
    const queue = new sqs.Queue(stack, 'MyQueue', { fifo: true });
    const rule = new events.Rule(stack, 'MyRule', {
        schedule: events.Schedule.rate(core_1.Duration.hours(1)),
    });
    // WHEN
    rule.addTarget(new targets.SqsQueue(queue, {
        retryAttempts: 0,
    }));
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Events::Rule', {
        ScheduleExpression: 'rate(1 hour)',
        State: 'ENABLED',
        Targets: [
            {
                Arn: {
                    'Fn::GetAtt': [
                        'MyQueueE6CA6235',
                        'Arn',
                    ],
                },
                Id: 'Target0',
                RetryPolicy: {
                    MaximumRetryAttempts: 0,
                },
            },
        ],
    });
});
//# sourceMappingURL=data:application/json;base64,