"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const events = require("../lib");
test('basic connection', () => {
    // GIVEN
    const stack = new core_1.Stack();
    // WHEN
    new events.Connection(stack, 'Connection', {
        authorization: events.Authorization.basic('username', core_1.SecretValue.unsafePlainText('password')),
        connectionName: 'testConnection',
        description: 'ConnectionDescription',
    });
    // THEN
    const template = assertions_1.Template.fromStack(stack);
    template.hasResourceProperties('AWS::Events::Connection', {
        AuthorizationType: 'BASIC',
        AuthParameters: {
            BasicAuthParameters: {
                Password: 'password',
                Username: 'username',
            },
        },
        Name: 'testConnection',
        Description: 'ConnectionDescription',
    });
});
test('API key connection', () => {
    // GIVEN
    const stack = new core_1.Stack();
    // WHEN
    new events.Connection(stack, 'Connection', {
        authorization: events.Authorization.apiKey('keyname', core_1.SecretValue.unsafePlainText('keyvalue')),
    });
    // THEN
    const template = assertions_1.Template.fromStack(stack);
    template.hasResourceProperties('AWS::Events::Connection', {
        AuthorizationType: 'API_KEY',
        AuthParameters: {
            ApiKeyAuthParameters: {
                ApiKeyName: 'keyname',
                ApiKeyValue: 'keyvalue',
            },
        },
    });
});
test('oauth connection', () => {
    // GIVEN
    const stack = new core_1.Stack();
    // WHEN
    new events.Connection(stack, 'Connection', {
        authorization: events.Authorization.oauth({
            authorizationEndpoint: 'authorizationEndpoint',
            clientId: 'clientID',
            clientSecret: core_1.SecretValue.unsafePlainText('clientSecret'),
            httpMethod: events.HttpMethod.GET,
            headerParameters: {
                oAuthHeaderKey: events.HttpParameter.fromString('oAuthHeaderValue'),
            },
        }),
        headerParameters: {
            invocationHeaderKey: events.HttpParameter.fromString('invocationHeaderValue'),
        },
        connectionName: 'testConnection',
        description: 'ConnectionDescription',
    });
    // THEN
    const template = assertions_1.Template.fromStack(stack);
    template.hasResourceProperties('AWS::Events::Connection', {
        AuthorizationType: 'OAUTH_CLIENT_CREDENTIALS',
        AuthParameters: {
            OAuthParameters: {
                AuthorizationEndpoint: 'authorizationEndpoint',
                ClientParameters: {
                    ClientID: 'clientID',
                    ClientSecret: 'clientSecret',
                },
                HttpMethod: 'GET',
                OAuthHttpParameters: {
                    HeaderParameters: [{
                            Key: 'oAuthHeaderKey',
                            Value: 'oAuthHeaderValue',
                            IsValueSecret: false,
                        }],
                },
            },
            InvocationHttpParameters: {
                HeaderParameters: [{
                        Key: 'invocationHeaderKey',
                        Value: 'invocationHeaderValue',
                    }],
            },
        },
        Name: 'testConnection',
        Description: 'ConnectionDescription',
    });
});
test('Additional plaintext headers', () => {
    // GIVEN
    const stack = new core_1.Stack();
    // WHEN
    new events.Connection(stack, 'Connection', {
        authorization: events.Authorization.apiKey('keyname', core_1.SecretValue.unsafePlainText('keyvalue')),
        headerParameters: {
            'content-type': events.HttpParameter.fromString('application/json'),
        },
    });
    // THEN
    const template = assertions_1.Template.fromStack(stack);
    template.hasResourceProperties('AWS::Events::Connection', {
        AuthParameters: {
            InvocationHttpParameters: {
                HeaderParameters: [{
                        Key: 'content-type',
                        Value: 'application/json',
                        IsValueSecret: false,
                    }],
            },
        },
    });
});
test('Additional secret headers', () => {
    // GIVEN
    const stack = new core_1.Stack();
    // WHEN
    new events.Connection(stack, 'Connection', {
        authorization: events.Authorization.apiKey('keyname', core_1.SecretValue.unsafePlainText('keyvalue')),
        headerParameters: {
            'client-secret': events.HttpParameter.fromSecret(core_1.SecretValue.unsafePlainText('apiSecret')),
        },
    });
    // THEN
    const template = assertions_1.Template.fromStack(stack);
    template.hasResourceProperties('AWS::Events::Connection', {
        AuthParameters: {
            InvocationHttpParameters: {
                HeaderParameters: [{
                        Key: 'client-secret',
                        Value: 'apiSecret',
                        IsValueSecret: true,
                    }],
            },
        },
    });
});
//# sourceMappingURL=data:application/json;base64,