"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe(lib_1.Match, () => {
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'stack');
    test('anythingBut', () => {
        expect(stack.resolve(lib_1.Match.anythingBut(1, 2, 3))).toEqual([
            { 'anything-but': [1, 2, 3] },
        ]);
        expect(stack.resolve(lib_1.Match.anythingBut('foo', 'bar'))).toEqual([
            { 'anything-but': ['foo', 'bar'] },
        ]);
        expect(() => stack.resolve(lib_1.Match.anythingBut(1, 'foo'))).toThrowError(/only strings or only numbers/);
        expect(() => stack.resolve(lib_1.Match.anythingBut({ foo: 42 }))).toThrowError(/only strings or only numbers/);
        expect(() => stack.resolve(lib_1.Match.anythingBut())).toThrowError(/must be non-empty lists/);
    });
    test('anythingButPrefix', () => {
        expect(stack.resolve(lib_1.Match.anythingButPrefix('foo'))).toEqual([
            { 'anything-but': { prefix: 'foo' } },
        ]);
    });
    test('numeric', () => {
        expect(stack.resolve(lib_1.Match.allOf(lib_1.Match.greaterThan(-100), lib_1.Match.lessThanOrEqual(200)))).toEqual([
            { numeric: ['>', -100, '<=', 200] },
        ]);
        expect(() => stack.resolve(lib_1.Match.allOf())).toThrowError(/A list of matchers must contain at least one element/);
    });
    test('interval', () => {
        expect(stack.resolve(lib_1.Match.interval(0, 100))).toEqual([
            { numeric: ['>=', 0, '<=', 100] },
        ]);
        expect(() => stack.resolve(lib_1.Match.interval(1, 0))).toThrowError('Invalid interval: [1, 0]');
    });
    test('cidr', () => {
        // IPv4
        expect(stack.resolve(lib_1.Match.cidr('198.51.100.14/24'))).toEqual([
            { cidr: '198.51.100.14/24' },
        ]);
        // IPv6
        expect(stack.resolve(lib_1.Match.cidr('2001:db8::/48'))).toEqual([
            { cidr: '2001:db8::/48' },
        ]);
        // Invalid
        expect(() => stack.resolve(lib_1.Match.cidr('a.b.c/31'))).toThrow(/Invalid IP address range/);
    });
    test('anyOf', () => {
        expect(stack.resolve(lib_1.Match.anyOf(lib_1.Match.equal(0), lib_1.Match.equal(1)))).toEqual([
            { numeric: ['=', 0] },
            { numeric: ['=', 1] },
        ]);
        expect(() => stack.resolve(lib_1.Match.anyOf())).toThrow(/A list of matchers must contain at least one element/);
    });
    test('prefix', () => {
        expect(stack.resolve(lib_1.Match.prefix('foo'))).toEqual([
            { prefix: 'foo' },
        ]);
    });
    test('suffix', () => {
        expect(stack.resolve(lib_1.Match.suffix('foo'))).toEqual([
            { suffix: 'foo' },
        ]);
    });
    test('equalsIgnoreCase', () => {
        expect(stack.resolve(lib_1.Match.equalsIgnoreCase('foo'))).toEqual([
            { 'equals-ignore-case': 'foo' },
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,