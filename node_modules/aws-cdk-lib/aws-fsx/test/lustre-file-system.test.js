"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("assert");
const assertions_1 = require("../../assertions");
const aws_ec2_1 = require("../../aws-ec2");
const aws_kms_1 = require("../../aws-kms");
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe('FSx for Lustre File System', () => {
    let lustreConfiguration;
    let stack;
    let storageCapacity;
    let vpcSubnet;
    let vpc;
    beforeEach(() => {
        stack = new core_1.Stack();
        storageCapacity = 1200;
        vpc = new aws_ec2_1.Vpc(stack, 'VPC');
        vpcSubnet = new aws_ec2_1.Subnet(stack, 'Subnet', {
            availabilityZone: 'us-west-2',
            cidrBlock: vpc.vpcCidrBlock,
            vpcId: vpc.vpcId,
        });
    });
    test('default file system is created correctly', () => {
        lustreConfiguration = {
            deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
        };
        const fileSystem = new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
            lustreConfiguration,
            storageCapacityGiB: storageCapacity,
            vpc,
            vpcSubnet,
        });
        assertions_1.Template.fromStack(stack).hasResource('AWS::FSx::FileSystem', {});
        assertions_1.Template.fromStack(stack).hasResource('AWS::EC2::SecurityGroup', {});
        (0, assert_1.strictEqual)(fileSystem.dnsName, `${fileSystem.fileSystemId}.fsx.${stack.region}.${core_1.Aws.URL_SUFFIX}`);
        assertions_1.Template.fromStack(stack).hasResource('AWS::FSx::FileSystem', {
            DeletionPolicy: 'Retain',
        });
    });
    test('file system is created correctly when security group is provided', () => {
        lustreConfiguration = {
            deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
        };
        const securityGroup = new aws_ec2_1.SecurityGroup(stack, 'FsxLustreSecurityGroup', {
            vpc,
        });
        new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
            lustreConfiguration,
            securityGroup,
            storageCapacityGiB: storageCapacity,
            vpc,
            vpcSubnet,
        });
        assertions_1.Template.fromStack(stack).hasResource('AWS::FSx::FileSystem', {});
        assertions_1.Template.fromStack(stack).hasResource('AWS::EC2::SecurityGroup', {});
    });
    test('encrypted file system is created correctly with custom KMS', () => {
        lustreConfiguration = {
            deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
        };
        const key = new aws_kms_1.Key(stack, 'customKeyFS');
        new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
            kmsKey: key,
            lustreConfiguration,
            storageCapacityGiB: storageCapacity,
            vpc,
            vpcSubnet,
        });
        /**
         * CDK appends 8-digit MD5 hash of the resource path to the logical Id of the resource in order to make sure
         * that the id is unique across multiple stacks. There isnt a direct way to identify the exact name of the resource
         * in generated CDK, hence hardcoding the MD5 hash here for assertion. Assumption is that the path of the Key wont
         * change in this UT. Checked the unique id by generating the cloud formation stack.
         */
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::FSx::FileSystem', {
            KmsKeyId: {
                Ref: 'customKeyFSDDB87C6D',
            },
        });
    });
    test('file system is created correctly when weekly maintenance time is provided', () => {
        const maintenanceTime = new lib_1.LustreMaintenanceTime({
            day: lib_1.Weekday.SUNDAY,
            hour: 12,
            minute: 34,
        });
        lustreConfiguration = {
            deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
            weeklyMaintenanceStartTime: maintenanceTime,
        };
        const securityGroup = new aws_ec2_1.SecurityGroup(stack, 'FsxLustreSecurityGroup', {
            vpc,
        });
        new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
            lustreConfiguration,
            securityGroup,
            storageCapacityGiB: storageCapacity,
            vpc,
            vpcSubnet,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::FSx::FileSystem', {
            LustreConfiguration: {
                DeploymentType: 'SCRATCH_2',
                WeeklyMaintenanceStartTime: '7:12:34',
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::SecurityGroup', {});
    });
    describe('when validating props', () => {
        describe('exportPath', () => {
            test('export path valid', () => {
                const importPath = 's3://import-bucket';
                const exportPath = `${importPath}/export-prefix`;
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    exportPath,
                    importPath,
                };
                new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                    lustreConfiguration,
                    storageCapacityGiB: storageCapacity,
                    vpc,
                    vpcSubnet,
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::FSx::FileSystem', {
                    LustreConfiguration: {
                        DeploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                        ExportPath: exportPath,
                        ImportPath: importPath,
                    },
                });
            });
            test('export and import paths are Tokens', () => {
                const importPathResolved = 'importPath';
                const exportPathResolved = 'exportPath';
                const importPath = core_1.Token.asString(core_1.Token.asAny(importPathResolved));
                const exportPath = core_1.Token.asString(core_1.Token.asAny(exportPathResolved));
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    exportPath,
                    importPath,
                };
                new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                    lustreConfiguration,
                    storageCapacityGiB: storageCapacity,
                    vpc,
                    vpcSubnet,
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::FSx::FileSystem', {
                    LustreConfiguration: {
                        DeploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                        ExportPath: exportPathResolved,
                        ImportPath: importPathResolved,
                    },
                });
            });
            test('only export path is Token', () => {
                const exportPathResolved = 'exportPath';
                const importPath = 's3://import-bucket';
                const exportPath = core_1.Token.asString(core_1.Token.asAny(exportPathResolved));
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    exportPath,
                    importPath,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                        lustreConfiguration,
                        storageCapacityGiB: storageCapacity,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError('The importPath and exportPath must each be Tokens or not Tokens, you cannot use a mix');
            });
            test('only import path is Token', () => {
                const importPathResolved = 'importPath';
                const importPath = core_1.Token.asString(core_1.Token.asAny(importPathResolved));
                const exportPath = 's3://import-bucket/export';
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    exportPath,
                    importPath,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                        lustreConfiguration,
                        storageCapacityGiB: storageCapacity,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError('The importPath and exportPath must each be Tokens or not Tokens, you cannot use a mix');
            });
            test('invalid export path length', () => {
                const importPath = 's3://import-bucket';
                const path = Array(902).join('x');
                const exportPath = `${importPath}/${path}`;
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    exportPath,
                    importPath,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                        lustreConfiguration,
                        storageCapacityGiB: storageCapacity,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError(`The export path "${exportPath}" exceeds the maximum length of 900 characters`);
            });
            test('export path does not start with import path', () => {
                const importPath = 's3://import-bucket';
                const exportPath = 's3://wrong-bucket';
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    exportPath,
                    importPath,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                        lustreConfiguration,
                        storageCapacityGiB: storageCapacity,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError(`The export path "${exportPath}" is invalid. Expecting the format: s3://{IMPORT_PATH}/optional-prefix`);
            });
            test('export path with no import path', () => {
                const exportPath = 's://import-bucket/export-prefix';
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    exportPath,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                        lustreConfiguration,
                        storageCapacityGiB: storageCapacity,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError('Cannot define an export path without also defining an import path');
            });
        });
        describe('autoImportPolicy', () => {
            test('autoImportPath unsupported with PERSISTENT_2', () => {
                const importPath = 's3://import-bucket/import-prefix';
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.PERSISTENT_2,
                    autoImportPolicy: lib_1.LustreAutoImportPolicy.NEW_CHANGED_DELETED,
                    importPath,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFilesystem', {
                        lustreConfiguration,
                        storageCapacityGiB: storageCapacity,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError('autoImportPolicy is not supported with PERSISTENT_2 deployments');
            });
            test('autoImportPath requires importPath', () => {
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.PERSISTENT_1,
                    autoImportPolicy: lib_1.LustreAutoImportPolicy.NEW_CHANGED_DELETED,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFilesystem', {
                        lustreConfiguration,
                        storageCapacityGiB: storageCapacity,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError('autoImportPolicy requires importPath to be defined');
            });
        });
        describe('autoImportPolicy', () => {
            test.each([
                lib_1.LustreAutoImportPolicy.NONE,
                lib_1.LustreAutoImportPolicy.NEW,
                lib_1.LustreAutoImportPolicy.NEW_CHANGED,
                lib_1.LustreAutoImportPolicy.NEW_CHANGED_DELETED,
            ])('valid autoImportPolicy', (autoImportPolicy) => {
                const importPath = 's3://import-bucket/import-path';
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.PERSISTENT_1,
                    importPath,
                    autoImportPolicy,
                };
                new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                    lustreConfiguration,
                    storageCapacityGiB: storageCapacity,
                    vpc,
                    vpcSubnet,
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::FSx::FileSystem', {
                    LustreConfiguration: {
                        AutoImportPolicy: autoImportPolicy,
                        DeploymentType: lib_1.LustreDeploymentType.PERSISTENT_1,
                    },
                });
            });
        });
        describe('importedFileChunkSize', () => {
            test.each([
                1,
                256000,
                512000,
            ])('valid file chunk size of %d', (size) => {
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    importedFileChunkSizeMiB: size,
                };
                new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                    lustreConfiguration,
                    storageCapacityGiB: storageCapacity,
                    vpc,
                    vpcSubnet,
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::FSx::FileSystem', {
                    LustreConfiguration: {
                        DeploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                        ImportedFileChunkSize: size,
                    },
                });
            });
            test.each([
                0,
                512001,
            ])('invalid file chunk size of %d', (size) => {
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    importedFileChunkSizeMiB: size,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                        lustreConfiguration,
                        storageCapacityGiB: storageCapacity,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError(`importedFileChunkSize cannot be ${size} MiB. It must be a value from 1 to 512,000 MiB`);
            });
        });
        describe('importPath', () => {
            test('import path valid', () => {
                const importPath = 's3://import-bucket';
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    importPath,
                };
                new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                    lustreConfiguration,
                    storageCapacityGiB: storageCapacity,
                    vpc,
                    vpcSubnet,
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::FSx::FileSystem', {
                    LustreConfiguration: {
                        DeploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                        ImportPath: importPath,
                    },
                });
            });
            test('import path is Token', () => {
                const importPathResolved = 'importPath';
                const importPath = core_1.Token.asString(core_1.Token.asAny(importPathResolved));
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    importPath,
                };
                new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                    lustreConfiguration,
                    storageCapacityGiB: storageCapacity,
                    vpc,
                    vpcSubnet,
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::FSx::FileSystem', {
                    LustreConfiguration: {
                        DeploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                        ImportPath: importPathResolved,
                    },
                });
            });
            test('invalid import path format', () => {
                const importPath = 'import-bucket';
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    importPath,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                        lustreConfiguration,
                        storageCapacityGiB: storageCapacity,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError(`The import path "${importPath}" is invalid. Expecting the format: s3://{BUCKET_NAME}/optional-prefix`);
            });
            test('invalid import path length', () => {
                const path = Array(902).join('x');
                const importPath = `s3://${path}`;
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    importPath,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                        lustreConfiguration,
                        storageCapacityGiB: storageCapacity,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError(`The import path "${importPath}" exceeds the maximum length of 900 characters`);
            });
        });
        describe('DataCompressionType', () => {
            test('dataCompressionType enabled', () => {
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    dataCompressionType: lib_1.LustreDataCompressionType.LZ4,
                };
                new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                    lustreConfiguration,
                    storageCapacityGiB: storageCapacity,
                    vpc,
                    vpcSubnet,
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::FSx::FileSystem', {
                    LustreConfiguration: {
                        DeploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                        DataCompressionType: lib_1.LustreDataCompressionType.LZ4,
                    },
                });
            });
        });
        describe('perUnitStorageThroughput', () => {
            test.each([
                50,
                100,
                200,
            ])('valid perUnitStorageThroughput of %d', (throughput) => {
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.PERSISTENT_1,
                    perUnitStorageThroughput: throughput,
                };
                new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                    lustreConfiguration,
                    storageCapacityGiB: storageCapacity,
                    vpc,
                    vpcSubnet,
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::FSx::FileSystem', {
                    LustreConfiguration: {
                        DeploymentType: lib_1.LustreDeploymentType.PERSISTENT_1,
                        PerUnitStorageThroughput: throughput,
                    },
                });
            });
            test.each([
                1,
                125,
                250,
                500,
                1000,
            ])('invalid perUnitStorageThroughput', (invalidValue) => {
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.PERSISTENT_1,
                    perUnitStorageThroughput: invalidValue,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                        lustreConfiguration,
                        storageCapacityGiB: storageCapacity,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError('perUnitStorageThroughput must be 50, 100, or 200 MB/s/TiB for PERSISTENT_1 deployment type, got: ' + invalidValue);
            });
            test('setting perUnitStorageThroughput on wrong deploymentType', () => {
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_2,
                    perUnitStorageThroughput: 50,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                        lustreConfiguration,
                        storageCapacityGiB: storageCapacity,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError('perUnitStorageThroughput can only be set for the PERSISTENT_1/PERSISTENT_2 deployment types');
            });
        });
        describe('perUnitStorageThroughput_Persistent_2', () => {
            test.each([
                125,
                250,
                500,
                1000,
            ])('valid perUnitStorageThroughput of %d', (throughput) => {
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.PERSISTENT_2,
                    perUnitStorageThroughput: throughput,
                };
                new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                    lustreConfiguration,
                    storageCapacityGiB: storageCapacity,
                    vpc,
                    vpcSubnet,
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::FSx::FileSystem', {
                    LustreConfiguration: {
                        DeploymentType: lib_1.LustreDeploymentType.PERSISTENT_2,
                        PerUnitStorageThroughput: throughput,
                    },
                });
            });
            test.each([
                1,
                50,
                100,
                200,
                550,
            ])('invalid perUnitStorageThroughput', (invalidValue) => {
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.PERSISTENT_2,
                    perUnitStorageThroughput: invalidValue,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                        lustreConfiguration,
                        storageCapacityGiB: storageCapacity,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError('perUnitStorageThroughput must be 125, 250, 500 or 1000 MB/s/TiB for PERSISTENT_2 deployment type, got: ' + invalidValue);
            });
        });
        describe('storageCapacity', () => {
            test.each([
                [1200, lib_1.LustreDeploymentType.SCRATCH_2],
                [2400, lib_1.LustreDeploymentType.SCRATCH_2],
                [4800, lib_1.LustreDeploymentType.SCRATCH_2],
                [1200, lib_1.LustreDeploymentType.PERSISTENT_1],
                [2400, lib_1.LustreDeploymentType.PERSISTENT_1],
                [4800, lib_1.LustreDeploymentType.PERSISTENT_1],
                [1200, lib_1.LustreDeploymentType.PERSISTENT_2],
                [2400, lib_1.LustreDeploymentType.PERSISTENT_2],
                [4800, lib_1.LustreDeploymentType.PERSISTENT_2],
            ])('proper multiple for storage capacity of %d on %s', (value, deploymentType) => {
                lustreConfiguration = {
                    deploymentType,
                };
                new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                    lustreConfiguration,
                    storageCapacityGiB: value,
                    vpc,
                    vpcSubnet,
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::FSx::FileSystem', {
                    LustreConfiguration: {
                        DeploymentType: deploymentType,
                    },
                    StorageCapacity: value,
                });
            });
            test.each([
                [1, lib_1.LustreDeploymentType.SCRATCH_2],
                [2401, lib_1.LustreDeploymentType.SCRATCH_2],
                [1, lib_1.LustreDeploymentType.PERSISTENT_1],
                [2401, lib_1.LustreDeploymentType.PERSISTENT_1],
                [1, lib_1.LustreDeploymentType.PERSISTENT_2],
                [2401, lib_1.LustreDeploymentType.PERSISTENT_2],
            ])('invalid value of %d for storage capacity on %s', (invalidValue, deploymentType) => {
                lustreConfiguration = {
                    deploymentType,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                        lustreConfiguration,
                        storageCapacityGiB: invalidValue,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError(/storageCapacity must be 1,200, 2,400, or a multiple of 2,400/);
            });
            test.each([1200, 2400, 3600, 7200])('proper multiple for storage capacity using %d with SCRATCH_1', (validValue) => {
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_1,
                };
                new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                    lustreConfiguration,
                    storageCapacityGiB: validValue,
                    vpc,
                    vpcSubnet,
                });
                assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::FSx::FileSystem', {
                    LustreConfiguration: {
                        DeploymentType: lib_1.LustreDeploymentType.SCRATCH_1,
                    },
                    StorageCapacity: validValue,
                });
            });
            test.each([1, 3601])('invalid value of %d for storage capacity with SCRATCH_1', (invalidValue) => {
                lustreConfiguration = {
                    deploymentType: lib_1.LustreDeploymentType.SCRATCH_1,
                };
                expect(() => {
                    new lib_1.LustreFileSystem(stack, 'FsxFileSystem', {
                        lustreConfiguration,
                        storageCapacityGiB: invalidValue,
                        vpc,
                        vpcSubnet,
                    });
                }).toThrowError(/storageCapacity must be 1,200, 2,400, 3,600, or a multiple of 3,600/);
            });
        });
    });
    test('existing file system is imported correctly', () => {
        const fileSystemId = 'fs123';
        const fs = lib_1.LustreFileSystem.fromLustreFileSystemAttributes(stack, 'existingFS', {
            dnsName: `${fileSystemId}.fsx.${stack.region}.${core_1.Aws.URL_SUFFIX}`,
            fileSystemId,
            securityGroup: aws_ec2_1.SecurityGroup.fromSecurityGroupId(stack, 'SG', 'sg-123456789', {
                allowAllOutbound: false,
            }),
        });
        fs.connections.allowToAnyIpv4(aws_ec2_1.Port.tcp(443));
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::SecurityGroupEgress', {
            GroupId: 'sg-123456789',
        });
    });
});
//# sourceMappingURL=data:application/json;base64,