"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const ec2 = require("../../aws-ec2");
const util_1 = require("./util");
const ga = require("../lib");
test('custom resource exists', () => {
    // GIVEN
    const { stack, vpc } = (0, util_1.testFixture)();
    const accelerator = new ga.Accelerator(stack, 'Accelerator');
    const listener = new ga.Listener(stack, 'Listener', {
        accelerator,
        portRanges: [
            {
                fromPort: 443,
                toPort: 443,
            },
        ],
    });
    const endpointGroup = new ga.EndpointGroup(stack, 'Group', { listener });
    // WHEN
    endpointGroup.connectionsPeer('GlobalAcceleratorSG', vpc);
    // THEN
    assertions_1.Template.fromStack(stack).hasResource('Custom::AWS', {
        Properties: {
            ServiceToken: {
                'Fn::GetAtt': [
                    'AWS679f53fac002430cb0da5b7982bd22872D164C4C',
                    'Arn',
                ],
            },
            Create: {
                'Fn::Join': [
                    '',
                    [
                        '{"service":"EC2","action":"describeSecurityGroups","parameters":{"Filters":[{"Name":"group-name","Values":["GlobalAccelerator"]},{"Name":"vpc-id","Values":["',
                        {
                            Ref: 'VPCB9E5F0B4',
                        },
                        '"]}]},"physicalResourceId":{"responsePath":"SecurityGroups.0.GroupId"}}',
                    ],
                ],
            },
            InstallLatestAwsSdk: false,
        },
        DependsOn: [
            'GroupGlobalAcceleratorSGCustomResourceCustomResourcePolicy9C957AD2',
            'GroupC77FDACD',
        ],
    });
});
test('can create security group rule', () => {
    // GIVEN
    const { stack, vpc } = (0, util_1.testFixture)();
    const accelerator = new ga.Accelerator(stack, 'Accelerator');
    const listener = new ga.Listener(stack, 'Listener', {
        accelerator,
        portRanges: [
            {
                fromPort: 443,
                toPort: 443,
            },
        ],
    });
    const endpointGroup = new ga.EndpointGroup(stack, 'Group', { listener });
    // WHEN
    const gaSg = endpointGroup.connectionsPeer('GlobalAcceleratorSG', vpc);
    const instanceSg = new ec2.SecurityGroup(stack, 'SG', { vpc });
    const instanceConnections = new ec2.Connections({ securityGroups: [instanceSg] });
    instanceConnections.allowFrom(gaSg, ec2.Port.tcp(443));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::SecurityGroupIngress', {
        IpProtocol: 'tcp',
        FromPort: 443,
        GroupId: {
            'Fn::GetAtt': [
                'SGADB53937',
                'GroupId',
            ],
        },
        SourceSecurityGroupId: {
            'Fn::GetAtt': [
                'GroupGlobalAcceleratorSGCustomResource0C8056E9',
                'SecurityGroups.0.GroupId',
            ],
        },
        ToPort: 443,
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsYWNjZWxlcmF0b3Itc2VjdXJpdHktZ3JvdXAudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdsb2JhbGFjY2VsZXJhdG9yLXNlY3VyaXR5LWdyb3VwLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBNEM7QUFDNUMscUNBQXFDO0FBQ3JDLGlDQUFxQztBQUNyQyw2QkFBNkI7QUFFN0IsSUFBSSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtJQUNsQyxRQUFRO0lBQ1IsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFBLGtCQUFXLEdBQUUsQ0FBQztJQUNyQyxNQUFNLFdBQVcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzdELE1BQU0sUUFBUSxHQUFHLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO1FBQ2xELFdBQVc7UUFDWCxVQUFVLEVBQUU7WUFDVjtnQkFDRSxRQUFRLEVBQUUsR0FBRztnQkFDYixNQUFNLEVBQUUsR0FBRzthQUNaO1NBQ0Y7S0FDRixDQUFDLENBQUM7SUFDSCxNQUFNLGFBQWEsR0FBRyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFekUsT0FBTztJQUNQLGFBQWEsQ0FBQyxlQUFlLENBQUMscUJBQXFCLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFMUQsT0FBTztJQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUU7UUFDbkQsVUFBVSxFQUFFO1lBQ1YsWUFBWSxFQUFFO2dCQUNaLFlBQVksRUFBRTtvQkFDWiw2Q0FBNkM7b0JBQzdDLEtBQUs7aUJBQ047YUFDRjtZQUNELE1BQU0sRUFBRTtnQkFDTixVQUFVLEVBQUU7b0JBQ1YsRUFBRTtvQkFDRjt3QkFDRSwrSkFBK0o7d0JBQy9KOzRCQUNFLEdBQUcsRUFBRSxhQUFhO3lCQUNuQjt3QkFDRCx5RUFBeUU7cUJBQzFFO2lCQUNGO2FBQ0Y7WUFDRCxtQkFBbUIsRUFBRSxLQUFLO1NBQzNCO1FBQ0QsU0FBUyxFQUFFO1lBQ1Qsb0VBQW9FO1lBQ3BFLGVBQWU7U0FDaEI7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7SUFDMUMsUUFBUTtJQUNSLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBQSxrQkFBVyxHQUFFLENBQUM7SUFDckMsTUFBTSxXQUFXLEdBQUcsSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM3RCxNQUFNLFFBQVEsR0FBRyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtRQUNsRCxXQUFXO1FBQ1gsVUFBVSxFQUFFO1lBQ1Y7Z0JBQ0UsUUFBUSxFQUFFLEdBQUc7Z0JBQ2IsTUFBTSxFQUFFLEdBQUc7YUFDWjtTQUNGO0tBQ0YsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxhQUFhLEdBQUcsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRXpFLE9BQU87SUFDUCxNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsZUFBZSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUMvRCxNQUFNLG1CQUFtQixHQUFHLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLGNBQWMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsRixtQkFBbUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFdkQsT0FBTztJQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLGdDQUFnQyxFQUFFO1FBQ2hGLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLFFBQVEsRUFBRSxHQUFHO1FBQ2IsT0FBTyxFQUFFO1lBQ1AsWUFBWSxFQUFFO2dCQUNaLFlBQVk7Z0JBQ1osU0FBUzthQUNWO1NBQ0Y7UUFDRCxxQkFBcUIsRUFBRTtZQUNyQixZQUFZLEVBQUU7Z0JBQ1osZ0RBQWdEO2dCQUNoRCwwQkFBMEI7YUFDM0I7U0FDRjtRQUNELE1BQU0sRUFBRSxHQUFHO0tBQ1osQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJy4uLy4uL2F3cy1lYzInO1xuaW1wb3J0IHsgdGVzdEZpeHR1cmUgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0ICogYXMgZ2EgZnJvbSAnLi4vbGliJztcblxudGVzdCgnY3VzdG9tIHJlc291cmNlIGV4aXN0cycsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3QgeyBzdGFjaywgdnBjIH0gPSB0ZXN0Rml4dHVyZSgpO1xuICBjb25zdCBhY2NlbGVyYXRvciA9IG5ldyBnYS5BY2NlbGVyYXRvcihzdGFjaywgJ0FjY2VsZXJhdG9yJyk7XG4gIGNvbnN0IGxpc3RlbmVyID0gbmV3IGdhLkxpc3RlbmVyKHN0YWNrLCAnTGlzdGVuZXInLCB7XG4gICAgYWNjZWxlcmF0b3IsXG4gICAgcG9ydFJhbmdlczogW1xuICAgICAge1xuICAgICAgICBmcm9tUG9ydDogNDQzLFxuICAgICAgICB0b1BvcnQ6IDQ0MyxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG4gIGNvbnN0IGVuZHBvaW50R3JvdXAgPSBuZXcgZ2EuRW5kcG9pbnRHcm91cChzdGFjaywgJ0dyb3VwJywgeyBsaXN0ZW5lciB9KTtcblxuICAvLyBXSEVOXG4gIGVuZHBvaW50R3JvdXAuY29ubmVjdGlvbnNQZWVyKCdHbG9iYWxBY2NlbGVyYXRvclNHJywgdnBjKTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2UoJ0N1c3RvbTo6QVdTJywge1xuICAgIFByb3BlcnRpZXM6IHtcbiAgICAgIFNlcnZpY2VUb2tlbjoge1xuICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAnQVdTNjc5ZjUzZmFjMDAyNDMwY2IwZGE1Yjc5ODJiZDIyODcyRDE2NEM0QycsXG4gICAgICAgICAgJ0FybicsXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAgQ3JlYXRlOiB7XG4gICAgICAgICdGbjo6Sm9pbic6IFtcbiAgICAgICAgICAnJyxcbiAgICAgICAgICBbXG4gICAgICAgICAgICAne1wic2VydmljZVwiOlwiRUMyXCIsXCJhY3Rpb25cIjpcImRlc2NyaWJlU2VjdXJpdHlHcm91cHNcIixcInBhcmFtZXRlcnNcIjp7XCJGaWx0ZXJzXCI6W3tcIk5hbWVcIjpcImdyb3VwLW5hbWVcIixcIlZhbHVlc1wiOltcIkdsb2JhbEFjY2VsZXJhdG9yXCJdfSx7XCJOYW1lXCI6XCJ2cGMtaWRcIixcIlZhbHVlc1wiOltcIicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFJlZjogJ1ZQQ0I5RTVGMEI0JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnXCJdfV19LFwicGh5c2ljYWxSZXNvdXJjZUlkXCI6e1wicmVzcG9uc2VQYXRoXCI6XCJTZWN1cml0eUdyb3Vwcy4wLkdyb3VwSWRcIn19JyxcbiAgICAgICAgICBdLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIEluc3RhbGxMYXRlc3RBd3NTZGs6IGZhbHNlLFxuICAgIH0sXG4gICAgRGVwZW5kc09uOiBbXG4gICAgICAnR3JvdXBHbG9iYWxBY2NlbGVyYXRvclNHQ3VzdG9tUmVzb3VyY2VDdXN0b21SZXNvdXJjZVBvbGljeTlDOTU3QUQyJyxcbiAgICAgICdHcm91cEM3N0ZEQUNEJyxcbiAgICBdLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdjYW4gY3JlYXRlIHNlY3VyaXR5IGdyb3VwIHJ1bGUnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHsgc3RhY2ssIHZwYyB9ID0gdGVzdEZpeHR1cmUoKTtcbiAgY29uc3QgYWNjZWxlcmF0b3IgPSBuZXcgZ2EuQWNjZWxlcmF0b3Ioc3RhY2ssICdBY2NlbGVyYXRvcicpO1xuICBjb25zdCBsaXN0ZW5lciA9IG5ldyBnYS5MaXN0ZW5lcihzdGFjaywgJ0xpc3RlbmVyJywge1xuICAgIGFjY2VsZXJhdG9yLFxuICAgIHBvcnRSYW5nZXM6IFtcbiAgICAgIHtcbiAgICAgICAgZnJvbVBvcnQ6IDQ0MyxcbiAgICAgICAgdG9Qb3J0OiA0NDMsXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xuICBjb25zdCBlbmRwb2ludEdyb3VwID0gbmV3IGdhLkVuZHBvaW50R3JvdXAoc3RhY2ssICdHcm91cCcsIHsgbGlzdGVuZXIgfSk7XG5cbiAgLy8gV0hFTlxuICBjb25zdCBnYVNnID0gZW5kcG9pbnRHcm91cC5jb25uZWN0aW9uc1BlZXIoJ0dsb2JhbEFjY2VsZXJhdG9yU0cnLCB2cGMpO1xuICBjb25zdCBpbnN0YW5jZVNnID0gbmV3IGVjMi5TZWN1cml0eUdyb3VwKHN0YWNrLCAnU0cnLCB7IHZwYyB9KTtcbiAgY29uc3QgaW5zdGFuY2VDb25uZWN0aW9ucyA9IG5ldyBlYzIuQ29ubmVjdGlvbnMoeyBzZWN1cml0eUdyb3VwczogW2luc3RhbmNlU2ddIH0pO1xuICBpbnN0YW5jZUNvbm5lY3Rpb25zLmFsbG93RnJvbShnYVNnLCBlYzIuUG9ydC50Y3AoNDQzKSk7XG5cbiAgLy8gVEhFTlxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFQzI6OlNlY3VyaXR5R3JvdXBJbmdyZXNzJywge1xuICAgIElwUHJvdG9jb2w6ICd0Y3AnLFxuICAgIEZyb21Qb3J0OiA0NDMsXG4gICAgR3JvdXBJZDoge1xuICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICdTR0FEQjUzOTM3JyxcbiAgICAgICAgJ0dyb3VwSWQnLFxuICAgICAgXSxcbiAgICB9LFxuICAgIFNvdXJjZVNlY3VyaXR5R3JvdXBJZDoge1xuICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICdHcm91cEdsb2JhbEFjY2VsZXJhdG9yU0dDdXN0b21SZXNvdXJjZTBDODA1NkU5JyxcbiAgICAgICAgJ1NlY3VyaXR5R3JvdXBzLjAuR3JvdXBJZCcsXG4gICAgICBdLFxuICAgIH0sXG4gICAgVG9Qb3J0OiA0NDMsXG4gIH0pO1xufSk7XG4iXX0=