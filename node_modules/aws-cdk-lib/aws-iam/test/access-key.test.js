"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe('IAM Access keys', () => {
    test('user name is identifed via reference', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        const user = new lib_1.User(stack, 'MyUser');
        // WHEN
        new lib_1.AccessKey(stack, 'MyAccessKey', { user });
        // THEN
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyUserDC45028B: {
                    Type: 'AWS::IAM::User',
                },
                MyAccessKeyF0FFBE2E: {
                    Type: 'AWS::IAM::AccessKey',
                    Properties: {
                        UserName: { Ref: 'MyUserDC45028B' },
                    },
                },
            },
        });
    });
    test('active status is specified with correct capitalization', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        const user = new lib_1.User(stack, 'MyUser');
        // WHEN
        new lib_1.AccessKey(stack, 'MyAccessKey', { user, status: lib_1.AccessKeyStatus.ACTIVE });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::AccessKey', { Status: 'Active' });
    });
    test('inactive status is specified with correct capitalization', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        const user = new lib_1.User(stack, 'MyUser');
        // WHEN
        new lib_1.AccessKey(stack, 'MyAccessKey', {
            user,
            status: lib_1.AccessKeyStatus.INACTIVE,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::AccessKey', {
            Status: 'Inactive',
        });
    });
    test('access key secret ', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        const user = new lib_1.User(stack, 'MyUser');
        // WHEN
        const accessKey = new lib_1.AccessKey(stack, 'MyAccessKey', {
            user,
        });
        // THEN
        expect(stack.resolve(accessKey.secretAccessKey)).toStrictEqual({
            'Fn::GetAtt': ['MyAccessKeyF0FFBE2E', 'SecretAccessKey'],
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzLWtleS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWNjZXNzLWtleS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLHFDQUF3QztBQUN4QyxnQ0FBMEQ7QUFFMUQsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixJQUFJLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO1FBQ2hELFFBQVE7UUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQUcsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN4QyxNQUFNLElBQUksR0FBRyxJQUFJLFVBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFdkMsT0FBTztRQUNQLElBQUksZUFBUyxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRTlDLE9BQU87UUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUM7WUFDeEMsU0FBUyxFQUFFO2dCQUNULGNBQWMsRUFBRTtvQkFDZCxJQUFJLEVBQUUsZ0JBQWdCO2lCQUN2QjtnQkFDRCxtQkFBbUIsRUFBRTtvQkFDbkIsSUFBSSxFQUFFLHFCQUFxQjtvQkFDM0IsVUFBVSxFQUFFO3dCQUNWLFFBQVEsRUFBRSxFQUFFLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRTtxQkFDcEM7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHdEQUF3RCxFQUFFLEdBQUcsRUFBRTtRQUNsRSxRQUFRO1FBQ1IsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFHLEVBQUUsQ0FBQztRQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDeEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxVQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXZDLE9BQU87UUFDUCxJQUFJLGVBQVMsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxxQkFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFFOUUsT0FBTztRQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLHFCQUFxQixFQUFFLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDL0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsMERBQTBELEVBQUUsR0FBRyxFQUFFO1FBQ3BFLFFBQVE7UUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQUcsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN4QyxNQUFNLElBQUksR0FBRyxJQUFJLFVBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFdkMsT0FBTztRQUNQLElBQUksZUFBUyxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUU7WUFDbEMsSUFBSTtZQUNKLE1BQU0sRUFBRSxxQkFBZSxDQUFDLFFBQVE7U0FDakMsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLHFCQUFxQixFQUFFO1lBQ3JFLE1BQU0sRUFBRSxVQUFVO1NBQ25CLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtRQUM5QixRQUFRO1FBQ1IsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFHLEVBQUUsQ0FBQztRQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDeEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxVQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXZDLE9BQU87UUFDUCxNQUFNLFNBQVMsR0FBRyxJQUFJLGVBQVMsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO1lBQ3BELElBQUk7U0FDTCxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDO1lBQzdELFlBQVksRUFBRSxDQUFDLHFCQUFxQixFQUFFLGlCQUFpQixDQUFDO1NBQ3pELENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUwsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0IHsgQXBwLCBTdGFjayB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgQWNjZXNzS2V5LCBBY2Nlc3NLZXlTdGF0dXMsIFVzZXIgfSBmcm9tICcuLi9saWInO1xuXG5kZXNjcmliZSgnSUFNIEFjY2VzcyBrZXlzJywgKCkgPT4ge1xuICB0ZXN0KCd1c2VyIG5hbWUgaXMgaWRlbnRpZmVkIHZpYSByZWZlcmVuY2UnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBhcHAgPSBuZXcgQXBwKCk7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soYXBwLCAnTXlTdGFjaycpO1xuICAgIGNvbnN0IHVzZXIgPSBuZXcgVXNlcihzdGFjaywgJ015VXNlcicpO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBBY2Nlc3NLZXkoc3RhY2ssICdNeUFjY2Vzc0tleScsIHsgdXNlciB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLnRlbXBsYXRlTWF0Y2hlcyh7XG4gICAgICBSZXNvdXJjZXM6IHtcbiAgICAgICAgTXlVc2VyREM0NTAyOEI6IHtcbiAgICAgICAgICBUeXBlOiAnQVdTOjpJQU06OlVzZXInLFxuICAgICAgICB9LFxuICAgICAgICBNeUFjY2Vzc0tleUYwRkZCRTJFOiB7XG4gICAgICAgICAgVHlwZTogJ0FXUzo6SUFNOjpBY2Nlc3NLZXknLFxuICAgICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIFVzZXJOYW1lOiB7IFJlZjogJ015VXNlckRDNDUwMjhCJyB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdhY3RpdmUgc3RhdHVzIGlzIHNwZWNpZmllZCB3aXRoIGNvcnJlY3QgY2FwaXRhbGl6YXRpb24nLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBhcHAgPSBuZXcgQXBwKCk7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soYXBwLCAnTXlTdGFjaycpO1xuICAgIGNvbnN0IHVzZXIgPSBuZXcgVXNlcihzdGFjaywgJ015VXNlcicpO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBBY2Nlc3NLZXkoc3RhY2ssICdNeUFjY2Vzc0tleScsIHsgdXNlciwgc3RhdHVzOiBBY2Nlc3NLZXlTdGF0dXMuQUNUSVZFIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OklBTTo6QWNjZXNzS2V5JywgeyBTdGF0dXM6ICdBY3RpdmUnIH0pO1xuICB9KTtcblxuICB0ZXN0KCdpbmFjdGl2ZSBzdGF0dXMgaXMgc3BlY2lmaWVkIHdpdGggY29ycmVjdCBjYXBpdGFsaXphdGlvbicsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjayhhcHAsICdNeVN0YWNrJyk7XG4gICAgY29uc3QgdXNlciA9IG5ldyBVc2VyKHN0YWNrLCAnTXlVc2VyJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgbmV3IEFjY2Vzc0tleShzdGFjaywgJ015QWNjZXNzS2V5Jywge1xuICAgICAgdXNlcixcbiAgICAgIHN0YXR1czogQWNjZXNzS2V5U3RhdHVzLklOQUNUSVZFLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OklBTTo6QWNjZXNzS2V5Jywge1xuICAgICAgU3RhdHVzOiAnSW5hY3RpdmUnLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdhY2Nlc3Mga2V5IHNlY3JldCAnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBhcHAgPSBuZXcgQXBwKCk7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soYXBwLCAnTXlTdGFjaycpO1xuICAgIGNvbnN0IHVzZXIgPSBuZXcgVXNlcihzdGFjaywgJ015VXNlcicpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGFjY2Vzc0tleSA9IG5ldyBBY2Nlc3NLZXkoc3RhY2ssICdNeUFjY2Vzc0tleScsIHtcbiAgICAgIHVzZXIsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHN0YWNrLnJlc29sdmUoYWNjZXNzS2V5LnNlY3JldEFjY2Vzc0tleSkpLnRvU3RyaWN0RXF1YWwoe1xuICAgICAgJ0ZuOjpHZXRBdHQnOiBbJ015QWNjZXNzS2V5RjBGRkJFMkUnLCAnU2VjcmV0QWNjZXNzS2V5J10sXG4gICAgfSk7XG4gIH0pO1xuXG59KTtcbiJdfQ==