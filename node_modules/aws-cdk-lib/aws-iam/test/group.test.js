"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe('IAM groups', () => {
    test('default group', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        new lib_1.Group(stack, 'MyGroup');
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: { MyGroupCBA54B1B: { Type: 'AWS::IAM::Group' } },
        });
    });
    test('users can be added to the group either via `user.addToGroup` or `group.addUser`', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        const group = new lib_1.Group(stack, 'MyGroup');
        const user1 = new lib_1.User(stack, 'User1');
        const user2 = new lib_1.User(stack, 'User2');
        user1.addToGroup(group);
        group.addUser(user2);
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyGroupCBA54B1B: { Type: 'AWS::IAM::Group' },
                User1E278A736: {
                    Type: 'AWS::IAM::User',
                    Properties: { Groups: [{ Ref: 'MyGroupCBA54B1B' }] },
                },
                User21F1486D1: {
                    Type: 'AWS::IAM::User',
                    Properties: { Groups: [{ Ref: 'MyGroupCBA54B1B' }] },
                },
            },
        });
    });
    test('create with managed policy', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.Group(stack, 'MyGroup', {
            managedPolicies: [lib_1.ManagedPolicy.fromAwsManagedPolicyName('asdf')],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Group', {
            ManagedPolicyArns: [
                { 'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':iam::aws:policy/asdf']] },
            ],
        });
    });
    test('groups imported by group name have valid arn', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const group1 = lib_1.Group.fromGroupName(stack, 'imported-group1', 'MyGroupName1');
        const group2 = lib_1.Group.fromGroupName(stack, 'imported-group2', 'division/MyGroupName2');
        // THEN
        expect(stack.resolve(group1.groupArn)).toStrictEqual({
            'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':iam::', { Ref: 'AWS::AccountId' }, ':group/MyGroupName1']],
        });
        expect(stack.resolve(group2.groupArn)).toStrictEqual({
            'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':iam::', { Ref: 'AWS::AccountId' }, ':group/division/MyGroupName2']],
        });
    });
});
test('cross-env group ARNs include path', () => {
    const app = new core_1.App();
    const groupStack = new core_1.Stack(app, 'group-stack', { env: { account: '123456789012', region: 'us-east-1' } });
    const referencerStack = new core_1.Stack(app, 'referencer-stack', { env: { region: 'us-east-2' } });
    const group = new lib_1.Group(groupStack, 'Group', {
        path: '/sample/path/',
        groupName: 'sample-name',
    });
    new core_1.CfnResource(referencerStack, 'Referencer', {
        type: 'Custom::GroupReferencer',
        properties: { GroupArn: group.groupArn },
    });
    assertions_1.Template.fromStack(referencerStack).hasResourceProperties('Custom::GroupReferencer', {
        GroupArn: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':iam::123456789012:group/sample/path/sample-name',
                ],
            ],
        },
    });
});
test('throw warning if attached managed policies exceed 10 in constructor', () => {
    // GIVEN
    const stack = new core_1.Stack();
    // WHEN
    new lib_1.Group(stack, 'MyGroup', {
        groupName: 'MyGroup',
        managedPolicies: [
            lib_1.ManagedPolicy.fromAwsManagedPolicyName('0'),
            lib_1.ManagedPolicy.fromAwsManagedPolicyName('1'),
            lib_1.ManagedPolicy.fromAwsManagedPolicyName('2'),
            lib_1.ManagedPolicy.fromAwsManagedPolicyName('3'),
            lib_1.ManagedPolicy.fromAwsManagedPolicyName('4'),
            lib_1.ManagedPolicy.fromAwsManagedPolicyName('5'),
            lib_1.ManagedPolicy.fromAwsManagedPolicyName('6'),
            lib_1.ManagedPolicy.fromAwsManagedPolicyName('7'),
            lib_1.ManagedPolicy.fromAwsManagedPolicyName('8'),
            lib_1.ManagedPolicy.fromAwsManagedPolicyName('9'),
            lib_1.ManagedPolicy.fromAwsManagedPolicyName('10'),
        ],
    });
    assertions_1.Annotations.fromStack(stack).hasWarning('*', 'You added 11 to IAM Group MyGroup. The maximum number of managed policies attached to an IAM group is 10.');
});
test('throw warning if attached managed policies exceed 10 when calling `addManagedPolicy`', () => {
    // GIVEN
    const stack = new core_1.Stack();
    // WHEN
    const group = new lib_1.Group(stack, 'MyGroup', {
        groupName: 'MyGroup',
    });
    for (let i = 0; i <= 11; i++) {
        group.addManagedPolicy(lib_1.ManagedPolicy.fromAwsManagedPolicyName(i.toString()));
    }
    assertions_1.Annotations.fromStack(stack).hasWarning('/Default/MyGroup', 'You added 11 to IAM Group MyGroup. The maximum number of managed policies attached to an IAM group is 10.');
});
//# sourceMappingURL=data:application/json;base64,