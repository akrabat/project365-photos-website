"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const constructs_1 = require("constructs");
const iam = require("../lib");
/* eslint-disable quote-props */
describe('ImmutableRole', () => {
    let stack;
    let mutableRole;
    let immutableRole;
    beforeEach(() => {
        stack = new core_1.Stack();
        mutableRole = new iam.Role(stack, 'MutableRole', {
            assumedBy: new iam.AnyPrincipal(),
        });
        immutableRole = mutableRole.withoutPolicyUpdates();
    });
    test('ignores calls to attachInlinePolicy', () => {
        const user = new iam.User(stack, 'User');
        const policy = new iam.Policy(stack, 'Policy', {
            statements: [new iam.PolicyStatement({
                    resources: ['*'],
                    actions: ['s3:*'],
                })],
            users: [user],
        });
        immutableRole.attachInlinePolicy(policy);
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            'PolicyDocument': {
                'Statement': [
                    {
                        'Action': 's3:*',
                        'Resource': '*',
                        'Effect': 'Allow',
                    },
                ],
                'Version': '2012-10-17',
            },
            'PolicyName': 'Policy23B91518',
            'Users': [
                {
                    'Ref': 'User00B015A1',
                },
            ],
        });
    });
    test('id of mutable role remains unchanged', () => {
        iam.Role.fromRoleName(stack, 'TestRole123', 'my-role');
        expect(stack.node.tryFindChild('TestRole123')).not.toBeUndefined();
        expect(stack.node.tryFindChild('MutableRoleTestRole123')).toBeUndefined();
    });
    test('remains mutable when called multiple times', () => {
        const user = new iam.User(stack, 'User');
        const policy = new iam.Policy(stack, 'Policy', {
            statements: [new iam.PolicyStatement({
                    resources: ['*'],
                    actions: ['s3:*'],
                })],
            users: [user],
        });
        function findRole() {
            const foundRole = stack.node.tryFindChild('MyRole');
            if (foundRole) {
                return foundRole;
            }
            return iam.Role.fromRoleArn(stack, 'MyRole', 'arn:aws:iam::12345:role/role-name', { mutable: false });
        }
        let foundRole = findRole();
        foundRole.attachInlinePolicy(policy);
        foundRole = findRole();
        foundRole.attachInlinePolicy(policy);
        expect(stack.node.tryFindChild('MutableRoleMyRole')).not.toBeUndefined();
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            'PolicyDocument': {
                'Statement': [
                    {
                        'Action': 's3:*',
                        'Resource': '*',
                        'Effect': 'Allow',
                    },
                ],
                'Version': '2012-10-17',
            },
            'PolicyName': 'Policy23B91518',
            'Roles': assertions_1.Match.absent(),
            'Users': [
                {
                    'Ref': 'User00B015A1',
                },
            ],
        });
    });
    test('ignores calls to addManagedPolicy', () => {
        mutableRole.addManagedPolicy({ managedPolicyArn: 'Arn1' });
        immutableRole.addManagedPolicy({ managedPolicyArn: 'Arn2' });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            'ManagedPolicyArns': [
                'Arn1',
            ],
        });
    });
    test('ignores calls to addToPolicy', () => {
        immutableRole.addToPolicy(new iam.PolicyStatement({
            resources: ['*'],
            actions: ['iam:*'],
        }));
        mutableRole.addToPolicy(new iam.PolicyStatement({
            resources: ['*'],
            actions: ['s3:*'],
        }));
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            'PolicyDocument': {
                'Version': '2012-10-17',
                'Statement': [
                    {
                        'Resource': '*',
                        'Action': 's3:*',
                        'Effect': 'Allow',
                    },
                ],
            },
        });
    });
    test('ignores grants', () => {
        iam.Grant.addToPrincipal({
            grantee: immutableRole,
            actions: ['s3:*'],
            resourceArns: ['*'],
        });
        expect(assertions_1.Template.fromStack(stack).findResources('AWS::IAM::Policy', {
            'PolicyDocument': {
                'Statement': [
                    {
                        'Resource': '*',
                        'Action': 's3:*',
                        'Effect': 'Allow',
                    },
                ],
            },
        })).toEqual({});
    });
    // this pattern is used here:
    // aws-codepipeline-actions/lib/cloudformation/pipeline-actions.ts#L517
    test('immutable role is a construct', () => {
        new constructs_1.Construct(immutableRole, 'Child');
        new constructs_1.Construct(mutableRole.withoutPolicyUpdates(), 'Child2');
    });
});
//# sourceMappingURL=data:application/json;base64,