"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const iam = require("../lib");
let app;
let stack;
beforeEach(() => {
    app = new core_1.App();
    stack = new core_1.Stack(app, 'Stack');
});
test('apply imported boundary to a role', () => {
    // GIVEN
    const role = new iam.Role(stack, 'Role', {
        assumedBy: new iam.ServicePrincipal('service.amazonaws.com'),
    });
    // WHEN
    iam.PermissionsBoundary.of(role).apply(iam.ManagedPolicy.fromAwsManagedPolicyName('ReadOnlyAccess'));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
        PermissionsBoundary: {
            'Fn::Join': ['', [
                    'arn:',
                    { Ref: 'AWS::Partition' },
                    ':iam::aws:policy/ReadOnlyAccess',
                ]],
        },
    });
});
test('apply imported boundary to a user', () => {
    // GIVEN
    const user = new iam.User(stack, 'User');
    // WHEN
    iam.PermissionsBoundary.of(user).apply(iam.ManagedPolicy.fromAwsManagedPolicyName('ReadOnlyAccess'));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::User', {
        PermissionsBoundary: {
            'Fn::Join': ['', [
                    'arn:',
                    { Ref: 'AWS::Partition' },
                    ':iam::aws:policy/ReadOnlyAccess',
                ]],
        },
    });
});
test('apply newly created boundary to a role', () => {
    // GIVEN
    const role = new iam.Role(stack, 'Role', {
        assumedBy: new iam.ServicePrincipal('service.amazonaws.com'),
    });
    // WHEN
    iam.PermissionsBoundary.of(role).apply(new iam.ManagedPolicy(stack, 'Policy', {
        statements: [
            new iam.PolicyStatement({
                actions: ['*'],
                resources: ['*'],
            }),
        ],
    }));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
        PermissionsBoundary: { Ref: 'Policy23B91518' },
    });
});
test('apply boundary to role created by a custom resource', () => {
    // GIVEN
    const provider = core_1.CustomResourceProvider.getOrCreateProvider(stack, 'Empty', {
        codeDirectory: path.join(__dirname, 'custom-resource'),
        runtime: core_1.CustomResourceProviderRuntime.NODEJS_14_X,
    });
    // WHEN
    iam.PermissionsBoundary.of(provider).apply(new iam.ManagedPolicy(stack, 'Policy', {
        statements: [
            new iam.PolicyStatement({
                actions: ['*'],
                resources: ['*'],
            }),
        ],
    }));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
        PermissionsBoundary: { Ref: 'Policy23B91518' },
    });
});
test('apply boundary to users created via CfnResource', () => {
    // GIVEN
    const user = new core_1.CfnResource(stack, 'User', {
        type: 'AWS::IAM::User',
    });
    // WHEN
    iam.PermissionsBoundary.of(user).apply(new iam.ManagedPolicy(stack, 'Policy', {
        statements: [
            new iam.PolicyStatement({
                actions: ['*'],
                resources: ['*'],
            }),
        ],
    }));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::User', {
        PermissionsBoundary: { Ref: 'Policy23B91518' },
    });
});
test('apply boundary to roles created via CfnResource', () => {
    // GIVEN
    const role = new core_1.CfnResource(stack, 'Role', {
        type: 'AWS::IAM::Role',
    });
    // WHEN
    iam.PermissionsBoundary.of(role).apply(new iam.ManagedPolicy(stack, 'Policy', {
        statements: [
            new iam.PolicyStatement({
                actions: ['*'],
                resources: ['*'],
            }),
        ],
    }));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
        PermissionsBoundary: { Ref: 'Policy23B91518' },
    });
});
test('unapply inherited boundary from a user: order 1', () => {
    // GIVEN
    const user = new iam.User(stack, 'User');
    // WHEN
    iam.PermissionsBoundary.of(stack).apply(iam.ManagedPolicy.fromAwsManagedPolicyName('ReadOnlyAccess'));
    iam.PermissionsBoundary.of(user).clear();
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::User', {
        PermissionsBoundary: assertions_1.Match.absent(),
    });
});
test('unapply inherited boundary from a user: order 2', () => {
    // GIVEN
    const user = new iam.User(stack, 'User');
    // WHEN
    iam.PermissionsBoundary.of(user).clear();
    iam.PermissionsBoundary.of(stack).apply(iam.ManagedPolicy.fromAwsManagedPolicyName('ReadOnlyAccess'));
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::User', {
        PermissionsBoundary: assertions_1.Match.absent(),
    });
});
//# sourceMappingURL=data:application/json;base64,