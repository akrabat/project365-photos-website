"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const lib_1 = require("../lib");
const precreated_role_1 = require("../lib/private/precreated-role");
let app;
let stack;
let someResource;
let sourceRole;
beforeEach(() => {
    app = new core_1.App();
    stack = new core_1.Stack(app, 'MyStack');
    someResource = new core_1.CfnResource(stack, 'SomeResource', {
        type: 'AWS::SomeResource',
        properties: {},
    });
    sourceRole = new lib_1.Role(stack, 'SourceRole', {
        assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
    });
});
describe('precreatedRole report created', () => {
    test('with inline policies', () => {
        const otherStack = new core_1.Stack(app, 'OtherStack');
        lib_1.Role.customizeRoles(otherStack, {
            usePrecreatedRoles: {
                'OtherStack/MyRole': 'other-role-name',
            },
        });
        new lib_1.Role(otherStack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
            inlinePolicies: {
                Doc: new lib_1.PolicyDocument({
                    statements: [new lib_1.PolicyStatement({
                            effect: lib_1.Effect.ALLOW,
                            actions: ['sns:Publish'],
                            resources: ['*'],
                        })],
                }),
            },
            managedPolicies: [
                lib_1.ManagedPolicy.fromAwsManagedPolicyName('ReadOnlyAccess'),
            ],
        });
        assertions_1.Template.fromStack(otherStack).resourceCountIs('AWS::IAM::Role', 0);
        const assembly = app.synth();
        const filePath = path.join(assembly.directory, 'iam-policy-report.json');
        const file = fs.readFileSync(filePath, { encoding: 'utf-8' });
        expect(JSON.parse(file)).toEqual({
            roles: [{
                    roleConstructPath: 'OtherStack/MyRole',
                    roleName: 'other-role-name',
                    missing: false,
                    assumeRolePolicy: [{
                            Action: 'sts:AssumeRole',
                            Effect: 'Allow',
                            Principal: {
                                Service: 'sns.amazonaws.com',
                            },
                        }],
                    managedPolicyArns: [
                        'arn:(PARTITION):iam::aws:policy/ReadOnlyAccess',
                    ],
                    managedPolicyStatements: [],
                    identityPolicyStatements: [{
                            Action: 'sns:Publish',
                            Effect: 'Allow',
                            Resource: '*',
                        }],
                }],
        });
    });
    test('with managed policies', () => {
        // GIVEN
        const role = new precreated_role_1.PrecreatedRole(stack, 'Role', {
            role: sourceRole,
            assumeRolePolicy: sourceRole.assumeRolePolicy,
            missing: true,
        });
        // WHEN
        role.addManagedPolicy(lib_1.ManagedPolicy.fromAwsManagedPolicyName('ReadOnlyAccess'));
        // THEN
        const assembly = app.synth();
        const filePath = path.join(assembly.directory, 'iam-policy-report.json');
        const file = fs.readFileSync(filePath, { encoding: 'utf-8' });
        expect(JSON.parse(file)).toEqual({
            roles: [{
                    roleConstructPath: 'MyStack/Role',
                    roleName: 'missing role',
                    missing: true,
                    assumeRolePolicy: [{
                            Action: 'sts:AssumeRole',
                            Effect: 'Allow',
                            Principal: {
                                Service: 'sns.amazonaws.com',
                            },
                        }],
                    managedPolicyArns: [
                        'arn:(PARTITION):iam::aws:policy/ReadOnlyAccess',
                    ],
                    managedPolicyStatements: [],
                    identityPolicyStatements: [],
                }],
        });
    });
    test('with addToPolicy', () => {
        // GIVEN
        const role = new precreated_role_1.PrecreatedRole(stack, 'Role', {
            role: sourceRole,
            missing: true,
        });
        // WHEN
        role.addToPolicy(new lib_1.PolicyStatement({
            effect: lib_1.Effect.ALLOW,
            actions: ['s3:GetObject'],
            conditions: {
                StringLike: {
                    's3:prefix': [
                        someResource.getAtt('Arn').toString(),
                        'arn:aws:s3:::someBucket/*',
                    ],
                },
            },
            resources: [
                someResource.getAtt('Arn').toString(),
                'arn:aws:s3:::someBucket/*',
            ],
        }));
        // THEN
        const assembly = app.synth();
        const filePath = path.join(assembly.directory, 'iam-policy-report.json');
        const file = fs.readFileSync(filePath, { encoding: 'utf-8' });
        expect(JSON.parse(file)).toEqual({
            roles: [{
                    roleConstructPath: 'MyStack/Role',
                    roleName: 'missing role',
                    missing: true,
                    assumeRolePolicy: [],
                    managedPolicyArns: [],
                    managedPolicyStatements: [],
                    identityPolicyStatements: [
                        {
                            Action: 's3:GetObject',
                            Condition: {
                                StringLike: {
                                    's3:prefix': [
                                        '(MyStack/SomeResource.Arn)',
                                        'arn:aws:s3:::someBucket/*',
                                    ],
                                },
                            },
                            Effect: 'Allow',
                            Resource: [
                                '(MyStack/SomeResource.Arn)',
                                'arn:aws:s3:::someBucket/*',
                            ],
                        },
                    ],
                }],
        });
    });
    test('with attachInlinePolicy', () => {
        // GIVEN
        const role = new precreated_role_1.PrecreatedRole(stack, 'Role', {
            role: sourceRole,
            missing: true,
        });
        // WHEN
        role.attachInlinePolicy(new lib_1.Policy(stack, 'Policy', {
            statements: [new lib_1.PolicyStatement({
                    effect: lib_1.Effect.ALLOW,
                    actions: ['sns:Publish'],
                    resources: [`arn:aws:sns:${stack.region}:${stack.account}:${someResource.ref}`],
                })],
        }));
        // THEN
        const assembly = app.synth();
        const filePath = path.join(assembly.directory, 'iam-policy-report.json');
        const file = fs.readFileSync(filePath, { encoding: 'utf-8' });
        expect(JSON.parse(file)).toEqual({
            roles: [{
                    roleConstructPath: 'MyStack/Role',
                    roleName: 'missing role',
                    missing: true,
                    assumeRolePolicy: [],
                    managedPolicyArns: [],
                    managedPolicyStatements: [],
                    identityPolicyStatements: [{
                            Action: 'sns:Publish',
                            Effect: 'Allow',
                            Resource: 'arn:aws:sns:(REGION):(ACCOUNT):(MyStack/SomeResource.Ref)',
                        }],
                }],
        });
    });
    test('with missing=false', () => {
        // GIVEN
        new precreated_role_1.PrecreatedRole(stack, 'Role', {
            role: lib_1.Role.fromRoleName(stack, 'MyRole', 'ImportedRole'),
            missing: false,
        });
        // THEN
        const assembly = app.synth();
        const filePath = path.join(assembly.directory, 'iam-policy-report.json');
        const file = fs.readFileSync(filePath, { encoding: 'utf-8' });
        expect(JSON.parse(file)).toEqual({
            roles: [{
                    roleConstructPath: 'MyStack/Role',
                    roleName: 'ImportedRole',
                    missing: false,
                    assumeRolePolicy: [],
                    managedPolicyArns: [],
                    managedPolicyStatements: [],
                    identityPolicyStatements: [],
                }],
        });
    });
    test('with managedPolicies', () => {
        // GIVEN
        const otherApp = new core_1.App();
        const otherStack = new core_1.Stack(otherApp, 'OtherStack');
        lib_1.Role.customizeRoles(otherStack, {
            usePrecreatedRoles: {
                'OtherStack/MyRole': 'other-role-name',
            },
        });
        const role = new lib_1.Role(otherStack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
            managedPolicies: [
                lib_1.ManagedPolicy.fromAwsManagedPolicyName('ReadOnlyAccess'),
                lib_1.ManagedPolicy.fromManagedPolicyName(otherStack, 'CustomReadPolicy', 'CustomReadOnlyAccess'),
                new lib_1.ManagedPolicy(otherStack, 'CustomPolicy', {
                    statements: [new lib_1.PolicyStatement({
                            effect: lib_1.Effect.ALLOW,
                            actions: ['sns:Publish', 's3:GetObject'],
                            resources: [someResource.ref],
                        })],
                }),
            ],
        });
        new lib_1.ManagedPolicy(otherStack, 'OtherCustomPolicy', {
            roles: [role],
            statements: [new lib_1.PolicyStatement({
                    effect: lib_1.Effect.ALLOW,
                    actions: ['s3:PutObject'],
                    resources: [someResource.getAtt('Arn').toString()],
                })],
        });
        // THEN
        const assembly = otherApp.synth();
        const filePath = path.join(assembly.directory, 'iam-policy-report');
        const file = fs.readFileSync(filePath + '.txt', { encoding: 'utf-8' });
        const jsonfile = fs.readFileSync(filePath + '.json', { encoding: 'utf-8' });
        expect(jsonfile).toMatchInlineSnapshot(`
"{
  \\"roles\\": [
    {
      \\"roleConstructPath\\": \\"OtherStack/MyRole\\",
      \\"roleName\\": \\"other-role-name\\",
      \\"missing\\": false,
      \\"assumeRolePolicy\\": [
        {
          \\"Action\\": \\"sts:AssumeRole\\",
          \\"Effect\\": \\"Allow\\",
          \\"Principal\\": {
            \\"Service\\": \\"sns.amazonaws.com\\"
          }
        }
      ],
      \\"managedPolicyArns\\": [
        \\"arn:(PARTITION):iam::aws:policy/ReadOnlyAccess\\",
        \\"arn:(PARTITION):iam::(ACCOUNT):policy/CustomReadOnlyAccess\\"
      ],
      \\"managedPolicyStatements\\": [
        {
          \\"Action\\": \\"s3:PutObject\\",
          \\"Effect\\": \\"Allow\\",
          \\"Resource\\": \\"(MyStack/SomeResource.Arn)\\"
        },
        {
          \\"Action\\": [
            \\"sns:Publish\\",
            \\"s3:GetObject\\"
          ],
          \\"Effect\\": \\"Allow\\",
          \\"Resource\\": \\"(MyStack/SomeResource.Ref)\\"
        }
      ],
      \\"identityPolicyStatements\\": []
    }
  ]
}"
`);
        expect(file).toMatchInlineSnapshot(`
"<other-role-name> (OtherStack/MyRole)

AssumeRole Policy:
[
  {
    \\"Action\\": \\"sts:AssumeRole\\",
    \\"Effect\\": \\"Allow\\",
    \\"Principal\\": {
      \\"Service\\": \\"sns.amazonaws.com\\"
    }
  }
]

Managed Policy ARNs:
[
  \\"arn:(PARTITION):iam::aws:policy/ReadOnlyAccess\\",
  \\"arn:(PARTITION):iam::(ACCOUNT):policy/CustomReadOnlyAccess\\"
]

Managed Policies Statements:
[
  {
    \\"Action\\": \\"s3:PutObject\\",
    \\"Effect\\": \\"Allow\\",
    \\"Resource\\": \\"(MyStack/SomeResource.Arn)\\"
  },
  {
    \\"Action\\": [
      \\"sns:Publish\\",
      \\"s3:GetObject\\"
    ],
    \\"Effect\\": \\"Allow\\",
    \\"Resource\\": \\"(MyStack/SomeResource.Ref)\\"
  }
]

Identity Policy Statements:
NONE"
`);
    });
});
//# sourceMappingURL=data:application/json;base64,