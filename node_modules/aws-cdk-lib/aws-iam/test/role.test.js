"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../core");
const constructs_1 = require("constructs");
const lib_1 = require("../lib");
describe('isRole() returns', () => {
    test('true if given Role instance', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        const pureRole = new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        // THEN
        expect(lib_1.Role.isRole(pureRole)).toBe(true);
    });
    test('false if given imported role instance', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        const importedRole = lib_1.Role.fromRoleName(stack, 'ImportedRole', 'ImportedRole');
        // THEN
        expect(lib_1.Role.isRole(importedRole)).toBe(false);
    });
    test('false if given undefined', () => {
        // THEN
        expect(lib_1.Role.isRole(undefined)).toBe(false);
    });
});
describe('customizeRoles', () => {
    test('throws if precreatedRoles is not used', () => {
        // GIVEN
        const app = new core_1.App();
        lib_1.Role.customizeRoles(app);
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        // THEN
        assertions_1.Annotations.fromStack(stack).hasError('/MyStack/Role', assertions_1.Match.stringLikeRegexp('IAM Role is being created at path "MyStack/Role"'));
    });
    test('throws if precreatedRoles has a token', () => {
        // GIVEN
        const app = new core_1.App();
        lib_1.Role.customizeRoles(app, {
            usePrecreatedRoles: {
                'MyStack/Role': core_1.Lazy.string({ produce: () => 'RoleName' }),
            },
        });
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        // THEN
        assertions_1.Annotations.fromStack(stack).hasError('/MyStack/Role', assertions_1.Match.stringLikeRegexp('Cannot resolve precreated role name at path "MyStack/Role"'));
    });
    test('does not throw if preventSynthesis=false', () => {
        // GIVEN
        const app = new core_1.App();
        lib_1.Role.customizeRoles(app, {
            preventSynthesis: false,
        });
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        // THEN
        // no annotations
        const annotations = assertions_1.Annotations.fromStack(stack);
        annotations.hasNoError('MyStack/Role', assertions_1.Match.stringLikeRegexp('*'));
        // and resource is still synthesized
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::IAM::Role', 1);
    });
    test('works at the app scope', () => {
        // GIVEN
        const app = new core_1.App();
        lib_1.Role.customizeRoles(app, {
            usePrecreatedRoles: {
                'MyStack/Role': 'SomeRoleName',
            },
        });
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        const role = new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        new core_1.CfnResource(stack, 'MyResource', {
            type: 'AWS::Custom',
            properties: {
                Role: role.roleName,
            },
        });
        // THEN
        const template = assertions_1.Template.fromStack(stack);
        template.resourceCountIs('AWS::IAM::Role', 0);
        template.hasResourceProperties('AWS::Custom', {
            Role: 'SomeRoleName',
        });
    });
    test('works at a relative scope', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        const subScope = new constructs_1.Construct(stack, 'SomeConstruct');
        lib_1.Role.customizeRoles(subScope, {
            usePrecreatedRoles: {
                Role: 'SomeRoleName',
            },
        });
        // WHEN
        const role = new lib_1.Role(subScope, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        new core_1.CfnResource(subScope, 'MyResource', {
            type: 'AWS::Custom',
            properties: {
                Role: role.roleName,
            },
        });
        // THEN
        const template = assertions_1.Template.fromStack(stack);
        template.resourceCountIs('AWS::IAM::Role', 0);
        template.hasResourceProperties('AWS::Custom', {
            Role: 'SomeRoleName',
        });
    });
    test('works at an absolute scope', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        const subScope = new constructs_1.Construct(stack, 'SomeConstruct');
        lib_1.Role.customizeRoles(subScope, {
            usePrecreatedRoles: {
                'MyStack/SomeConstruct/Role': 'SomeRoleName',
            },
        });
        // WHEN
        const role = new lib_1.Role(subScope, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        new core_1.CfnResource(subScope, 'MyResource', {
            type: 'AWS::Custom',
            properties: {
                Role: role.roleName,
            },
        });
        // THEN
        const template = assertions_1.Template.fromStack(stack);
        template.resourceCountIs('AWS::IAM::Role', 0);
        template.hasResourceProperties('AWS::Custom', {
            Role: 'SomeRoleName',
        });
    });
    test('does not create policies', () => {
        // GIVEN
        const app = new core_1.App();
        lib_1.Role.customizeRoles(app, {
            usePrecreatedRoles: {
                'MyStack/Role': 'SomeRoleName',
            },
        });
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        const role = new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        const importedRole = lib_1.Role.fromRoleName(stack, 'ImportedRole', 'ImportedRole');
        importedRole.grant(role, 'sts:AssumeRole');
        role.addToPolicy(new lib_1.PolicyStatement({
            effect: lib_1.Effect.ALLOW,
            actions: ['*'],
            resources: ['*'],
        }));
        const template = assertions_1.Template.fromStack(stack);
        template.resourceCountIs('AWS::IAM::Policy', 0);
    });
    test('can use all role properties', () => {
        // GIVEN
        const app = new core_1.App();
        lib_1.Role.customizeRoles(app, {
            usePrecreatedRoles: {
                'MyStack/Role': 'SomeRoleName',
            },
        });
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        const role = new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        const principal = lib_1.Role.fromRoleName(stack, 'OtherRole', 'OtherRole');
        role.grant(principal, 'sts:AssumeRole');
        role.grantPassRole(principal);
        role.grantAssumeRole(principal);
        role.addManagedPolicy(lib_1.ManagedPolicy.fromAwsManagedPolicyName('ReadOnlyAccess'));
        role.addManagedPolicy(new lib_1.ManagedPolicy(stack, 'MyPolicy', {
            statements: [new lib_1.PolicyStatement({
                    effect: lib_1.Effect.ALLOW,
                    actions: ['sns:Publish'],
                    resources: ['*'],
                })],
        }));
        role.withoutPolicyUpdates();
        new core_1.CfnResource(stack, 'MyResource', {
            type: 'AWS::Custom',
            properties: {
                RoleName: role.roleName,
                RoleArn: role.roleName,
                PolicyFragment: role.policyFragment,
                AssumeRoleAction: role.assumeRoleAction,
                PrincipalAccount: role.principalAccount,
                AssumeRolePolicy: role.assumeRolePolicy,
                PermissionsBoundary: role.permissionsBoundary,
            },
        });
        // THEN
        expect(() => {
            role.applyRemovalPolicy(core_1.RemovalPolicy.DESTROY);
        }).toThrow(/Cannot apply RemovalPolicy/);
        expect(() => {
            new core_1.CfnResource(stack, 'MyResource2', {
                type: 'AWS::Custom',
                properties: {
                    RoleId: role.roleId,
                },
            });
        }).toThrow(/"roleId" is not available on precreated roles/);
        const template = assertions_1.Template.fromStack(stack);
        template.resourceCountIs('AWS::IAM::Role', 0);
        template.resourceCountIs('AWS::IAM::Policy', 0);
        template.resourceCountIs('AWS::IAM::ManagedPolicy', 0);
        template.hasResourceProperties('AWS::Custom', {
            RoleName: 'SomeRoleName',
            RoleArn: 'SomeRoleName',
            PolicyFragment: {
                principalJson: {
                    AWS: [
                        {
                            'Fn::Join': [
                                '',
                                [
                                    'arn:',
                                    {
                                        Ref: 'AWS::Partition',
                                    },
                                    ':iam::',
                                    {
                                        Ref: 'AWS::AccountId',
                                    },
                                    ':role/SomeRoleName',
                                ],
                            ],
                        },
                    ],
                },
                conditions: {},
            },
            AssumeRoleAction: 'sts:AssumeRole',
            PrincipalAccount: {
                Ref: 'AWS::AccountId',
            },
            AssumeRolePolicy: {
                Statement: [
                    {
                        Action: 'sts:AssumeRole',
                        Effect: 'Allow',
                        Principal: {
                            Service: 'sns.amazonaws.com',
                        },
                    },
                ],
                Version: '2012-10-17',
            },
        });
    });
});
describe('IAM role', () => {
    test('default role', () => {
        const stack = new core_1.Stack();
        new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyRoleF48FFE04: {
                    Type: 'AWS::IAM::Role',
                    Properties: {
                        AssumeRolePolicyDocument: {
                            Statement: [{
                                    Action: 'sts:AssumeRole',
                                    Effect: 'Allow',
                                    Principal: { Service: 'sns.amazonaws.com' },
                                }],
                            Version: '2012-10-17',
                        },
                    },
                },
            },
        });
    });
    test('a role can grant PassRole permissions', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const role = new lib_1.Role(stack, 'Role', { assumedBy: new lib_1.ServicePrincipal('henk.amazonaws.com') });
        const user = new lib_1.User(stack, 'User');
        // WHEN
        role.grantPassRole(user);
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: 'iam:PassRole',
                        Effect: 'Allow',
                        Resource: { 'Fn::GetAtt': ['Role1ABCC5F0', 'Arn'] },
                    },
                ],
                Version: '2012-10-17',
            },
        });
    });
    test('a role can grant AssumeRole permissions', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const role = new lib_1.Role(stack, 'Role', { assumedBy: new lib_1.ServicePrincipal('henk.amazonaws.com') });
        const user = new lib_1.User(stack, 'User');
        // WHEN
        role.grantAssumeRole(user);
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: 'sts:AssumeRole',
                        Effect: 'Allow',
                        Resource: { 'Fn::GetAtt': ['Role1ABCC5F0', 'Arn'] },
                    },
                ],
                Version: '2012-10-17',
            },
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('can supply externalId', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
            externalId: 'SomeSecret',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            AssumeRolePolicyDocument: {
                Statement: [
                    {
                        Action: 'sts:AssumeRole',
                        Condition: {
                            StringEquals: { 'sts:ExternalId': 'SomeSecret' },
                        },
                        Effect: 'Allow',
                        Principal: { Service: 'sns.amazonaws.com' },
                    },
                ],
                Version: '2012-10-17',
            },
        });
    });
    test('can supply single externalIds', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
            externalIds: ['SomeSecret'],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            AssumeRolePolicyDocument: {
                Statement: [
                    {
                        Action: 'sts:AssumeRole',
                        Condition: {
                            StringEquals: { 'sts:ExternalId': 'SomeSecret' },
                        },
                        Effect: 'Allow',
                        Principal: { Service: 'sns.amazonaws.com' },
                    },
                ],
                Version: '2012-10-17',
            },
        });
    });
    test('can supply multiple externalIds', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
            externalIds: ['SomeSecret', 'AnotherSecret'],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            AssumeRolePolicyDocument: {
                Statement: [
                    {
                        Action: 'sts:AssumeRole',
                        Condition: {
                            StringEquals: { 'sts:ExternalId': ['SomeSecret', 'AnotherSecret'] },
                        },
                        Effect: 'Allow',
                        Principal: { Service: 'sns.amazonaws.com' },
                    },
                ],
                Version: '2012-10-17',
            },
        });
    });
    test('policy is created automatically when permissions are added', () => {
        // by default we don't expect a role policy
        const before = new core_1.Stack();
        new lib_1.Role(before, 'MyRole', { assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com') });
        assertions_1.Template.fromStack(before).resourceCountIs('AWS::IAM::Policy', 0);
        // add a policy to the role
        const after = new core_1.Stack();
        const afterRole = new lib_1.Role(after, 'MyRole', { assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com') });
        afterRole.addToPolicy(new lib_1.PolicyStatement({ resources: ['myresource'], actions: ['service:myaction'] }));
        assertions_1.Template.fromStack(after).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: 'service:myaction',
                        Effect: 'Allow',
                        Resource: 'myresource',
                    },
                ],
                Version: '2012-10-17',
            },
            PolicyName: 'MyRoleDefaultPolicyA36BE1DD',
            Roles: [
                {
                    Ref: 'MyRoleF48FFE04',
                },
            ],
        });
    });
    test('managed policy arns can be supplied upon initialization and also added later', () => {
        const stack = new core_1.Stack();
        const role = new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('test.service'),
            managedPolicies: [{ managedPolicyArn: 'managed1' }, { managedPolicyArn: 'managed2' }],
        });
        role.addManagedPolicy({ managedPolicyArn: 'managed3' });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyRoleF48FFE04: {
                    Type: 'AWS::IAM::Role',
                    Properties: {
                        AssumeRolePolicyDocument: {
                            Statement: [{
                                    Action: 'sts:AssumeRole',
                                    Effect: 'Allow',
                                    Principal: { Service: 'test.service' },
                                }],
                            Version: '2012-10-17',
                        },
                        ManagedPolicyArns: ['managed1', 'managed2', 'managed3'],
                    },
                },
            },
        });
    });
    test('federated principal can change AssumeRoleAction', () => {
        const stack = new core_1.Stack();
        const cognitoPrincipal = new lib_1.FederatedPrincipal('foo', { StringEquals: { key: 'value' } }, 'sts:AssumeSomething');
        new lib_1.Role(stack, 'MyRole', { assumedBy: cognitoPrincipal });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            AssumeRolePolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Principal: { Federated: 'foo' },
                        Condition: {
                            StringEquals: { key: 'value' },
                        },
                        Action: 'sts:AssumeSomething',
                        Effect: 'Allow',
                    },
                ],
            },
        });
    });
    test('role path can be used to specify the path', () => {
        const stack = new core_1.Stack();
        new lib_1.Role(stack, 'MyRole', { path: '/', assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com') });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            Path: '/',
        });
    });
    test('role path can be 1 character', () => {
        const stack = new core_1.Stack();
        const assumedBy = new lib_1.ServicePrincipal('bla');
        expect(() => new lib_1.Role(stack, 'MyRole', { assumedBy, path: '/' })).not.toThrowError();
    });
    test('role path cannot be empty', () => {
        const stack = new core_1.Stack();
        const assumedBy = new lib_1.ServicePrincipal('bla');
        expect(() => new lib_1.Role(stack, 'MyRole', { assumedBy, path: '' }))
            .toThrow('Role path must be between 1 and 512 characters. The provided role path is 0 characters.');
    });
    test('role path must be less than or equal to 512', () => {
        const stack = new core_1.Stack();
        const assumedBy = new lib_1.ServicePrincipal('bla');
        expect(() => new lib_1.Role(stack, 'MyRole', { assumedBy, path: '/' + Array(512).join('a') + '/' }))
            .toThrow('Role path must be between 1 and 512 characters. The provided role path is 513 characters.');
    });
    test('role path must start with a forward slash', () => {
        const stack = new core_1.Stack();
        const assumedBy = new lib_1.ServicePrincipal('bla');
        const expected = (val) => 'Role path must be either a slash or valid characters (alphanumerics and symbols) surrounded by slashes. '
            + `Valid characters are unicode characters in [\\u0021-\\u007F]. However, ${val} is provided.`;
        expect(() => new lib_1.Role(stack, 'MyRole', { assumedBy, path: 'aaa' })).toThrow(expected('aaa'));
    });
    test('role path must end with a forward slash', () => {
        const stack = new core_1.Stack();
        const assumedBy = new lib_1.ServicePrincipal('bla');
        const expected = (val) => 'Role path must be either a slash or valid characters (alphanumerics and symbols) surrounded by slashes. '
            + `Valid characters are unicode characters in [\\u0021-\\u007F]. However, ${val} is provided.`;
        expect(() => new lib_1.Role(stack, 'MyRole', { assumedBy, path: '/a' })).toThrow(expected('/a'));
    });
    test('role path must contain unicode chars within [\\u0021-\\u007F]', () => {
        const stack = new core_1.Stack();
        const assumedBy = new lib_1.ServicePrincipal('bla');
        const expected = (val) => 'Role path must be either a slash or valid characters (alphanumerics and symbols) surrounded by slashes. '
            + `Valid characters are unicode characters in [\\u0021-\\u007F]. However, ${val} is provided.`;
        expect(() => new lib_1.Role(stack, 'MyRole', { assumedBy, path: '/\u0020\u0080/' })).toThrow(expected('/\u0020\u0080/'));
    });
    describe('maxSessionDuration', () => {
        test('is not specified by default', () => {
            const stack = new core_1.Stack();
            new lib_1.Role(stack, 'MyRole', { assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com') });
            assertions_1.Template.fromStack(stack).templateMatches({
                Resources: {
                    MyRoleF48FFE04: {
                        Type: 'AWS::IAM::Role',
                        Properties: {
                            AssumeRolePolicyDocument: {
                                Statement: [
                                    {
                                        Action: 'sts:AssumeRole',
                                        Effect: 'Allow',
                                        Principal: {
                                            Service: 'sns.amazonaws.com',
                                        },
                                    },
                                ],
                                Version: '2012-10-17',
                            },
                        },
                    },
                },
            });
        });
        test('can be used to specify the maximum session duration for assuming the role', () => {
            const stack = new core_1.Stack();
            new lib_1.Role(stack, 'MyRole', { maxSessionDuration: core_1.Duration.seconds(3700), assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com') });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
                MaxSessionDuration: 3700,
            });
        });
        test('must be between 3600 and 43200', () => {
            const stack = new core_1.Stack();
            const assumedBy = new lib_1.ServicePrincipal('bla');
            new lib_1.Role(stack, 'MyRole1', { assumedBy, maxSessionDuration: core_1.Duration.hours(1) });
            new lib_1.Role(stack, 'MyRole2', { assumedBy, maxSessionDuration: core_1.Duration.hours(12) });
            const expected = (val) => `maxSessionDuration is set to ${val}, but must be >= 3600sec (1hr) and <= 43200sec (12hrs)`;
            expect(() => new lib_1.Role(stack, 'MyRole3', { assumedBy, maxSessionDuration: core_1.Duration.minutes(1) }))
                .toThrow(expected(60));
            expect(() => new lib_1.Role(stack, 'MyRole4', { assumedBy, maxSessionDuration: core_1.Duration.seconds(3599) }))
                .toThrow(expected(3599));
            expect(() => new lib_1.Role(stack, 'MyRole5', { assumedBy, maxSessionDuration: core_1.Duration.seconds(43201) }))
                .toThrow(expected(43201));
        });
    });
    test('allow role with multiple principals', () => {
        const stack = new core_1.Stack();
        new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.CompositePrincipal(new lib_1.ServicePrincipal('boom.amazonaws.test'), new lib_1.ArnPrincipal('1111111')),
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            AssumeRolePolicyDocument: {
                Statement: [
                    {
                        Action: 'sts:AssumeRole',
                        Effect: 'Allow',
                        Principal: {
                            Service: 'boom.amazonaws.test',
                        },
                    },
                    {
                        Action: 'sts:AssumeRole',
                        Effect: 'Allow',
                        Principal: {
                            AWS: '1111111',
                        },
                    },
                ],
                Version: '2012-10-17',
            },
        });
    });
    test('can supply permissions boundary managed policy', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const permissionsBoundary = lib_1.ManagedPolicy.fromAwsManagedPolicyName('managed-policy');
        new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
            permissionsBoundary,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            PermissionsBoundary: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':iam::aws:policy/managed-policy',
                    ],
                ],
            },
        });
    });
    test('Principal-* in an AssumeRolePolicyDocument gets translated to { "AWS": "*" }', () => {
        // The docs say that "Principal: *" and "Principal: { AWS: * }" are equivalent
        // (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html)
        // but in practice CreateRole errors out if you use "Principal: *" in an AssumeRolePolicyDocument:
        // An error occurred (MalformedPolicyDocument) when calling the CreateRole operation: AssumeRolepolicy contained an invalid principal: "STAR":"*".
        // Make sure that we handle this case specially.
        const stack = new core_1.Stack();
        new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.AnyPrincipal(),
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            AssumeRolePolicyDocument: {
                Statement: [
                    {
                        Action: 'sts:AssumeRole',
                        Effect: 'Allow',
                        Principal: { AWS: '*' },
                    },
                ],
                Version: '2012-10-17',
            },
        });
    });
    test('can have a description', () => {
        const stack = new core_1.Stack();
        new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
            description: 'This is a role description.',
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyRoleF48FFE04: {
                    Type: 'AWS::IAM::Role',
                    Properties: {
                        AssumeRolePolicyDocument: {
                            Statement: [{
                                    Action: 'sts:AssumeRole',
                                    Effect: 'Allow',
                                    Principal: { Service: 'sns.amazonaws.com' },
                                }],
                            Version: '2012-10-17',
                        },
                        Description: 'This is a role description.',
                    },
                },
            },
        });
    });
    test('should not have an empty description', () => {
        const stack = new core_1.Stack();
        new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
            description: '',
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyRoleF48FFE04: {
                    Type: 'AWS::IAM::Role',
                    Properties: {
                        AssumeRolePolicyDocument: {
                            Statement: [{
                                    Action: 'sts:AssumeRole',
                                    Effect: 'Allow',
                                    Principal: { Service: 'sns.amazonaws.com' },
                                }],
                            Version: '2012-10-17',
                        },
                    },
                },
            },
        });
    });
    test('description can only be 1000 characters long', () => {
        const stack = new core_1.Stack();
        expect(() => {
            new lib_1.Role(stack, 'MyRole', {
                assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
                description: '1000+ character long description: Lorem ipsum dolor sit amet, consectetuer adipiscing elit. \
        Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, \
        nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat \
        massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, \
        imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. \
        Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, \
        eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus \
        varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. \
        Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing \
        sem neque sed ipsum.',
            });
        }).toThrow(/Role description must be no longer than 1000 characters./);
    });
    test('fails if managed policy is invalid', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'my-stack');
        new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
            managedPolicies: [new lib_1.ManagedPolicy(stack, 'MyManagedPolicy', {
                    statements: [new lib_1.PolicyStatement({
                            resources: ['*'],
                            actions: ['*'],
                            principals: [new lib_1.ServicePrincipal('sns.amazonaws.com')],
                        })],
                })],
        });
        expect(() => app.synth()).toThrow(/A PolicyStatement used in an identity-based policy cannot specify any IAM principals/);
    });
    test('fails if default role policy is invalid', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'my-stack');
        const role = new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        role.addToPrincipalPolicy(new lib_1.PolicyStatement({
            resources: ['*'],
            actions: ['*'],
            principals: [new lib_1.ServicePrincipal('sns.amazonaws.com')],
        }));
        expect(() => app.synth()).toThrow(/A PolicyStatement used in an identity-based policy cannot specify any IAM principals/);
    });
    test('fails if inline policy from props is invalid', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'my-stack');
        new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
            inlinePolicies: {
                testPolicy: new lib_1.PolicyDocument({
                    statements: [new lib_1.PolicyStatement({
                            resources: ['*'],
                            actions: ['*'],
                            principals: [new lib_1.ServicePrincipal('sns.amazonaws.com')],
                        })],
                }),
            },
        });
        expect(() => app.synth()).toThrow(/A PolicyStatement used in an identity-based policy cannot specify any IAM principals/);
    });
    test('fails if attached inline policy is invalid', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'my-stack');
        const role = new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        role.attachInlinePolicy(new lib_1.Policy(stack, 'MyPolicy', {
            statements: [new lib_1.PolicyStatement({
                    resources: ['*'],
                    actions: ['*'],
                    principals: [new lib_1.ServicePrincipal('sns.amazonaws.com')],
                })],
        }));
        expect(() => app.synth()).toThrow(/A PolicyStatement used in an identity-based policy cannot specify any IAM principals/);
    });
    test('fails if assumeRolePolicy is invalid', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'my-stack');
        const role = new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
            managedPolicies: [new lib_1.ManagedPolicy(stack, 'MyManagedPolicy')],
        });
        role.assumeRolePolicy?.addStatements(new lib_1.PolicyStatement({ actions: ['*'] }));
        expect(() => app.synth()).toThrow(/A PolicyStatement used in a resource-based policy must specify at least one IAM principal/);
    });
});
describe('permissions boundary', () => {
    test('can be applied to an app', () => {
        // GIVEN
        const app = new core_1.App({
            context: {
                [core_1.PERMISSIONS_BOUNDARY_CONTEXT_KEY]: {
                    name: 'cdk-${Qualifier}-PermissionsBoundary',
                },
            },
        });
        const stack = new core_1.Stack(app);
        // WHEN
        new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            PermissionsBoundary: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':iam::',
                        {
                            Ref: 'AWS::AccountId',
                        },
                        ':policy/cdk-hnb659fds-PermissionsBoundary',
                    ],
                ],
            },
        });
    });
    test('can be applied to a stage', () => {
        // GIVEN
        const app = new core_1.App();
        const stage = new core_1.Stage(app, 'Stage', {
            permissionsBoundary: core_1.PermissionsBoundary.fromName('cdk-${Qualifier}-PermissionsBoundary'),
        });
        const stack = new core_1.Stack(stage);
        // WHEN
        new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            PermissionsBoundary: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':iam::',
                        {
                            Ref: 'AWS::AccountId',
                        },
                        ':policy/cdk-hnb659fds-PermissionsBoundary',
                    ],
                ],
            },
        });
    });
    test('can be applied to a stage, and will replace placeholders', () => {
        // GIVEN
        const app = new core_1.App();
        const stage = new core_1.Stage(app, 'Stage', {
            env: {
                region: 'test-region',
                account: '123456789012',
            },
            permissionsBoundary: core_1.PermissionsBoundary.fromName('cdk-${Qualifier}-PermissionsBoundary-${AWS::AccountId}-${AWS::Region}'),
        });
        const stack = new core_1.Stack(stage);
        // WHEN
        new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            PermissionsBoundary: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':iam::123456789012:policy/cdk-hnb659fds-PermissionsBoundary-123456789012-test-region',
                    ],
                ],
            },
        });
    });
    test('with a custom qualifier', () => {
        // GIVEN
        const app = new core_1.App();
        const stage = new core_1.Stage(app, 'Stage', {
            permissionsBoundary: core_1.PermissionsBoundary.fromName('cdk-${Qualifier}-PermissionsBoundary'),
        });
        const stack = new core_1.Stack(stage, 'MyStack', {
            synthesizer: new core_1.DefaultStackSynthesizer({
                qualifier: 'custom',
            }),
        });
        // WHEN
        new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            PermissionsBoundary: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':iam::',
                        {
                            Ref: 'AWS::AccountId',
                        },
                        ':policy/cdk-custom-PermissionsBoundary',
                    ],
                ],
            },
        });
    });
    test('with a custom permissions boundary', () => {
        // GIVEN
        const app = new core_1.App();
        const stage = new core_1.Stage(app, 'Stage', {
            permissionsBoundary: core_1.PermissionsBoundary.fromName('my-permissions-boundary'),
        });
        const stack = new core_1.Stack(stage);
        // WHEN
        new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            PermissionsBoundary: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':iam::',
                        {
                            Ref: 'AWS::AccountId',
                        },
                        ':policy/my-permissions-boundary',
                    ],
                ],
            },
        });
    });
    test('with a custom permissions boundary and qualifier', () => {
        // GIVEN
        const app = new core_1.App();
        const stage = new core_1.Stage(app, 'Stage', {
            permissionsBoundary: core_1.PermissionsBoundary.fromName('my-${Qualifier}-permissions-boundary'),
        });
        const stack = new core_1.Stack(stage, 'MyStack', {
            synthesizer: new core_1.CliCredentialsStackSynthesizer({
                qualifier: 'custom',
            }),
        });
        // WHEN
        new lib_1.Role(stack, 'Role', {
            assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
            PermissionsBoundary: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':iam::',
                        {
                            Ref: 'AWS::AccountId',
                        },
                        ':policy/my-custom-permissions-boundary',
                    ],
                ],
            },
        });
    });
});
test('managed policy ARNs are deduplicated', () => {
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'my-stack');
    const role = new lib_1.Role(stack, 'MyRole', {
        assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        managedPolicies: [
            lib_1.ManagedPolicy.fromAwsManagedPolicyName('SuperDeveloper'),
            lib_1.ManagedPolicy.fromAwsManagedPolicyName('SuperDeveloper'),
        ],
    });
    role.addManagedPolicy(lib_1.ManagedPolicy.fromAwsManagedPolicyName('SuperDeveloper'));
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Role', {
        ManagedPolicyArns: [
            {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        { Ref: 'AWS::Partition' },
                        ':iam::aws:policy/SuperDeveloper',
                    ],
                ],
            },
        ],
    });
});
describe('role with too large inline policy', () => {
    const N = 100;
    let app;
    let stack;
    let role;
    beforeEach(() => {
        app = new core_1.App();
        stack = new core_1.Stack(app, 'my-stack');
        role = new lib_1.Role(stack, 'MyRole', {
            assumedBy: new lib_1.ServicePrincipal('service.amazonaws.com'),
        });
        for (let i = 0; i < N; i++) {
            role.addToPrincipalPolicy(new lib_1.PolicyStatement({
                actions: ['aws:DoAThing'],
                resources: [`arn:aws:service:us-east-1:111122223333:someResource/SomeSpecificResource${i}`],
            }));
        }
    });
    test('excess gets split off into ManagedPolicies', () => {
        // THEN
        const template = assertions_1.Template.fromStack(stack);
        template.hasResourceProperties('AWS::IAM::ManagedPolicy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([
                    assertions_1.Match.objectLike({
                        Resource: `arn:aws:service:us-east-1:111122223333:someResource/SomeSpecificResource${N - 1}`,
                    }),
                ]),
            },
            Roles: [{ Ref: 'MyRoleF48FFE04' }],
        });
    });
    test('Dependables track the final declaring construct', () => {
        // WHEN
        const result = role.addToPrincipalPolicy(new lib_1.PolicyStatement({
            actions: ['aws:DoAThing'],
            resources: [`arn:aws:service:us-east-1:111122223333:someResource/SomeSpecificResource${N}`],
        }));
        const res = new core_1.CfnResource(stack, 'Depender', {
            type: 'AWS::Some::Resource',
        });
        expect(result.policyDependable).toBeTruthy();
        res.node.addDependency(result.policyDependable);
        // THEN
        const template = assertions_1.Template.fromStack(stack);
        template.hasResource('AWS::Some::Resource', {
            DependsOn: [
                'MyRoleOverflowPolicy13EF5596A',
            ],
        });
    });
});
test('many copies of the same statement do not result in overflow policies', () => {
    const N = 100;
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'my-stack');
    const role = new lib_1.Role(stack, 'MyRole', {
        assumedBy: new lib_1.ServicePrincipal('service.amazonaws.com'),
    });
    for (let i = 0; i < N; i++) {
        role.addToPrincipalPolicy(new lib_1.PolicyStatement({
            actions: ['aws:DoAThing'],
            resources: ['arn:aws:service:us-east-1:111122223333:someResource/SomeSpecificResource'],
        }));
    }
    // THEN
    const template = assertions_1.Template.fromStack(stack);
    template.resourceCountIs('AWS::IAM::ManagedPolicy', 0);
});
test('cross-env role ARNs include path', () => {
    const app = new core_1.App();
    const roleStack = new core_1.Stack(app, 'role-stack', { env: { account: '123456789012', region: 'us-east-1' } });
    const referencerStack = new core_1.Stack(app, 'referencer-stack', { env: { region: 'us-east-2' } });
    const role = new lib_1.Role(roleStack, 'Role', {
        assumedBy: new lib_1.ServicePrincipal('sns.amazonaws.com'),
        path: '/sample/path/',
        roleName: 'sample-name',
    });
    new core_1.CfnResource(referencerStack, 'Referencer', {
        type: 'Custom::RoleReferencer',
        properties: { RoleArn: role.roleArn },
    });
    assertions_1.Template.fromStack(referencerStack).hasResourceProperties('Custom::RoleReferencer', {
        RoleArn: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':iam::123456789012:role/sample/path/sample-name',
                ],
            ],
        },
    });
});
test('fromRoleName should validate role name (only if not a token)', () => {
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'MyStack');
    expect(() => {
        lib_1.Role.fromRoleName(stack, 'Invalid role name', 'arn:aws:iam::***:role/myrole');
    }).toThrow(/does not match the IAM conventions/);
    expect(() => {
        lib_1.Role.fromRoleName(stack, 'Token', '${Token[TOKEN.26]}');
    }).not.toThrow();
});
//# sourceMappingURL=data:application/json;base64,