"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe('IAM user', () => {
    test('default user', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        new lib_1.User(stack, 'MyUser');
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: { MyUserDC45028B: { Type: 'AWS::IAM::User' } },
        });
    });
    test('default user with password', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        new lib_1.User(stack, 'MyUser', {
            password: core_1.SecretValue.unsafePlainText('1234'),
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyUserDC45028B: {
                    Type: 'AWS::IAM::User',
                    Properties: { LoginProfile: { Password: '1234' } },
                },
            },
        });
    });
    test('fails if reset password is required but no password is set', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        expect(() => new lib_1.User(stack, 'MyUser', { passwordResetRequired: true })).toThrow();
    });
    test('create with managed policy', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        new lib_1.User(stack, 'MyUser', {
            managedPolicies: [lib_1.ManagedPolicy.fromAwsManagedPolicyName('asdf')],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::User', {
            ManagedPolicyArns: [
                { 'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':iam::aws:policy/asdf']] },
            ],
        });
    });
    test('can supply permissions boundary managed policy', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const permissionsBoundary = lib_1.ManagedPolicy.fromAwsManagedPolicyName('managed-policy');
        new lib_1.User(stack, 'MyUser', {
            permissionsBoundary,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::User', {
            PermissionsBoundary: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':iam::aws:policy/managed-policy',
                    ],
                ],
            },
        });
    });
    test('user imported by user name has an ARN', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const user = lib_1.User.fromUserName(stack, 'import', 'MyUserName');
        // THEN
        expect(stack.resolve(user.userArn)).toStrictEqual({
            'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':iam::', { Ref: 'AWS::AccountId' }, ':user/MyUserName']],
        });
    });
    test('user imported by user ARN has a name', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const userName = 'MyUserName';
        // WHEN
        const user = lib_1.User.fromUserArn(stack, 'import', `arn:aws:iam::account-id:user/${userName}`);
        // THEN
        expect(stack.resolve(user.userName)).toStrictEqual(userName);
    });
    test('user imported by tokenized user ARN has a name', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const user = lib_1.User.fromUserArn(stack, 'import', core_1.Token.asString({ Ref: 'ARN' }));
        // THEN
        expect(stack.resolve(user.userName)).toStrictEqual({
            'Fn::Select': [1, { 'Fn::Split': [':user/', { Ref: 'ARN' }] }],
        });
    });
    test('user imported by user ARN with path', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const userName = 'MyUserName';
        // WHEN
        const user = lib_1.User.fromUserArn(stack, 'import', `arn:aws:iam::account-id:user/path/${userName}`);
        // THEN
        expect(stack.resolve(user.userName)).toStrictEqual(userName);
    });
    test('user imported by user ARN with path (multiple elements)', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const userName = 'MyUserName';
        // WHEN
        const user = lib_1.User.fromUserArn(stack, 'import', `arn:aws:iam::account-id:user/p/a/t/h/${userName}`);
        // THEN
        expect(stack.resolve(user.userName)).toStrictEqual(userName);
    });
    test('user imported by tokenized user attributes has a name', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const user = lib_1.User.fromUserAttributes(stack, 'import', {
            userArn: core_1.Token.asString({ Ref: 'ARN' }),
        });
        // THEN
        expect(stack.resolve(user.userName)).toStrictEqual({
            'Fn::Select': [1, { 'Fn::Split': [':user/', { Ref: 'ARN' }] }],
        });
    });
    test('user imported by user attributes has a name', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const userName = 'MyUserName';
        // WHEN
        const user = lib_1.User.fromUserAttributes(stack, 'import', {
            userArn: `arn:aws:iam::account-id:user/${userName}`,
        });
        // THEN
        expect(stack.resolve(user.userName)).toStrictEqual(userName);
    });
    test('user imported by user attributes with path has a name', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const userName = 'MyUserName';
        // WHEN
        const user = lib_1.User.fromUserAttributes(stack, 'import', {
            userArn: `arn:aws:iam::account-id:user/path/${userName}`,
        });
        // THEN
        expect(stack.resolve(user.userName)).toStrictEqual(userName);
    });
    test('user imported by user attributes with path (multiple elements) has a name', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const userName = 'MyUserName';
        // WHEN
        const user = lib_1.User.fromUserAttributes(stack, 'import', {
            userArn: `arn:aws:iam::account-id:user/p/a/t/h/${userName}`,
        });
        // THEN
        expect(stack.resolve(user.userName)).toStrictEqual(userName);
    });
    test('add to policy of imported user', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const user = lib_1.User.fromUserName(stack, 'ImportedUser', 'john');
        // WHEN
        user.addToPrincipalPolicy(new lib_1.PolicyStatement({
            actions: ['aws:Use'],
            resources: ['*'],
        }));
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            Users: ['john'],
            PolicyDocument: {
                Statement: [
                    {
                        Action: 'aws:Use',
                        Effect: 'Allow',
                        Resource: '*',
                    },
                ],
                Version: '2012-10-17',
            },
        });
    });
    test('attach policy to imported user', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const user = lib_1.User.fromUserName(stack, 'ImportedUser', 'john');
        // WHEN
        user.attachInlinePolicy(new lib_1.Policy(stack, 'Policy', {
            statements: [
                new lib_1.PolicyStatement({
                    actions: ['aws:Use'],
                    resources: ['*'],
                }),
            ],
        }));
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            Users: ['john'],
            PolicyDocument: {
                Statement: [
                    {
                        Action: 'aws:Use',
                        Effect: 'Allow',
                        Resource: '*',
                    },
                ],
                Version: '2012-10-17',
            },
        });
    });
    test('addToGroup for imported user', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const user = lib_1.User.fromUserName(stack, 'ImportedUser', 'john');
        const group = new lib_1.Group(stack, 'Group');
        const otherGroup = new lib_1.Group(stack, 'OtherGroup');
        // WHEN
        user.addToGroup(group);
        otherGroup.addUser(user);
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::UserToGroupAddition', {
            GroupName: {
                Ref: 'GroupC77FDACD',
            },
            Users: [
                'john',
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::UserToGroupAddition', {
            GroupName: {
                Ref: 'OtherGroup85E5C653',
            },
            Users: [
                'john',
            ],
        });
    });
});
test('cross-env user ARNs include path', () => {
    const app = new core_1.App();
    const userStack = new core_1.Stack(app, 'user-stack', { env: { account: '123456789012', region: 'us-east-1' } });
    const referencerStack = new core_1.Stack(app, 'referencer-stack', { env: { region: 'us-east-2' } });
    const user = new lib_1.User(userStack, 'User', {
        path: '/sample/path/',
        userName: 'sample-name',
    });
    new core_1.CfnResource(referencerStack, 'Referencer', {
        type: 'Custom::UserReferencer',
        properties: { UserArn: user.userArn },
    });
    assertions_1.Template.fromStack(referencerStack).hasResourceProperties('Custom::UserReferencer', {
        UserArn: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':iam::123456789012:user/sample/path/sample-name',
                ],
            ],
        },
    });
});
//# sourceMappingURL=data:application/json;base64,