"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnMonitor = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk = require("../../core");
const cfn_parse = require("../../core/lib/helpers-internal");
/**
 * Determine whether the given properties match those of a `CfnMonitorProps`
 *
 * @param properties - the TypeScript properties of a `CfnMonitorProps`
 *
 * @returns the result of the validation.
 */
function CfnMonitorPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('maxCityNetworksToMonitor', cdk.validateNumber)(properties.maxCityNetworksToMonitor));
    errors.collect(cdk.propertyValidator('monitorName', cdk.requiredValidator)(properties.monitorName));
    errors.collect(cdk.propertyValidator('monitorName', cdk.validateString)(properties.monitorName));
    errors.collect(cdk.propertyValidator('resources', cdk.listValidator(cdk.validateString))(properties.resources));
    errors.collect(cdk.propertyValidator('resourcesToAdd', cdk.listValidator(cdk.validateString))(properties.resourcesToAdd));
    errors.collect(cdk.propertyValidator('resourcesToRemove', cdk.listValidator(cdk.validateString))(properties.resourcesToRemove));
    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));
    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));
    return errors.wrap('supplied properties not correct for "CfnMonitorProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::InternetMonitor::Monitor` resource
 *
 * @param properties - the TypeScript properties of a `CfnMonitorProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::InternetMonitor::Monitor` resource.
 */
// @ts-ignore TS6133
function cfnMonitorPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnMonitorPropsValidator(properties).assertSuccess();
    return {
        MonitorName: cdk.stringToCloudFormation(properties.monitorName),
        MaxCityNetworksToMonitor: cdk.numberToCloudFormation(properties.maxCityNetworksToMonitor),
        Resources: cdk.listMapper(cdk.stringToCloudFormation)(properties.resources),
        ResourcesToAdd: cdk.listMapper(cdk.stringToCloudFormation)(properties.resourcesToAdd),
        ResourcesToRemove: cdk.listMapper(cdk.stringToCloudFormation)(properties.resourcesToRemove),
        Status: cdk.stringToCloudFormation(properties.status),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    };
}
// @ts-ignore TS6133
function CfnMonitorPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('monitorName', 'MonitorName', cfn_parse.FromCloudFormation.getString(properties.MonitorName));
    ret.addPropertyResult('maxCityNetworksToMonitor', 'MaxCityNetworksToMonitor', properties.MaxCityNetworksToMonitor != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxCityNetworksToMonitor) : undefined);
    ret.addPropertyResult('resources', 'Resources', properties.Resources != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Resources) : undefined);
    ret.addPropertyResult('resourcesToAdd', 'ResourcesToAdd', properties.ResourcesToAdd != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ResourcesToAdd) : undefined);
    ret.addPropertyResult('resourcesToRemove', 'ResourcesToRemove', properties.ResourcesToRemove != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ResourcesToRemove) : undefined);
    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::InternetMonitor::Monitor`
 *
 * The `AWS::InternetMonitor::Monitor` resource is an Internet Monitor resource type that contains information about how you create a monitor in Amazon CloudWatch Internet Monitor. A monitor in Internet Monitor provides visibility into performance and availability between your applications hosted on AWS and your end users, using a traffic profile that it creates based on the application resources that you add: Virtual Private Clouds (VPCs), Amazon CloudFront distributions, or WorkSpaces directories.
 *
 * Internet Monitor also alerts you to internet issues that impact your application in the city-networks (geographies and networks) where your end users use it. With Internet Monitor, you can quickly pinpoint the locations and providers that are affected, so that you can address the issue.
 *
 * For more information, see [Using Amazon CloudWatch Internet Monitor](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-InternetMonitor.html) in the *Amazon CloudWatch User Guide* .
 *
 * @cloudformationResource AWS::InternetMonitor::Monitor
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-internetmonitor-monitor.html
 */
class CfnMonitor extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnMonitorPropsFromCloudFormation(resourceProperties);
        const ret = new CfnMonitor(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::InternetMonitor::Monitor`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnMonitor.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_internetmonitor_CfnMonitorProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnMonitor);
            }
            throw error;
        }
        cdk.requireProperty(props, 'monitorName', this);
        this.attrCreatedAt = cdk.Token.asString(this.getAtt('CreatedAt', cdk.ResolutionTypeHint.STRING));
        this.attrModifiedAt = cdk.Token.asString(this.getAtt('ModifiedAt', cdk.ResolutionTypeHint.STRING));
        this.attrMonitorArn = cdk.Token.asString(this.getAtt('MonitorArn', cdk.ResolutionTypeHint.STRING));
        this.attrProcessingStatus = cdk.Token.asString(this.getAtt('ProcessingStatus', cdk.ResolutionTypeHint.STRING));
        this.attrProcessingStatusInfo = cdk.Token.asString(this.getAtt('ProcessingStatusInfo', cdk.ResolutionTypeHint.STRING));
        this.monitorName = props.monitorName;
        this.maxCityNetworksToMonitor = props.maxCityNetworksToMonitor;
        this.resources = props.resources;
        this.resourcesToAdd = props.resourcesToAdd;
        this.resourcesToRemove = props.resourcesToRemove;
        this.status = props.status;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::InternetMonitor::Monitor", props.tags, { tagPropertyName: 'tags' });
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnMonitor.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            monitorName: this.monitorName,
            maxCityNetworksToMonitor: this.maxCityNetworksToMonitor,
            resources: this.resources,
            resourcesToAdd: this.resourcesToAdd,
            resourcesToRemove: this.resourcesToRemove,
            status: this.status,
            tags: this.tags.renderTags(),
        };
    }
    renderProperties(props) {
        return cfnMonitorPropsToCloudFormation(props);
    }
}
_a = JSII_RTTI_SYMBOL_1;
CfnMonitor[_a] = { fqn: "aws-cdk-lib.aws_internetmonitor.CfnMonitor", version: "2.73.0" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnMonitor.CFN_RESOURCE_TYPE_NAME = "AWS::InternetMonitor::Monitor";
exports.CfnMonitor = CfnMonitor;
//# sourceMappingURL=data:application/json;base64,