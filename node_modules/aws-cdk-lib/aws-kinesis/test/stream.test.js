"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const iam = require("../../aws-iam");
const kms = require("../../aws-kms");
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe('Kinesis data streams', () => {
    test('default stream', () => {
        const stack = new core_1.Stack();
        new lib_1.Stream(stack, 'MyStream');
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyStream5C050E93: {
                    Type: 'AWS::Kinesis::Stream',
                    Properties: {
                        ShardCount: 1,
                        StreamModeDetails: {
                            StreamMode: lib_1.StreamMode.PROVISIONED,
                        },
                        RetentionPeriodHours: 24,
                        StreamEncryption: {
                            'Fn::If': [
                                'AwsCdkKinesisEncryptedStreamsUnsupportedRegions',
                                {
                                    Ref: 'AWS::NoValue',
                                },
                                {
                                    EncryptionType: 'KMS',
                                    KeyId: 'alias/aws/kinesis',
                                },
                            ],
                        },
                    },
                },
            },
            Conditions: {
                AwsCdkKinesisEncryptedStreamsUnsupportedRegions: {
                    'Fn::Or': [
                        {
                            'Fn::Equals': [
                                {
                                    Ref: 'AWS::Region',
                                },
                                'cn-north-1',
                            ],
                        },
                        {
                            'Fn::Equals': [
                                {
                                    Ref: 'AWS::Region',
                                },
                                'cn-northwest-1',
                            ],
                        },
                    ],
                },
            },
        });
    }),
        test('multiple default streams only have one condition for encryption', () => {
            const stack = new core_1.Stack();
            new lib_1.Stream(stack, 'MyStream');
            new lib_1.Stream(stack, 'MyOtherStream');
            assertions_1.Template.fromStack(stack).templateMatches({
                Resources: {
                    MyStream5C050E93: {
                        Type: 'AWS::Kinesis::Stream',
                        Properties: {
                            ShardCount: 1,
                            StreamModeDetails: {
                                StreamMode: lib_1.StreamMode.PROVISIONED,
                            },
                            RetentionPeriodHours: 24,
                            StreamEncryption: {
                                'Fn::If': [
                                    'AwsCdkKinesisEncryptedStreamsUnsupportedRegions',
                                    {
                                        Ref: 'AWS::NoValue',
                                    },
                                    {
                                        EncryptionType: 'KMS',
                                        KeyId: 'alias/aws/kinesis',
                                    },
                                ],
                            },
                        },
                    },
                    MyOtherStream86FCC9CE: {
                        Type: 'AWS::Kinesis::Stream',
                        Properties: {
                            ShardCount: 1,
                            StreamModeDetails: {
                                StreamMode: lib_1.StreamMode.PROVISIONED,
                            },
                            RetentionPeriodHours: 24,
                            StreamEncryption: {
                                'Fn::If': [
                                    'AwsCdkKinesisEncryptedStreamsUnsupportedRegions',
                                    {
                                        Ref: 'AWS::NoValue',
                                    },
                                    {
                                        EncryptionType: 'KMS',
                                        KeyId: 'alias/aws/kinesis',
                                    },
                                ],
                            },
                        },
                    },
                },
                Conditions: {
                    AwsCdkKinesisEncryptedStreamsUnsupportedRegions: {
                        'Fn::Or': [
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-north-1',
                                ],
                            },
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-northwest-1',
                                ],
                            },
                        ],
                    },
                },
            });
        }),
        test('stream from attributes', () => {
            const stack = new core_1.Stack();
            const s = lib_1.Stream.fromStreamAttributes(stack, 'MyStream', {
                streamArn: 'arn:aws:kinesis:region:account-id:stream/stream-name',
            });
            expect(s.streamArn).toEqual('arn:aws:kinesis:region:account-id:stream/stream-name');
        }),
        test('uses explicit shard count', () => {
            const stack = new core_1.Stack();
            new lib_1.Stream(stack, 'MyStream', {
                shardCount: 2,
            });
            assertions_1.Template.fromStack(stack).templateMatches({
                Resources: {
                    MyStream5C050E93: {
                        Type: 'AWS::Kinesis::Stream',
                        Properties: {
                            ShardCount: 2,
                            StreamModeDetails: {
                                StreamMode: lib_1.StreamMode.PROVISIONED,
                            },
                            RetentionPeriodHours: 24,
                            StreamEncryption: {
                                'Fn::If': [
                                    'AwsCdkKinesisEncryptedStreamsUnsupportedRegions',
                                    {
                                        Ref: 'AWS::NoValue',
                                    },
                                    {
                                        EncryptionType: 'KMS',
                                        KeyId: 'alias/aws/kinesis',
                                    },
                                ],
                            },
                        },
                    },
                },
                Conditions: {
                    AwsCdkKinesisEncryptedStreamsUnsupportedRegions: {
                        'Fn::Or': [
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-north-1',
                                ],
                            },
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-northwest-1',
                                ],
                            },
                        ],
                    },
                },
            });
        }),
        test('uses explicit retention period', () => {
            const stack = new core_1.Stack();
            new lib_1.Stream(stack, 'MyStream', {
                retentionPeriod: core_1.Duration.hours(168),
            });
            assertions_1.Template.fromStack(stack).templateMatches({
                Resources: {
                    MyStream5C050E93: {
                        Type: 'AWS::Kinesis::Stream',
                        Properties: {
                            ShardCount: 1,
                            StreamModeDetails: {
                                StreamMode: lib_1.StreamMode.PROVISIONED,
                            },
                            RetentionPeriodHours: 168,
                            StreamEncryption: {
                                'Fn::If': [
                                    'AwsCdkKinesisEncryptedStreamsUnsupportedRegions',
                                    {
                                        Ref: 'AWS::NoValue',
                                    },
                                    {
                                        EncryptionType: 'KMS',
                                        KeyId: 'alias/aws/kinesis',
                                    },
                                ],
                            },
                        },
                    },
                },
                Conditions: {
                    AwsCdkKinesisEncryptedStreamsUnsupportedRegions: {
                        'Fn::Or': [
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-north-1',
                                ],
                            },
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-northwest-1',
                                ],
                            },
                        ],
                    },
                },
            });
        }),
        test('retention period must be between 24 and 8760 hours', () => {
            expect(() => {
                new lib_1.Stream(new core_1.Stack(), 'MyStream', {
                    retentionPeriod: core_1.Duration.hours(8761),
                });
            }).toThrow(/retentionPeriod must be between 24 and 8760 hours. Received 8761/);
            expect(() => {
                new lib_1.Stream(new core_1.Stack(), 'MyStream', {
                    retentionPeriod: core_1.Duration.hours(23),
                });
            }).toThrow(/retentionPeriod must be between 24 and 8760 hours. Received 23/);
        }),
        test('uses Kinesis master key if MANAGED encryption type is provided', () => {
            // GIVEN
            const stack = new core_1.Stack();
            // WHEN
            new lib_1.Stream(stack, 'MyStream', {
                encryption: lib_1.StreamEncryption.MANAGED,
            });
            // THEN
            assertions_1.Template.fromStack(stack).templateMatches({
                Resources: {
                    MyStream5C050E93: {
                        Type: 'AWS::Kinesis::Stream',
                        Properties: {
                            ShardCount: 1,
                            StreamModeDetails: {
                                StreamMode: lib_1.StreamMode.PROVISIONED,
                            },
                            RetentionPeriodHours: 24,
                            StreamEncryption: {
                                EncryptionType: 'KMS',
                                KeyId: 'alias/aws/kinesis',
                            },
                        },
                    },
                },
            });
        }),
        test('encryption key cannot be supplied with UNENCRYPTED as the encryption type', () => {
            const stack = new core_1.Stack();
            const key = new kms.Key(stack, 'myKey');
            expect(() => {
                new lib_1.Stream(stack, 'MyStream', {
                    encryptionKey: key,
                    encryption: lib_1.StreamEncryption.UNENCRYPTED,
                });
            }).toThrow(/encryptionKey is specified, so 'encryption' must be set to KMS/);
        }),
        test('if a KMS key is supplied, infers KMS as the encryption type', () => {
            // GIVEN
            const stack = new core_1.Stack();
            const key = new kms.Key(stack, 'myKey');
            // WHEN
            new lib_1.Stream(stack, 'myStream', {
                encryptionKey: key,
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Kinesis::Stream', {
                ShardCount: 1,
                StreamModeDetails: {
                    StreamMode: lib_1.StreamMode.PROVISIONED,
                },
                RetentionPeriodHours: 24,
                StreamEncryption: {
                    EncryptionType: 'KMS',
                    KeyId: {
                        'Fn::GetAtt': ['myKey441A1E73', 'Arn'],
                    },
                },
            });
        }),
        test('auto-creates KMS key if encryption type is KMS but no key is provided', () => {
            const stack = new core_1.Stack();
            const stream = new lib_1.Stream(stack, 'MyStream', {
                encryption: lib_1.StreamEncryption.KMS,
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::KMS::Key', {
                Description: 'Created by Default/MyStream',
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Kinesis::Stream', {
                StreamEncryption: {
                    EncryptionType: 'KMS',
                    KeyId: stack.resolve(stream.encryptionKey?.keyArn),
                },
            });
        }),
        test('uses explicit KMS key if encryption type is KMS and a key is provided', () => {
            const stack = new core_1.Stack();
            const explicitKey = new kms.Key(stack, 'ExplicitKey', {
                description: 'Explicit Key',
            });
            new lib_1.Stream(stack, 'MyStream', {
                encryption: lib_1.StreamEncryption.KMS,
                encryptionKey: explicitKey,
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::KMS::Key', {
                Description: 'Explicit Key',
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Kinesis::Stream', {
                ShardCount: 1,
                StreamModeDetails: {
                    StreamMode: lib_1.StreamMode.PROVISIONED,
                },
                RetentionPeriodHours: 24,
                StreamEncryption: {
                    EncryptionType: 'KMS',
                    KeyId: stack.resolve(explicitKey.keyArn),
                },
            });
        }),
        test('uses explicit provisioned streamMode', () => {
            const stack = new core_1.Stack();
            new lib_1.Stream(stack, 'MyStream', {
                streamMode: lib_1.StreamMode.PROVISIONED,
            });
            assertions_1.Template.fromStack(stack).templateMatches({
                Resources: {
                    MyStream5C050E93: {
                        Type: 'AWS::Kinesis::Stream',
                        Properties: {
                            RetentionPeriodHours: 24,
                            ShardCount: 1,
                            StreamModeDetails: {
                                StreamMode: lib_1.StreamMode.PROVISIONED,
                            },
                            StreamEncryption: {
                                'Fn::If': [
                                    'AwsCdkKinesisEncryptedStreamsUnsupportedRegions',
                                    {
                                        Ref: 'AWS::NoValue',
                                    },
                                    {
                                        EncryptionType: 'KMS',
                                        KeyId: 'alias/aws/kinesis',
                                    },
                                ],
                            },
                        },
                    },
                },
                Conditions: {
                    AwsCdkKinesisEncryptedStreamsUnsupportedRegions: {
                        'Fn::Or': [
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-north-1',
                                ],
                            },
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-northwest-1',
                                ],
                            },
                        ],
                    },
                },
            });
        });
    test('uses explicit on-demand streamMode', () => {
        const stack = new core_1.Stack();
        new lib_1.Stream(stack, 'MyStream', {
            streamMode: lib_1.StreamMode.ON_DEMAND,
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyStream5C050E93: {
                    Type: 'AWS::Kinesis::Stream',
                    Properties: {
                        RetentionPeriodHours: 24,
                        StreamModeDetails: {
                            StreamMode: lib_1.StreamMode.ON_DEMAND,
                        },
                        StreamEncryption: {
                            'Fn::If': [
                                'AwsCdkKinesisEncryptedStreamsUnsupportedRegions',
                                {
                                    Ref: 'AWS::NoValue',
                                },
                                {
                                    EncryptionType: 'KMS',
                                    KeyId: 'alias/aws/kinesis',
                                },
                            ],
                        },
                    },
                },
            },
            Conditions: {
                AwsCdkKinesisEncryptedStreamsUnsupportedRegions: {
                    'Fn::Or': [
                        {
                            'Fn::Equals': [
                                {
                                    Ref: 'AWS::Region',
                                },
                                'cn-north-1',
                            ],
                        },
                        {
                            'Fn::Equals': [
                                {
                                    Ref: 'AWS::Region',
                                },
                                'cn-northwest-1',
                            ],
                        },
                    ],
                },
            },
        });
    });
    test('throws when using shardCount with on-demand streamMode', () => {
        const stack = new core_1.Stack();
        expect(() => {
            new lib_1.Stream(stack, 'MyStream', {
                shardCount: 2,
                streamMode: lib_1.StreamMode.ON_DEMAND,
            });
        }).toThrow(`streamMode must be set to ${lib_1.StreamMode.PROVISIONED} (default) when specifying shardCount`);
    });
    test('grantRead creates and attaches a policy with read only access to the principal', () => {
        const stack = new core_1.Stack();
        const stream = new lib_1.Stream(stack, 'MyStream', {
            encryption: lib_1.StreamEncryption.KMS,
        });
        const user = new iam.User(stack, 'MyUser');
        stream.grantRead(user);
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([{
                        Action: 'kms:Decrypt',
                        Effect: 'Allow',
                        Resource: stack.resolve(stream.encryptionKey?.keyArn),
                    }]),
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Kinesis::Stream', {
            StreamEncryption: {
                KeyId: stack.resolve(stream.encryptionKey?.keyArn),
            },
        });
    });
    test('grantReadWrite creates and attaches a policy to the principal', () => {
        const stack = new core_1.Stack();
        const stream = new lib_1.Stream(stack, 'MyStream', {
            encryption: lib_1.StreamEncryption.KMS,
        });
        const user = new iam.User(stack, 'MyUser');
        stream.grantReadWrite(user);
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([{
                        Action: ['kms:Decrypt', 'kms:Encrypt', 'kms:ReEncrypt*', 'kms:GenerateDataKey*'],
                        Effect: 'Allow',
                        Resource: stack.resolve(stream.encryptionKey?.keyArn),
                    }]),
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Kinesis::Stream', {
            StreamEncryption: {
                KeyId: stack.resolve(stream.encryptionKey?.keyArn),
            },
        });
    });
    test('grantRead creates and associates a policy with read only access to Stream', () => {
        const stack = new core_1.Stack();
        const stream = new lib_1.Stream(stack, 'MyStream');
        const user = new iam.User(stack, 'MyUser');
        stream.grantRead(user);
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyStream5C050E93: {
                    Type: 'AWS::Kinesis::Stream',
                    Properties: {
                        ShardCount: 1,
                        StreamModeDetails: {
                            StreamMode: lib_1.StreamMode.PROVISIONED,
                        },
                        RetentionPeriodHours: 24,
                        StreamEncryption: {
                            'Fn::If': [
                                'AwsCdkKinesisEncryptedStreamsUnsupportedRegions',
                                {
                                    Ref: 'AWS::NoValue',
                                },
                                {
                                    EncryptionType: 'KMS',
                                    KeyId: 'alias/aws/kinesis',
                                },
                            ],
                        },
                    },
                },
                MyUserDC45028B: {
                    Type: 'AWS::IAM::User',
                },
                MyUserDefaultPolicy7B897426: {
                    Type: 'AWS::IAM::Policy',
                    Properties: {
                        PolicyDocument: {
                            Statement: [
                                {
                                    Action: [
                                        'kinesis:DescribeStreamSummary',
                                        'kinesis:GetRecords',
                                        'kinesis:GetShardIterator',
                                        'kinesis:ListShards',
                                        'kinesis:SubscribeToShard',
                                        'kinesis:DescribeStream',
                                        'kinesis:ListStreams',
                                        'kinesis:DescribeStreamConsumer',
                                    ],
                                    Effect: 'Allow',
                                    Resource: {
                                        'Fn::GetAtt': ['MyStream5C050E93', 'Arn'],
                                    },
                                },
                            ],
                            Version: '2012-10-17',
                        },
                        PolicyName: 'MyUserDefaultPolicy7B897426',
                        Users: [
                            {
                                Ref: 'MyUserDC45028B',
                            },
                        ],
                    },
                },
            },
            Conditions: {
                AwsCdkKinesisEncryptedStreamsUnsupportedRegions: {
                    'Fn::Or': [
                        {
                            'Fn::Equals': [
                                {
                                    Ref: 'AWS::Region',
                                },
                                'cn-north-1',
                            ],
                        },
                        {
                            'Fn::Equals': [
                                {
                                    Ref: 'AWS::Region',
                                },
                                'cn-northwest-1',
                            ],
                        },
                    ],
                },
            },
        });
    }),
        test('grantWrite creates and attaches a policy with write only access to Stream', () => {
            const stack = new core_1.Stack();
            const stream = new lib_1.Stream(stack, 'MyStream');
            const user = new iam.User(stack, 'MyUser');
            stream.grantWrite(user);
            assertions_1.Template.fromStack(stack).templateMatches({
                Resources: {
                    MyStream5C050E93: {
                        Type: 'AWS::Kinesis::Stream',
                        Properties: {
                            ShardCount: 1,
                            StreamModeDetails: {
                                StreamMode: lib_1.StreamMode.PROVISIONED,
                            },
                            RetentionPeriodHours: 24,
                            StreamEncryption: {
                                'Fn::If': [
                                    'AwsCdkKinesisEncryptedStreamsUnsupportedRegions',
                                    {
                                        Ref: 'AWS::NoValue',
                                    },
                                    {
                                        EncryptionType: 'KMS',
                                        KeyId: 'alias/aws/kinesis',
                                    },
                                ],
                            },
                        },
                    },
                    MyUserDC45028B: {
                        Type: 'AWS::IAM::User',
                    },
                    MyUserDefaultPolicy7B897426: {
                        Type: 'AWS::IAM::Policy',
                        Properties: {
                            PolicyDocument: {
                                Statement: [
                                    {
                                        Action: ['kinesis:ListShards', 'kinesis:PutRecord', 'kinesis:PutRecords'],
                                        Effect: 'Allow',
                                        Resource: {
                                            'Fn::GetAtt': ['MyStream5C050E93', 'Arn'],
                                        },
                                    },
                                ],
                                Version: '2012-10-17',
                            },
                            PolicyName: 'MyUserDefaultPolicy7B897426',
                            Users: [
                                {
                                    Ref: 'MyUserDC45028B',
                                },
                            ],
                        },
                    },
                },
                Conditions: {
                    AwsCdkKinesisEncryptedStreamsUnsupportedRegions: {
                        'Fn::Or': [
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-north-1',
                                ],
                            },
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-northwest-1',
                                ],
                            },
                        ],
                    },
                },
            });
        }),
        test('grantReadWrite creates and attaches a policy with write only access to Stream', () => {
            const stack = new core_1.Stack();
            const stream = new lib_1.Stream(stack, 'MyStream');
            const user = new iam.User(stack, 'MyUser');
            stream.grantReadWrite(user);
            assertions_1.Template.fromStack(stack).templateMatches({
                Resources: {
                    MyStream5C050E93: {
                        Type: 'AWS::Kinesis::Stream',
                        Properties: {
                            ShardCount: 1,
                            StreamModeDetails: {
                                StreamMode: lib_1.StreamMode.PROVISIONED,
                            },
                            RetentionPeriodHours: 24,
                            StreamEncryption: {
                                'Fn::If': [
                                    'AwsCdkKinesisEncryptedStreamsUnsupportedRegions',
                                    {
                                        Ref: 'AWS::NoValue',
                                    },
                                    {
                                        EncryptionType: 'KMS',
                                        KeyId: 'alias/aws/kinesis',
                                    },
                                ],
                            },
                        },
                    },
                    MyUserDC45028B: {
                        Type: 'AWS::IAM::User',
                    },
                    MyUserDefaultPolicy7B897426: {
                        Type: 'AWS::IAM::Policy',
                        Properties: {
                            PolicyDocument: {
                                Statement: [
                                    {
                                        Action: [
                                            'kinesis:DescribeStreamSummary',
                                            'kinesis:GetRecords',
                                            'kinesis:GetShardIterator',
                                            'kinesis:ListShards',
                                            'kinesis:SubscribeToShard',
                                            'kinesis:DescribeStream',
                                            'kinesis:ListStreams',
                                            'kinesis:DescribeStreamConsumer',
                                            'kinesis:PutRecord',
                                            'kinesis:PutRecords',
                                        ],
                                        Effect: 'Allow',
                                        Resource: {
                                            'Fn::GetAtt': ['MyStream5C050E93', 'Arn'],
                                        },
                                    },
                                ],
                                Version: '2012-10-17',
                            },
                            PolicyName: 'MyUserDefaultPolicy7B897426',
                            Users: [
                                {
                                    Ref: 'MyUserDC45028B',
                                },
                            ],
                        },
                    },
                },
                Conditions: {
                    AwsCdkKinesisEncryptedStreamsUnsupportedRegions: {
                        'Fn::Or': [
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-north-1',
                                ],
                            },
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-northwest-1',
                                ],
                            },
                        ],
                    },
                },
            });
        }),
        test('grant creates and attaches a policy to Stream which includes supplied permissions', () => {
            const stack = new core_1.Stack();
            const stream = new lib_1.Stream(stack, 'MyStream');
            const user = new iam.User(stack, 'MyUser');
            stream.grant(user, 'kinesis:DescribeStream');
            assertions_1.Template.fromStack(stack).templateMatches({
                Resources: {
                    MyStream5C050E93: {
                        Type: 'AWS::Kinesis::Stream',
                        Properties: {
                            ShardCount: 1,
                            StreamModeDetails: {
                                StreamMode: lib_1.StreamMode.PROVISIONED,
                            },
                            RetentionPeriodHours: 24,
                            StreamEncryption: {
                                'Fn::If': [
                                    'AwsCdkKinesisEncryptedStreamsUnsupportedRegions',
                                    {
                                        Ref: 'AWS::NoValue',
                                    },
                                    {
                                        EncryptionType: 'KMS',
                                        KeyId: 'alias/aws/kinesis',
                                    },
                                ],
                            },
                        },
                    },
                    MyUserDC45028B: {
                        Type: 'AWS::IAM::User',
                    },
                    MyUserDefaultPolicy7B897426: {
                        Type: 'AWS::IAM::Policy',
                        Properties: {
                            PolicyDocument: {
                                Statement: [
                                    {
                                        Action: 'kinesis:DescribeStream',
                                        Effect: 'Allow',
                                        Resource: {
                                            'Fn::GetAtt': ['MyStream5C050E93', 'Arn'],
                                        },
                                    },
                                ],
                                Version: '2012-10-17',
                            },
                            PolicyName: 'MyUserDefaultPolicy7B897426',
                            Users: [
                                {
                                    Ref: 'MyUserDC45028B',
                                },
                            ],
                        },
                    },
                },
                Conditions: {
                    AwsCdkKinesisEncryptedStreamsUnsupportedRegions: {
                        'Fn::Or': [
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-north-1',
                                ],
                            },
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-northwest-1',
                                ],
                            },
                        ],
                    },
                },
            });
        }),
        test('cross-stack permissions - no encryption', () => {
            const app = new core_1.App();
            const stackA = new core_1.Stack(app, 'stackA');
            const streamFromStackA = new lib_1.Stream(stackA, 'MyStream');
            const stackB = new core_1.Stack(app, 'stackB');
            const user = new iam.User(stackB, 'UserWhoNeedsAccess');
            streamFromStackA.grantRead(user);
            assertions_1.Template.fromStack(stackA).templateMatches({
                Resources: {
                    MyStream5C050E93: {
                        Type: 'AWS::Kinesis::Stream',
                        Properties: {
                            ShardCount: 1,
                            StreamModeDetails: {
                                StreamMode: lib_1.StreamMode.PROVISIONED,
                            },
                            RetentionPeriodHours: 24,
                            StreamEncryption: {
                                'Fn::If': [
                                    'AwsCdkKinesisEncryptedStreamsUnsupportedRegions',
                                    {
                                        Ref: 'AWS::NoValue',
                                    },
                                    {
                                        EncryptionType: 'KMS',
                                        KeyId: 'alias/aws/kinesis',
                                    },
                                ],
                            },
                        },
                    },
                },
                Conditions: {
                    AwsCdkKinesisEncryptedStreamsUnsupportedRegions: {
                        'Fn::Or': [
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-north-1',
                                ],
                            },
                            {
                                'Fn::Equals': [
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    'cn-northwest-1',
                                ],
                            },
                        ],
                    },
                },
                Outputs: {
                    ExportsOutputFnGetAttMyStream5C050E93Arn4ABF30CD: {
                        Value: {
                            'Fn::GetAtt': ['MyStream5C050E93', 'Arn'],
                        },
                        Export: {
                            Name: 'stackA:ExportsOutputFnGetAttMyStream5C050E93Arn4ABF30CD',
                        },
                    },
                },
            });
        }),
        test('cross stack permissions - with encryption', () => {
            const app = new core_1.App();
            const stackA = new core_1.Stack(app, 'stackA');
            const streamFromStackA = new lib_1.Stream(stackA, 'MyStream', {
                encryption: lib_1.StreamEncryption.KMS,
            });
            const stackB = new core_1.Stack(app, 'stackB');
            const user = new iam.User(stackB, 'UserWhoNeedsAccess');
            streamFromStackA.grantRead(user);
            assertions_1.Template.fromStack(stackB).hasResourceProperties('AWS::IAM::Policy', {
                PolicyDocument: {
                    Statement: assertions_1.Match.arrayWith([{
                            Action: 'kms:Decrypt',
                            Effect: 'Allow',
                            Resource: {
                                'Fn::ImportValue': 'stackA:ExportsOutputFnGetAttMyStreamKey76F3300EArn190947B4',
                            },
                        }]),
                },
            });
        });
    test('accepts if retentionPeriodHours is a Token', () => {
        const stack = new core_1.Stack();
        const parameter = new core_1.CfnParameter(stack, 'my-retention-period', {
            type: 'Number',
            default: 48,
            minValue: 24,
            maxValue: 8760,
        });
        new lib_1.Stream(stack, 'MyStream', {
            retentionPeriod: core_1.Duration.hours(parameter.valueAsNumber),
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Parameters: {
                myretentionperiod: {
                    Type: 'Number',
                    Default: 48,
                    MaxValue: 8760,
                    MinValue: 24,
                },
            },
            Resources: {
                MyStream5C050E93: {
                    Type: 'AWS::Kinesis::Stream',
                    Properties: {
                        ShardCount: 1,
                        StreamModeDetails: {
                            StreamMode: lib_1.StreamMode.PROVISIONED,
                        },
                        RetentionPeriodHours: {
                            Ref: 'myretentionperiod',
                        },
                        StreamEncryption: {
                            'Fn::If': [
                                'AwsCdkKinesisEncryptedStreamsUnsupportedRegions',
                                {
                                    Ref: 'AWS::NoValue',
                                },
                                {
                                    EncryptionType: 'KMS',
                                    KeyId: 'alias/aws/kinesis',
                                },
                            ],
                        },
                    },
                },
            },
            Conditions: {
                AwsCdkKinesisEncryptedStreamsUnsupportedRegions: {
                    'Fn::Or': [
                        {
                            'Fn::Equals': [
                                {
                                    Ref: 'AWS::Region',
                                },
                                'cn-north-1',
                            ],
                        },
                        {
                            'Fn::Equals': [
                                {
                                    Ref: 'AWS::Region',
                                },
                                'cn-northwest-1',
                            ],
                        },
                    ],
                },
            },
        });
    });
    test('basic stream-level metrics (StreamName dimension only)', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const fiveMinutes = {
            amount: 5,
            unit: {
                label: 'minutes',
                isoLabel: 'M',
                inMillis: 60000,
            },
        };
        // WHEN
        const stream = new lib_1.Stream(stack, 'MyStream');
        // THEN
        // should resolve the basic metrics (source https://docs.aws.amazon.com/streams/latest/dev/monitoring-with-cloudwatch.html#kinesis-metrics-stream)
        expect(stack.resolve(stream.metricGetRecordsBytes())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'GetRecords.Bytes',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricGetRecordsIteratorAgeMilliseconds())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'GetRecords.IteratorAgeMilliseconds',
            period: fiveMinutes,
            statistic: 'Maximum',
        });
        expect(stack.resolve(stream.metricGetRecordsLatency())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'GetRecords.Latency',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricGetRecords())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'GetRecords.Records',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricGetRecordsSuccess())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'GetRecords.Success',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricIncomingBytes())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'IncomingBytes',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricIncomingRecords())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'IncomingRecords',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricPutRecordsBytes())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecords.Bytes',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricPutRecordsLatency())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecords.Latency',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricPutRecordsSuccess())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecords.Success',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricPutRecordsTotalRecords())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecords.TotalRecords',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricPutRecordsSuccessfulRecords())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecords.SuccessfulRecords',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricPutRecordsFailedRecords())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecords.FailedRecords',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricPutRecordsThrottledRecords())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecords.ThrottledRecords',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricReadProvisionedThroughputExceeded())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'ReadProvisionedThroughputExceeded',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricWriteProvisionedThroughputExceeded())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'WriteProvisionedThroughputExceeded',
            period: fiveMinutes,
            statistic: 'Average',
        });
    });
    test('allow to overide metric options', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const fiveMinutes = {
            amount: 5,
            unit: {
                label: 'minutes',
                isoLabel: 'M',
                inMillis: 60000,
            },
        };
        // WHEN
        const stream = new lib_1.Stream(stack, 'MyStream');
        // THEN
        expect(stack.resolve(stream.metricGetRecordsBytes())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'GetRecords.Bytes',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricGetRecordsBytes({
            period: core_1.Duration.minutes(1),
            statistic: 'Maximum',
        }))).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'GetRecords.Bytes',
            period: { ...fiveMinutes, amount: 1 },
            statistic: 'Maximum',
        });
        expect(stack.resolve(stream.metricIncomingBytes())).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'IncomingBytes',
            period: fiveMinutes,
            statistic: 'Average',
        });
        expect(stack.resolve(stream.metricIncomingBytes({
            period: core_1.Duration.minutes(1),
            statistic: 'Sum',
        }))).toEqual({
            dimensions: { StreamName: { Ref: 'MyStream5C050E93' } },
            namespace: 'AWS/Kinesis',
            metricName: 'IncomingBytes',
            period: { ...fiveMinutes, amount: 1 },
            statistic: 'Sum',
        });
    });
});
//# sourceMappingURL=data:application/json;base64,