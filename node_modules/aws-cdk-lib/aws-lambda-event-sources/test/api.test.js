"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const lambda = require("../../aws-lambda");
const cdk = require("../../core");
const events = require("../lib");
describe('ApiEventSource', () => {
    test('minimal example', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const handler = new lambda.Function(stack, 'MyFunc', {
            code: lambda.Code.fromInline('boom'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS,
        });
        // WHEN
        handler.addEventSource(new events.ApiEventSource('get', '/foo'));
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Resource', {
            PathPart: 'foo',
            ParentId: { 'Fn::GetAtt': ['MyFuncApiEventSourceA7A86A4FFB3F557C', 'RootResourceId'] },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Method', {
            HttpMethod: 'GET',
            ResourceId: { Ref: 'MyFuncApiEventSourceA7A86A4FfooCA6F87E4' },
        });
    });
    test('disjoint routes', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const handler = new lambda.Function(stack, 'MyFunc', {
            code: lambda.Code.fromInline('boom'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS,
        });
        // WHEN
        handler.addEventSource(new events.ApiEventSource('get', '/foo'));
        handler.addEventSource(new events.ApiEventSource('post', '/bar'));
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Resource', {
            PathPart: 'foo',
            ParentId: { 'Fn::GetAtt': ['MyFuncApiEventSourceA7A86A4FFB3F557C', 'RootResourceId'] },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Resource', {
            PathPart: 'bar',
            ParentId: { 'Fn::GetAtt': ['MyFuncApiEventSourceA7A86A4FFB3F557C', 'RootResourceId'] },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Method', {
            HttpMethod: 'GET',
            ResourceId: { Ref: 'MyFuncApiEventSourceA7A86A4FfooCA6F87E4' },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Method', {
            HttpMethod: 'POST',
            ResourceId: { Ref: 'MyFuncApiEventSourceA7A86A4FbarDFB0F21B' },
        });
    });
    test('tree of routes', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const handler = new lambda.Function(stack, 'MyFunc', {
            code: lambda.Code.fromInline('boom'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS,
        });
        // WHEN
        handler.addEventSource(new events.ApiEventSource('get', '/foo'));
        handler.addEventSource(new events.ApiEventSource('post', '/foo/bar'));
        handler.addEventSource(new events.ApiEventSource('post', '/foo/bar/zoo'));
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Resource', {
            PathPart: 'foo',
            ParentId: { 'Fn::GetAtt': ['MyFuncApiEventSourceA7A86A4FFB3F557C', 'RootResourceId'] },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Resource', {
            PathPart: 'bar',
            ParentId: { Ref: 'MyFuncApiEventSourceA7A86A4FfooCA6F87E4' },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Method', {
            HttpMethod: 'GET',
            ResourceId: { Ref: 'MyFuncApiEventSourceA7A86A4FfooCA6F87E4' },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Method', {
            HttpMethod: 'POST',
            ResourceId: { Ref: 'MyFuncApiEventSourceA7A86A4Ffoobar028FFFDE' },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,