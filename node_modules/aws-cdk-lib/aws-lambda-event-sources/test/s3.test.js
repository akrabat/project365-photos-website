"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const s3 = require("../../aws-s3");
const cdk = require("../../core");
const test_function_1 = require("./test-function");
const sources = require("../lib");
/* eslint-disable quote-props */
describe('S3EventSource', () => {
    test('sufficiently complex example', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new test_function_1.TestFunction(stack, 'Fn');
        const bucket = new s3.Bucket(stack, 'B');
        // WHEN
        fn.addEventSource(new sources.S3EventSource(bucket, {
            events: [s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED],
            filters: [
                { prefix: 'prefix/' },
                { suffix: '.png' },
            ],
        }));
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::S3BucketNotifications', {
            'NotificationConfiguration': {
                'LambdaFunctionConfigurations': [
                    {
                        'Events': [
                            's3:ObjectCreated:*',
                        ],
                        'Filter': {
                            'Key': {
                                'FilterRules': [
                                    {
                                        'Name': 'prefix',
                                        'Value': 'prefix/',
                                    },
                                    {
                                        'Name': 'suffix',
                                        'Value': '.png',
                                    },
                                ],
                            },
                        },
                        'LambdaFunctionArn': {
                            'Fn::GetAtt': [
                                'Fn9270CBC0',
                                'Arn',
                            ],
                        },
                    },
                    {
                        'Events': [
                            's3:ObjectRemoved:*',
                        ],
                        'Filter': {
                            'Key': {
                                'FilterRules': [
                                    {
                                        'Name': 'prefix',
                                        'Value': 'prefix/',
                                    },
                                    {
                                        'Name': 'suffix',
                                        'Value': '.png',
                                    },
                                ],
                            },
                        },
                        'LambdaFunctionArn': {
                            'Fn::GetAtt': [
                                'Fn9270CBC0',
                                'Arn',
                            ],
                        },
                    },
                ],
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInMzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBNEM7QUFDNUMsbUNBQW1DO0FBQ25DLGtDQUFrQztBQUNsQyxtREFBK0M7QUFDL0Msa0NBQWtDO0FBRWxDLGdDQUFnQztBQUVoQyxRQUFRLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtJQUM3QixJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1FBQ3hDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLEVBQUUsR0FBRyxJQUFJLDRCQUFZLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFekMsT0FBTztRQUNQLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUNsRCxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQztZQUNsRSxPQUFPLEVBQUU7Z0JBQ1AsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFO2dCQUNyQixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7YUFDbkI7U0FDRixDQUFDLENBQUMsQ0FBQztRQUVKLE9BQU87UUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQywrQkFBK0IsRUFBRTtZQUMvRSwyQkFBMkIsRUFBRTtnQkFDM0IsOEJBQThCLEVBQUU7b0JBQzlCO3dCQUNFLFFBQVEsRUFBRTs0QkFDUixvQkFBb0I7eUJBQ3JCO3dCQUNELFFBQVEsRUFBRTs0QkFDUixLQUFLLEVBQUU7Z0NBQ0wsYUFBYSxFQUFFO29DQUNiO3dDQUNFLE1BQU0sRUFBRSxRQUFRO3dDQUNoQixPQUFPLEVBQUUsU0FBUztxQ0FDbkI7b0NBQ0Q7d0NBQ0UsTUFBTSxFQUFFLFFBQVE7d0NBQ2hCLE9BQU8sRUFBRSxNQUFNO3FDQUNoQjtpQ0FDRjs2QkFDRjt5QkFDRjt3QkFDRCxtQkFBbUIsRUFBRTs0QkFDbkIsWUFBWSxFQUFFO2dDQUNaLFlBQVk7Z0NBQ1osS0FBSzs2QkFDTjt5QkFDRjtxQkFDRjtvQkFDRDt3QkFDRSxRQUFRLEVBQUU7NEJBQ1Isb0JBQW9CO3lCQUNyQjt3QkFDRCxRQUFRLEVBQUU7NEJBQ1IsS0FBSyxFQUFFO2dDQUNMLGFBQWEsRUFBRTtvQ0FDYjt3Q0FDRSxNQUFNLEVBQUUsUUFBUTt3Q0FDaEIsT0FBTyxFQUFFLFNBQVM7cUNBQ25CO29DQUNEO3dDQUNFLE1BQU0sRUFBRSxRQUFRO3dDQUNoQixPQUFPLEVBQUUsTUFBTTtxQ0FDaEI7aUNBQ0Y7NkJBQ0Y7eUJBQ0Y7d0JBQ0QsbUJBQW1CLEVBQUU7NEJBQ25CLFlBQVksRUFBRTtnQ0FDWixZQUFZO2dDQUNaLEtBQUs7NkJBQ047eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0ICogYXMgczMgZnJvbSAnLi4vLi4vYXdzLXMzJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IFRlc3RGdW5jdGlvbiB9IGZyb20gJy4vdGVzdC1mdW5jdGlvbic7XG5pbXBvcnQgKiBhcyBzb3VyY2VzIGZyb20gJy4uL2xpYic7XG5cbi8qIGVzbGludC1kaXNhYmxlIHF1b3RlLXByb3BzICovXG5cbmRlc2NyaWJlKCdTM0V2ZW50U291cmNlJywgKCkgPT4ge1xuICB0ZXN0KCdzdWZmaWNpZW50bHkgY29tcGxleCBleGFtcGxlJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgZm4gPSBuZXcgVGVzdEZ1bmN0aW9uKHN0YWNrLCAnRm4nKTtcbiAgICBjb25zdCBidWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQicpO1xuXG4gICAgLy8gV0hFTlxuICAgIGZuLmFkZEV2ZW50U291cmNlKG5ldyBzb3VyY2VzLlMzRXZlbnRTb3VyY2UoYnVja2V0LCB7XG4gICAgICBldmVudHM6IFtzMy5FdmVudFR5cGUuT0JKRUNUX0NSRUFURUQsIHMzLkV2ZW50VHlwZS5PQkpFQ1RfUkVNT1ZFRF0sXG4gICAgICBmaWx0ZXJzOiBbXG4gICAgICAgIHsgcHJlZml4OiAncHJlZml4LycgfSxcbiAgICAgICAgeyBzdWZmaXg6ICcucG5nJyB9LFxuICAgICAgXSxcbiAgICB9KSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0N1c3RvbTo6UzNCdWNrZXROb3RpZmljYXRpb25zJywge1xuICAgICAgJ05vdGlmaWNhdGlvbkNvbmZpZ3VyYXRpb24nOiB7XG4gICAgICAgICdMYW1iZGFGdW5jdGlvbkNvbmZpZ3VyYXRpb25zJzogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgICdFdmVudHMnOiBbXG4gICAgICAgICAgICAgICdzMzpPYmplY3RDcmVhdGVkOionLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdGaWx0ZXInOiB7XG4gICAgICAgICAgICAgICdLZXknOiB7XG4gICAgICAgICAgICAgICAgJ0ZpbHRlclJ1bGVzJzogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAnTmFtZSc6ICdwcmVmaXgnLFxuICAgICAgICAgICAgICAgICAgICAnVmFsdWUnOiAncHJlZml4LycsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAnTmFtZSc6ICdzdWZmaXgnLFxuICAgICAgICAgICAgICAgICAgICAnVmFsdWUnOiAnLnBuZycsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ0xhbWJkYUZ1bmN0aW9uQXJuJzoge1xuICAgICAgICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAgICAgICAnRm45MjcwQ0JDMCcsXG4gICAgICAgICAgICAgICAgJ0FybicsXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgJ0V2ZW50cyc6IFtcbiAgICAgICAgICAgICAgJ3MzOk9iamVjdFJlbW92ZWQ6KicsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ0ZpbHRlcic6IHtcbiAgICAgICAgICAgICAgJ0tleSc6IHtcbiAgICAgICAgICAgICAgICAnRmlsdGVyUnVsZXMnOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICdOYW1lJzogJ3ByZWZpeCcsXG4gICAgICAgICAgICAgICAgICAgICdWYWx1ZSc6ICdwcmVmaXgvJyxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICdOYW1lJzogJ3N1ZmZpeCcsXG4gICAgICAgICAgICAgICAgICAgICdWYWx1ZSc6ICcucG5nJyxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnTGFtYmRhRnVuY3Rpb25Bcm4nOiB7XG4gICAgICAgICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgICAgICAgICdGbjkyNzBDQkMwJyxcbiAgICAgICAgICAgICAgICAnQXJuJyxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=