"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const sns = require("../../aws-sns");
const sqs = require("../../aws-sqs");
const cdk = require("../../core");
const test_function_1 = require("./test-function");
const sources = require("../lib");
/* eslint-disable quote-props */
describe('SNSEventSource', () => {
    test('sufficiently complex example', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new test_function_1.TestFunction(stack, 'Fn');
        const topic = new sns.Topic(stack, 'T');
        // WHEN
        fn.addEventSource(new sources.SnsEventSource(topic));
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Permission', {
            'Action': 'lambda:InvokeFunction',
            'FunctionName': {
                'Fn::GetAtt': [
                    'Fn9270CBC0',
                    'Arn',
                ],
            },
            'Principal': 'sns.amazonaws.com',
            'SourceArn': {
                'Ref': 'TD925BC7E',
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SNS::Subscription', {
            'Endpoint': {
                'Fn::GetAtt': [
                    'Fn9270CBC0',
                    'Arn',
                ],
            },
            'Protocol': 'lambda',
            'TopicArn': {
                'Ref': 'TD925BC7E',
            },
        });
    });
    test('props are passed to subscription', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new test_function_1.TestFunction(stack, 'Fn');
        const topic = new sns.Topic(stack, 'T');
        const queue = new sqs.Queue(stack, 'Q');
        const props = {
            deadLetterQueue: queue,
            filterPolicy: {
                Field: sns.SubscriptionFilter.stringFilter({
                    allowlist: ['A', 'B'],
                }),
            },
        };
        // WHEN
        fn.addEventSource(new sources.SnsEventSource(topic, props));
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Permission', {
            'Action': 'lambda:InvokeFunction',
            'FunctionName': {
                'Fn::GetAtt': [
                    'Fn9270CBC0',
                    'Arn',
                ],
            },
            'Principal': 'sns.amazonaws.com',
            'SourceArn': {
                'Ref': 'TD925BC7E',
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SNS::Subscription', {
            'Endpoint': {
                'Fn::GetAtt': [
                    'Fn9270CBC0',
                    'Arn',
                ],
            },
            'Protocol': 'lambda',
            'TopicArn': {
                'Ref': 'TD925BC7E',
            },
            'FilterPolicy': {
                'Field': [
                    'A',
                    'B',
                ],
            },
            'RedrivePolicy': {
                'deadLetterTargetArn': {
                    'Fn::GetAtt': [
                        'Q63C6E3AB',
                        'Arn',
                    ],
                },
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25zLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzbnMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUE0QztBQUM1QyxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDLGtDQUFrQztBQUNsQyxtREFBK0M7QUFDL0Msa0NBQWtDO0FBRWxDLGdDQUFnQztBQUVoQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO0lBQzlCLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7UUFDeEMsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLE1BQU0sRUFBRSxHQUFHLElBQUksNEJBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDekMsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV4QyxPQUFPO1FBQ1AsRUFBRSxDQUFDLGNBQWMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUVyRCxPQUFPO1FBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMseUJBQXlCLEVBQUU7WUFDekUsUUFBUSxFQUFFLHVCQUF1QjtZQUNqQyxjQUFjLEVBQUU7Z0JBQ2QsWUFBWSxFQUFFO29CQUNaLFlBQVk7b0JBQ1osS0FBSztpQkFDTjthQUNGO1lBQ0QsV0FBVyxFQUFFLG1CQUFtQjtZQUNoQyxXQUFXLEVBQUU7Z0JBQ1gsS0FBSyxFQUFFLFdBQVc7YUFDbkI7U0FDRixDQUFDLENBQUM7UUFFSCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyx3QkFBd0IsRUFBRTtZQUN4RSxVQUFVLEVBQUU7Z0JBQ1YsWUFBWSxFQUFFO29CQUNaLFlBQVk7b0JBQ1osS0FBSztpQkFDTjthQUNGO1lBQ0QsVUFBVSxFQUFFLFFBQVE7WUFDcEIsVUFBVSxFQUFFO2dCQUNWLEtBQUssRUFBRSxXQUFXO2FBQ25CO1NBQ0YsQ0FBQyxDQUFDO0lBR0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO1FBQzVDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLEVBQUUsR0FBRyxJQUFJLDRCQUFZLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDeEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN4QyxNQUFNLEtBQUssR0FBZ0M7WUFDekMsZUFBZSxFQUFFLEtBQUs7WUFDdEIsWUFBWSxFQUFFO2dCQUNaLEtBQUssRUFBRSxHQUFHLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDO29CQUN6QyxTQUFTLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO2lCQUN0QixDQUFDO2FBQ0g7U0FDRixDQUFDO1FBRUYsT0FBTztRQUNQLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRTVELE9BQU87UUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyx5QkFBeUIsRUFBRTtZQUN6RSxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLGNBQWMsRUFBRTtnQkFDZCxZQUFZLEVBQUU7b0JBQ1osWUFBWTtvQkFDWixLQUFLO2lCQUNOO2FBQ0Y7WUFDRCxXQUFXLEVBQUUsbUJBQW1CO1lBQ2hDLFdBQVcsRUFBRTtnQkFDWCxLQUFLLEVBQUUsV0FBVzthQUNuQjtTQUNGLENBQUMsQ0FBQztRQUVILHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLHdCQUF3QixFQUFFO1lBQ3hFLFVBQVUsRUFBRTtnQkFDVixZQUFZLEVBQUU7b0JBQ1osWUFBWTtvQkFDWixLQUFLO2lCQUNOO2FBQ0Y7WUFDRCxVQUFVLEVBQUUsUUFBUTtZQUNwQixVQUFVLEVBQUU7Z0JBQ1YsS0FBSyxFQUFFLFdBQVc7YUFDbkI7WUFDRCxjQUFjLEVBQUU7Z0JBQ2QsT0FBTyxFQUFFO29CQUNQLEdBQUc7b0JBQ0gsR0FBRztpQkFDSjthQUNGO1lBQ0QsZUFBZSxFQUFFO2dCQUNmLHFCQUFxQixFQUFFO29CQUNyQixZQUFZLEVBQUU7d0JBQ1osV0FBVzt3QkFDWCxLQUFLO3FCQUNOO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFHTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIHNucyBmcm9tICcuLi8uLi9hd3Mtc25zJztcbmltcG9ydCAqIGFzIHNxcyBmcm9tICcuLi8uLi9hd3Mtc3FzJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IFRlc3RGdW5jdGlvbiB9IGZyb20gJy4vdGVzdC1mdW5jdGlvbic7XG5pbXBvcnQgKiBhcyBzb3VyY2VzIGZyb20gJy4uL2xpYic7XG5cbi8qIGVzbGludC1kaXNhYmxlIHF1b3RlLXByb3BzICovXG5cbmRlc2NyaWJlKCdTTlNFdmVudFNvdXJjZScsICgpID0+IHtcbiAgdGVzdCgnc3VmZmljaWVudGx5IGNvbXBsZXggZXhhbXBsZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IGZuID0gbmV3IFRlc3RGdW5jdGlvbihzdGFjaywgJ0ZuJyk7XG4gICAgY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnVCcpO1xuXG4gICAgLy8gV0hFTlxuICAgIGZuLmFkZEV2ZW50U291cmNlKG5ldyBzb3VyY2VzLlNuc0V2ZW50U291cmNlKHRvcGljKSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6TGFtYmRhOjpQZXJtaXNzaW9uJywge1xuICAgICAgJ0FjdGlvbic6ICdsYW1iZGE6SW52b2tlRnVuY3Rpb24nLFxuICAgICAgJ0Z1bmN0aW9uTmFtZSc6IHtcbiAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgJ0ZuOTI3MENCQzAnLFxuICAgICAgICAgICdBcm4nLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgICdQcmluY2lwYWwnOiAnc25zLmFtYXpvbmF3cy5jb20nLFxuICAgICAgJ1NvdXJjZUFybic6IHtcbiAgICAgICAgJ1JlZic6ICdURDkyNUJDN0UnLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlNOUzo6U3Vic2NyaXB0aW9uJywge1xuICAgICAgJ0VuZHBvaW50Jzoge1xuICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAnRm45MjcwQ0JDMCcsXG4gICAgICAgICAgJ0FybicsXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAgJ1Byb3RvY29sJzogJ2xhbWJkYScsXG4gICAgICAnVG9waWNBcm4nOiB7XG4gICAgICAgICdSZWYnOiAnVEQ5MjVCQzdFJyxcbiAgICAgIH0sXG4gICAgfSk7XG5cblxuICB9KTtcblxuICB0ZXN0KCdwcm9wcyBhcmUgcGFzc2VkIHRvIHN1YnNjcmlwdGlvbicsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IGZuID0gbmV3IFRlc3RGdW5jdGlvbihzdGFjaywgJ0ZuJyk7XG4gICAgY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnVCcpO1xuICAgIGNvbnN0IHF1ZXVlID0gbmV3IHNxcy5RdWV1ZShzdGFjaywgJ1EnKTtcbiAgICBjb25zdCBwcm9wczogc291cmNlcy5TbnNFdmVudFNvdXJjZVByb3BzID0ge1xuICAgICAgZGVhZExldHRlclF1ZXVlOiBxdWV1ZSxcbiAgICAgIGZpbHRlclBvbGljeToge1xuICAgICAgICBGaWVsZDogc25zLlN1YnNjcmlwdGlvbkZpbHRlci5zdHJpbmdGaWx0ZXIoe1xuICAgICAgICAgIGFsbG93bGlzdDogWydBJywgJ0InXSxcbiAgICAgICAgfSksXG4gICAgICB9LFxuICAgIH07XG5cbiAgICAvLyBXSEVOXG4gICAgZm4uYWRkRXZlbnRTb3VyY2UobmV3IHNvdXJjZXMuU25zRXZlbnRTb3VyY2UodG9waWMsIHByb3BzKSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6TGFtYmRhOjpQZXJtaXNzaW9uJywge1xuICAgICAgJ0FjdGlvbic6ICdsYW1iZGE6SW52b2tlRnVuY3Rpb24nLFxuICAgICAgJ0Z1bmN0aW9uTmFtZSc6IHtcbiAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgJ0ZuOTI3MENCQzAnLFxuICAgICAgICAgICdBcm4nLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgICdQcmluY2lwYWwnOiAnc25zLmFtYXpvbmF3cy5jb20nLFxuICAgICAgJ1NvdXJjZUFybic6IHtcbiAgICAgICAgJ1JlZic6ICdURDkyNUJDN0UnLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlNOUzo6U3Vic2NyaXB0aW9uJywge1xuICAgICAgJ0VuZHBvaW50Jzoge1xuICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAnRm45MjcwQ0JDMCcsXG4gICAgICAgICAgJ0FybicsXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAgJ1Byb3RvY29sJzogJ2xhbWJkYScsXG4gICAgICAnVG9waWNBcm4nOiB7XG4gICAgICAgICdSZWYnOiAnVEQ5MjVCQzdFJyxcbiAgICAgIH0sXG4gICAgICAnRmlsdGVyUG9saWN5Jzoge1xuICAgICAgICAnRmllbGQnOiBbXG4gICAgICAgICAgJ0EnLFxuICAgICAgICAgICdCJyxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICAnUmVkcml2ZVBvbGljeSc6IHtcbiAgICAgICAgJ2RlYWRMZXR0ZXJUYXJnZXRBcm4nOiB7XG4gICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgICAnUTYzQzZFM0FCJyxcbiAgICAgICAgICAgICdBcm4nLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG5cbiAgfSk7XG59KTtcbiJdfQ==