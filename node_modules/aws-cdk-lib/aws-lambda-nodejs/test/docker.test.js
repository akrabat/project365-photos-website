"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const path = require("path");
const docker = process.env.CDK_DOCKER ?? 'docker';
beforeAll(() => {
    const process = (0, child_process_1.spawnSync)(docker, ['build', '-t', 'esbuild', path.join(__dirname, '../lib')], { stdio: 'inherit' });
    expect(process.error).toBeUndefined();
    expect(process.status).toBe(0);
});
test('esbuild is available', () => {
    const proc = (0, child_process_1.spawnSync)(docker, [
        'run', 'esbuild',
        'esbuild', '--version',
    ]);
    expect(proc.status).toEqual(0);
});
test('can npm install with non root user', () => {
    const proc = (0, child_process_1.spawnSync)(docker, [
        'run', '-u', '1000:1000',
        'esbuild',
        'bash', '-c', [
            'mkdir /tmp/test',
            'cd /tmp/test',
            'npm i constructs',
        ].join(' && '),
    ]);
    expect(proc.status).toEqual(0);
});
test('can yarn install with non root user', () => {
    const proc = (0, child_process_1.spawnSync)(docker, [
        'run', '-u', '500:500',
        'esbuild',
        'bash', '-c', [
            'mkdir /tmp/test',
            'cd /tmp/test',
            'yarn add constructs',
        ].join(' && '),
    ]);
    expect(proc.status).toEqual(0);
});
test('can pnpm install with non root user', () => {
    const proc = (0, child_process_1.spawnSync)(docker, [
        'run', '-u', '500:500',
        'esbuild',
        'bash', '-c', [
            'mkdir /tmp/test',
            'cd /tmp/test',
            'pnpm add constructs',
        ].join(' && '),
    ]);
    expect(proc.status).toEqual(0);
});
test('cache folders have the right permissions', () => {
    const proc = (0, child_process_1.spawnSync)(docker, [
        'run', 'esbuild',
        'bash', '-c', [
            'stat -c \'%a\' /tmp/npm-cache',
            'stat -c \'%a\' /tmp/yarn-cache',
            'stat -c \'%a\' /tmp/pnpm-cache',
        ].join(' &&  '),
    ]);
    expect(proc.stdout.toString()).toMatch('777\n777');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9ja2VyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkb2NrZXIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUEwQztBQUMxQyw2QkFBNkI7QUFFN0IsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksUUFBUSxDQUFDO0FBQ2xELFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYixNQUFNLE9BQU8sR0FBRyxJQUFBLHlCQUFTLEVBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ3BILE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ2hDLE1BQU0sSUFBSSxHQUFHLElBQUEseUJBQVMsRUFBQyxNQUFNLEVBQUU7UUFDN0IsS0FBSyxFQUFFLFNBQVM7UUFDaEIsU0FBUyxFQUFFLFdBQVc7S0FDdkIsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFFO0lBQzlDLE1BQU0sSUFBSSxHQUFHLElBQUEseUJBQVMsRUFBQyxNQUFNLEVBQUU7UUFDN0IsS0FBSyxFQUFFLElBQUksRUFBRSxXQUFXO1FBQ3hCLFNBQVM7UUFDVCxNQUFNLEVBQUUsSUFBSSxFQUFFO1lBQ1osaUJBQWlCO1lBQ2pCLGNBQWM7WUFDZCxrQkFBa0I7U0FDbkIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0tBQ2YsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO0lBQy9DLE1BQU0sSUFBSSxHQUFHLElBQUEseUJBQVMsRUFBQyxNQUFNLEVBQUU7UUFDN0IsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFTO1FBQ3RCLFNBQVM7UUFDVCxNQUFNLEVBQUUsSUFBSSxFQUFFO1lBQ1osaUJBQWlCO1lBQ2pCLGNBQWM7WUFDZCxxQkFBcUI7U0FDdEIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0tBQ2YsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO0lBQy9DLE1BQU0sSUFBSSxHQUFHLElBQUEseUJBQVMsRUFBQyxNQUFNLEVBQUU7UUFDN0IsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFTO1FBQ3RCLFNBQVM7UUFDVCxNQUFNLEVBQUUsSUFBSSxFQUFFO1lBQ1osaUJBQWlCO1lBQ2pCLGNBQWM7WUFDZCxxQkFBcUI7U0FDdEIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0tBQ2YsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO0lBQ3BELE1BQU0sSUFBSSxHQUFHLElBQUEseUJBQVMsRUFBQyxNQUFNLEVBQUU7UUFDN0IsS0FBSyxFQUFFLFNBQVM7UUFDaEIsTUFBTSxFQUFFLElBQUksRUFBRTtZQUNaLCtCQUErQjtZQUMvQixnQ0FBZ0M7WUFDaEMsZ0NBQWdDO1NBQ2pDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztLQUNoQixDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNwYXduU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuY29uc3QgZG9ja2VyID0gcHJvY2Vzcy5lbnYuQ0RLX0RPQ0tFUiA/PyAnZG9ja2VyJztcbmJlZm9yZUFsbCgoKSA9PiB7XG4gIGNvbnN0IHByb2Nlc3MgPSBzcGF3blN5bmMoZG9ja2VyLCBbJ2J1aWxkJywgJy10JywgJ2VzYnVpbGQnLCBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vbGliJyldLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSk7XG4gIGV4cGVjdChwcm9jZXNzLmVycm9yKS50b0JlVW5kZWZpbmVkKCk7XG4gIGV4cGVjdChwcm9jZXNzLnN0YXR1cykudG9CZSgwKTtcbn0pO1xuXG50ZXN0KCdlc2J1aWxkIGlzIGF2YWlsYWJsZScsICgpID0+IHtcbiAgY29uc3QgcHJvYyA9IHNwYXduU3luYyhkb2NrZXIsIFtcbiAgICAncnVuJywgJ2VzYnVpbGQnLFxuICAgICdlc2J1aWxkJywgJy0tdmVyc2lvbicsXG4gIF0pO1xuICBleHBlY3QocHJvYy5zdGF0dXMpLnRvRXF1YWwoMCk7XG59KTtcblxudGVzdCgnY2FuIG5wbSBpbnN0YWxsIHdpdGggbm9uIHJvb3QgdXNlcicsICgpID0+IHtcbiAgY29uc3QgcHJvYyA9IHNwYXduU3luYyhkb2NrZXIsIFtcbiAgICAncnVuJywgJy11JywgJzEwMDA6MTAwMCcsXG4gICAgJ2VzYnVpbGQnLFxuICAgICdiYXNoJywgJy1jJywgW1xuICAgICAgJ21rZGlyIC90bXAvdGVzdCcsXG4gICAgICAnY2QgL3RtcC90ZXN0JyxcbiAgICAgICducG0gaSBjb25zdHJ1Y3RzJyxcbiAgICBdLmpvaW4oJyAmJiAnKSxcbiAgXSk7XG4gIGV4cGVjdChwcm9jLnN0YXR1cykudG9FcXVhbCgwKTtcbn0pO1xuXG50ZXN0KCdjYW4geWFybiBpbnN0YWxsIHdpdGggbm9uIHJvb3QgdXNlcicsICgpID0+IHtcbiAgY29uc3QgcHJvYyA9IHNwYXduU3luYyhkb2NrZXIsIFtcbiAgICAncnVuJywgJy11JywgJzUwMDo1MDAnLFxuICAgICdlc2J1aWxkJyxcbiAgICAnYmFzaCcsICctYycsIFtcbiAgICAgICdta2RpciAvdG1wL3Rlc3QnLFxuICAgICAgJ2NkIC90bXAvdGVzdCcsXG4gICAgICAneWFybiBhZGQgY29uc3RydWN0cycsXG4gICAgXS5qb2luKCcgJiYgJyksXG4gIF0pO1xuICBleHBlY3QocHJvYy5zdGF0dXMpLnRvRXF1YWwoMCk7XG59KTtcblxudGVzdCgnY2FuIHBucG0gaW5zdGFsbCB3aXRoIG5vbiByb290IHVzZXInLCAoKSA9PiB7XG4gIGNvbnN0IHByb2MgPSBzcGF3blN5bmMoZG9ja2VyLCBbXG4gICAgJ3J1bicsICctdScsICc1MDA6NTAwJyxcbiAgICAnZXNidWlsZCcsXG4gICAgJ2Jhc2gnLCAnLWMnLCBbXG4gICAgICAnbWtkaXIgL3RtcC90ZXN0JyxcbiAgICAgICdjZCAvdG1wL3Rlc3QnLFxuICAgICAgJ3BucG0gYWRkIGNvbnN0cnVjdHMnLFxuICAgIF0uam9pbignICYmICcpLFxuICBdKTtcbiAgZXhwZWN0KHByb2Muc3RhdHVzKS50b0VxdWFsKDApO1xufSk7XG5cbnRlc3QoJ2NhY2hlIGZvbGRlcnMgaGF2ZSB0aGUgcmlnaHQgcGVybWlzc2lvbnMnLCAoKSA9PiB7XG4gIGNvbnN0IHByb2MgPSBzcGF3blN5bmMoZG9ja2VyLCBbXG4gICAgJ3J1bicsICdlc2J1aWxkJyxcbiAgICAnYmFzaCcsICctYycsIFtcbiAgICAgICdzdGF0IC1jIFxcJyVhXFwnIC90bXAvbnBtLWNhY2hlJyxcbiAgICAgICdzdGF0IC1jIFxcJyVhXFwnIC90bXAveWFybi1jYWNoZScsXG4gICAgICAnc3RhdCAtYyBcXCclYVxcJyAvdG1wL3BucG0tY2FjaGUnLFxuICAgIF0uam9pbignICYmICAnKSxcbiAgXSk7XG4gIGV4cGVjdChwcm9jLnN0ZG91dC50b1N0cmluZygpKS50b01hdGNoKCc3NzdcXG43NzcnKTtcbn0pO1xuIl19