"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const assertions_1 = require("../../assertions");
const aws_ec2_1 = require("../../aws-ec2");
const aws_lambda_1 = require("../../aws-lambda");
const core_1 = require("../../core");
const lib_1 = require("../lib");
const bundling_1 = require("../lib/bundling");
jest.mock('../lib/bundling', () => {
    return {
        Bundling: {
            bundle: jest.fn().mockReturnValue({
                bind: () => {
                    return {
                        s3Location: {
                            bucketName: 'my-bucket',
                            objectKey: 'my-key',
                        },
                    };
                },
                bindToResource: () => { return; },
            }),
        },
    };
});
let stack;
beforeEach(() => {
    stack = new core_1.Stack();
    jest.clearAllMocks();
});
test.skip('NodejsFunction with .ts handler', () => {
    // WHEN
    new lib_1.NodejsFunction(stack, 'handler1');
    expect(bundling_1.Bundling.bundle).toHaveBeenCalledWith(expect.objectContaining({
        entry: expect.stringContaining('function.test.handler1.ts'), // Automatically finds .ts handler file
    }));
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Function', {
        Handler: 'index.handler',
        Runtime: 'nodejs14.x',
    });
});
test.skip('NodejsFunction with overridden handler - no dots', () => {
    // WHEN
    new lib_1.NodejsFunction(stack, 'handler1', {
        handler: 'myHandler',
    });
    expect(bundling_1.Bundling.bundle).toHaveBeenCalledWith(expect.objectContaining({
        entry: expect.stringContaining('function.test.handler1.ts'), // Automatically finds .ts handler file
    }));
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Function', {
        Handler: 'index.myHandler',
        Runtime: 'nodejs14.x',
    });
});
test.skip('NodejsFunction with overridden handler - with dots', () => {
    // WHEN
    new lib_1.NodejsFunction(stack, 'handler1', {
        handler: 'run.sh',
    });
    expect(bundling_1.Bundling.bundle).toHaveBeenCalledWith(expect.objectContaining({
        entry: expect.stringContaining('function.test.handler1.ts'), // Automatically finds .ts handler file
    }));
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Function', {
        Handler: 'run.sh',
        Runtime: 'nodejs14.x',
    });
});
test.skip('NodejsFunction with .js handler', () => {
    // WHEN
    new lib_1.NodejsFunction(stack, 'handler2');
    // THEN
    expect(bundling_1.Bundling.bundle).toHaveBeenCalledWith(expect.objectContaining({
        entry: expect.stringContaining('function.test.handler2.js'), // Automatically finds .ts handler file
    }));
});
test.skip('NodejsFunction with .mjs handler', () => {
    // WHEN
    new lib_1.NodejsFunction(stack, 'handler3');
    // THEN
    expect(bundling_1.Bundling.bundle).toHaveBeenCalledWith(expect.objectContaining({
        entry: expect.stringContaining('function.test.handler3.mjs'), // Automatically finds .mjs handler file
    }));
});
test.skip('NodejsFunction with container env vars', () => {
    // WHEN
    new lib_1.NodejsFunction(stack, 'handler1', {
        bundling: {
            environment: {
                KEY: 'VALUE',
            },
        },
    });
    expect(bundling_1.Bundling.bundle).toHaveBeenCalledWith(expect.objectContaining({
        environment: {
            KEY: 'VALUE',
        },
    }));
});
test.skip('throws when entry is not js/ts', () => {
    expect(() => new lib_1.NodejsFunction(stack, 'Fn', {
        entry: 'handler.py',
    })).toThrow(/Only JavaScript or TypeScript entry files are supported/);
});
test.skip('accepts tsx', () => {
    const entry = path.join(__dirname, 'handler.tsx');
    fs.symlinkSync(path.join(__dirname, 'function.test.handler1.ts'), entry);
    expect(() => new lib_1.NodejsFunction(stack, 'Fn', {
        entry,
    })).not.toThrow();
    fs.unlinkSync(entry);
});
test.skip('throws when entry does not exist', () => {
    expect(() => new lib_1.NodejsFunction(stack, 'Fn', {
        entry: 'notfound.ts',
    })).toThrow(/Cannot find entry file at/);
});
test.skip('throws when entry cannot be automatically found', () => {
    expect(() => new lib_1.NodejsFunction(stack, 'Fn')).toThrow(/Cannot find handler file .*function.test.Fn.ts, .*function.test.Fn.js or .*function.test.Fn.mjs/);
});
test.skip('throws with the wrong runtime family', () => {
    expect(() => new lib_1.NodejsFunction(stack, 'handler1', {
        runtime: aws_lambda_1.Runtime.PYTHON_3_8,
    })).toThrow(/Only `NODEJS` runtimes are supported/);
});
test.skip('throws with non existing lock file', () => {
    expect(() => new lib_1.NodejsFunction(stack, 'handler1', {
        depsLockFilePath: '/does/not/exist.lock',
    })).toThrow(/Lock file at \/does\/not\/exist.lock doesn't exist/);
});
test.skip('throws when depsLockFilePath is not a file', () => {
    expect(() => new lib_1.NodejsFunction(stack, 'handler1', {
        depsLockFilePath: __dirname,
    })).toThrow(/\`depsLockFilePath\` should point to a file/);
});
test.skip('resolves depsLockFilePath to an absolute path', () => {
    new lib_1.NodejsFunction(stack, 'handler1', {
        depsLockFilePath: './package.json',
    });
    expect(bundling_1.Bundling.bundle).toHaveBeenCalledWith(expect.objectContaining({
        depsLockFilePath: expect.stringMatching(/aws-cdk-lib\/package.json$/),
    }));
});
test.skip('resolves entry to an absolute path', () => {
    // WHEN
    new lib_1.NodejsFunction(stack, 'fn', {
        entry: 'aws-lambda-nodejs/lib/index.ts',
    });
    expect(bundling_1.Bundling.bundle).toHaveBeenCalledWith(expect.objectContaining({
        entry: expect.stringMatching(/aws-cdk-lib\/aws-lambda-nodejs\/lib\/index.ts$/),
    }));
});
test.skip('configures connection reuse for aws sdk', () => {
    // WHEN
    new lib_1.NodejsFunction(stack, 'handler1');
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Function', {
        Environment: {
            Variables: {
                AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1',
            },
        },
    });
});
test.skip('can opt-out of connection reuse for aws sdk', () => {
    // WHEN
    new lib_1.NodejsFunction(stack, 'handler1', {
        awsSdkConnectionReuse: false,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Function', {
        Environment: assertions_1.Match.absent(),
    });
});
test.skip('NodejsFunction in a VPC', () => {
    // GIVEN
    const vpc = new aws_ec2_1.Vpc(stack, 'Vpc');
    // WHEN
    new lib_1.NodejsFunction(stack, 'handler1', { vpc });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Function', {
        VpcConfig: {
            SecurityGroupIds: [
                {
                    'Fn::GetAtt': [
                        'handler1SecurityGroup30688A62',
                        'GroupId',
                    ],
                },
            ],
            SubnetIds: [
                {
                    Ref: 'VpcPrivateSubnet1Subnet536B997A',
                },
                {
                    Ref: 'VpcPrivateSubnet2Subnet3788AAA1',
                },
            ],
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb24udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZ1bmN0aW9uLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLGlEQUFtRDtBQUNuRCwyQ0FBb0M7QUFDcEMsaURBQXVEO0FBQ3ZELHFDQUFtQztBQUNuQyxnQ0FBd0M7QUFDeEMsOENBQTJDO0FBRTNDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQ2hDLE9BQU87UUFDTCxRQUFRLEVBQUU7WUFDUixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQztnQkFDaEMsSUFBSSxFQUFFLEdBQWUsRUFBRTtvQkFDckIsT0FBTzt3QkFDTCxVQUFVLEVBQUU7NEJBQ1YsVUFBVSxFQUFFLFdBQVc7NEJBQ3ZCLFNBQVMsRUFBRSxRQUFRO3lCQUNwQjtxQkFDRixDQUFDO2dCQUNKLENBQUM7Z0JBQ0QsY0FBYyxFQUFFLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDO2FBQ2xDLENBQUM7U0FDSDtLQUNGLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksS0FBWSxDQUFDO0FBQ2pCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDZCxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztJQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtJQUNoRCxPQUFPO0lBQ1AsSUFBSSxvQkFBYyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUV0QyxNQUFNLENBQUMsbUJBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7UUFDbkUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxnQkFB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QzVELE9BQU87SUFDUCxJQUFJLG9CQUFjLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtRQUNwQyxxQkFBcUIsRUFBRSxLQUFLO0tBQzdCLENBQUMsQ0FBQztJQUVILHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLHVCQUF1QixFQUFFO1FBQ3ZFLFdBQVcsRUFBRSxrQkFBSyxDQUFDLE1BQU0sRUFBRTtLQUM1QixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO0lBQ3hDLFFBQVE7SUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFbEMsT0FBTztJQUNQLElBQUksb0JBQWMsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUUvQyxPQUFPO0lBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsdUJBQXVCLEVBQUU7UUFDdkUsU0FBUyxFQUFFO1lBQ1QsZ0JBQWdCLEVBQUU7Z0JBQ2hCO29CQUNFLFlBQVksRUFBRTt3QkFDWiwrQkFBK0I7d0JBQy9CLFNBQVM7cUJBQ1Y7aUJBQ0Y7YUFDRjtZQUNELFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxHQUFHLEVBQUUsaUNBQWlDO2lCQUN2QztnQkFDRDtvQkFDRSxHQUFHLEVBQUUsaUNBQWlDO2lCQUN2QzthQUNGO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBUZW1wbGF0ZSwgTWF0Y2ggfSBmcm9tICcuLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCB7IFZwYyB9IGZyb20gJy4uLy4uL2F3cy1lYzInO1xuaW1wb3J0IHsgQ29kZUNvbmZpZywgUnVudGltZSB9IGZyb20gJy4uLy4uL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IE5vZGVqc0Z1bmN0aW9uIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IEJ1bmRsaW5nIH0gZnJvbSAnLi4vbGliL2J1bmRsaW5nJztcblxuamVzdC5tb2NrKCcuLi9saWIvYnVuZGxpbmcnLCAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgQnVuZGxpbmc6IHtcbiAgICAgIGJ1bmRsZTogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIGJpbmQ6ICgpOiBDb2RlQ29uZmlnID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgczNMb2NhdGlvbjoge1xuICAgICAgICAgICAgICBidWNrZXROYW1lOiAnbXktYnVja2V0JyxcbiAgICAgICAgICAgICAgb2JqZWN0S2V5OiAnbXkta2V5JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgYmluZFRvUmVzb3VyY2U6ICgpID0+IHsgcmV0dXJuOyB9LFxuICAgICAgfSksXG4gICAgfSxcbiAgfTtcbn0pO1xuXG5sZXQgc3RhY2s6IFN0YWNrO1xuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gIGplc3QuY2xlYXJBbGxNb2NrcygpO1xufSk7XG5cbnRlc3Quc2tpcCgnTm9kZWpzRnVuY3Rpb24gd2l0aCAudHMgaGFuZGxlcicsICgpID0+IHtcbiAgLy8gV0hFTlxuICBuZXcgTm9kZWpzRnVuY3Rpb24oc3RhY2ssICdoYW5kbGVyMScpO1xuXG4gIGV4cGVjdChCdW5kbGluZy5idW5kbGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICBlbnRyeTogZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ2Z1bmN0aW9uLnRlc3QuaGFuZGxlcjEudHMnKSwgLy8gQXV0b21hdGljYWxseSBmaW5kcyAudHMgaGFuZGxlciBmaWxlXG4gIH0pKTtcblxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpMYW1iZGE6OkZ1bmN0aW9uJywge1xuICAgIEhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcbiAgICBSdW50aW1lOiAnbm9kZWpzMTQueCcsXG4gIH0pO1xufSk7XG5cbnRlc3Quc2tpcCgnTm9kZWpzRnVuY3Rpb24gd2l0aCBvdmVycmlkZGVuIGhhbmRsZXIgLSBubyBkb3RzJywgKCkgPT4ge1xuICAvLyBXSEVOXG4gIG5ldyBOb2RlanNGdW5jdGlvbihzdGFjaywgJ2hhbmRsZXIxJywge1xuICAgIGhhbmRsZXI6ICdteUhhbmRsZXInLFxuICB9KTtcblxuICBleHBlY3QoQnVuZGxpbmcuYnVuZGxlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgZW50cnk6IGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdmdW5jdGlvbi50ZXN0LmhhbmRsZXIxLnRzJyksIC8vIEF1dG9tYXRpY2FsbHkgZmluZHMgLnRzIGhhbmRsZXIgZmlsZVxuICB9KSk7XG5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6TGFtYmRhOjpGdW5jdGlvbicsIHtcbiAgICBIYW5kbGVyOiAnaW5kZXgubXlIYW5kbGVyJywgLy8gYXV0b21hdGljIGluZGV4LiBwcmVmaXhcbiAgICBSdW50aW1lOiAnbm9kZWpzMTQueCcsXG4gIH0pO1xufSk7XG5cbnRlc3Quc2tpcCgnTm9kZWpzRnVuY3Rpb24gd2l0aCBvdmVycmlkZGVuIGhhbmRsZXIgLSB3aXRoIGRvdHMnLCAoKSA9PiB7XG4gIC8vIFdIRU5cbiAgbmV3IE5vZGVqc0Z1bmN0aW9uKHN0YWNrLCAnaGFuZGxlcjEnLCB7XG4gICAgaGFuZGxlcjogJ3J1bi5zaCcsXG4gIH0pO1xuXG4gIGV4cGVjdChCdW5kbGluZy5idW5kbGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICBlbnRyeTogZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ2Z1bmN0aW9uLnRlc3QuaGFuZGxlcjEudHMnKSwgLy8gQXV0b21hdGljYWxseSBmaW5kcyAudHMgaGFuZGxlciBmaWxlXG4gIH0pKTtcblxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpMYW1iZGE6OkZ1bmN0aW9uJywge1xuICAgIEhhbmRsZXI6ICdydW4uc2gnLCAvLyBObyBpbmRleC4gcHJlZml4XG4gICAgUnVudGltZTogJ25vZGVqczE0LngnLFxuICB9KTtcbn0pO1xuXG50ZXN0LnNraXAoJ05vZGVqc0Z1bmN0aW9uIHdpdGggLmpzIGhhbmRsZXInLCAoKSA9PiB7XG4gIC8vIFdIRU5cbiAgbmV3IE5vZGVqc0Z1bmN0aW9uKHN0YWNrLCAnaGFuZGxlcjInKTtcblxuICAvLyBUSEVOXG4gIGV4cGVjdChCdW5kbGluZy5idW5kbGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICBlbnRyeTogZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ2Z1bmN0aW9uLnRlc3QuaGFuZGxlcjIuanMnKSwgLy8gQXV0b21hdGljYWxseSBmaW5kcyAudHMgaGFuZGxlciBmaWxlXG4gIH0pKTtcbn0pO1xuXG50ZXN0LnNraXAoJ05vZGVqc0Z1bmN0aW9uIHdpdGggLm1qcyBoYW5kbGVyJywgKCkgPT4ge1xuICAvLyBXSEVOXG4gIG5ldyBOb2RlanNGdW5jdGlvbihzdGFjaywgJ2hhbmRsZXIzJyk7XG5cblxuICAvLyBUSEVOXG4gIGV4cGVjdChCdW5kbGluZy5idW5kbGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICBlbnRyeTogZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ2Z1bmN0aW9uLnRlc3QuaGFuZGxlcjMubWpzJyksIC8vIEF1dG9tYXRpY2FsbHkgZmluZHMgLm1qcyBoYW5kbGVyIGZpbGVcbiAgfSkpO1xufSk7XG5cbnRlc3Quc2tpcCgnTm9kZWpzRnVuY3Rpb24gd2l0aCBjb250YWluZXIgZW52IHZhcnMnLCAoKSA9PiB7XG4gIC8vIFdIRU5cbiAgbmV3IE5vZGVqc0Z1bmN0aW9uKHN0YWNrLCAnaGFuZGxlcjEnLCB7XG4gICAgYnVuZGxpbmc6IHtcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIEtFWTogJ1ZBTFVFJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG5cbiAgZXhwZWN0KEJ1bmRsaW5nLmJ1bmRsZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgIGVudmlyb25tZW50OiB7XG4gICAgICBLRVk6ICdWQUxVRScsXG4gICAgfSxcbiAgfSkpO1xufSk7XG5cbnRlc3Quc2tpcCgndGhyb3dzIHdoZW4gZW50cnkgaXMgbm90IGpzL3RzJywgKCkgPT4ge1xuICBleHBlY3QoKCkgPT4gbmV3IE5vZGVqc0Z1bmN0aW9uKHN0YWNrLCAnRm4nLCB7XG4gICAgZW50cnk6ICdoYW5kbGVyLnB5JyxcbiAgfSkpLnRvVGhyb3coL09ubHkgSmF2YVNjcmlwdCBvciBUeXBlU2NyaXB0IGVudHJ5IGZpbGVzIGFyZSBzdXBwb3J0ZWQvKTtcbn0pO1xuXG50ZXN0LnNraXAoJ2FjY2VwdHMgdHN4JywgKCkgPT4ge1xuICBjb25zdCBlbnRyeSA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdoYW5kbGVyLnRzeCcpO1xuXG4gIGZzLnN5bWxpbmtTeW5jKHBhdGguam9pbihfX2Rpcm5hbWUsICdmdW5jdGlvbi50ZXN0LmhhbmRsZXIxLnRzJyksIGVudHJ5KTtcblxuICBleHBlY3QoKCkgPT4gbmV3IE5vZGVqc0Z1bmN0aW9uKHN0YWNrLCAnRm4nLCB7XG4gICAgZW50cnksXG4gIH0pKS5ub3QudG9UaHJvdygpO1xuXG4gIGZzLnVubGlua1N5bmMoZW50cnkpO1xufSk7XG5cbnRlc3Quc2tpcCgndGhyb3dzIHdoZW4gZW50cnkgZG9lcyBub3QgZXhpc3QnLCAoKSA9PiB7XG4gIGV4cGVjdCgoKSA9PiBuZXcgTm9kZWpzRnVuY3Rpb24oc3RhY2ssICdGbicsIHtcbiAgICBlbnRyeTogJ25vdGZvdW5kLnRzJyxcbiAgfSkpLnRvVGhyb3coL0Nhbm5vdCBmaW5kIGVudHJ5IGZpbGUgYXQvKTtcbn0pO1xuXG50ZXN0LnNraXAoJ3Rocm93cyB3aGVuIGVudHJ5IGNhbm5vdCBiZSBhdXRvbWF0aWNhbGx5IGZvdW5kJywgKCkgPT4ge1xuICBleHBlY3QoKCkgPT4gbmV3IE5vZGVqc0Z1bmN0aW9uKHN0YWNrLCAnRm4nKSkudG9UaHJvdygvQ2Fubm90IGZpbmQgaGFuZGxlciBmaWxlIC4qZnVuY3Rpb24udGVzdC5Gbi50cywgLipmdW5jdGlvbi50ZXN0LkZuLmpzIG9yIC4qZnVuY3Rpb24udGVzdC5Gbi5tanMvKTtcbn0pO1xuXG50ZXN0LnNraXAoJ3Rocm93cyB3aXRoIHRoZSB3cm9uZyBydW50aW1lIGZhbWlseScsICgpID0+IHtcbiAgZXhwZWN0KCgpID0+IG5ldyBOb2RlanNGdW5jdGlvbihzdGFjaywgJ2hhbmRsZXIxJywge1xuICAgIHJ1bnRpbWU6IFJ1bnRpbWUuUFlUSE9OXzNfOCxcbiAgfSkpLnRvVGhyb3coL09ubHkgYE5PREVKU2AgcnVudGltZXMgYXJlIHN1cHBvcnRlZC8pO1xufSk7XG5cbnRlc3Quc2tpcCgndGhyb3dzIHdpdGggbm9uIGV4aXN0aW5nIGxvY2sgZmlsZScsICgpID0+IHtcbiAgZXhwZWN0KCgpID0+IG5ldyBOb2RlanNGdW5jdGlvbihzdGFjaywgJ2hhbmRsZXIxJywge1xuICAgIGRlcHNMb2NrRmlsZVBhdGg6ICcvZG9lcy9ub3QvZXhpc3QubG9jaycsXG4gIH0pKS50b1Rocm93KC9Mb2NrIGZpbGUgYXQgXFwvZG9lc1xcL25vdFxcL2V4aXN0LmxvY2sgZG9lc24ndCBleGlzdC8pO1xufSk7XG5cbnRlc3Quc2tpcCgndGhyb3dzIHdoZW4gZGVwc0xvY2tGaWxlUGF0aCBpcyBub3QgYSBmaWxlJywgKCkgPT4ge1xuICBleHBlY3QoKCkgPT4gbmV3IE5vZGVqc0Z1bmN0aW9uKHN0YWNrLCAnaGFuZGxlcjEnLCB7XG4gICAgZGVwc0xvY2tGaWxlUGF0aDogX19kaXJuYW1lLFxuICB9KSkudG9UaHJvdygvXFxgZGVwc0xvY2tGaWxlUGF0aFxcYCBzaG91bGQgcG9pbnQgdG8gYSBmaWxlLyk7XG59KTtcblxudGVzdC5za2lwKCdyZXNvbHZlcyBkZXBzTG9ja0ZpbGVQYXRoIHRvIGFuIGFic29sdXRlIHBhdGgnLCAoKSA9PiB7XG4gIG5ldyBOb2RlanNGdW5jdGlvbihzdGFjaywgJ2hhbmRsZXIxJywge1xuICAgIGRlcHNMb2NrRmlsZVBhdGg6ICcuL3BhY2thZ2UuanNvbicsXG4gIH0pO1xuXG4gIGV4cGVjdChCdW5kbGluZy5idW5kbGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICBkZXBzTG9ja0ZpbGVQYXRoOiBleHBlY3Quc3RyaW5nTWF0Y2hpbmcoL2F3cy1jZGstbGliXFwvcGFja2FnZS5qc29uJC8pLFxuICB9KSk7XG59KTtcblxudGVzdC5za2lwKCdyZXNvbHZlcyBlbnRyeSB0byBhbiBhYnNvbHV0ZSBwYXRoJywgKCkgPT4ge1xuICAvLyBXSEVOXG4gIG5ldyBOb2RlanNGdW5jdGlvbihzdGFjaywgJ2ZuJywge1xuICAgIGVudHJ5OiAnYXdzLWxhbWJkYS1ub2RlanMvbGliL2luZGV4LnRzJyxcbiAgfSk7XG5cbiAgZXhwZWN0KEJ1bmRsaW5nLmJ1bmRsZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgIGVudHJ5OiBleHBlY3Quc3RyaW5nTWF0Y2hpbmcoL2F3cy1jZGstbGliXFwvYXdzLWxhbWJkYS1ub2RlanNcXC9saWJcXC9pbmRleC50cyQvKSxcbiAgfSkpO1xufSk7XG5cbnRlc3Quc2tpcCgnY29uZmlndXJlcyBjb25uZWN0aW9uIHJldXNlIGZvciBhd3Mgc2RrJywgKCkgPT4ge1xuICAvLyBXSEVOXG4gIG5ldyBOb2RlanNGdW5jdGlvbihzdGFjaywgJ2hhbmRsZXIxJyk7XG5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6TGFtYmRhOjpGdW5jdGlvbicsIHtcbiAgICBFbnZpcm9ubWVudDoge1xuICAgICAgVmFyaWFibGVzOiB7XG4gICAgICAgIEFXU19OT0RFSlNfQ09OTkVDVElPTl9SRVVTRV9FTkFCTEVEOiAnMScsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufSk7XG5cbnRlc3Quc2tpcCgnY2FuIG9wdC1vdXQgb2YgY29ubmVjdGlvbiByZXVzZSBmb3IgYXdzIHNkaycsICgpID0+IHtcbiAgLy8gV0hFTlxuICBuZXcgTm9kZWpzRnVuY3Rpb24oc3RhY2ssICdoYW5kbGVyMScsIHtcbiAgICBhd3NTZGtDb25uZWN0aW9uUmV1c2U6IGZhbHNlLFxuICB9KTtcblxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpMYW1iZGE6OkZ1bmN0aW9uJywge1xuICAgIEVudmlyb25tZW50OiBNYXRjaC5hYnNlbnQoKSxcbiAgfSk7XG59KTtcblxudGVzdC5za2lwKCdOb2RlanNGdW5jdGlvbiBpbiBhIFZQQycsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ1ZwYycpO1xuXG4gIC8vIFdIRU5cbiAgbmV3IE5vZGVqc0Z1bmN0aW9uKHN0YWNrLCAnaGFuZGxlcjEnLCB7IHZwYyB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkxhbWJkYTo6RnVuY3Rpb24nLCB7XG4gICAgVnBjQ29uZmlnOiB7XG4gICAgICBTZWN1cml0eUdyb3VwSWRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAgICdoYW5kbGVyMVNlY3VyaXR5R3JvdXAzMDY4OEE2MicsXG4gICAgICAgICAgICAnR3JvdXBJZCcsXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBTdWJuZXRJZHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIFJlZjogJ1ZwY1ByaXZhdGVTdWJuZXQxU3VibmV0NTM2Qjk5N0EnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgUmVmOiAnVnBjUHJpdmF0ZVN1Ym5ldDJTdWJuZXQzNzg4QUFBMScsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gIH0pO1xufSk7XG4iXX0=