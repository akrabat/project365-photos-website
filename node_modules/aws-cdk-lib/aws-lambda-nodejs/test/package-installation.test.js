"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
const package_installation_1 = require("../lib/package-installation");
const util = require("../lib/util");
// eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies
const version = require('esbuild/package.json').version;
test('detects local version', () => {
    expect(package_installation_1.PackageInstallation.detect('esbuild')).toEqual({
        isLocal: true,
        version,
    });
});
test('checks global version if local detection fails', () => {
    const getModuleVersionMock = jest.spyOn(util, 'tryGetModuleVersionFromRequire').mockReturnValue(undefined);
    const spawnSyncMock = jest.spyOn(child_process, 'spawnSync').mockReturnValue({
        status: 0,
        stderr: Buffer.from('stderr'),
        stdout: Buffer.from('global-version'),
        pid: 123,
        output: ['stdout', 'stderr'],
        signal: null,
    });
    expect(package_installation_1.PackageInstallation.detect('esbuild')).toEqual({
        isLocal: false,
        version: 'global-version',
    });
    spawnSyncMock.mockRestore();
    getModuleVersionMock.mockRestore();
});
test('returns undefined on error', () => {
    const getModuleVersionMock = jest.spyOn(util, 'tryGetModuleVersionFromRequire').mockReturnValue(undefined);
    const spawnSyncMock = jest.spyOn(child_process, 'spawnSync').mockReturnValue({
        error: new Error('bad error'),
        status: 0,
        stderr: Buffer.from('stderr'),
        stdout: Buffer.from('stdout'),
        pid: 123,
        output: ['stdout', 'stderr'],
        signal: null,
    });
    expect(package_installation_1.PackageInstallation.detect('esbuild')).toBeUndefined();
    spawnSyncMock.mockRestore();
    getModuleVersionMock.mockRestore();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2FnZS1pbnN0YWxsYXRpb24udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBhY2thZ2UtaW5zdGFsbGF0aW9uLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQ0FBK0M7QUFDL0Msc0VBQWtFO0FBQ2xFLG9DQUFvQztBQUVwQyxvR0FBb0c7QUFDcEcsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUMsT0FBTyxDQUFDO0FBRXhELElBQUksQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDakMsTUFBTSxDQUFDLDBDQUFtQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNwRCxPQUFPLEVBQUUsSUFBSTtRQUNiLE9BQU87S0FDUixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxnREFBZ0QsRUFBRSxHQUFHLEVBQUU7SUFDMUQsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzRyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQyxlQUFlLENBQUM7UUFDM0UsTUFBTSxFQUFFLENBQUM7UUFDVCxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDN0IsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDckMsR0FBRyxFQUFFLEdBQUc7UUFDUixNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1FBQzVCLE1BQU0sRUFBRSxJQUFJO0tBQ2IsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLDBDQUFtQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNwRCxPQUFPLEVBQUUsS0FBSztRQUNkLE9BQU8sRUFBRSxnQkFBZ0I7S0FDMUIsQ0FBQyxDQUFDO0lBRUgsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzVCLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3JDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGdDQUFnQyxDQUFDLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNHLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDLGVBQWUsQ0FBQztRQUMzRSxLQUFLLEVBQUUsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQzdCLE1BQU0sRUFBRSxDQUFDO1FBQ1QsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzdCLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM3QixHQUFHLEVBQUUsR0FBRztRQUNSLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7UUFDNUIsTUFBTSxFQUFFLElBQUk7S0FDYixDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsMENBQW1CLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7SUFFOUQsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzVCLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3JDLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2hpbGRfcHJvY2VzcyBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7IFBhY2thZ2VJbnN0YWxsYXRpb24gfSBmcm9tICcuLi9saWIvcGFja2FnZS1pbnN0YWxsYXRpb24nO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi9saWIvdXRpbCc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzLCBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcbmNvbnN0IHZlcnNpb24gPSByZXF1aXJlKCdlc2J1aWxkL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG5cbnRlc3QoJ2RldGVjdHMgbG9jYWwgdmVyc2lvbicsICgpID0+IHtcbiAgZXhwZWN0KFBhY2thZ2VJbnN0YWxsYXRpb24uZGV0ZWN0KCdlc2J1aWxkJykpLnRvRXF1YWwoe1xuICAgIGlzTG9jYWw6IHRydWUsXG4gICAgdmVyc2lvbixcbiAgfSk7XG59KTtcblxudGVzdCgnY2hlY2tzIGdsb2JhbCB2ZXJzaW9uIGlmIGxvY2FsIGRldGVjdGlvbiBmYWlscycsICgpID0+IHtcbiAgY29uc3QgZ2V0TW9kdWxlVmVyc2lvbk1vY2sgPSBqZXN0LnNweU9uKHV0aWwsICd0cnlHZXRNb2R1bGVWZXJzaW9uRnJvbVJlcXVpcmUnKS5tb2NrUmV0dXJuVmFsdWUodW5kZWZpbmVkKTtcbiAgY29uc3Qgc3Bhd25TeW5jTW9jayA9IGplc3Quc3B5T24oY2hpbGRfcHJvY2VzcywgJ3NwYXduU3luYycpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgc3RhdHVzOiAwLFxuICAgIHN0ZGVycjogQnVmZmVyLmZyb20oJ3N0ZGVycicpLFxuICAgIHN0ZG91dDogQnVmZmVyLmZyb20oJ2dsb2JhbC12ZXJzaW9uJyksXG4gICAgcGlkOiAxMjMsXG4gICAgb3V0cHV0OiBbJ3N0ZG91dCcsICdzdGRlcnInXSxcbiAgICBzaWduYWw6IG51bGwsXG4gIH0pO1xuXG4gIGV4cGVjdChQYWNrYWdlSW5zdGFsbGF0aW9uLmRldGVjdCgnZXNidWlsZCcpKS50b0VxdWFsKHtcbiAgICBpc0xvY2FsOiBmYWxzZSxcbiAgICB2ZXJzaW9uOiAnZ2xvYmFsLXZlcnNpb24nLFxuICB9KTtcblxuICBzcGF3blN5bmNNb2NrLm1vY2tSZXN0b3JlKCk7XG4gIGdldE1vZHVsZVZlcnNpb25Nb2NrLm1vY2tSZXN0b3JlKCk7XG59KTtcblxudGVzdCgncmV0dXJucyB1bmRlZmluZWQgb24gZXJyb3InLCAoKSA9PiB7XG4gIGNvbnN0IGdldE1vZHVsZVZlcnNpb25Nb2NrID0gamVzdC5zcHlPbih1dGlsLCAndHJ5R2V0TW9kdWxlVmVyc2lvbkZyb21SZXF1aXJlJykubW9ja1JldHVyblZhbHVlKHVuZGVmaW5lZCk7XG4gIGNvbnN0IHNwYXduU3luY01vY2sgPSBqZXN0LnNweU9uKGNoaWxkX3Byb2Nlc3MsICdzcGF3blN5bmMnKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgIGVycm9yOiBuZXcgRXJyb3IoJ2JhZCBlcnJvcicpLFxuICAgIHN0YXR1czogMCxcbiAgICBzdGRlcnI6IEJ1ZmZlci5mcm9tKCdzdGRlcnInKSxcbiAgICBzdGRvdXQ6IEJ1ZmZlci5mcm9tKCdzdGRvdXQnKSxcbiAgICBwaWQ6IDEyMyxcbiAgICBvdXRwdXQ6IFsnc3Rkb3V0JywgJ3N0ZGVyciddLFxuICAgIHNpZ25hbDogbnVsbCxcbiAgfSk7XG5cbiAgZXhwZWN0KFBhY2thZ2VJbnN0YWxsYXRpb24uZGV0ZWN0KCdlc2J1aWxkJykpLnRvQmVVbmRlZmluZWQoKTtcblxuICBzcGF3blN5bmNNb2NrLm1vY2tSZXN0b3JlKCk7XG4gIGdldE1vZHVsZVZlcnNpb25Nb2NrLm1vY2tSZXN0b3JlKCk7XG59KTtcblxuIl19