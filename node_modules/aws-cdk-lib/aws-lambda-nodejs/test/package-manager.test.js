"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const lib_1 = require("../lib");
const package_manager_1 = require("../lib/package-manager");
test('from a package-lock.json', () => {
    const packageManager = package_manager_1.PackageManager.fromLockFile('/path/to/package-lock.json');
    expect(packageManager.lockFile).toEqual(package_manager_1.LockFile.NPM);
    expect(packageManager.argsSeparator).toBeUndefined();
    expect(packageManager.installCommand).toEqual(['npm', 'ci']);
    expect(packageManager.runCommand).toEqual(['npx', '--no-install']);
    expect(packageManager.runBinCommand('my-bin')).toBe('npx --no-install my-bin');
});
test('from a package-lock.json with LogLevel.ERROR', () => {
    const logLevel = lib_1.LogLevel.ERROR;
    const packageManager = package_manager_1.PackageManager.fromLockFile('/path/to/package-lock.json', logLevel);
    expect(packageManager.installCommand).toEqual(['npm', 'ci', '--loglevel', logLevel]);
});
test('from a yarn.lock', () => {
    const packageManager = package_manager_1.PackageManager.fromLockFile('/path/to/yarn.lock');
    expect(packageManager.lockFile).toEqual(package_manager_1.LockFile.YARN);
    expect(packageManager.argsSeparator).toBeUndefined();
    expect(packageManager.installCommand).toEqual(['yarn', 'install', '--no-immutable']);
    expect(packageManager.runCommand).toEqual(['yarn', 'run']);
    expect(packageManager.runBinCommand('my-bin')).toBe('yarn run my-bin');
});
test('from a yarn.lock with LogLevel.ERROR', () => {
    const packageManager = package_manager_1.PackageManager.fromLockFile('/path/to/yarn.lock', lib_1.LogLevel.ERROR);
    expect(packageManager.installCommand).toEqual(['yarn', 'install', '--no-immutable', '--silent']);
});
test('from a pnpm-lock.yaml', () => {
    const packageManager = package_manager_1.PackageManager.fromLockFile('/path/to/pnpm-lock.yaml');
    expect(packageManager.lockFile).toEqual(package_manager_1.LockFile.PNPM);
    expect(packageManager.argsSeparator).toEqual('--');
    expect(packageManager.installCommand).toEqual(['pnpm', 'install', '--config.node-linker=hoisted', '--config.package-import-method=clone-or-copy', '--no-prefer-frozen-lockfile']);
    expect(packageManager.runCommand).toEqual(['pnpm', 'exec']);
    expect(packageManager.runBinCommand('my-bin')).toBe('pnpm exec -- my-bin');
});
test('from a pnpm-lock.yaml with LogLevel.ERROR', () => {
    const packageManager = package_manager_1.PackageManager.fromLockFile('/path/to/pnpm-lock.yaml', lib_1.LogLevel.ERROR);
    expect(packageManager.installCommand).toEqual(['pnpm', 'install', '--reporter', 'silent', '--config.node-linker=hoisted', '--config.package-import-method=clone-or-copy', '--no-prefer-frozen-lockfile']);
});
test('defaults to NPM', () => {
    const packageManager = package_manager_1.PackageManager.fromLockFile('/path/to/other.lock');
    expect(packageManager.lockFile).toEqual(package_manager_1.LockFile.NPM);
});
test('Windows', () => {
    const osPlatformMock = jest.spyOn(os, 'platform').mockReturnValue('win32');
    const packageManager = package_manager_1.PackageManager.fromLockFile('/path/to/whatever');
    expect(packageManager.runBinCommand('my-bin')).toEqual('npx.cmd --no-install my-bin');
    osPlatformMock.mockRestore();
});
//# sourceMappingURL=data:application/json;base64,