"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const signer = require("../../aws-signer");
const cdk = require("../../core");
const lambda = require("../lib");
let app;
let stack;
beforeEach(() => {
    app = new cdk.App({});
    stack = new cdk.Stack(app);
});
describe('code signing config', () => {
    test('default', () => {
        const platform = signer.Platform.AWS_LAMBDA_SHA384_ECDSA;
        const signingProfile = new signer.SigningProfile(stack, 'SigningProfile', { platform });
        new lambda.CodeSigningConfig(stack, 'CodeSigningConfig', {
            signingProfiles: [signingProfile],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::CodeSigningConfig', {
            AllowedPublishers: {
                SigningProfileVersionArns: [{
                        'Fn::GetAtt': [
                            'SigningProfile2139A0F9',
                            'ProfileVersionArn',
                        ],
                    }],
            },
            CodeSigningPolicies: {
                UntrustedArtifactOnDeployment: 'Warn',
            },
        });
    });
    test('with multiple signing profiles', () => {
        const signingProfile1 = new signer.SigningProfile(stack, 'SigningProfile1', { platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA });
        const signingProfile2 = new signer.SigningProfile(stack, 'SigningProfile2', { platform: signer.Platform.AMAZON_FREE_RTOS_DEFAULT });
        const signingProfile3 = new signer.SigningProfile(stack, 'SigningProfile3', { platform: signer.Platform.AWS_IOT_DEVICE_MANAGEMENT_SHA256_ECDSA });
        new lambda.CodeSigningConfig(stack, 'CodeSigningConfig', {
            signingProfiles: [signingProfile1, signingProfile2, signingProfile3],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::CodeSigningConfig', {
            AllowedPublishers: {
                SigningProfileVersionArns: [
                    {
                        'Fn::GetAtt': [
                            'SigningProfile1D4191686',
                            'ProfileVersionArn',
                        ],
                    },
                    {
                        'Fn::GetAtt': [
                            'SigningProfile2E013C934',
                            'ProfileVersionArn',
                        ],
                    },
                    {
                        'Fn::GetAtt': [
                            'SigningProfile3A38DE231',
                            'ProfileVersionArn',
                        ],
                    },
                ],
            },
        });
    });
    test('with description and with untrustedArtifactOnDeployment of "ENFORCE"', () => {
        const platform = signer.Platform.AWS_LAMBDA_SHA384_ECDSA;
        const signingProfile = new signer.SigningProfile(stack, 'SigningProfile', { platform });
        new lambda.CodeSigningConfig(stack, 'CodeSigningConfig', {
            signingProfiles: [signingProfile],
            untrustedArtifactOnDeployment: lambda.UntrustedArtifactOnDeployment.ENFORCE,
            description: 'test description',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::CodeSigningConfig', {
            CodeSigningPolicies: {
                UntrustedArtifactOnDeployment: 'Enforce',
            },
            Description: 'test description',
        });
    });
    test('import does not create any resources', () => {
        const codeSigningConfigId = 'aaa-xxxxxxxxxx';
        const codeSigningConfigArn = `arn:aws:lambda:::code-signing-config:${codeSigningConfigId}`;
        const codeSigningConfig = lambda.CodeSigningConfig.fromCodeSigningConfigArn(stack, 'Imported', codeSigningConfigArn);
        expect(codeSigningConfig.codeSigningConfigArn).toBe(codeSigningConfigArn);
        expect(codeSigningConfig.codeSigningConfigId).toBe(codeSigningConfigId);
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Lambda::CodeSigningConfig', 0);
    });
    test('fail import with malformed code signing config arn', () => {
        const codeSigningConfigArn = 'arn:aws:lambda:::code-signing-config';
        expect(() => lambda.CodeSigningConfig.fromCodeSigningConfigArn(stack, 'Imported', codeSigningConfigArn)).toThrow(/ARN must be in the format/);
    });
});
//# sourceMappingURL=data:application/json;base64,