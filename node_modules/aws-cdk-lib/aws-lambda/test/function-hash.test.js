"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const assertions_1 = require("../../assertions");
const ssm = require("../../aws-ssm");
const cfnspec_1 = require("@aws-cdk/cfnspec");
const core_1 = require("../../core");
const cxapi = require("../../cx-api");
const lambda = require("../lib");
const function_hash_1 = require("../lib/function-hash");
describe('function hash', () => {
    describe('trimFromStart', () => {
        test('trim not needed', () => {
            expect((0, function_hash_1.trimFromStart)('foo', 100)).toEqual('foo');
            expect((0, function_hash_1.trimFromStart)('foo', 3)).toEqual('foo');
            expect((0, function_hash_1.trimFromStart)('', 3)).toEqual('');
        });
        test('trim required', () => {
            expect((0, function_hash_1.trimFromStart)('hello', 3)).toEqual('llo');
            expect((0, function_hash_1.trimFromStart)('hello', 4)).toEqual('ello');
            expect((0, function_hash_1.trimFromStart)('hello', 1)).toEqual('o');
        });
    });
    describe('calcHash', () => {
        test('same configuration and code yields the same hash', () => {
            const app = new core_1.App({
                context: {
                    [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false,
                },
            });
            const stack1 = new core_1.Stack(app, 'Stack1');
            const fn1 = new lambda.Function(stack1, 'MyFunction1', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'handler.zip')),
                handler: 'index.handler',
            });
            const stack2 = new core_1.Stack(app, 'Stack2');
            const fn2 = new lambda.Function(stack2, 'MyFunction1', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'handler.zip')),
                handler: 'index.handler',
            });
            expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual((0, function_hash_1.calculateFunctionHash)(fn2));
            expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual('74ee309e3752199288e6d64d385b52c4');
        });
    });
    test('code impacts hash', () => {
        const app = new core_1.App({
            context: {
                [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false,
            },
        });
        const stack1 = new core_1.Stack(app);
        const fn1 = new lambda.Function(stack1, 'MyFunction1', {
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset(path.join(__dirname, 'my-lambda-handler')),
            handler: 'index.handler',
        });
        expect((0, function_hash_1.calculateFunctionHash)(fn1)).not.toEqual('74ee309e3752199288e6d64d385b52c4');
        expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual('7d4cd781bf430bcc2495ccefff4c34dd');
    });
    test('environment variables impact hash', () => {
        const app = new core_1.App({
            context: {
                [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false,
            },
        });
        const stack1 = new core_1.Stack(app, 'Stack1');
        const fn1 = new lambda.Function(stack1, 'MyFunction', {
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset(path.join(__dirname, 'my-lambda-handler')),
            handler: 'index.handler',
            environment: {
                Foo: 'bar',
            },
        });
        const stack2 = new core_1.Stack(app);
        const fn2 = new lambda.Function(stack2, 'MyFunction', {
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset(path.join(__dirname, 'my-lambda-handler')),
            handler: 'index.handler',
            environment: {
                Foo: 'beer',
            },
        });
        expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual('4f21733bb4695a0e2e45a9090cd46a49');
        expect((0, function_hash_1.calculateFunctionHash)(fn2)).toEqual('0517a96b1ee246651cb9568686babdf2');
    });
    test('runtime impacts hash', () => {
        const app = new core_1.App({
            context: {
                [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false,
            },
        });
        const stack1 = new core_1.Stack(app, 'Stack1');
        const fn1 = new lambda.Function(stack1, 'MyFunction', {
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset(path.join(__dirname, 'my-lambda-handler')),
            handler: 'index.handler',
            environment: {
                Foo: 'bar',
            },
        });
        const stack2 = new core_1.Stack(app);
        const fn2 = new lambda.Function(stack2, 'MyFunction', {
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset(path.join(__dirname, 'my-lambda-handler')),
            handler: 'index.handler',
            environment: {
                Foo: 'beer',
            },
        });
        expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual('4f21733bb4695a0e2e45a9090cd46a49');
        expect((0, function_hash_1.calculateFunctionHash)(fn2)).toEqual('0517a96b1ee246651cb9568686babdf2');
    });
    test('inline code change impacts the hash', () => {
        const stack1 = new core_1.Stack();
        const fn1 = new lambda.Function(stack1, 'MyFunction', {
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromInline('foo'),
            handler: 'index.handler',
        });
        const stack2 = new core_1.Stack();
        const fn2 = new lambda.Function(stack2, 'MyFunction', {
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromInline('foo bar'),
            handler: 'index.handler',
        });
        expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual('2e4e06d52af2bb609d8c23243d665966');
        expect((0, function_hash_1.calculateFunctionHash)(fn2)).toEqual('aca1fae7e25d53a19c5ee159dcb56b94');
    });
    describe('lambda layers', () => {
        let stack1;
        let layer1;
        let layer2;
        beforeAll(() => {
            stack1 = new core_1.Stack();
            layer1 = new lambda.LayerVersion(stack1, 'MyLayer', {
                code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),
                compatibleRuntimes: [lambda.Runtime.NODEJS_14_X],
                license: 'Apache-2.0',
                description: 'A layer to test the L2 construct',
            });
            layer2 = new lambda.LayerVersion(stack1, 'MyLayer2', {
                code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),
                compatibleRuntimes: [lambda.Runtime.NODEJS_14_X],
                license: 'Apache-2.0',
                description: 'A layer to test the L2 construct',
            });
        });
        test('same configuration yields the same hash', () => {
            const stack2 = new core_1.Stack();
            const fn1 = new lambda.Function(stack2, 'MyFunction', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromInline('foo'),
                handler: 'index.handler',
                layers: [layer1],
            });
            const stack3 = new core_1.Stack();
            const fn2 = new lambda.Function(stack3, 'MyFunction', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromInline('foo'),
                handler: 'index.handler',
                layers: [layer1],
            });
            expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual((0, function_hash_1.calculateFunctionHash)(fn2));
            expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual('81483a72d55290ca24ce30ba6ee4a412');
        });
        test('different layers impacts hash', () => {
            const stack2 = new core_1.Stack();
            const fn1 = new lambda.Function(stack2, 'MyFunction', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromInline('foo'),
                handler: 'index.handler',
                layers: [layer1],
            });
            const stack3 = new core_1.Stack();
            const fn2 = new lambda.Function(stack3, 'MyFunction', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromInline('foo'),
                handler: 'index.handler',
                layers: [layer2],
            });
            expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual('81483a72d55290ca24ce30ba6ee4a412');
            expect((0, function_hash_1.calculateFunctionHash)(fn2)).toEqual('13baa4a05a4e78d538c4870e28576b3a');
        });
        describe('impact of lambda layer order on hash', () => {
            test('without feature flag, preserve old behavior to avoid unnecessary invalidation of templates', () => {
                const stack2 = new core_1.Stack();
                const fn1 = new lambda.Function(stack2, 'MyFunction', {
                    runtime: lambda.Runtime.NODEJS_14_X,
                    code: lambda.Code.fromInline('foo'),
                    handler: 'index.handler',
                    layers: [layer1, layer2],
                });
                const stack3 = new core_1.Stack();
                const fn2 = new lambda.Function(stack3, 'MyFunction', {
                    runtime: lambda.Runtime.NODEJS_14_X,
                    code: lambda.Code.fromInline('foo'),
                    handler: 'index.handler',
                    layers: [layer2, layer1],
                });
                expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual('fcdd8253b1018b5fa0114670552c43ab');
                expect((0, function_hash_1.calculateFunctionHash)(fn2)).toEqual('6ee79d94895b045cfc9e7e37653c07e9');
            });
            test('with feature flag, we sort layers so order is consistent', () => {
                const app = new core_1.App({ context: { [cxapi.LAMBDA_RECOGNIZE_LAYER_VERSION]: true } });
                const stack2 = new core_1.Stack(app, 'stack2');
                const fn1 = new lambda.Function(stack2, 'MyFunction', {
                    runtime: lambda.Runtime.NODEJS_14_X,
                    code: lambda.Code.fromInline('foo'),
                    handler: 'index.handler',
                    layers: [layer1, layer2],
                });
                const stack3 = new core_1.Stack(app, 'stack3');
                const fn2 = new lambda.Function(stack3, 'MyFunction', {
                    runtime: lambda.Runtime.NODEJS_14_X,
                    code: lambda.Code.fromInline('foo'),
                    handler: 'index.handler',
                    layers: [layer2, layer1],
                });
                expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual((0, function_hash_1.calculateFunctionHash)(fn2));
            });
        });
        test('with feature flag, imported lambda layers can be distinguished', () => {
            const app = new core_1.App({ context: { [cxapi.LAMBDA_RECOGNIZE_LAYER_VERSION]: true } });
            const stack2 = new core_1.Stack(app, 'stack2');
            const importedLayer1 = lambda.LayerVersion.fromLayerVersionArn(stack2, 'imported-layer', 'arn:aws:lambda:<region>:<account>:layer:<layer-name>:<version1>');
            const fn1 = new lambda.Function(stack2, 'MyFunction', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromInline('foo'),
                handler: 'index.handler',
                layers: [importedLayer1],
            });
            const stack3 = new core_1.Stack(app, 'stack3');
            const importedLayer2 = lambda.LayerVersion.fromLayerVersionArn(stack3, 'imported-layer', 'arn:aws:lambda:<region>:<account>:layer:<layer-name>:<version2>');
            const fn2 = new lambda.Function(stack3, 'MyFunction', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromInline('foo'),
                handler: 'index.handler',
                layers: [importedLayer2],
            });
            expect((0, function_hash_1.calculateFunctionHash)(fn1)).not.toEqual((0, function_hash_1.calculateFunctionHash)(fn2));
        });
    });
    describe('impact of env variables order on hash', () => {
        test('without "currentVersion", we preserve old behavior to avoid unnecessary invalidation of templates', () => {
            const stack1 = new core_1.Stack();
            const fn1 = new lambda.Function(stack1, 'MyFunction', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'my-lambda-handler')),
                handler: 'index.handler',
                environment: {
                    Foo: 'bar',
                    Bar: 'foo',
                },
            });
            const stack2 = new core_1.Stack();
            const fn2 = new lambda.Function(stack2, 'MyFunction', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'my-lambda-handler')),
                handler: 'index.handler',
                environment: {
                    Bar: 'foo',
                    Foo: 'bar',
                },
            });
            expect((0, function_hash_1.calculateFunctionHash)(fn1)).not.toEqual((0, function_hash_1.calculateFunctionHash)(fn2));
        });
        test('with "currentVersion", we sort env keys so order is consistent', () => {
            const stack1 = new core_1.Stack();
            const fn1 = new lambda.Function(stack1, 'MyFunction', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'my-lambda-handler')),
                handler: 'index.handler',
                environment: {
                    Foo: 'bar',
                    Bar: 'foo',
                },
            });
            new core_1.CfnOutput(stack1, 'VersionArn', { value: fn1.currentVersion.functionArn });
            const stack2 = new core_1.Stack();
            const fn2 = new lambda.Function(stack2, 'MyFunction', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'my-lambda-handler')),
                handler: 'index.handler',
                environment: {
                    Bar: 'foo',
                    Foo: 'bar',
                },
            });
            new core_1.CfnOutput(stack2, 'VersionArn', { value: fn2.currentVersion.functionArn });
            expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual((0, function_hash_1.calculateFunctionHash)(fn2));
        });
    });
    describe('corrected function hash', () => {
        let app;
        beforeEach(() => {
            app = new core_1.App({
                context: {
                    [cxapi.LAMBDA_RECOGNIZE_VERSION_PROPS]: true,
                    [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false,
                },
            });
        });
        test('DependsOn does not impact function hash', () => {
            const stack1 = new core_1.Stack(app, 'Stack1');
            const fn1 = new lambda.Function(stack1, 'MyFunction1', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'handler.zip')),
                handler: 'index.handler',
            });
            const stack2 = new core_1.Stack(app, 'Stack2');
            const fn2 = new lambda.Function(stack2, 'MyFunction1', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'handler.zip')),
                handler: 'index.handler',
            });
            const res = new core_1.CfnResource(stack2, 'MyResource', {
                type: 'AWS::Foo::Bar',
                properties: {
                    Name: 'Value',
                },
            });
            fn2.node.addDependency(res);
            expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual('74ee309e3752199288e6d64d385b52c4');
            expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual((0, function_hash_1.calculateFunctionHash)(fn2));
        });
        test('properties not locked to the version do not impact function hash', () => {
            const stack1 = new core_1.Stack(app, 'Stack1');
            const fn1 = new lambda.Function(stack1, 'MyFunction', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'handler.zip')),
                handler: 'index.handler',
            });
            const stack2 = new core_1.Stack(app, 'Stack2');
            const fn2 = new lambda.Function(stack2, 'MyFunction', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'handler.zip')),
                handler: 'index.handler',
                reservedConcurrentExecutions: 5, // property not locked to the version
            });
            // expect(calculateFunctionHash(fn1)).toEqual('b0d8729d597bdde2d79312fbf619c974');
            expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual((0, function_hash_1.calculateFunctionHash)(fn2));
        });
        test('unclassified property throws an error', () => {
            const stack = new core_1.Stack(app);
            const fn1 = new lambda.Function(stack, 'MyFunction1', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'handler.zip')),
                handler: 'index.handler',
            });
            fn1.node.defaultChild.addPropertyOverride('UnclassifiedProp', 'Value');
            expect(() => (0, function_hash_1.calculateFunctionHash)(fn1)).toThrow(/properties are not recognized/);
        });
        test('manual classification as version locked', () => {
            const stack = new core_1.Stack(app);
            const fn1 = new lambda.Function(stack, 'MyFunction1', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'handler.zip')),
                handler: 'index.handler',
            });
            const original = (0, function_hash_1.calculateFunctionHash)(fn1);
            lambda.Function.classifyVersionProperty('UnclassifiedProp', true);
            fn1.node.defaultChild.addPropertyOverride('UnclassifiedProp', 'Value');
            expect((0, function_hash_1.calculateFunctionHash)(fn1)).not.toEqual(original);
        });
        test('manual classification as not version locked', () => {
            const stack = new core_1.Stack(app);
            const fn1 = new lambda.Function(stack, 'MyFunction1', {
                runtime: lambda.Runtime.NODEJS_14_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'handler.zip')),
                handler: 'index.handler',
            });
            const original = (0, function_hash_1.calculateFunctionHash)(fn1);
            lambda.Function.classifyVersionProperty('UnclassifiedProp', false);
            fn1.node.defaultChild.addPropertyOverride('UnclassifiedProp', 'Value');
            expect((0, function_hash_1.calculateFunctionHash)(fn1)).toEqual(original);
        });
        test('all CFN properties are classified', () => {
            const spec = (0, cfnspec_1.resourceSpecification)('AWS::Lambda::Function');
            expect(spec.Properties).toBeDefined();
            const expected = Object.keys(spec.Properties).sort();
            const actual = Object.keys(function_hash_1.VERSION_LOCKED).sort();
            expect(actual).toEqual(expected);
        });
    });
});
test('imported layer hashes are consistent', () => {
    // GIVEN
    const app = new core_1.App({
        context: {
            '@aws-cdk/aws-lambda:recognizeLayerVersion': true,
        },
    });
    // WHEN
    const stack1 = new core_1.Stack(app, 'Stack1');
    const param1 = ssm.StringParameter.fromStringParameterName(stack1, 'Param', 'ParamName');
    const fn1 = new lambda.Function(stack1, 'Fn', {
        code: lambda.Code.fromInline('asdf'),
        handler: 'index.handler',
        runtime: lambda.Runtime.NODEJS_18_X,
        layers: [
            lambda.LayerVersion.fromLayerVersionArn(stack1, 'MyLayer', `arn:aws:lambda:${stack1.region}:<AccountID>:layer:IndexCFN:${param1.stringValue}`),
        ],
    });
    fn1.currentVersion; // Force creation of version
    const stack2 = new core_1.Stack(app, 'Stack2');
    const param2 = ssm.StringParameter.fromStringParameterName(stack2, 'Param', 'ParamName');
    const fn2 = new lambda.Function(stack2, 'Fn', {
        code: lambda.Code.fromInline('asdf'),
        handler: 'index.handler',
        runtime: lambda.Runtime.NODEJS_18_X,
        layers: [
            lambda.LayerVersion.fromLayerVersionArn(stack2, 'MyLayer', `arn:aws:lambda:${stack1.region}:<AccountID>:layer:IndexCFN:${param2.stringValue}`),
        ],
    });
    fn2.currentVersion; // Force creation of version
    // THEN
    const template1 = assertions_1.Template.fromStack(stack1);
    const template2 = assertions_1.Template.fromStack(stack2);
    expect(template1.toJSON()).toEqual(template2.toJSON());
});
test.each([false, true])('can invalidate version hash using invalidateVersionBasedOn: %p', (doIt) => {
    // GIVEN
    const app = new core_1.App();
    // WHEN
    const stack1 = new core_1.Stack(app, 'Stack1');
    const fn1 = new lambda.Function(stack1, 'Fn', {
        code: lambda.Code.fromInline('asdf'),
        handler: 'index.handler',
        runtime: lambda.Runtime.NODEJS_18_X,
    });
    if (doIt) {
        fn1.invalidateVersionBasedOn('abc');
    }
    fn1.currentVersion; // Force creation of version
    const stack2 = new core_1.Stack(app, 'Stack2');
    const fn2 = new lambda.Function(stack2, 'Fn', {
        code: lambda.Code.fromInline('asdf'),
        handler: 'index.handler',
        runtime: lambda.Runtime.NODEJS_18_X,
    });
    if (doIt) {
        fn1.invalidateVersionBasedOn('xyz');
    }
    fn2.currentVersion; // Force creation of version
    // THEN
    const template1 = assertions_1.Template.fromStack(stack1);
    const template2 = assertions_1.Template.fromStack(stack2);
    if (doIt) {
        expect(template1.toJSON()).not.toEqual(template2.toJSON());
    }
    else {
        expect(template1.toJSON()).toEqual(template2.toJSON());
    }
});
//# sourceMappingURL=data:application/json;base64,