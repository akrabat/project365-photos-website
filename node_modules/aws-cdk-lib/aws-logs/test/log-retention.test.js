"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const assertions_1 = require("../../assertions");
const iam = require("../../aws-iam");
const cdk = require("../../core");
const cxapi = require("../../cx-api");
const lib_1 = require("../lib");
/* eslint-disable quote-props */
describe('log retention', () => {
    test('log retention construct', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            retention: lib_1.RetentionDays.ONE_MONTH,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            'PolicyDocument': {
                'Statement': [
                    {
                        'Action': [
                            'logs:PutRetentionPolicy',
                            'logs:DeleteRetentionPolicy',
                        ],
                        'Effect': 'Allow',
                        'Resource': '*',
                    },
                ],
                'Version': '2012-10-17',
            },
            'PolicyName': 'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB',
            'Roles': [
                {
                    'Ref': 'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB',
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Function', {
            Handler: 'index.handler',
            Runtime: 'nodejs14.x',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::LogRetention', {
            'ServiceToken': {
                'Fn::GetAtt': [
                    'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A',
                    'Arn',
                ],
            },
            'LogGroupName': 'group',
            'RetentionInDays': 30,
        });
    });
    test('set the removalPolicy to DESTROY', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            retention: lib_1.RetentionDays.ONE_DAY,
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            'PolicyDocument': {
                'Statement': [
                    {
                        'Action': [
                            'logs:PutRetentionPolicy',
                            'logs:DeleteRetentionPolicy',
                        ],
                        'Effect': 'Allow',
                        'Resource': '*',
                    },
                    {
                        'Action': 'logs:DeleteLogGroup',
                        'Effect': 'Allow',
                        'Resource': {
                            'Fn::Join': [
                                '',
                                [
                                    'arn:',
                                    {
                                        'Ref': 'AWS::Partition',
                                    },
                                    ':logs:',
                                    {
                                        'Ref': 'AWS::Region',
                                    },
                                    ':',
                                    {
                                        'Ref': 'AWS::AccountId',
                                    },
                                    ':log-group:group:*',
                                ],
                            ],
                        },
                    },
                ],
                'Version': '2012-10-17',
            },
            'PolicyName': 'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB',
            'Roles': [
                {
                    'Ref': 'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB',
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::LogRetention', {
            'ServiceToken': {
                'Fn::GetAtt': [
                    'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A',
                    'Arn',
                ],
            },
            'LogGroupName': 'group',
            'RetentionInDays': 1,
            'RemovalPolicy': 'destroy',
        });
    });
    test('set the removalPolicy to RETAIN', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            retention: lib_1.RetentionDays.ONE_DAY,
            removalPolicy: cdk.RemovalPolicy.RETAIN,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            'PolicyDocument': {
                'Statement': [
                    {
                        'Action': [
                            'logs:PutRetentionPolicy',
                            'logs:DeleteRetentionPolicy',
                        ],
                        'Effect': 'Allow',
                        'Resource': '*',
                    },
                ],
                'Version': '2012-10-17',
            },
            'PolicyName': 'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB',
            'Roles': [
                {
                    'Ref': 'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB',
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::LogRetention', {
            'ServiceToken': {
                'Fn::GetAtt': [
                    'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A',
                    'Arn',
                ],
            },
            'LogGroupName': 'group',
            'RetentionInDays': 1,
            'RemovalPolicy': 'retain',
        });
    });
    describe('multiple log retention resources', () => {
        test('both removalPolicy DESTROY', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            new lib_1.LogRetention(stack, 'MyLambda1', {
                logGroupName: 'group1',
                retention: lib_1.RetentionDays.ONE_DAY,
                removalPolicy: cdk.RemovalPolicy.DESTROY,
            });
            new lib_1.LogRetention(stack, 'MyLambda2', {
                logGroupName: 'group2',
                retention: lib_1.RetentionDays.ONE_DAY,
                removalPolicy: cdk.RemovalPolicy.DESTROY,
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': [
                        {
                            'Action': [
                                'logs:PutRetentionPolicy',
                                'logs:DeleteRetentionPolicy',
                            ],
                            'Effect': 'Allow',
                            'Resource': '*',
                        },
                        {
                            'Action': 'logs:DeleteLogGroup',
                            'Effect': 'Allow',
                            'Resource': {
                                'Fn::Join': [
                                    '',
                                    [
                                        'arn:',
                                        {
                                            'Ref': 'AWS::Partition',
                                        },
                                        ':logs:',
                                        {
                                            'Ref': 'AWS::Region',
                                        },
                                        ':',
                                        {
                                            'Ref': 'AWS::AccountId',
                                        },
                                        ':log-group:group1:*',
                                    ],
                                ],
                            },
                        },
                        {
                            'Action': 'logs:DeleteLogGroup',
                            'Effect': 'Allow',
                            'Resource': {
                                'Fn::Join': [
                                    '',
                                    [
                                        'arn:',
                                        {
                                            'Ref': 'AWS::Partition',
                                        },
                                        ':logs:',
                                        {
                                            'Ref': 'AWS::Region',
                                        },
                                        ':',
                                        {
                                            'Ref': 'AWS::AccountId',
                                        },
                                        ':log-group:group2:*',
                                    ],
                                ],
                            },
                        },
                    ],
                    'Version': '2012-10-17',
                },
                'PolicyName': 'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB',
                'Roles': [
                    {
                        'Ref': 'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB',
                    },
                ],
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::LogRetention', {
                'ServiceToken': {
                    'Fn::GetAtt': [
                        'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A',
                        'Arn',
                    ],
                },
                'LogGroupName': 'group1',
                'RetentionInDays': 1,
                'RemovalPolicy': 'destroy',
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::LogRetention', {
                'ServiceToken': {
                    'Fn::GetAtt': [
                        'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A',
                        'Arn',
                    ],
                },
                'LogGroupName': 'group2',
                'RetentionInDays': 1,
                'RemovalPolicy': 'destroy',
            });
        });
        test('with removalPolicy DESTROY and removalPolicy RETAIN', () => {
            // GIVEN
            const stack = new cdk.Stack();
            // WHEN
            new lib_1.LogRetention(stack, 'MyLambda1', {
                logGroupName: 'group1',
                retention: lib_1.RetentionDays.ONE_DAY,
                removalPolicy: cdk.RemovalPolicy.DESTROY,
            });
            new lib_1.LogRetention(stack, 'MyLambda2', {
                logGroupName: 'group2',
                retention: lib_1.RetentionDays.ONE_DAY,
                removalPolicy: cdk.RemovalPolicy.RETAIN,
            });
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                'PolicyDocument': {
                    'Statement': [
                        {
                            'Action': [
                                'logs:PutRetentionPolicy',
                                'logs:DeleteRetentionPolicy',
                            ],
                            'Effect': 'Allow',
                            'Resource': '*',
                        },
                        {
                            'Action': 'logs:DeleteLogGroup',
                            'Effect': 'Allow',
                            'Resource': {
                                'Fn::Join': [
                                    '',
                                    [
                                        'arn:',
                                        {
                                            'Ref': 'AWS::Partition',
                                        },
                                        ':logs:',
                                        {
                                            'Ref': 'AWS::Region',
                                        },
                                        ':',
                                        {
                                            'Ref': 'AWS::AccountId',
                                        },
                                        ':log-group:group1:*',
                                    ],
                                ],
                            },
                        },
                    ],
                    'Version': '2012-10-17',
                },
                'PolicyName': 'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB',
                'Roles': [
                    {
                        'Ref': 'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB',
                    },
                ],
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::LogRetention', {
                'ServiceToken': {
                    'Fn::GetAtt': [
                        'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A',
                        'Arn',
                    ],
                },
                'LogGroupName': 'group1',
                'RetentionInDays': 1,
                'RemovalPolicy': 'destroy',
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::LogRetention', {
                'ServiceToken': {
                    'Fn::GetAtt': [
                        'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A',
                        'Arn',
                    ],
                },
                'LogGroupName': 'group2',
                'RetentionInDays': 1,
                'RemovalPolicy': 'retain',
            });
        });
    });
    test('the removalPolicy is not set', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            retention: lib_1.RetentionDays.ONE_DAY,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::LogRetention', {
            'ServiceToken': {
                'Fn::GetAtt': [
                    'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A',
                    'Arn',
                ],
            },
            'LogGroupName': 'group',
            'RetentionInDays': 1,
        });
    });
    test('with imported role', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const role = iam.Role.fromRoleArn(stack, 'Role', 'arn:aws:iam::123456789012:role/CoolRole');
        // WHEN
        new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            retention: lib_1.RetentionDays.ONE_MONTH,
            role,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            'PolicyDocument': {
                'Statement': [
                    {
                        'Action': [
                            'logs:PutRetentionPolicy',
                            'logs:DeleteRetentionPolicy',
                        ],
                        'Effect': 'Allow',
                        'Resource': '*',
                    },
                ],
                'Version': '2012-10-17',
            },
            'PolicyName': 'RolePolicy72E7D967',
            'Roles': [
                'CoolRole',
            ],
        });
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::IAM::Role', 0);
    });
    test('with RetentionPeriod set to Infinity', () => {
        const stack = new cdk.Stack();
        new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            retention: lib_1.RetentionDays.INFINITE,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::LogRetention', {
            RetentionInDays: assertions_1.Match.absent(),
        });
    });
    test('with LogGroupRegion specified', () => {
        const stack = new cdk.Stack();
        new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            logGroupRegion: 'us-east-1',
            retention: lib_1.RetentionDays.INFINITE,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::LogRetention', {
            LogGroupRegion: 'us-east-1',
        });
    });
    test('log group ARN is well formed and conforms', () => {
        const stack = new cdk.Stack();
        const group = new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            retention: lib_1.RetentionDays.ONE_MONTH,
        });
        const logGroupArn = group.logGroupArn;
        expect(logGroupArn.indexOf('logs')).toBeGreaterThan(-1);
        expect(logGroupArn.indexOf('log-group')).toBeGreaterThan(-1);
        expect(logGroupArn.endsWith(':*')).toEqual(true);
    });
    test('log group ARN is well formed and conforms when region is specified', () => {
        const stack = new cdk.Stack();
        const group = new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            logGroupRegion: 'us-west-2',
            retention: lib_1.RetentionDays.ONE_MONTH,
        });
        const logGroupArn = group.logGroupArn;
        expect(logGroupArn.indexOf('us-west-2')).toBeGreaterThan(-1);
        expect(logGroupArn.indexOf('logs')).toBeGreaterThan(-1);
        expect(logGroupArn.indexOf('log-group')).toBeGreaterThan(-1);
        expect(logGroupArn.endsWith(':*')).toEqual(true);
    });
    test('retention Lambda CfnResource receives propagated tags', () => {
        const stack = new cdk.Stack();
        cdk.Tags.of(stack).add('test-key', 'test-value');
        new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            retention: lib_1.RetentionDays.ONE_MONTH,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Function', {
            Tags: [
                {
                    Key: 'test-key',
                    Value: 'test-value',
                },
            ],
        });
    });
    test('asset metadata added to log retention construct lambda function', () => {
        // GIVEN
        const stack = new cdk.Stack();
        stack.node.setContext(cxapi.ASSET_RESOURCE_METADATA_ENABLED_CONTEXT, true);
        stack.node.setContext(cxapi.DISABLE_ASSET_STAGING_CONTEXT, true);
        const assetLocation = path.join(__dirname, '../', '/lib', '/log-retention-provider');
        // WHEN
        new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            retention: lib_1.RetentionDays.ONE_MONTH,
        });
        // Then
        assertions_1.Template.fromStack(stack).hasResource('AWS::Lambda::Function', {
            Metadata: {
                'aws:asset:path': assetLocation,
                'aws:asset:is-bundled': false,
                'aws:asset:property': 'Code',
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,