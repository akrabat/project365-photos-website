"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const aws_cloudwatch_1 = require("../../aws-cloudwatch");
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe('metric filter', () => {
    test('trivial instantiation', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const logGroup = new lib_1.LogGroup(stack, 'LogGroup');
        // WHEN
        new lib_1.MetricFilter(stack, 'Subscription', {
            logGroup,
            metricNamespace: 'AWS/Test',
            metricName: 'Latency',
            metricValue: '$.latency',
            filterPattern: lib_1.FilterPattern.exists('$.latency'),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Logs::MetricFilter', {
            MetricTransformations: [{
                    MetricNamespace: 'AWS/Test',
                    MetricName: 'Latency',
                    MetricValue: '$.latency',
                }],
            FilterPattern: '{ $.latency = "*" }',
            LogGroupName: { Ref: 'LogGroupF5B46931' },
        });
    });
    test('with dimensions', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const logGroup = new lib_1.LogGroup(stack, 'LogGroup');
        // WHEN
        new lib_1.MetricFilter(stack, 'Subscription', {
            logGroup,
            metricNamespace: 'AWS/Test',
            metricName: 'Latency',
            metricValue: '$.latency',
            filterPattern: lib_1.FilterPattern.exists('$.latency'),
            dimensions: {
                Foo: 'Bar',
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Logs::MetricFilter', {
            MetricTransformations: [{
                    MetricNamespace: 'AWS/Test',
                    MetricName: 'Latency',
                    MetricValue: '$.latency',
                    Dimensions: [
                        {
                            Key: 'Foo',
                            Value: 'Bar',
                        },
                    ],
                }],
            FilterPattern: '{ $.latency = "*" }',
            LogGroupName: { Ref: 'LogGroupF5B46931' },
        });
    });
    test('should throw with more than 3 dimensions', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const logGroup = new lib_1.LogGroup(stack, 'LogGroup');
        // WHEN
        expect(() => new lib_1.MetricFilter(stack, 'Subscription', {
            logGroup,
            metricNamespace: 'AWS/Test',
            metricName: 'Latency',
            metricValue: '$.latency',
            filterPattern: lib_1.FilterPattern.exists('$.latency'),
            dimensions: {
                Foo: 'Bar',
                Bar: 'Baz',
                Baz: 'Qux',
                Qux: 'Quux',
            },
        })).toThrow(/MetricFilter only supports a maximum of 3 Dimensions/);
    });
    test('metric filter exposes metric', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const logGroup = new lib_1.LogGroup(stack, 'LogGroup');
        // WHEN
        const mf = new lib_1.MetricFilter(stack, 'Subscription', {
            logGroup,
            metricNamespace: 'AWS/Test',
            metricName: 'Latency',
            metricValue: '$.latency',
            filterPattern: lib_1.FilterPattern.exists('$.latency'),
        });
        const metric = mf.metric();
        // THEN
        expect(metric).toEqual(new aws_cloudwatch_1.Metric({
            metricName: 'Latency',
            namespace: 'AWS/Test',
            statistic: 'avg',
        }));
    });
    test('metric filter exposes metric with custom statistic', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const logGroup = new lib_1.LogGroup(stack, 'LogGroup');
        // WHEN
        const mf = new lib_1.MetricFilter(stack, 'Subscription', {
            logGroup,
            metricNamespace: 'AWS/Test',
            metricName: 'Latency',
            metricValue: '$.latency',
            filterPattern: lib_1.FilterPattern.exists('$.latency'),
        });
        const metric = mf.metric({ statistic: 'maximum' });
        // THEN
        expect(metric).toEqual(new aws_cloudwatch_1.Metric({
            metricName: 'Latency',
            namespace: 'AWS/Test',
            statistic: 'maximum',
        }));
    });
    test('with unit', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const logGroup = new lib_1.LogGroup(stack, 'LogGroup');
        // WHEN
        new lib_1.MetricFilter(stack, 'Subscription', {
            logGroup,
            metricNamespace: 'AWS/Test',
            metricName: 'Latency',
            metricValue: '$.latency',
            filterPattern: lib_1.FilterPattern.exists('$.latency'),
            dimensions: {
                Foo: 'Bar',
            },
            unit: aws_cloudwatch_1.Unit.MILLISECONDS,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Logs::MetricFilter', {
            MetricTransformations: [{
                    MetricNamespace: 'AWS/Test',
                    MetricName: 'Latency',
                    MetricValue: '$.latency',
                    Dimensions: [
                        {
                            Key: 'Foo',
                            Value: 'Bar',
                        },
                    ],
                    Unit: 'Milliseconds',
                }],
            FilterPattern: '{ $.latency = "*" }',
            LogGroupName: { Ref: 'LogGroupF5B46931' },
        });
    });
    test('with no unit', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const logGroup = new lib_1.LogGroup(stack, 'LogGroup');
        // WHEN
        new lib_1.MetricFilter(stack, 'Subscription', {
            logGroup,
            metricNamespace: 'AWS/Test',
            metricName: 'Latency',
            metricValue: '$.latency',
            filterPattern: lib_1.FilterPattern.exists('$.latency'),
            dimensions: {
                Foo: 'Bar',
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Logs::MetricFilter', {
            MetricTransformations: [{
                    MetricNamespace: 'AWS/Test',
                    MetricName: 'Latency',
                    MetricValue: '$.latency',
                    Dimensions: [
                        {
                            Key: 'Foo',
                            Value: 'Bar',
                        },
                    ],
                }],
            FilterPattern: '{ $.latency = "*" }',
            LogGroupName: { Ref: 'LogGroupF5B46931' },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,