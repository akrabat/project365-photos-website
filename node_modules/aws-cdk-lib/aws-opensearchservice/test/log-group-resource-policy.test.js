"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const iam = require("../../aws-iam");
const core_1 = require("../../core");
const log_group_resource_policy_1 = require("../lib/log-group-resource-policy");
let app;
let stack;
beforeEach(() => {
    app = new core_1.App();
    stack = new core_1.Stack(app, 'Stack', {
        env: { account: '1234', region: 'testregion' },
    });
});
test('minimal example renders correctly', () => {
    new log_group_resource_policy_1.LogGroupResourcePolicy(stack, 'LogGroupResourcePolicy', {
        policyName: 'TestPolicy',
        policyStatements: [new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                actions: ['logs:PutLogEvents', 'logs:CreateLogStream'],
                resources: ['*'],
                principals: [new iam.ServicePrincipal('es.amazonaws.com')],
            })],
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::CloudwatchLogResourcePolicy', {
        ServiceToken: {
            'Fn::GetAtt': [
                'AWS679f53fac002430cb0da5b7982bd22872D164C4C',
                'Arn',
            ],
        },
        Create: JSON.stringify({
            service: 'CloudWatchLogs',
            action: 'putResourcePolicy',
            parameters: {
                policyName: 'TestPolicy',
                policyDocument: '{"Statement":[{"Action":["logs:PutLogEvents","logs:CreateLogStream"],"Effect":"Allow","Principal":{"Service":"es.amazonaws.com"},"Resource":"*"}],"Version":"2012-10-17"}',
            },
            physicalResourceId: {
                id: 'LogGroupResourcePolicy',
            },
        }),
        Update: JSON.stringify({
            service: 'CloudWatchLogs',
            action: 'putResourcePolicy',
            parameters: {
                policyName: 'TestPolicy',
                policyDocument: '{"Statement":[{"Action":["logs:PutLogEvents","logs:CreateLogStream"],"Effect":"Allow","Principal":{"Service":"es.amazonaws.com"},"Resource":"*"}],"Version":"2012-10-17"}',
            },
            physicalResourceId: {
                id: 'LogGroupResourcePolicy',
            },
        }),
        Delete: JSON.stringify({
            service: 'CloudWatchLogs',
            action: 'deleteResourcePolicy',
            parameters: {
                policyName: 'TestPolicy',
            },
            ignoreErrorCodesMatching: 'ResourceNotFoundException',
        }),
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLWdyb3VwLXJlc291cmNlLXBvbGljeS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9nLWdyb3VwLXJlc291cmNlLXBvbGljeS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLHFDQUFxQztBQUNyQyxxQ0FBd0M7QUFDeEMsZ0ZBQTBFO0FBRTFFLElBQUksR0FBUSxDQUFDO0FBQ2IsSUFBSSxLQUFZLENBQUM7QUFFakIsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNkLEdBQUcsR0FBRyxJQUFJLFVBQUcsRUFBRSxDQUFDO0lBQ2hCLEtBQUssR0FBRyxJQUFJLFlBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFO1FBQzlCLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRTtLQUMvQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7SUFDN0MsSUFBSSxrREFBc0IsQ0FBQyxLQUFLLEVBQUUsd0JBQXdCLEVBQUU7UUFDMUQsVUFBVSxFQUFFLFlBQVk7UUFDeEIsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7Z0JBQ3pDLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUs7Z0JBQ3hCLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixFQUFFLHNCQUFzQixDQUFDO2dCQUN0RCxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUM7Z0JBQ2hCLFVBQVUsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLENBQUM7YUFDM0QsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDO0lBRUgscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMscUNBQXFDLEVBQUU7UUFDckYsWUFBWSxFQUFFO1lBQ1osWUFBWSxFQUFFO2dCQUNaLDZDQUE2QztnQkFDN0MsS0FBSzthQUNOO1NBQ0Y7UUFDRCxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNyQixPQUFPLEVBQUUsZ0JBQWdCO1lBQ3pCLE1BQU0sRUFBRSxtQkFBbUI7WUFDM0IsVUFBVSxFQUFFO2dCQUNWLFVBQVUsRUFBRSxZQUFZO2dCQUN4QixjQUFjLEVBQUUsMktBQTJLO2FBQzVMO1lBQ0Qsa0JBQWtCLEVBQUU7Z0JBQ2xCLEVBQUUsRUFBRSx3QkFBd0I7YUFDN0I7U0FDRixDQUFDO1FBQ0YsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDckIsT0FBTyxFQUFFLGdCQUFnQjtZQUN6QixNQUFNLEVBQUUsbUJBQW1CO1lBQzNCLFVBQVUsRUFBRTtnQkFDVixVQUFVLEVBQUUsWUFBWTtnQkFDeEIsY0FBYyxFQUFFLDJLQUEySzthQUM1TDtZQUNELGtCQUFrQixFQUFFO2dCQUNsQixFQUFFLEVBQUUsd0JBQXdCO2FBQzdCO1NBQ0YsQ0FBQztRQUNGLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3JCLE9BQU8sRUFBRSxnQkFBZ0I7WUFDekIsTUFBTSxFQUFFLHNCQUFzQjtZQUM5QixVQUFVLEVBQUU7Z0JBQ1YsVUFBVSxFQUFFLFlBQVk7YUFDekI7WUFDRCx3QkFBd0IsRUFBRSwyQkFBMkI7U0FDdEQsQ0FBQztLQUNILENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIGlhbSBmcm9tICcuLi8uLi9hd3MtaWFtJztcbmltcG9ydCB7IEFwcCwgU3RhY2sgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IExvZ0dyb3VwUmVzb3VyY2VQb2xpY3kgfSBmcm9tICcuLi9saWIvbG9nLWdyb3VwLXJlc291cmNlLXBvbGljeSc7XG5cbmxldCBhcHA6IEFwcDtcbmxldCBzdGFjazogU3RhY2s7XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBhcHAgPSBuZXcgQXBwKCk7XG4gIHN0YWNrID0gbmV3IFN0YWNrKGFwcCwgJ1N0YWNrJywge1xuICAgIGVudjogeyBhY2NvdW50OiAnMTIzNCcsIHJlZ2lvbjogJ3Rlc3RyZWdpb24nIH0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ21pbmltYWwgZXhhbXBsZSByZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgbmV3IExvZ0dyb3VwUmVzb3VyY2VQb2xpY3koc3RhY2ssICdMb2dHcm91cFJlc291cmNlUG9saWN5Jywge1xuICAgIHBvbGljeU5hbWU6ICdUZXN0UG9saWN5JyxcbiAgICBwb2xpY3lTdGF0ZW1lbnRzOiBbbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgZWZmZWN0OiBpYW0uRWZmZWN0LkFMTE9XLFxuICAgICAgYWN0aW9uczogWydsb2dzOlB1dExvZ0V2ZW50cycsICdsb2dzOkNyZWF0ZUxvZ1N0cmVhbSddLFxuICAgICAgcmVzb3VyY2VzOiBbJyonXSxcbiAgICAgIHByaW5jaXBhbHM6IFtuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2VzLmFtYXpvbmF3cy5jb20nKV0sXG4gICAgfSldLFxuICB9KTtcblxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQ3VzdG9tOjpDbG91ZHdhdGNoTG9nUmVzb3VyY2VQb2xpY3knLCB7XG4gICAgU2VydmljZVRva2VuOiB7XG4gICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgJ0FXUzY3OWY1M2ZhYzAwMjQzMGNiMGRhNWI3OTgyYmQyMjg3MkQxNjRDNEMnLFxuICAgICAgICAnQXJuJyxcbiAgICAgIF0sXG4gICAgfSxcbiAgICBDcmVhdGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHNlcnZpY2U6ICdDbG91ZFdhdGNoTG9ncycsXG4gICAgICBhY3Rpb246ICdwdXRSZXNvdXJjZVBvbGljeScsXG4gICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgIHBvbGljeU5hbWU6ICdUZXN0UG9saWN5JyxcbiAgICAgICAgcG9saWN5RG9jdW1lbnQ6ICd7XCJTdGF0ZW1lbnRcIjpbe1wiQWN0aW9uXCI6W1wibG9nczpQdXRMb2dFdmVudHNcIixcImxvZ3M6Q3JlYXRlTG9nU3RyZWFtXCJdLFwiRWZmZWN0XCI6XCJBbGxvd1wiLFwiUHJpbmNpcGFsXCI6e1wiU2VydmljZVwiOlwiZXMuYW1hem9uYXdzLmNvbVwifSxcIlJlc291cmNlXCI6XCIqXCJ9XSxcIlZlcnNpb25cIjpcIjIwMTItMTAtMTdcIn0nLFxuICAgICAgfSxcbiAgICAgIHBoeXNpY2FsUmVzb3VyY2VJZDoge1xuICAgICAgICBpZDogJ0xvZ0dyb3VwUmVzb3VyY2VQb2xpY3knLFxuICAgICAgfSxcbiAgICB9KSxcbiAgICBVcGRhdGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHNlcnZpY2U6ICdDbG91ZFdhdGNoTG9ncycsXG4gICAgICBhY3Rpb246ICdwdXRSZXNvdXJjZVBvbGljeScsXG4gICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgIHBvbGljeU5hbWU6ICdUZXN0UG9saWN5JyxcbiAgICAgICAgcG9saWN5RG9jdW1lbnQ6ICd7XCJTdGF0ZW1lbnRcIjpbe1wiQWN0aW9uXCI6W1wibG9nczpQdXRMb2dFdmVudHNcIixcImxvZ3M6Q3JlYXRlTG9nU3RyZWFtXCJdLFwiRWZmZWN0XCI6XCJBbGxvd1wiLFwiUHJpbmNpcGFsXCI6e1wiU2VydmljZVwiOlwiZXMuYW1hem9uYXdzLmNvbVwifSxcIlJlc291cmNlXCI6XCIqXCJ9XSxcIlZlcnNpb25cIjpcIjIwMTItMTAtMTdcIn0nLFxuICAgICAgfSxcbiAgICAgIHBoeXNpY2FsUmVzb3VyY2VJZDoge1xuICAgICAgICBpZDogJ0xvZ0dyb3VwUmVzb3VyY2VQb2xpY3knLFxuICAgICAgfSxcbiAgICB9KSxcbiAgICBEZWxldGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHNlcnZpY2U6ICdDbG91ZFdhdGNoTG9ncycsXG4gICAgICBhY3Rpb246ICdkZWxldGVSZXNvdXJjZVBvbGljeScsXG4gICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgIHBvbGljeU5hbWU6ICdUZXN0UG9saWN5JyxcbiAgICAgIH0sXG4gICAgICBpZ25vcmVFcnJvckNvZGVzTWF0Y2hpbmc6ICdSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uJyxcbiAgICB9KSxcbiAgfSk7XG59KTtcbiJdfQ==