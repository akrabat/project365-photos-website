"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const iam = require("../../aws-iam");
const core_1 = require("../../core");
const opensearch_access_policy_1 = require("../lib/opensearch-access-policy");
let app;
let stack;
beforeEach(() => {
    app = new core_1.App();
    stack = new core_1.Stack(app, 'Stack', {
        env: { account: '1234', region: 'testregion' },
    });
});
test('minimal example renders correctly', () => {
    const domainArn = 'test:arn';
    new opensearch_access_policy_1.OpenSearchAccessPolicy(stack, 'OpenSearchAccessPolicy', {
        domainName: 'TestDomain',
        domainArn: domainArn,
        accessPolicies: [new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                actions: ['es:ESHttp*'],
                principals: [new iam.AnyPrincipal()],
                resources: [domainArn],
            })],
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::OpenSearchAccessPolicy', {
        ServiceToken: {
            'Fn::GetAtt': [
                'AWS679f53fac002430cb0da5b7982bd22872D164C4C',
                'Arn',
            ],
        },
        Create: JSON.stringify({
            action: 'updateDomainConfig',
            service: 'OpenSearch',
            parameters: {
                DomainName: 'TestDomain',
                AccessPolicies: '{"Statement":[{"Action":"es:ESHttp*","Effect":"Allow","Principal":{"AWS":"*"},"Resource":"test:arn"}],"Version":"2012-10-17"}',
            },
            outputPaths: ['DomainConfig.AccessPolicies'],
            physicalResourceId: { id: 'TestDomainAccessPolicy' },
        }),
        Update: JSON.stringify({
            action: 'updateDomainConfig',
            service: 'OpenSearch',
            parameters: {
                DomainName: 'TestDomain',
                AccessPolicies: '{"Statement":[{"Action":"es:ESHttp*","Effect":"Allow","Principal":{"AWS":"*"},"Resource":"test:arn"}],"Version":"2012-10-17"}',
            },
            outputPaths: ['DomainConfig.AccessPolicies'],
            physicalResourceId: { id: 'TestDomainAccessPolicy' },
        }),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [{
                    Action: 'es:UpdateDomainConfig',
                    Effect: 'Allow',
                    Resource: domainArn,
                }],
        },
    });
});
test('support access policy added inline and later', () => {
    const opensearchAccessPolicy = new opensearch_access_policy_1.OpenSearchAccessPolicy(stack, 'OpenSearchAccessPolicy', {
        domainName: 'TestDomain',
        domainArn: 'test:arn',
        accessPolicies: [
            new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                actions: ['es:ESHttp*'],
                principals: [new iam.AnyPrincipal()],
                resources: ['test:arn'],
            }),
        ],
    });
    opensearchAccessPolicy.addAccessPolicies(new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['*'],
        principals: [new iam.AnyPrincipal()],
        resources: ['test:arn'],
    }));
    assertions_1.Template.fromStack(stack).hasResourceProperties('Custom::OpenSearchAccessPolicy', {
        ServiceToken: {
            'Fn::GetAtt': [
                'AWS679f53fac002430cb0da5b7982bd22872D164C4C',
                'Arn',
            ],
        },
        Create: JSON.stringify({
            action: 'updateDomainConfig',
            service: 'OpenSearch',
            parameters: {
                DomainName: 'TestDomain',
                AccessPolicies: '{"Statement":[{"Action":"es:ESHttp*","Effect":"Allow","Principal":{"AWS":"*"},"Resource":"test:arn"},{"Action":"*","Effect":"Allow","Principal":{"AWS":"*"},"Resource":"test:arn"}],"Version":"2012-10-17"}',
            },
            outputPaths: ['DomainConfig.AccessPolicies'],
            physicalResourceId: { id: 'TestDomainAccessPolicy' },
        }),
        Update: JSON.stringify({
            action: 'updateDomainConfig',
            service: 'OpenSearch',
            parameters: {
                DomainName: 'TestDomain',
                AccessPolicies: '{"Statement":[{"Action":"es:ESHttp*","Effect":"Allow","Principal":{"AWS":"*"},"Resource":"test:arn"},{"Action":"*","Effect":"Allow","Principal":{"AWS":"*"},"Resource":"test:arn"}],"Version":"2012-10-17"}',
            },
            outputPaths: ['DomainConfig.AccessPolicies'],
            physicalResourceId: { id: 'TestDomainAccessPolicy' },
        }),
    });
});
//# sourceMappingURL=data:application/json;base64,