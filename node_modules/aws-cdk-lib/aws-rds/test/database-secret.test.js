"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const lib_1 = require("../lib");
const util_1 = require("../lib/private/util");
describe('database secret', () => {
    test('create a database secret', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const dbSecret = new lib_1.DatabaseSecret(stack, 'Secret', {
            username: 'admin-username',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SecretsManager::Secret', {
            Description: {
                'Fn::Join': [
                    '',
                    [
                        'Generated by the CDK for stack: ',
                        {
                            Ref: 'AWS::StackName',
                        },
                    ],
                ],
            },
            GenerateSecretString: {
                ExcludeCharacters: util_1.DEFAULT_PASSWORD_EXCLUDE_CHARS,
                GenerateStringKey: 'password',
                PasswordLength: 30,
                SecretStringTemplate: '{"username":"admin-username"}',
            },
        });
        expect(getSecretLogicalId(dbSecret, stack)).toEqual('SecretA720EF05');
    });
    test('create a database secret with a database name and secret name', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const customDbSecret = new lib_1.DatabaseSecret(stack, 'Secret', {
            username: 'admin-username',
            dbname: 'admindb',
            secretName: 'admin-secret',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SecretsManager::Secret', {
            Description: {
                'Fn::Join': [
                    '',
                    [
                        'Generated by the CDK for stack: ',
                        {
                            Ref: 'AWS::StackName',
                        },
                    ],
                ],
            },
            Name: 'admin-secret',
            GenerateSecretString: {
                ExcludeCharacters: util_1.DEFAULT_PASSWORD_EXCLUDE_CHARS,
                GenerateStringKey: 'password',
                PasswordLength: 30,
                SecretStringTemplate: '{"username":"admin-username","dbname":"admindb"}',
            },
        });
        expect(getSecretLogicalId(customDbSecret, stack)).toEqual('SecretA720EF05');
    });
    test('with master secret', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const masterSecret = new lib_1.DatabaseSecret(stack, 'MasterSecret', {
            username: 'master-username',
        });
        // WHEN
        new lib_1.DatabaseSecret(stack, 'UserSecret', {
            username: 'user-username',
            masterSecret,
            excludeCharacters: '"@/\\',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SecretsManager::Secret', {
            GenerateSecretString: {
                ExcludeCharacters: '"@/\\',
                GenerateStringKey: 'password',
                PasswordLength: 30,
                SecretStringTemplate: {
                    'Fn::Join': [
                        '',
                        [
                            '{"username":"user-username","masterarn":"',
                            {
                                Ref: 'MasterSecretA11BF785',
                            },
                            '"}',
                        ],
                    ],
                },
            },
        });
    });
    test('replace on password critera change', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const dbSecret = new lib_1.DatabaseSecret(stack, 'Secret', {
            username: 'admin',
            replaceOnPasswordCriteriaChanges: true,
        });
        // THEN
        const dbSecretlogicalId = getSecretLogicalId(dbSecret, stack);
        expect(dbSecretlogicalId).toEqual('Secret3fdaad7efa858a3daf9490cf0a702aeb');
        // same node path but other excluded characters
        stack.node.tryRemoveChild('Secret');
        const otherSecret1 = new lib_1.DatabaseSecret(stack, 'Secret', {
            username: 'admin',
            replaceOnPasswordCriteriaChanges: true,
            excludeCharacters: '@!()[]',
        });
        expect(dbSecretlogicalId).not.toEqual(getSecretLogicalId(otherSecret1, stack));
        // other node path but same excluded characters
        const otherSecret2 = new lib_1.DatabaseSecret(stack, 'Secret2', {
            username: 'admin',
            replaceOnPasswordCriteriaChanges: true,
        });
        expect(dbSecretlogicalId).not.toEqual(getSecretLogicalId(otherSecret2, stack));
    });
});
function getSecretLogicalId(dbSecret, stack) {
    const cfnSecret = dbSecret.node.defaultChild;
    return stack.resolve(cfnSecret.logicalId);
}
//# sourceMappingURL=data:application/json;base64,