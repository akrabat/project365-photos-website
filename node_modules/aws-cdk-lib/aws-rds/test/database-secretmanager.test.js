"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const ec2 = require("../../aws-ec2");
const secretsmanager = require("../../aws-secretsmanager");
const cdk = require("../../core");
const lib_1 = require("../lib");
describe('database secret manager', () => {
    test('can create a Serverless Cluster using an existing secret from secretmanager', () => {
        // GIVEN
        const stack = testStack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const existingSecret = secretsmanager.Secret.fromSecretNameV2(stack, 'DBSecret', 'myDBLoginInfo');
        // WHEN
        new lib_1.ServerlessCluster(stack, 'ServerlessDatabase', {
            engine: lib_1.DatabaseClusterEngine.AURORA_POSTGRESQL,
            vpc,
            credentials: lib_1.Credentials.fromSecret(existingSecret),
            parameterGroup: lib_1.ParameterGroup.fromParameterGroupName(stack, 'ParameterGroup', 'default.aurora-postgresql10'),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResource('AWS::RDS::DBCluster', {
            Properties: {
                Engine: 'aurora-postgresql',
                DBClusterParameterGroupName: 'default.aurora-postgresql10',
                DBSubnetGroupName: {
                    Ref: 'ServerlessDatabaseSubnets5643CD76',
                },
                EngineMode: 'serverless',
                MasterUsername: {
                    'Fn::Join': [
                        '',
                        [
                            '{{resolve:secretsmanager:arn:',
                            {
                                Ref: 'AWS::Partition',
                            },
                            ':secretsmanager:us-test-1:12345:secret:myDBLoginInfo:SecretString:username::}}',
                        ],
                    ],
                },
                MasterUserPassword: {
                    'Fn::Join': [
                        '',
                        [
                            '{{resolve:secretsmanager:arn:',
                            {
                                Ref: 'AWS::Partition',
                            },
                            ':secretsmanager:us-test-1:12345:secret:myDBLoginInfo:SecretString:password::}}',
                        ],
                    ],
                },
                StorageEncrypted: true,
                VpcSecurityGroupIds: [
                    {
                        'Fn::GetAtt': [
                            'ServerlessDatabaseSecurityGroupB00D8C0F',
                            'GroupId',
                        ],
                    },
                ],
            },
            DeletionPolicy: 'Snapshot',
            UpdateReplacePolicy: 'Snapshot',
        });
    });
});
function testStack() {
    const stack = new cdk.Stack(undefined, undefined, { env: { account: '12345', region: 'us-test-1' } });
    stack.node.setContext('availability-zones:12345:us-test-1', ['us-test-1a', 'us-test-1b']);
    return stack;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2Utc2VjcmV0bWFuYWdlci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGF0YWJhc2Utc2VjcmV0bWFuYWdlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLHFDQUFxQztBQUNyQywyREFBMkQ7QUFDM0Qsa0NBQWtDO0FBQ2xDLGdDQUErRjtBQUUvRixRQUFRLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO0lBQ3ZDLElBQUksQ0FBQyw2RUFBNkUsRUFBRSxHQUFHLEVBQUU7UUFDdkYsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLFNBQVMsRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEMsTUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBRWxHLE9BQU87UUFDUCxJQUFJLHVCQUFpQixDQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRTtZQUNqRCxNQUFNLEVBQUUsMkJBQXFCLENBQUMsaUJBQWlCO1lBQy9DLEdBQUc7WUFDSCxXQUFXLEVBQUUsaUJBQVcsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDO1lBQ25ELGNBQWMsRUFBRSxvQkFBYyxDQUFDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSw2QkFBNkIsQ0FBQztTQUM5RyxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFO1lBQzNELFVBQVUsRUFBRTtnQkFDVixNQUFNLEVBQUUsbUJBQW1CO2dCQUMzQiwyQkFBMkIsRUFBRSw2QkFBNkI7Z0JBQzFELGlCQUFpQixFQUFFO29CQUNqQixHQUFHLEVBQUUsbUNBQW1DO2lCQUN6QztnQkFDRCxVQUFVLEVBQUUsWUFBWTtnQkFDeEIsY0FBYyxFQUFFO29CQUNkLFVBQVUsRUFBRTt3QkFDVixFQUFFO3dCQUNGOzRCQUNFLCtCQUErQjs0QkFDL0I7Z0NBQ0UsR0FBRyxFQUFFLGdCQUFnQjs2QkFDdEI7NEJBQ0QsZ0ZBQWdGO3lCQUNqRjtxQkFDRjtpQkFDRjtnQkFDRCxrQkFBa0IsRUFBRTtvQkFDbEIsVUFBVSxFQUFFO3dCQUNWLEVBQUU7d0JBQ0Y7NEJBQ0UsK0JBQStCOzRCQUMvQjtnQ0FDRSxHQUFHLEVBQUUsZ0JBQWdCOzZCQUN0Qjs0QkFDRCxnRkFBZ0Y7eUJBQ2pGO3FCQUNGO2lCQUNGO2dCQUNELGdCQUFnQixFQUFFLElBQUk7Z0JBQ3RCLG1CQUFtQixFQUFFO29CQUNuQjt3QkFDRSxZQUFZLEVBQUU7NEJBQ1oseUNBQXlDOzRCQUN6QyxTQUFTO3lCQUNWO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxjQUFjLEVBQUUsVUFBVTtZQUMxQixtQkFBbUIsRUFBRSxVQUFVO1NBQ2hDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLFNBQVM7SUFDaEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEcsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsb0NBQW9DLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUMxRixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJy4uLy4uL2F3cy1lYzInO1xuaW1wb3J0ICogYXMgc2VjcmV0c21hbmFnZXIgZnJvbSAnLi4vLi4vYXdzLXNlY3JldHNtYW5hZ2VyJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IFNlcnZlcmxlc3NDbHVzdGVyLCBEYXRhYmFzZUNsdXN0ZXJFbmdpbmUsIFBhcmFtZXRlckdyb3VwLCBDcmVkZW50aWFscyB9IGZyb20gJy4uL2xpYic7XG5cbmRlc2NyaWJlKCdkYXRhYmFzZSBzZWNyZXQgbWFuYWdlcicsICgpID0+IHtcbiAgdGVzdCgnY2FuIGNyZWF0ZSBhIFNlcnZlcmxlc3MgQ2x1c3RlciB1c2luZyBhbiBleGlzdGluZyBzZWNyZXQgZnJvbSBzZWNyZXRtYW5hZ2VyJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSB0ZXN0U3RhY2soKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuICAgIGNvbnN0IGV4aXN0aW5nU2VjcmV0ID0gc2VjcmV0c21hbmFnZXIuU2VjcmV0LmZyb21TZWNyZXROYW1lVjIoc3RhY2ssICdEQlNlY3JldCcsICdteURCTG9naW5JbmZvJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgbmV3IFNlcnZlcmxlc3NDbHVzdGVyKHN0YWNrLCAnU2VydmVybGVzc0RhdGFiYXNlJywge1xuICAgICAgZW5naW5lOiBEYXRhYmFzZUNsdXN0ZXJFbmdpbmUuQVVST1JBX1BPU1RHUkVTUUwsXG4gICAgICB2cGMsXG4gICAgICBjcmVkZW50aWFsczogQ3JlZGVudGlhbHMuZnJvbVNlY3JldChleGlzdGluZ1NlY3JldCksXG4gICAgICBwYXJhbWV0ZXJHcm91cDogUGFyYW1ldGVyR3JvdXAuZnJvbVBhcmFtZXRlckdyb3VwTmFtZShzdGFjaywgJ1BhcmFtZXRlckdyb3VwJywgJ2RlZmF1bHQuYXVyb3JhLXBvc3RncmVzcWwxMCcpLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2UoJ0FXUzo6UkRTOjpEQkNsdXN0ZXInLCB7XG4gICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgIEVuZ2luZTogJ2F1cm9yYS1wb3N0Z3Jlc3FsJyxcbiAgICAgICAgREJDbHVzdGVyUGFyYW1ldGVyR3JvdXBOYW1lOiAnZGVmYXVsdC5hdXJvcmEtcG9zdGdyZXNxbDEwJyxcbiAgICAgICAgREJTdWJuZXRHcm91cE5hbWU6IHtcbiAgICAgICAgICBSZWY6ICdTZXJ2ZXJsZXNzRGF0YWJhc2VTdWJuZXRzNTY0M0NENzYnLFxuICAgICAgICB9LFxuICAgICAgICBFbmdpbmVNb2RlOiAnc2VydmVybGVzcycsXG4gICAgICAgIE1hc3RlclVzZXJuYW1lOiB7XG4gICAgICAgICAgJ0ZuOjpKb2luJzogW1xuICAgICAgICAgICAgJycsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICd7e3Jlc29sdmU6c2VjcmV0c21hbmFnZXI6YXJuOicsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBSZWY6ICdBV1M6OlBhcnRpdGlvbicsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICc6c2VjcmV0c21hbmFnZXI6dXMtdGVzdC0xOjEyMzQ1OnNlY3JldDpteURCTG9naW5JbmZvOlNlY3JldFN0cmluZzp1c2VybmFtZTo6fX0nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBNYXN0ZXJVc2VyUGFzc3dvcmQ6IHtcbiAgICAgICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICAgICAnJyxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgJ3t7cmVzb2x2ZTpzZWNyZXRzbWFuYWdlcjphcm46JyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFJlZjogJ0FXUzo6UGFydGl0aW9uJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJzpzZWNyZXRzbWFuYWdlcjp1cy10ZXN0LTE6MTIzNDU6c2VjcmV0Om15REJMb2dpbkluZm86U2VjcmV0U3RyaW5nOnBhc3N3b3JkOjp9fScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIFN0b3JhZ2VFbmNyeXB0ZWQ6IHRydWUsXG4gICAgICAgIFZwY1NlY3VyaXR5R3JvdXBJZHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAgICAgJ1NlcnZlcmxlc3NEYXRhYmFzZVNlY3VyaXR5R3JvdXBCMDBEOEMwRicsXG4gICAgICAgICAgICAgICdHcm91cElkJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICBEZWxldGlvblBvbGljeTogJ1NuYXBzaG90JyxcbiAgICAgIFVwZGF0ZVJlcGxhY2VQb2xpY3k6ICdTbmFwc2hvdCcsXG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmZ1bmN0aW9uIHRlc3RTdGFjaygpIHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB7IGVudjogeyBhY2NvdW50OiAnMTIzNDUnLCByZWdpb246ICd1cy10ZXN0LTEnIH0gfSk7XG4gIHN0YWNrLm5vZGUuc2V0Q29udGV4dCgnYXZhaWxhYmlsaXR5LXpvbmVzOjEyMzQ1OnVzLXRlc3QtMScsIFsndXMtdGVzdC0xYScsICd1cy10ZXN0LTFiJ10pO1xuICByZXR1cm4gc3RhY2s7XG59XG4iXX0=