"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const ec2 = require("../../aws-ec2");
const cdk = require("../../core");
const lib_1 = require("../lib");
describe('option group', () => {
    test('create an option group', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new lib_1.OptionGroup(stack, 'Options', {
            engine: lib_1.DatabaseInstanceEngine.oracleSe2({
                version: lib_1.OracleEngineVersion.VER_12_1,
            }),
            configurations: [
                {
                    name: 'XMLDB',
                },
            ],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::OptionGroup', {
            EngineName: 'oracle-se2',
            MajorEngineVersion: '12.1',
            OptionConfigurations: [
                {
                    OptionName: 'XMLDB',
                },
            ],
        });
    });
    test('option group with new security group', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        // WHEN
        const optionGroup = new lib_1.OptionGroup(stack, 'Options', {
            engine: lib_1.DatabaseInstanceEngine.oracleSe2({
                version: lib_1.OracleEngineVersion.VER_12_1,
            }),
            configurations: [
                {
                    name: 'OEM',
                    port: 1158,
                    vpc,
                },
            ],
        });
        optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::OptionGroup', {
            OptionConfigurations: [
                {
                    OptionName: 'OEM',
                    Port: 1158,
                    VpcSecurityGroupMemberships: [
                        {
                            'Fn::GetAtt': [
                                'OptionsSecurityGroupOEM6C9FE79D',
                                'GroupId',
                            ],
                        },
                    ],
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::SecurityGroup', {
            GroupDescription: 'Security group for OEM option',
            SecurityGroupIngress: [
                {
                    CidrIp: '0.0.0.0/0',
                    Description: 'from 0.0.0.0/0:1158',
                    FromPort: 1158,
                    IpProtocol: 'tcp',
                    ToPort: 1158,
                },
            ],
            VpcId: {
                Ref: 'VPCB9E5F0B4',
            },
        });
    });
    test('option group with existing security group', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        // WHEN
        const securityGroup = new ec2.SecurityGroup(stack, 'CustomSecurityGroup', { vpc });
        new lib_1.OptionGroup(stack, 'Options', {
            engine: lib_1.DatabaseInstanceEngine.oracleSe2({
                version: lib_1.OracleEngineVersion.VER_12_1,
            }),
            configurations: [
                {
                    name: 'OEM',
                    port: 1158,
                    vpc,
                    securityGroups: [securityGroup],
                },
            ],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::OptionGroup', {
            OptionConfigurations: [
                {
                    OptionName: 'OEM',
                    Port: 1158,
                    VpcSecurityGroupMemberships: [
                        {
                            'Fn::GetAtt': [
                                'CustomSecurityGroupE5E500E5',
                                'GroupId',
                            ],
                        },
                    ],
                },
            ],
        });
    });
    test('throws when using an option with port and no vpc', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // THEN
        expect(() => new lib_1.OptionGroup(stack, 'Options', {
            engine: lib_1.DatabaseInstanceEngine.oracleSe2({
                version: lib_1.OracleEngineVersion.VER_12_1,
            }),
            configurations: [
                {
                    name: 'OEM',
                    port: 1158,
                },
            ],
        })).toThrow(/`port`.*`vpc`/);
    });
});
//# sourceMappingURL=data:application/json;base64,