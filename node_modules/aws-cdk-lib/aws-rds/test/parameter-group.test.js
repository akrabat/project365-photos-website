"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const cdk = require("../../core");
const lib_1 = require("../lib");
describe('parameter group', () => {
    test("does not create a parameter group if it wasn't bound to a cluster or instance", () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new lib_1.ParameterGroup(stack, 'Params', {
            engine: lib_1.DatabaseClusterEngine.AURORA,
            description: 'desc',
            parameters: {
                key: 'value',
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::RDS::DBParameterGroup', 0);
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::RDS::DBClusterParameterGroup', 0);
    });
    test('create a parameter group when bound to an instance', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const parameterGroup = new lib_1.ParameterGroup(stack, 'Params', {
            engine: lib_1.DatabaseClusterEngine.AURORA,
            description: 'desc',
            parameters: {
                key: 'value',
            },
        });
        parameterGroup.bindToInstance({});
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBParameterGroup', {
            Description: 'desc',
            Family: 'aurora5.6',
            Parameters: {
                key: 'value',
            },
        });
    });
    test('create a parameter group when bound to a cluster', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const parameterGroup = new lib_1.ParameterGroup(stack, 'Params', {
            engine: lib_1.DatabaseClusterEngine.AURORA,
            description: 'desc',
            parameters: {
                key: 'value',
            },
        });
        parameterGroup.bindToCluster({});
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBClusterParameterGroup', {
            Description: 'desc',
            Family: 'aurora5.6',
            Parameters: {
                key: 'value',
            },
        });
    });
    test('creates 2 parameter groups when bound to a cluster and an instance', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const parameterGroup = new lib_1.ParameterGroup(stack, 'Params', {
            engine: lib_1.DatabaseClusterEngine.AURORA,
            description: 'desc',
            parameters: {
                key: 'value',
            },
        });
        parameterGroup.bindToCluster({});
        parameterGroup.bindToInstance({});
        // THEN
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::RDS::DBParameterGroup', 1);
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::RDS::DBClusterParameterGroup', 1);
    });
    test('Add an additional parameter to an existing parameter group', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const clusterParameterGroup = new lib_1.ParameterGroup(stack, 'Params', {
            engine: lib_1.DatabaseClusterEngine.AURORA,
            description: 'desc',
            parameters: {
                key1: 'value1',
            },
        });
        clusterParameterGroup.bindToCluster({});
        clusterParameterGroup.addParameter('key2', 'value2');
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBClusterParameterGroup', {
            Description: 'desc',
            Family: 'aurora5.6',
            Parameters: {
                key1: 'value1',
                key2: 'value2',
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,