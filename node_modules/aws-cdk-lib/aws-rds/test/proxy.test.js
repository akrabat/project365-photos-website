"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const ec2 = require("../../aws-ec2");
const aws_iam_1 = require("../../aws-iam");
const secretsmanager = require("../../aws-secretsmanager");
const cdk = require("../../core");
const cxapi = require("../../cx-api");
const rds = require("../lib");
let stack;
let vpc;
let importedDbProxy;
describe('proxy', () => {
    beforeEach(() => {
        stack = new cdk.Stack();
        vpc = new ec2.Vpc(stack, 'VPC');
    });
    test('create a DB proxy from an instance', () => {
        // GIVEN
        const instance = new rds.DatabaseInstance(stack, 'Instance', {
            engine: rds.DatabaseInstanceEngine.mysql({
                version: rds.MysqlEngineVersion.VER_5_7,
            }),
            vpc,
        });
        // WHEN
        new rds.DatabaseProxy(stack, 'Proxy', {
            proxyTarget: rds.ProxyTarget.fromInstance(instance),
            secrets: [instance.secret],
            vpc,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBProxy', {
            Auth: [
                {
                    AuthScheme: 'SECRETS',
                    IAMAuth: 'DISABLED',
                    SecretArn: {
                        Ref: 'InstanceSecretAttachment83BEE581',
                    },
                },
            ],
            DBProxyName: 'Proxy',
            EngineFamily: 'MYSQL',
            RequireTLS: true,
            RoleArn: {
                'Fn::GetAtt': [
                    'ProxyIAMRole2FE8AB0F',
                    'Arn',
                ],
            },
            VpcSubnetIds: [
                {
                    Ref: 'VPCPrivateSubnet1Subnet8BCA10E0',
                },
                {
                    Ref: 'VPCPrivateSubnet2SubnetCFCDAA7A',
                },
            ],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBProxyTargetGroup', {
            DBProxyName: {
                Ref: 'ProxyCB0DFB71',
            },
            ConnectionPoolConfigurationInfo: {},
            DBInstanceIdentifiers: [
                {
                    Ref: 'InstanceC1063A87',
                },
            ],
            TargetGroupName: 'default',
        });
    });
    test('create a DB proxy from a cluster', () => {
        // GIVEN
        const cluster = new rds.DatabaseCluster(stack, 'Database', {
            engine: rds.DatabaseClusterEngine.auroraPostgres({
                version: rds.AuroraPostgresEngineVersion.VER_10_7,
            }),
            instanceProps: { vpc },
        });
        // WHEN
        new rds.DatabaseProxy(stack, 'Proxy', {
            proxyTarget: rds.ProxyTarget.fromCluster(cluster),
            secrets: [cluster.secret],
            vpc,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBProxy', {
            Auth: [
                {
                    AuthScheme: 'SECRETS',
                    IAMAuth: 'DISABLED',
                    SecretArn: {
                        Ref: 'DatabaseSecretAttachmentE5D1B020',
                    },
                },
            ],
            DBProxyName: 'Proxy',
            EngineFamily: 'POSTGRESQL',
            RequireTLS: true,
            RoleArn: {
                'Fn::GetAtt': [
                    'ProxyIAMRole2FE8AB0F',
                    'Arn',
                ],
            },
            VpcSubnetIds: [
                {
                    Ref: 'VPCPrivateSubnet1Subnet8BCA10E0',
                },
                {
                    Ref: 'VPCPrivateSubnet2SubnetCFCDAA7A',
                },
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBProxyTargetGroup', {
            DBProxyName: {
                Ref: 'ProxyCB0DFB71',
            },
            ConnectionPoolConfigurationInfo: {},
            DBClusterIdentifiers: [
                {
                    Ref: 'DatabaseB269D8BB',
                },
            ],
            DBInstanceIdentifiers: assertions_1.Match.absent(),
            TargetGroupName: 'default',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::SecurityGroupIngress', {
            IpProtocol: 'tcp',
            Description: 'Allow connections to the database Cluster from the Proxy',
            FromPort: {
                'Fn::GetAtt': ['DatabaseB269D8BB', 'Endpoint.Port'],
            },
            GroupId: {
                'Fn::GetAtt': ['DatabaseSecurityGroup5C91FDCB', 'GroupId'],
            },
            SourceSecurityGroupId: {
                'Fn::GetAtt': ['ProxyProxySecurityGroupC42FC3CE', 'GroupId'],
            },
            ToPort: {
                'Fn::GetAtt': ['DatabaseB269D8BB', 'Endpoint.Port'],
            },
        });
    });
    test('One or more secrets are required.', () => {
        // GIVEN
        const cluster = new rds.DatabaseCluster(stack, 'Database', {
            engine: rds.DatabaseClusterEngine.auroraPostgres({ version: rds.AuroraPostgresEngineVersion.VER_10_7 }),
            instanceProps: { vpc },
        });
        // WHEN
        expect(() => {
            new rds.DatabaseProxy(stack, 'Proxy', {
                proxyTarget: rds.ProxyTarget.fromCluster(cluster),
                secrets: [],
                vpc,
            });
        }).toThrow('One or more secrets are required.');
    });
    test('fails when trying to create a proxy for a target without an engine', () => {
        const importedCluster = rds.DatabaseCluster.fromDatabaseClusterAttributes(stack, 'Cluster', {
            clusterIdentifier: 'my-cluster',
        });
        expect(() => {
            new rds.DatabaseProxy(stack, 'Proxy', {
                proxyTarget: rds.ProxyTarget.fromCluster(importedCluster),
                vpc,
                secrets: [new secretsmanager.Secret(stack, 'Secret')],
            });
        }).toThrow(/Could not determine engine for proxy target 'Default\/Cluster'\. Please provide it explicitly when importing the resource/);
    });
    test("fails when trying to create a proxy for a target with an engine that doesn't have engineFamily", () => {
        const importedInstance = rds.DatabaseInstance.fromDatabaseInstanceAttributes(stack, 'Cluster', {
            instanceIdentifier: 'my-instance',
            instanceEndpointAddress: 'instance-address',
            port: 5432,
            securityGroups: [],
            engine: rds.DatabaseInstanceEngine.mariaDb({
                version: rds.MariaDbEngineVersion.VER_10_0_24,
            }),
        });
        expect(() => {
            new rds.DatabaseProxy(stack, 'Proxy', {
                proxyTarget: rds.ProxyTarget.fromInstance(importedInstance),
                vpc,
                secrets: [new secretsmanager.Secret(stack, 'Secret')],
            });
        }).toThrow(/Engine 'mariadb-10\.0\.24' does not support proxies/);
    });
    test('correctly creates a proxy for an imported Cluster if its engine is known', () => {
        const importedCluster = rds.DatabaseCluster.fromDatabaseClusterAttributes(stack, 'Cluster', {
            clusterIdentifier: 'my-cluster',
            engine: rds.DatabaseClusterEngine.auroraPostgres({
                version: rds.AuroraPostgresEngineVersion.VER_9_6_11,
            }),
            port: 5432,
        });
        new rds.DatabaseProxy(stack, 'Proxy', {
            proxyTarget: rds.ProxyTarget.fromCluster(importedCluster),
            vpc,
            secrets: [new secretsmanager.Secret(stack, 'Secret')],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBProxy', {
            EngineFamily: 'POSTGRESQL',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBProxyTargetGroup', {
            DBClusterIdentifiers: [
                'my-cluster',
            ],
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::SecurityGroup', {
            GroupDescription: 'SecurityGroup for Database Proxy',
            VpcId: { Ref: 'VPCB9E5F0B4' },
        });
    });
    describe('imported Proxies', () => {
        beforeEach(() => {
            importedDbProxy = rds.DatabaseProxy.fromDatabaseProxyAttributes(stack, 'Proxy', {
                dbProxyName: 'my-proxy',
                dbProxyArn: 'arn:aws:rds:us-east-1:123456789012:db-proxy:prx-1234abcd',
                endpoint: 'my-endpoint',
                securityGroups: [],
            });
        });
        test('grant rds-db:connect in grantConnect() with a dbUser explicitly passed', () => {
            // WHEN
            const role = new aws_iam_1.Role(stack, 'DBProxyRole', {
                assumedBy: new aws_iam_1.AccountPrincipal(stack.account),
            });
            const databaseUser = 'test';
            importedDbProxy.grantConnect(role, databaseUser);
            // THEN
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
                PolicyDocument: {
                    Statement: [{
                            Effect: 'Allow',
                            Action: 'rds-db:connect',
                            Resource: {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        ':rds-db:',
                                        { Ref: 'AWS::Region' },
                                        ':',
                                        { Ref: 'AWS::AccountId' },
                                        ':dbuser:prx-1234abcd/test',
                                    ]],
                            },
                        }],
                    Version: '2012-10-17',
                },
            });
        });
        test('throws when grantConnect() is used without a dbUser', () => {
            // WHEN
            const role = new aws_iam_1.Role(stack, 'DBProxyRole', {
                assumedBy: new aws_iam_1.AccountPrincipal(stack.account),
            });
            // THEN
            expect(() => {
                importedDbProxy.grantConnect(role);
            }).toThrow(/For imported Database Proxies, the dbUser is required in grantConnect/);
        });
    });
    test('new Proxy with a single Secret can use grantConnect() without a dbUser passed', () => {
        // GIVEN
        const cluster = new rds.DatabaseCluster(stack, 'Database', {
            engine: rds.DatabaseClusterEngine.AURORA,
            instanceProps: { vpc },
        });
        const proxy = new rds.DatabaseProxy(stack, 'Proxy', {
            proxyTarget: rds.ProxyTarget.fromCluster(cluster),
            secrets: [cluster.secret],
            vpc,
        });
        // WHEN
        const role = new aws_iam_1.Role(stack, 'DBProxyRole', {
            assumedBy: new aws_iam_1.AccountPrincipal(stack.account),
        });
        proxy.grantConnect(role);
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [{
                        Effect: 'Allow',
                        Action: 'rds-db:connect',
                        Resource: {
                            'Fn::Join': ['', [
                                    'arn:',
                                    { Ref: 'AWS::Partition' },
                                    ':rds-db:',
                                    { Ref: 'AWS::Region' },
                                    ':',
                                    { Ref: 'AWS::AccountId' },
                                    ':dbuser:',
                                    {
                                        'Fn::Select': [
                                            6,
                                            {
                                                'Fn::Split': [
                                                    ':',
                                                    { 'Fn::GetAtt': ['ProxyCB0DFB71', 'DBProxyArn'] },
                                                ],
                                            },
                                        ],
                                    },
                                    '/{{resolve:secretsmanager:',
                                    { Ref: 'DatabaseSecretAttachmentE5D1B020' },
                                    ':SecretString:username::}}',
                                ]],
                        },
                    }],
                Version: '2012-10-17',
            },
        });
    });
    test('new Proxy with multiple Secrets cannot use grantConnect() without a dbUser passed', () => {
        // GIVEN
        const cluster = new rds.DatabaseCluster(stack, 'Database', {
            engine: rds.DatabaseClusterEngine.AURORA,
            instanceProps: { vpc },
        });
        const proxy = new rds.DatabaseProxy(stack, 'Proxy', {
            proxyTarget: rds.ProxyTarget.fromCluster(cluster),
            secrets: [
                cluster.secret,
                new secretsmanager.Secret(stack, 'ProxySecret'),
            ],
            vpc,
        });
        // WHEN
        const role = new aws_iam_1.Role(stack, 'DBProxyRole', {
            assumedBy: new aws_iam_1.AccountPrincipal(stack.account),
        });
        // THEN
        expect(() => {
            proxy.grantConnect(role);
        }).toThrow(/When the Proxy contains multiple Secrets, you must pass a dbUser explicitly to grantConnect/);
    });
    test('DBProxyTargetGroup should have dependency on the proxy targets', () => {
        // GIVEN
        const cluster = new rds.DatabaseCluster(stack, 'cluster', {
            engine: rds.DatabaseClusterEngine.AURORA,
            instanceProps: {
                vpc,
            },
        });
        //WHEN
        new rds.DatabaseProxy(stack, 'proxy', {
            proxyTarget: rds.ProxyTarget.fromCluster(cluster),
            secrets: [cluster.secret],
            vpc,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResource('AWS::RDS::DBProxyTargetGroup', {
            Properties: {
                DBProxyName: {
                    Ref: 'proxy3A1DA9C7',
                },
                TargetGroupName: 'default',
            },
            DependsOn: [
                'clusterInstance183584D40',
                'clusterInstance23D1AD8B2',
                'cluster611F8AFF',
                'clusterSecretAttachment69BFCEC4',
                'clusterSecretE349B730',
                'clusterSecurityGroupfromproxyProxySecurityGroupA80F0525IndirectPortA13E5F3D',
                'clusterSecurityGroupF441DCEA',
                'clusterSubnets81E3593F',
            ],
        });
    });
});
describe('feature flag @aws-cdk/aws-rds:databaseProxyUniqueResourceName', () => {
    test('create a DB proxy from an instance with a unique resource name', () => {
        // GIVEN
        stack = new cdk.Stack();
        stack.node.setContext(cxapi.DATABASE_PROXY_UNIQUE_RESOURCE_NAME, true);
        vpc = new ec2.Vpc(stack, 'VPC');
        const instance = new rds.DatabaseInstance(stack, 'Instance', {
            engine: rds.DatabaseInstanceEngine.mysql({
                version: rds.MysqlEngineVersion.VER_5_7,
            }),
            vpc,
        });
        // WHEN
        new rds.DatabaseProxy(stack, 'Proxy', {
            proxyTarget: rds.ProxyTarget.fromInstance(instance),
            secrets: [instance.secret],
            vpc,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBProxy', {
            Auth: [
                {
                    AuthScheme: 'SECRETS',
                    IAMAuth: 'DISABLED',
                    SecretArn: {
                        Ref: 'InstanceSecretAttachment83BEE581',
                    },
                },
            ],
            DBProxyName: 'Proxy',
            EngineFamily: 'MYSQL',
            RequireTLS: true,
            RoleArn: {
                'Fn::GetAtt': [
                    'ProxyIAMRole2FE8AB0F',
                    'Arn',
                ],
            },
            VpcSubnetIds: [
                {
                    Ref: 'VPCPrivateSubnet1Subnet8BCA10E0',
                },
                {
                    Ref: 'VPCPrivateSubnet2SubnetCFCDAA7A',
                },
            ],
        });
    });
    test('create a DB proxy from an instance with a proxy name in the constructor', () => {
        // GIVEN
        stack = new cdk.Stack();
        stack.node.setContext(cxapi.DATABASE_PROXY_UNIQUE_RESOURCE_NAME, true);
        vpc = new ec2.Vpc(stack, 'VPC');
        const instance = new rds.DatabaseInstance(stack, 'Instance', {
            engine: rds.DatabaseInstanceEngine.mysql({
                version: rds.MysqlEngineVersion.VER_5_7,
            }),
            vpc,
        });
        // WHEN
        new rds.DatabaseProxy(stack, 'Proxy', {
            proxyTarget: rds.ProxyTarget.fromInstance(instance),
            dbProxyName: 'my-proxy-name',
            secrets: [instance.secret],
            vpc,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBProxy', {
            Auth: [
                {
                    AuthScheme: 'SECRETS',
                    IAMAuth: 'DISABLED',
                    SecretArn: {
                        Ref: 'InstanceSecretAttachment83BEE581',
                    },
                },
            ],
            DBProxyName: 'my-proxy-name',
            EngineFamily: 'MYSQL',
            RequireTLS: true,
            RoleArn: {
                'Fn::GetAtt': [
                    'ProxyIAMRole2FE8AB0F',
                    'Arn',
                ],
            },
            VpcSubnetIds: [
                {
                    Ref: 'VPCPrivateSubnet1Subnet8BCA10E0',
                },
                {
                    Ref: 'VPCPrivateSubnet2SubnetCFCDAA7A',
                },
            ],
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveHkudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByb3h5LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBbUQ7QUFDbkQscUNBQXFDO0FBQ3JDLDJDQUF1RDtBQUN2RCwyREFBMkQ7QUFDM0Qsa0NBQWtDO0FBQ2xDLHNDQUFzQztBQUN0Qyw4QkFBOEI7QUFFOUIsSUFBSSxLQUFnQixDQUFDO0FBQ3JCLElBQUksR0FBYSxDQUFDO0FBRWxCLElBQUksZUFBbUMsQ0FBQztBQUV4QyxRQUFRLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtJQUNyQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3hCLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtRQUM5QyxRQUFRO1FBQ1IsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtZQUMzRCxNQUFNLEVBQUUsR0FBRyxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQztnQkFDdkMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPO2FBQ3hDLENBQUM7WUFDRixHQUFHO1NBQ0osQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLElBQUksR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO1lBQ3BDLFdBQVcsRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7WUFDbkQsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU8sQ0FBQztZQUMzQixHQUFHO1NBQ0osQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLHFCQUFR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LENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWF0Y2gsIFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vYXNzZXJ0aW9ucyc7XG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnLi4vLi4vYXdzLWVjMic7XG5pbXBvcnQgeyBBY2NvdW50UHJpbmNpcGFsLCBSb2xlIH0gZnJvbSAnLi4vLi4vYXdzLWlhbSc7XG5pbXBvcnQgKiBhcyBzZWNyZXRzbWFuYWdlciBmcm9tICcuLi8uLi9hd3Mtc2VjcmV0c21hbmFnZXInO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgY3hhcGkgZnJvbSAnLi4vLi4vY3gtYXBpJztcbmltcG9ydCAqIGFzIHJkcyBmcm9tICcuLi9saWInO1xuXG5sZXQgc3RhY2s6IGNkay5TdGFjaztcbmxldCB2cGM6IGVjMi5JVnBjO1xuXG5sZXQgaW1wb3J0ZWREYlByb3h5OiByZHMuSURhdGFiYXNlUHJveHk7XG5cbmRlc2NyaWJlKCdwcm94eScsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcbiAgfSk7XG5cbiAgdGVzdCgnY3JlYXRlIGEgREIgcHJveHkgZnJvbSBhbiBpbnN0YW5jZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IHJkcy5EYXRhYmFzZUluc3RhbmNlKHN0YWNrLCAnSW5zdGFuY2UnLCB7XG4gICAgICBlbmdpbmU6IHJkcy5EYXRhYmFzZUluc3RhbmNlRW5naW5lLm15c3FsKHtcbiAgICAgICAgdmVyc2lvbjogcmRzLk15c3FsRW5naW5lVmVyc2lvbi5WRVJfNV83LFxuICAgICAgfSksXG4gICAgICB2cGMsXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgbmV3IHJkcy5EYXRhYmFzZVByb3h5KHN0YWNrLCAnUHJveHknLCB7XG4gICAgICBwcm94eVRhcmdldDogcmRzLlByb3h5VGFyZ2V0LmZyb21JbnN0YW5jZShpbnN0YW5jZSksXG4gICAgICBzZWNyZXRzOiBbaW5zdGFuY2Uuc2VjcmV0IV0sXG4gICAgICB2cGMsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6UkRTOjpEQlByb3h5Jywge1xuICAgICAgQXV0aDogW1xuICAgICAgICB7XG4gICAgICAgICAgQXV0aFNjaGVtZTogJ1NFQ1JFVFMnLFxuICAgICAgICAgIElBTUF1dGg6ICdESVNBQkxFRCcsXG4gICAgICAgICAgU2VjcmV0QXJuOiB7XG4gICAgICAgICAgICBSZWY6ICdJbnN0YW5jZVNlY3JldEF0dGFjaG1lbnQ4M0JFRTU4MScsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBEQlByb3h5TmFtZTogJ1Byb3h5JyxcbiAgICAgIEVuZ2luZUZhbWlseTogJ01ZU1FMJyxcbiAgICAgIFJlcXVpcmVUTFM6IHRydWUsXG4gICAgICBSb2xlQXJuOiB7XG4gICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgICdQcm94eUlBTVJvbGUyRkU4QUIwRicsXG4gICAgICAgICAgJ0FybicsXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAgVnBjU3VibmV0SWRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBSZWY6ICdWUENQcml2YXRlU3VibmV0MVN1Ym5ldDhCQ0ExMEUwJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFJlZjogJ1ZQQ1ByaXZhdGVTdWJuZXQyU3VibmV0Q0ZDREFBN0EnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpSRFM6OkRCUHJveHlUYXJnZXRHcm91cCcsIHtcbiAgICAgIERCUHJveHlOYW1lOiB7XG4gICAgICAgIFJlZjogJ1Byb3h5Q0IwREZCNzEnLFxuICAgICAgfSxcbiAgICAgIENvbm5lY3Rpb25Qb29sQ29uZmlndXJhdGlvbkluZm86IHt9LFxuICAgICAgREJJbnN0YW5jZUlkZW50aWZpZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBSZWY6ICdJbnN0YW5jZUMxMDYzQTg3JyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBUYXJnZXRHcm91cE5hbWU6ICdkZWZhdWx0JyxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnY3JlYXRlIGEgREIgcHJveHkgZnJvbSBhIGNsdXN0ZXInLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IHJkcy5EYXRhYmFzZUNsdXN0ZXIoc3RhY2ssICdEYXRhYmFzZScsIHtcbiAgICAgIGVuZ2luZTogcmRzLkRhdGFiYXNlQ2x1c3RlckVuZ2luZS5hdXJvcmFQb3N0Z3Jlcyh7XG4gICAgICAgIHZlcnNpb246IHJkcy5BdXJvcmFQb3N0Z3Jlc0VuZ2luZVZlcnNpb24uVkVSXzEwXzcsXG4gICAgICB9KSxcbiAgICAgIGluc3RhbmNlUHJvcHM6IHsgdnBjIH0sXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgbmV3IHJkcy5EYXRhYmFzZVByb3h5KHN0YWNrLCAnUHJveHknLCB7XG4gICAgICBwcm94eVRhcmdldDogcmRzLlByb3h5VGFyZ2V0LmZyb21DbHVzdGVyKGNsdXN0ZXIpLFxuICAgICAgc2VjcmV0czogW2NsdXN0ZXIuc2VjcmV0IV0sXG4gICAgICB2cGMsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6UkRTOjpEQlByb3h5Jywge1xuICAgICAgQXV0aDogW1xuICAgICAgICB7XG4gICAgICAgICAgQXV0aFNjaGVtZTogJ1NFQ1JFVFMnLFxuICAgICAgICAgIElBTUF1dGg6ICdESVNBQkxFRCcsXG4gICAgICAgICAgU2VjcmV0QXJuOiB7XG4gICAgICAgICAgICBSZWY6ICdEYXRhYmFzZVNlY3JldEF0dGFjaG1lbnRFNUQxQjAyMCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBEQlByb3h5TmFtZTogJ1Byb3h5JyxcbiAgICAgIEVuZ2luZUZhbWlseTogJ1BPU1RHUkVTUUwnLFxuICAgICAgUmVxdWlyZVRMUzogdHJ1ZSxcbiAgICAgIFJvbGVBcm46IHtcbiAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgJ1Byb3h5SUFNUm9sZTJGRThBQjBGJyxcbiAgICAgICAgICAnQXJuJyxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICBWcGNTdWJuZXRJZHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIFJlZjogJ1ZQQ1ByaXZhdGVTdWJuZXQxU3VibmV0OEJDQTEwRTAnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgUmVmOiAnVlBDUHJpdmF0ZVN1Ym5ldDJTdWJuZXRDRkNEQUE3QScsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlJEUzo6REJQcm94eVRhcmdldEdyb3VwJywge1xuICAgICAgREJQcm94eU5hbWU6IHtcbiAgICAgICAgUmVmOiAnUHJveHlDQjBERkI3MScsXG4gICAgICB9LFxuICAgICAgQ29ubmVjdGlvblBvb2xDb25maWd1cmF0aW9uSW5mbzoge30sXG4gICAgICBEQkNsdXN0ZXJJZGVudGlmaWVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgUmVmOiAnRGF0YWJhc2VCMjY5RDhCQicsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgREJJbnN0YW5jZUlkZW50aWZpZXJzOiBNYXRjaC5hYnNlbnQoKSxcbiAgICAgIFRhcmdldEdyb3VwTmFtZTogJ2RlZmF1bHQnLFxuICAgIH0pO1xuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkVDMjo6U2VjdXJpdHlHcm91cEluZ3Jlc3MnLCB7XG4gICAgICBJcFByb3RvY29sOiAndGNwJyxcbiAgICAgIERlc2NyaXB0aW9uOiAnQWxsb3cgY29ubmVjdGlvbnMgdG8gdGhlIGRhdGFiYXNlIENsdXN0ZXIgZnJvbSB0aGUgUHJveHknLFxuICAgICAgRnJvbVBvcnQ6IHtcbiAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbJ0RhdGFiYXNlQjI2OUQ4QkInLCAnRW5kcG9pbnQuUG9ydCddLFxuICAgICAgfSxcbiAgICAgIEdyb3VwSWQ6IHtcbiAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbJ0RhdGFiYXNlU2VjdXJpdHlHcm91cDVDOTFGRENCJywgJ0dyb3VwSWQnXSxcbiAgICAgIH0sXG4gICAgICBTb3VyY2VTZWN1cml0eUdyb3VwSWQ6IHtcbiAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbJ1Byb3h5UHJveHlTZWN1cml0eUdyb3VwQzQyRkMzQ0UnLCAnR3JvdXBJZCddLFxuICAgICAgfSxcbiAgICAgIFRvUG9ydDoge1xuICAgICAgICAnRm46OkdldEF0dCc6IFsnRGF0YWJhc2VCMjY5RDhCQicsICdFbmRwb2ludC5Qb3J0J10sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdPbmUgb3IgbW9yZSBzZWNyZXRzIGFyZSByZXF1aXJlZC4nLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IHJkcy5EYXRhYmFzZUNsdXN0ZXIoc3RhY2ssICdEYXRhYmFzZScsIHtcbiAgICAgIGVuZ2luZTogcmRzLkRhdGFiYXNlQ2x1c3RlckVuZ2luZS5hdXJvcmFQb3N0Z3Jlcyh7IHZlcnNpb246IHJkcy5BdXJvcmFQb3N0Z3Jlc0VuZ2luZVZlcnNpb24uVkVSXzEwXzcgfSksXG4gICAgICBpbnN0YW5jZVByb3BzOiB7IHZwYyB9LFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBuZXcgcmRzLkRhdGFiYXNlUHJveHkoc3RhY2ssICdQcm94eScsIHtcbiAgICAgICAgcHJveHlUYXJnZXQ6IHJkcy5Qcm94eVRhcmdldC5mcm9tQ2x1c3RlcihjbHVzdGVyKSxcbiAgICAgICAgc2VjcmV0czogW10sIC8vIE5vIHNlY3JldFxuICAgICAgICB2cGMsXG4gICAgICB9KTtcbiAgICB9KS50b1Rocm93KCdPbmUgb3IgbW9yZSBzZWNyZXRzIGFyZSByZXF1aXJlZC4nKTtcbiAgfSk7XG5cbiAgdGVzdCgnZmFpbHMgd2hlbiB0cnlpbmcgdG8gY3JlYXRlIGEgcHJveHkgZm9yIGEgdGFyZ2V0IHdpdGhvdXQgYW4gZW5naW5lJywgKCkgPT4ge1xuICAgIGNvbnN0IGltcG9ydGVkQ2x1c3RlciA9IHJkcy5EYXRhYmFzZUNsdXN0ZXIuZnJvbURhdGFiYXNlQ2x1c3RlckF0dHJpYnV0ZXMoc3RhY2ssICdDbHVzdGVyJywge1xuICAgICAgY2x1c3RlcklkZW50aWZpZXI6ICdteS1jbHVzdGVyJyxcbiAgICB9KTtcblxuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBuZXcgcmRzLkRhdGFiYXNlUHJveHkoc3RhY2ssICdQcm94eScsIHtcbiAgICAgICAgcHJveHlUYXJnZXQ6IHJkcy5Qcm94eVRhcmdldC5mcm9tQ2x1c3RlcihpbXBvcnRlZENsdXN0ZXIpLFxuICAgICAgICB2cGMsXG4gICAgICAgIHNlY3JldHM6IFtuZXcgc2VjcmV0c21hbmFnZXIuU2VjcmV0KHN0YWNrLCAnU2VjcmV0JyldLFxuICAgICAgfSk7XG4gICAgfSkudG9UaHJvdygvQ291bGQgbm90IGRldGVybWluZSBlbmdpbmUgZm9yIHByb3h5IHRhcmdldCAnRGVmYXVsdFxcL0NsdXN0ZXInXFwuIFBsZWFzZSBwcm92aWRlIGl0IGV4cGxpY2l0bHkgd2hlbiBpbXBvcnRpbmcgdGhlIHJlc291cmNlLyk7XG4gIH0pO1xuXG4gIHRlc3QoXCJmYWlscyB3aGVuIHRyeWluZyB0byBjcmVhdGUgYSBwcm94eSBmb3IgYSB0YXJnZXQgd2l0aCBhbiBlbmdpbmUgdGhhdCBkb2Vzbid0IGhhdmUgZW5naW5lRmFtaWx5XCIsICgpID0+IHtcbiAgICBjb25zdCBpbXBvcnRlZEluc3RhbmNlID0gcmRzLkRhdGFiYXNlSW5zdGFuY2UuZnJvbURhdGFiYXNlSW5zdGFuY2VBdHRyaWJ1dGVzKHN0YWNrLCAnQ2x1c3RlcicsIHtcbiAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogJ215LWluc3RhbmNlJyxcbiAgICAgIGluc3RhbmNlRW5kcG9pbnRBZGRyZXNzOiAnaW5zdGFuY2UtYWRkcmVzcycsXG4gICAgICBwb3J0OiA1NDMyLFxuICAgICAgc2VjdXJpdHlHcm91cHM6IFtdLFxuICAgICAgZW5naW5lOiByZHMuRGF0YWJhc2VJbnN0YW5jZUVuZ2luZS5tYXJpYURiKHtcbiAgICAgICAgdmVyc2lvbjogcmRzLk1hcmlhRGJFbmdpbmVWZXJzaW9uLlZFUl8xMF8wXzI0LFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgbmV3IHJkcy5EYXRhYmFzZVByb3h5KHN0YWNrLCAnUHJveHknLCB7XG4gICAgICAgIHByb3h5VGFyZ2V0OiByZHMuUHJveHlUYXJnZXQuZnJvbUluc3RhbmNlKGltcG9ydGVkSW5zdGFuY2UpLFxuICAgICAgICB2cGMsXG4gICAgICAgIHNlY3JldHM6IFtuZXcgc2VjcmV0c21hbmFnZXIuU2VjcmV0KHN0YWNrLCAnU2VjcmV0JyldLFxuICAgICAgfSk7XG4gICAgfSkudG9UaHJvdygvRW5naW5lICdtYXJpYWRiLTEwXFwuMFxcLjI0JyBkb2VzIG5vdCBzdXBwb3J0IHByb3hpZXMvKTtcbiAgfSk7XG5cbiAgdGVzdCgnY29ycmVjdGx5IGNyZWF0ZXMgYSBwcm94eSBmb3IgYW4gaW1wb3J0ZWQgQ2x1c3RlciBpZiBpdHMgZW5naW5lIGlzIGtub3duJywgKCkgPT4ge1xuICAgIGNvbnN0IGltcG9ydGVkQ2x1c3RlciA9IHJkcy5EYXRhYmFzZUNsdXN0ZXIuZnJvbURhdGFiYXNlQ2x1c3RlckF0dHJpYnV0ZXMoc3RhY2ssICdDbHVzdGVyJywge1xuICAgICAgY2x1c3RlcklkZW50aWZpZXI6ICdteS1jbHVzdGVyJyxcbiAgICAgIGVuZ2luZTogcmRzLkRhdGFiYXNlQ2x1c3RlckVuZ2luZS5hdXJvcmFQb3N0Z3Jlcyh7XG4gICAgICAgIHZlcnNpb246IHJkcy5BdXJvcmFQb3N0Z3Jlc0VuZ2luZVZlcnNpb24uVkVSXzlfNl8xMSxcbiAgICAgIH0pLFxuICAgICAgcG9ydDogNTQzMixcbiAgICB9KTtcblxuICAgIG5ldyByZHMuRGF0YWJhc2VQcm94eShzdGFjaywgJ1Byb3h5Jywge1xuICAgICAgcHJveHlUYXJnZXQ6IHJkcy5Qcm94eVRhcmdldC5mcm9tQ2x1c3RlcihpbXBvcnRlZENsdXN0ZXIpLFxuICAgICAgdnBjLFxuICAgICAgc2VjcmV0czogW25ldyBzZWNyZXRzbWFuYWdlci5TZWNyZXQoc3RhY2ssICdTZWNyZXQnKV0sXG4gICAgfSk7XG5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpSRFM6OkRCUHJveHknLCB7XG4gICAgICBFbmdpbmVGYW1pbHk6ICdQT1NUR1JFU1FMJyxcbiAgICB9KTtcbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpSRFM6OkRCUHJveHlUYXJnZXRHcm91cCcsIHtcbiAgICAgIERCQ2x1c3RlcklkZW50aWZpZXJzOiBbXG4gICAgICAgICdteS1jbHVzdGVyJyxcbiAgICAgIF0sXG4gICAgfSk7XG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6RUMyOjpTZWN1cml0eUdyb3VwJywge1xuICAgICAgR3JvdXBEZXNjcmlwdGlvbjogJ1NlY3VyaXR5R3JvdXAgZm9yIERhdGFiYXNlIFByb3h5JyxcbiAgICAgIFZwY0lkOiB7IFJlZjogJ1ZQQ0I5RTVGMEI0JyB9LFxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnaW1wb3J0ZWQgUHJveGllcycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGltcG9ydGVkRGJQcm94eSA9IHJkcy5EYXRhYmFzZVByb3h5LmZyb21EYXRhYmFzZVByb3h5QXR0cmlidXRlcyhzdGFjaywgJ1Byb3h5Jywge1xuICAgICAgICBkYlByb3h5TmFtZTogJ215LXByb3h5JyxcbiAgICAgICAgZGJQcm94eUFybjogJ2Fybjphd3M6cmRzOnVzLWVhc3QtMToxMjM0NTY3ODkwMTI6ZGItcHJveHk6cHJ4LTEyMzRhYmNkJyxcbiAgICAgICAgZW5kcG9pbnQ6ICdteS1lbmRwb2ludCcsXG4gICAgICAgIHNlY3VyaXR5R3JvdXBzOiBbXSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnZ3JhbnQgcmRzLWRiOmNvbm5lY3QgaW4gZ3JhbnRDb25uZWN0KCkgd2l0aCBhIGRiVXNlciBleHBsaWNpdGx5IHBhc3NlZCcsICgpID0+IHtcbiAgICAgIC8vIFdIRU5cbiAgICAgIGNvbnN0IHJvbGUgPSBuZXcgUm9sZShzdGFjaywgJ0RCUHJveHlSb2xlJywge1xuICAgICAgICBhc3N1bWVkQnk6IG5ldyBBY2NvdW50UHJpbmNpcGFsKHN0YWNrLmFjY291bnQpLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBkYXRhYmFzZVVzZXIgPSAndGVzdCc7XG4gICAgICBpbXBvcnRlZERiUHJveHkuZ3JhbnRDb25uZWN0KHJvbGUsIGRhdGFiYXNlVXNlcik7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OklBTTo6UG9saWN5Jywge1xuICAgICAgICBQb2xpY3lEb2N1bWVudDoge1xuICAgICAgICAgIFN0YXRlbWVudDogW3tcbiAgICAgICAgICAgIEVmZmVjdDogJ0FsbG93JyxcbiAgICAgICAgICAgIEFjdGlvbjogJ3Jkcy1kYjpjb25uZWN0JyxcbiAgICAgICAgICAgIFJlc291cmNlOiB7XG4gICAgICAgICAgICAgICdGbjo6Sm9pbic6IFsnJywgW1xuICAgICAgICAgICAgICAgICdhcm46JyxcbiAgICAgICAgICAgICAgICB7IFJlZjogJ0FXUzo6UGFydGl0aW9uJyB9LFxuICAgICAgICAgICAgICAgICc6cmRzLWRiOicsXG4gICAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OlJlZ2lvbicgfSxcbiAgICAgICAgICAgICAgICAnOicsXG4gICAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OkFjY291bnRJZCcgfSxcbiAgICAgICAgICAgICAgICAnOmRidXNlcjpwcngtMTIzNGFiY2QvdGVzdCcsXG4gICAgICAgICAgICAgIF1dLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9XSxcbiAgICAgICAgICBWZXJzaW9uOiAnMjAxMi0xMC0xNycsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Rocm93cyB3aGVuIGdyYW50Q29ubmVjdCgpIGlzIHVzZWQgd2l0aG91dCBhIGRiVXNlcicsICgpID0+IHtcbiAgICAgIC8vIFdIRU5cbiAgICAgIGNvbnN0IHJvbGUgPSBuZXcgUm9sZShzdGFjaywgJ0RCUHJveHlSb2xlJywge1xuICAgICAgICBhc3N1bWVkQnk6IG5ldyBBY2NvdW50UHJpbmNpcGFsKHN0YWNrLmFjY291bnQpLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIGltcG9ydGVkRGJQcm94eS5ncmFudENvbm5lY3Qocm9sZSk7XG4gICAgICB9KS50b1Rocm93KC9Gb3IgaW1wb3J0ZWQgRGF0YWJhc2UgUHJveGllcywgdGhlIGRiVXNlciBpcyByZXF1aXJlZCBpbiBncmFudENvbm5lY3QvKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnbmV3IFByb3h5IHdpdGggYSBzaW5nbGUgU2VjcmV0IGNhbiB1c2UgZ3JhbnRDb25uZWN0KCkgd2l0aG91dCBhIGRiVXNlciBwYXNzZWQnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IHJkcy5EYXRhYmFzZUNsdXN0ZXIoc3RhY2ssICdEYXRhYmFzZScsIHtcbiAgICAgIGVuZ2luZTogcmRzLkRhdGFiYXNlQ2x1c3RlckVuZ2luZS5BVVJPUkEsXG4gICAgICBpbnN0YW5jZVByb3BzOiB7IHZwYyB9LFxuICAgIH0pO1xuXG4gICAgY29uc3QgcHJveHkgPSBuZXcgcmRzLkRhdGFiYXNlUHJveHkoc3RhY2ssICdQcm94eScsIHtcbiAgICAgIHByb3h5VGFyZ2V0OiByZHMuUHJveHlUYXJnZXQuZnJvbUNsdXN0ZXIoY2x1c3RlciksXG4gICAgICBzZWNyZXRzOiBbY2x1c3Rlci5zZWNyZXQhXSxcbiAgICAgIHZwYyxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCByb2xlID0gbmV3IFJvbGUoc3RhY2ssICdEQlByb3h5Um9sZScsIHtcbiAgICAgIGFzc3VtZWRCeTogbmV3IEFjY291bnRQcmluY2lwYWwoc3RhY2suYWNjb3VudCksXG4gICAgfSk7XG4gICAgcHJveHkuZ3JhbnRDb25uZWN0KHJvbGUpO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OklBTTo6UG9saWN5Jywge1xuICAgICAgUG9saWN5RG9jdW1lbnQ6IHtcbiAgICAgICAgU3RhdGVtZW50OiBbe1xuICAgICAgICAgIEVmZmVjdDogJ0FsbG93JyxcbiAgICAgICAgICBBY3Rpb246ICdyZHMtZGI6Y29ubmVjdCcsXG4gICAgICAgICAgUmVzb3VyY2U6IHtcbiAgICAgICAgICAgICdGbjo6Sm9pbic6IFsnJywgW1xuICAgICAgICAgICAgICAnYXJuOicsXG4gICAgICAgICAgICAgIHsgUmVmOiAnQVdTOjpQYXJ0aXRpb24nIH0sXG4gICAgICAgICAgICAgICc6cmRzLWRiOicsXG4gICAgICAgICAgICAgIHsgUmVmOiAnQVdTOjpSZWdpb24nIH0sXG4gICAgICAgICAgICAgICc6JyxcbiAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OkFjY291bnRJZCcgfSxcbiAgICAgICAgICAgICAgJzpkYnVzZXI6JyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICdGbjo6U2VsZWN0JzogW1xuICAgICAgICAgICAgICAgICAgNixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgJ0ZuOjpTcGxpdCc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAnOicsXG4gICAgICAgICAgICAgICAgICAgICAgeyAnRm46OkdldEF0dCc6IFsnUHJveHlDQjBERkI3MScsICdEQlByb3h5QXJuJ10gfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJy97e3Jlc29sdmU6c2VjcmV0c21hbmFnZXI6JyxcbiAgICAgICAgICAgICAgeyBSZWY6ICdEYXRhYmFzZVNlY3JldEF0dGFjaG1lbnRFNUQxQjAyMCcgfSxcbiAgICAgICAgICAgICAgJzpTZWNyZXRTdHJpbmc6dXNlcm5hbWU6On19JyxcbiAgICAgICAgICAgIF1dLFxuICAgICAgICAgIH0sXG4gICAgICAgIH1dLFxuICAgICAgICBWZXJzaW9uOiAnMjAxMi0xMC0xNycsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCduZXcgUHJveHkgd2l0aCBtdWx0aXBsZSBTZWNyZXRzIGNhbm5vdCB1c2UgZ3JhbnRDb25uZWN0KCkgd2l0aG91dCBhIGRiVXNlciBwYXNzZWQnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IHJkcy5EYXRhYmFzZUNsdXN0ZXIoc3RhY2ssICdEYXRhYmFzZScsIHtcbiAgICAgIGVuZ2luZTogcmRzLkRhdGFiYXNlQ2x1c3RlckVuZ2luZS5BVVJPUkEsXG4gICAgICBpbnN0YW5jZVByb3BzOiB7IHZwYyB9LFxuICAgIH0pO1xuXG4gICAgY29uc3QgcHJveHkgPSBuZXcgcmRzLkRhdGFiYXNlUHJveHkoc3RhY2ssICdQcm94eScsIHtcbiAgICAgIHByb3h5VGFyZ2V0OiByZHMuUHJveHlUYXJnZXQuZnJvbUNsdXN0ZXIoY2x1c3RlciksXG4gICAgICBzZWNyZXRzOiBbXG4gICAgICAgIGNsdXN0ZXIuc2VjcmV0ISxcbiAgICAgICAgbmV3IHNlY3JldHNtYW5hZ2VyLlNlY3JldChzdGFjaywgJ1Byb3h5U2VjcmV0JyksXG4gICAgICBdLFxuICAgICAgdnBjLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHJvbGUgPSBuZXcgUm9sZShzdGFjaywgJ0RCUHJveHlSb2xlJywge1xuICAgICAgYXNzdW1lZEJ5OiBuZXcgQWNjb3VudFByaW5jaXBhbChzdGFjay5hY2NvdW50KSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgcHJveHkuZ3JhbnRDb25uZWN0KHJvbGUpO1xuICAgIH0pLnRvVGhyb3coL1doZW4gdGhlIFByb3h5IGNvbnRhaW5zIG11bHRpcGxlIFNlY3JldHMsIHlvdSBtdXN0IHBhc3MgYSBkYlVzZXIgZXhwbGljaXRseSB0byBncmFudENvbm5lY3QvKTtcbiAgfSk7XG5cbiAgdGVzdCgnREJQcm94eVRhcmdldEdyb3VwIHNob3VsZCBoYXZlIGRlcGVuZGVuY3kgb24gdGhlIHByb3h5IHRhcmdldHMnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBjbHVzdGVyID0gbmV3IHJkcy5EYXRhYmFzZUNsdXN0ZXIoc3RhY2ssICdjbHVzdGVyJywge1xuICAgICAgZW5naW5lOiByZHMuRGF0YWJhc2VDbHVzdGVyRW5naW5lLkFVUk9SQSxcbiAgICAgIGluc3RhbmNlUHJvcHM6IHtcbiAgICAgICAgdnBjLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vV0hFTlxuICAgIG5ldyByZHMuRGF0YWJhc2VQcm94eShzdGFjaywgJ3Byb3h5Jywge1xuICAgICAgcHJveHlUYXJnZXQ6IHJkcy5Qcm94eVRhcmdldC5mcm9tQ2x1c3RlcihjbHVzdGVyKSxcbiAgICAgIHNlY3JldHM6IFtjbHVzdGVyLnNlY3JldCFdLFxuICAgICAgdnBjLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2UoJ0FXUzo6UkRTOjpEQlByb3h5VGFyZ2V0R3JvdXAnLCB7XG4gICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgIERCUHJveHlOYW1lOiB7XG4gICAgICAgICAgUmVmOiAncHJveHkzQTFEQTlDNycsXG4gICAgICAgIH0sXG4gICAgICAgIFRhcmdldEdyb3VwTmFtZTogJ2RlZmF1bHQnLFxuICAgICAgfSxcbiAgICAgIERlcGVuZHNPbjogW1xuICAgICAgICAnY2x1c3Rlckluc3RhbmNlMTgzNTg0RDQwJyxcbiAgICAgICAgJ2NsdXN0ZXJJbnN0YW5jZTIzRDFBRDhCMicsXG4gICAgICAgICdjbHVzdGVyNjExRjhBRkYnLFxuICAgICAgICAnY2x1c3RlclNlY3JldEF0dGFjaG1lbnQ2OUJGQ0VDNCcsXG4gICAgICAgICdjbHVzdGVyU2VjcmV0RTM0OUI3MzAnLFxuICAgICAgICAnY2x1c3RlclNlY3VyaXR5R3JvdXBmcm9tcHJveHlQcm94eVNlY3VyaXR5R3JvdXBBODBGMDUyNUluZGlyZWN0UG9ydEExM0U1RjNEJyxcbiAgICAgICAgJ2NsdXN0ZXJTZWN1cml0eUdyb3VwRjQ0MURDRUEnLFxuICAgICAgICAnY2x1c3RlclN1Ym5ldHM4MUUzNTkzRicsXG4gICAgICBdLFxuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnZmVhdHVyZSBmbGFnIEBhd3MtY2RrL2F3cy1yZHM6ZGF0YWJhc2VQcm94eVVuaXF1ZVJlc291cmNlTmFtZScsICgpID0+IHtcbiAgdGVzdCgnY3JlYXRlIGEgREIgcHJveHkgZnJvbSBhbiBpbnN0YW5jZSB3aXRoIGEgdW5pcXVlIHJlc291cmNlIG5hbWUnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBzdGFjay5ub2RlLnNldENvbnRleHQoY3hhcGkuREFUQUJBU0VfUFJPWFlfVU5JUVVFX1JFU09VUkNFX05BTUUsIHRydWUpO1xuICAgIHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgcmRzLkRhdGFiYXNlSW5zdGFuY2Uoc3RhY2ssICdJbnN0YW5jZScsIHtcbiAgICAgIGVuZ2luZTogcmRzLkRhdGFiYXNlSW5zdGFuY2VFbmdpbmUubXlzcWwoe1xuICAgICAgICB2ZXJzaW9uOiByZHMuTXlzcWxFbmdpbmVWZXJzaW9uLlZFUl81XzcsXG4gICAgICB9KSxcbiAgICAgIHZwYyxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgcmRzLkRhdGFiYXNlUHJveHkoc3RhY2ssICdQcm94eScsIHtcbiAgICAgIHByb3h5VGFyZ2V0OiByZHMuUHJveHlUYXJnZXQuZnJvbUluc3RhbmNlKGluc3RhbmNlKSxcbiAgICAgIHNlY3JldHM6IFtpbnN0YW5jZS5zZWNyZXQhXSxcbiAgICAgIHZwYyxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpSRFM6OkRCUHJveHknLCB7XG4gICAgICBBdXRoOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBBdXRoU2NoZW1lOiAnU0VDUkVUUycsXG4gICAgICAgICAgSUFNQXV0aDogJ0RJU0FCTEVEJyxcbiAgICAgICAgICBTZWNyZXRBcm46IHtcbiAgICAgICAgICAgIFJlZjogJ0luc3RhbmNlU2VjcmV0QXR0YWNobWVudDgzQkVFNTgxJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIERCUHJveHlOYW1lOiAnUHJveHknLFxuICAgICAgRW5naW5lRmFtaWx5OiAnTVlTUUwnLFxuICAgICAgUmVxdWlyZVRMUzogdHJ1ZSxcbiAgICAgIFJvbGVBcm46IHtcbiAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgJ1Byb3h5SUFNUm9sZTJGRThBQjBGJyxcbiAgICAgICAgICAnQXJuJyxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICBWcGNTdWJuZXRJZHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIFJlZjogJ1ZQQ1ByaXZhdGVTdWJuZXQxU3VibmV0OEJDQTEwRTAnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgUmVmOiAnVlBDUHJpdmF0ZVN1Ym5ldDJTdWJuZXRDRkNEQUE3QScsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdjcmVhdGUgYSBEQiBwcm94eSBmcm9tIGFuIGluc3RhbmNlIHdpdGggYSBwcm94eSBuYW1lIGluIHRoZSBjb25zdHJ1Y3RvcicsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIHN0YWNrLm5vZGUuc2V0Q29udGV4dChjeGFwaS5EQVRBQkFTRV9QUk9YWV9VTklRVUVfUkVTT1VSQ0VfTkFNRSwgdHJ1ZSk7XG4gICAgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcbiAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyByZHMuRGF0YWJhc2VJbnN0YW5jZShzdGFjaywgJ0luc3RhbmNlJywge1xuICAgICAgZW5naW5lOiByZHMuRGF0YWJhc2VJbnN0YW5jZUVuZ2luZS5teXNxbCh7XG4gICAgICAgIHZlcnNpb246IHJkcy5NeXNxbEVuZ2luZVZlcnNpb24uVkVSXzVfNyxcbiAgICAgIH0pLFxuICAgICAgdnBjLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyByZHMuRGF0YWJhc2VQcm94eShzdGFjaywgJ1Byb3h5Jywge1xuICAgICAgcHJveHlUYXJnZXQ6IHJkcy5Qcm94eVRhcmdldC5mcm9tSW5zdGFuY2UoaW5zdGFuY2UpLFxuICAgICAgZGJQcm94eU5hbWU6ICdteS1wcm94eS1uYW1lJyxcbiAgICAgIHNlY3JldHM6IFtpbnN0YW5jZS5zZWNyZXQhXSxcbiAgICAgIHZwYyxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpSRFM6OkRCUHJveHknLCB7XG4gICAgICBBdXRoOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBBdXRoU2NoZW1lOiAnU0VDUkVUUycsXG4gICAgICAgICAgSUFNQXV0aDogJ0RJU0FCTEVEJyxcbiAgICAgICAgICBTZWNyZXRBcm46IHtcbiAgICAgICAgICAgIFJlZjogJ0luc3RhbmNlU2VjcmV0QXR0YWNobWVudDgzQkVFNTgxJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIERCUHJveHlOYW1lOiAnbXktcHJveHktbmFtZScsXG4gICAgICBFbmdpbmVGYW1pbHk6ICdNWVNRTCcsXG4gICAgICBSZXF1aXJlVExTOiB0cnVlLFxuICAgICAgUm9sZUFybjoge1xuICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAnUHJveHlJQU1Sb2xlMkZFOEFCMEYnLFxuICAgICAgICAgICdBcm4nLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIFZwY1N1Ym5ldElkczogW1xuICAgICAgICB7XG4gICAgICAgICAgUmVmOiAnVlBDUHJpdmF0ZVN1Ym5ldDFTdWJuZXQ4QkNBMTBFMCcsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBSZWY6ICdWUENQcml2YXRlU3VibmV0MlN1Ym5ldENGQ0RBQTdBJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=