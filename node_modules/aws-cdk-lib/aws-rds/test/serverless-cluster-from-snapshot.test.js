"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const ec2 = require("../../aws-ec2");
const kms = require("../../aws-kms");
const cdk = require("../../core");
const lib_1 = require("../lib");
describe('serverless cluster from snapshot', () => {
    test('create a serverless cluster from a snapshot', () => {
        const stack = testStack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        // WHEN
        new lib_1.ServerlessClusterFromSnapshot(stack, 'ServerlessDatabase', {
            engine: lib_1.DatabaseClusterEngine.AURORA_MYSQL,
            vpc,
            snapshotIdentifier: 'my-snapshot',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResource('AWS::RDS::DBCluster', {
            Properties: {
                Engine: 'aurora-mysql',
                CopyTagsToSnapshot: true,
                DBClusterParameterGroupName: 'default.aurora-mysql5.7',
                DBSubnetGroupName: {
                    Ref: 'ServerlessDatabaseSubnets5643CD76',
                },
                EngineMode: 'serverless',
                SnapshotIdentifier: 'my-snapshot',
                StorageEncrypted: true,
                VpcSecurityGroupIds: [
                    {
                        'Fn::GetAtt': [
                            'ServerlessDatabaseSecurityGroupB00D8C0F',
                            'GroupId',
                        ],
                    },
                ],
            },
            DeletionPolicy: 'Snapshot',
            UpdateReplacePolicy: 'Snapshot',
        });
    });
    test('can generate a new snapshot password', () => {
        const stack = testStack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        // WHEN
        new lib_1.ServerlessClusterFromSnapshot(stack, 'ServerlessDatabase', {
            engine: lib_1.DatabaseClusterEngine.AURORA_MYSQL,
            vpc,
            snapshotIdentifier: 'mySnapshot',
            credentials: lib_1.SnapshotCredentials.fromGeneratedSecret('admin', {
                excludeCharacters: '"@/\\',
            }),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBCluster', {
            MasterUsername: assertions_1.Match.absent(),
            MasterUserPassword: {
                'Fn::Join': ['', [
                        '{{resolve:secretsmanager:',
                        { Ref: 'ServerlessDatabaseSecret813910E98ee0a797cad8a68dbeb85f8698cdb5bb' },
                        ':SecretString:password::}}',
                    ]],
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SecretsManager::Secret', {
            Description: {
                'Fn::Join': ['', ['Generated by the CDK for stack: ', { Ref: 'AWS::StackName' }]],
            },
            GenerateSecretString: {
                ExcludeCharacters: '\"@/\\',
                GenerateStringKey: 'password',
                PasswordLength: 30,
                SecretStringTemplate: '{"username":"admin"}',
            },
        });
    });
    test('fromGeneratedSecret with replica regions', () => {
        const stack = testStack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        // WHEN
        new lib_1.ServerlessClusterFromSnapshot(stack, 'ServerlessDatabase', {
            engine: lib_1.DatabaseClusterEngine.AURORA_MYSQL,
            vpc,
            snapshotIdentifier: 'mySnapshot',
            credentials: lib_1.SnapshotCredentials.fromGeneratedSecret('admin', {
                replicaRegions: [{ region: 'eu-west-1' }],
            }),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SecretsManager::Secret', {
            ReplicaRegions: [
                {
                    Region: 'eu-west-1',
                },
            ],
        });
    });
    test('throws if generating a new password without a username', () => {
        const stack = testStack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        // WHEN
        expect(() => new lib_1.ServerlessClusterFromSnapshot(stack, 'ServerlessDatabase', {
            engine: lib_1.DatabaseClusterEngine.AURORA_MYSQL,
            vpc,
            snapshotIdentifier: 'mySnapshot',
            credentials: { generatePassword: true },
        })).toThrow(/`credentials` `username` must be specified when `generatePassword` is set to true/);
    });
    test('can set a new snapshot password from an existing SecretValue', () => {
        const stack = testStack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        // WHEN
        new lib_1.ServerlessClusterFromSnapshot(stack, 'ServerlessDatabase', {
            engine: lib_1.DatabaseClusterEngine.AURORA_MYSQL,
            vpc,
            snapshotIdentifier: 'mySnapshot',
            credentials: lib_1.SnapshotCredentials.fromPassword(cdk.SecretValue.unsafePlainText('mysecretpassword')),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBCluster', {
            MasterUsername: assertions_1.Match.absent(),
            MasterUserPassword: 'mysecretpassword',
        });
    });
    test('can set a new snapshot password from an existing Secret', () => {
        const stack = testStack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        // WHEN
        const secret = new lib_1.DatabaseSecret(stack, 'DBSecret', {
            username: 'admin',
            encryptionKey: new kms.Key(stack, 'PasswordKey'),
        });
        new lib_1.ServerlessClusterFromSnapshot(stack, 'ServerlessDatabase', {
            engine: lib_1.DatabaseClusterEngine.AURORA_MYSQL,
            vpc,
            snapshotIdentifier: 'mySnapshot',
            credentials: lib_1.SnapshotCredentials.fromSecret(secret),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBCluster', {
            MasterUsername: assertions_1.Match.absent(),
            MasterUserPassword: {
                'Fn::Join': ['', ['{{resolve:secretsmanager:', { Ref: 'DBSecretD58955BC' }, ':SecretString:password::}}']],
            },
        });
    });
});
function testStack() {
    const stack = new cdk.Stack(undefined, undefined, { env: { account: '12345', region: 'us-test-1' } });
    stack.node.setContext('availability-zones:12345:us-test-1', ['us-test-1a', 'us-test-1b']);
    return stack;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVybGVzcy1jbHVzdGVyLWZyb20tc25hcHNob3QudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlcnZlcmxlc3MtY2x1c3Rlci1mcm9tLXNuYXBzaG90LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBbUQ7QUFDbkQscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQyxrQ0FBa0M7QUFDbEMsZ0NBQW1IO0FBRW5ILFFBQVEsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7SUFDaEQsSUFBSSxDQUFDLDZDQUE2QyxFQUFFLEdBQUcsRUFBRTtRQUN2RCxNQUFNLEtBQUssR0FBRyxTQUFTLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXRDLE9BQU87UUFDUCxJQUFJLG1DQUE2QixDQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRTtZQUM3RCxNQUFNLEVBQUUsMkJBQXFCLENBQUMsWUFBWTtZQUMxQyxHQUFHO1lBQ0gsa0JBQWtCLEVBQUUsYUFBYTtTQUNsQyxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFO1lBQzNELFVBQVUsRUFBRTtnQkFDVixNQUFNLEVBQUUsY0FBYztnQkFDdEIsa0JBQWtCLEVBQUUsSUFBSTtnQkFDeEIsMkJBQTJCLEVBQUUseUJBQXlCO2dCQUN0RCxpQkFBaUIsRUFBRTtvQkFDakIsR0FBRyxFQUFFLG1DQUFtQztpQkFDekM7Z0JBQ0QsVUFBVSxFQUFFLFlBQVk7Z0JBQ3hCLGtCQUFrQixFQUFFLGFBQWE7Z0JBQ2pDLGdCQUFnQixFQUFFLElBQUk7Z0JBQ3RCLG1CQUFtQixFQUFFO29CQUNuQjt3QkFDRSxZQUFZLEVBQUU7NEJBQ1oseUNBQXlDOzRCQUN6QyxTQUFTO3lCQUNWO3FCQUNG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cG9ydCB7IE1hdGNoLCBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJy4uLy4uL2F3cy1lYzInO1xuaW1wb3J0ICogYXMga21zIGZyb20gJy4uLy4uL2F3cy1rbXMnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgRGF0YWJhc2VDbHVzdGVyRW5naW5lLCBEYXRhYmFzZVNlY3JldCwgU2VydmVybGVzc0NsdXN0ZXJGcm9tU25hcHNob3QsIFNuYXBzaG90Q3JlZGVudGlhbHMgfSBmcm9tICcuLi9saWInO1xuXG5kZXNjcmliZSgnc2VydmVybGVzcyBjbHVzdGVyIGZyb20gc25hcHNob3QnLCAoKSA9PiB7XG4gIHRlc3QoJ2NyZWF0ZSBhIHNlcnZlcmxlc3MgY2x1c3RlciBmcm9tIGEgc25hcHNob3QnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSB0ZXN0U3RhY2soKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBTZXJ2ZXJsZXNzQ2x1c3RlckZyb21TbmFwc2hvdChzdGFjaywgJ1NlcnZlcmxlc3NEYXRhYmFzZScsIHtcbiAgICAgIGVuZ2luZTogRGF0YWJhc2VDbHVzdGVyRW5naW5lLkFVUk9SQV9NWVNRTCxcbiAgICAgIHZwYyxcbiAgICAgIHNuYXBzaG90SWRlbnRpZmllcjogJ215LXNuYXBzaG90JyxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlKCdBV1M6OlJEUzo6REJDbHVzdGVyJywge1xuICAgICAgUHJvcGVydGllczoge1xuICAgICAgICBFbmdpbmU6ICdhdXJvcmEtbXlzcWwnLFxuICAgICAgICBDb3B5VGFnc1RvU25hcHNob3Q6IHRydWUsXG4gICAgICAgIERCQ2x1c3RlclBhcmFtZXRlckdyb3VwTmFtZTogJ2RlZmF1bHQuYXVyb3JhLW15c3FsNS43JyxcbiAgICAgICAgREJTdWJuZXRHcm91cE5hbWU6IHtcbiAgICAgICAgICBSZWY6ICdTZXJ2ZXJsZXNzRGF0YWJhc2VTdWJuZXRzNTY0M0NENzYnLFxuICAgICAgICB9LFxuICAgICAgICBFbmdpbmVNb2RlOiAnc2VydmVybGVzcycsXG4gICAgICAgIFNuYXBzaG90SWRlbnRpZmllcjogJ215LXNuYXBzaG90JyxcbiAgICAgICAgU3RvcmFnZUVuY3J5cHRlZDogdHJ1ZSxcbiAgICAgICAgVnBjU2VjdXJpdHlHcm91cElkczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgICAgICAnU2VydmVybGVzc0RhdGFiYXNlU2VjdXJpdHlHcm91cEIwMEQ4QzBGJyxcbiAgICAgICAgICAgICAgJ0dyb3VwSWQnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIERlbGV0aW9uUG9saWN5OiAnU25hcHNob3QnLFxuICAgICAgVXBkYXRlUmVwbGFjZVBvbGljeTogJ1NuYXBzaG90JyxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnY2FuIGdlbmVyYXRlIGEgbmV3IHNuYXBzaG90IHBhc3N3b3JkJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YWNrID0gdGVzdFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgU2VydmVybGVzc0NsdXN0ZXJGcm9tU25hcHNob3Qoc3RhY2ssICdTZXJ2ZXJsZXNzRGF0YWJhc2UnLCB7XG4gICAgICBlbmdpbmU6IERhdGFiYXNlQ2x1c3RlckVuZ2luZS5BVVJPUkFfTVlTUUwsXG4gICAgICB2cGMsXG4gICAgICBzbmFwc2hvdElkZW50aWZpZXI6ICdteVNuYXBzaG90JyxcbiAgICAgIGNyZWRlbnRpYWxzOiBTbmFwc2hvdENyZWRlbnRpYWxzLmZyb21HZW5lcmF0ZWRTZWNyZXQoJ2FkbWluJywge1xuICAgICAgICBleGNsdWRlQ2hhcmFjdGVyczogJ1wiQC9cXFxcJyxcbiAgICAgIH0pLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlJEUzo6REJDbHVzdGVyJywge1xuICAgICAgTWFzdGVyVXNlcm5hbWU6IE1hdGNoLmFic2VudCgpLFxuICAgICAgTWFzdGVyVXNlclBhc3N3b3JkOiB7XG4gICAgICAgICdGbjo6Sm9pbic6IFsnJywgW1xuICAgICAgICAgICd7e3Jlc29sdmU6c2VjcmV0c21hbmFnZXI6JyxcbiAgICAgICAgICB7IFJlZjogJ1NlcnZlcmxlc3NEYXRhYmFzZVNlY3JldDgxMzkxMEU5OGVlMGE3OTdjYWQ4YTY4ZGJlYjg1Zjg2OThjZGI1YmInIH0sXG4gICAgICAgICAgJzpTZWNyZXRTdHJpbmc6cGFzc3dvcmQ6On19JyxcbiAgICAgICAgXV0sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlNlY3JldHNNYW5hZ2VyOjpTZWNyZXQnLCB7XG4gICAgICBEZXNjcmlwdGlvbjoge1xuICAgICAgICAnRm46OkpvaW4nOiBbJycsIFsnR2VuZXJhdGVkIGJ5IHRoZSBDREsgZm9yIHN0YWNrOiAnLCB7IFJlZjogJ0FXUzo6U3RhY2tOYW1lJyB9XV0sXG4gICAgICB9LFxuICAgICAgR2VuZXJhdGVTZWNyZXRTdHJpbmc6IHtcbiAgICAgICAgRXhjbHVkZUNoYXJhY3RlcnM6ICdcXFwiQC9cXFxcJyxcbiAgICAgICAgR2VuZXJhdGVTdHJpbmdLZXk6ICdwYXNzd29yZCcsXG4gICAgICAgIFBhc3N3b3JkTGVuZ3RoOiAzMCxcbiAgICAgICAgU2VjcmV0U3RyaW5nVGVtcGxhdGU6ICd7XCJ1c2VybmFtZVwiOlwiYWRtaW5cIn0nLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnZnJvbUdlbmVyYXRlZFNlY3JldCB3aXRoIHJlcGxpY2EgcmVnaW9ucycsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IHRlc3RTdGFjaygpO1xuICAgIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgbmV3IFNlcnZlcmxlc3NDbHVzdGVyRnJvbVNuYXBzaG90KHN0YWNrLCAnU2VydmVybGVzc0RhdGFiYXNlJywge1xuICAgICAgZW5naW5lOiBEYXRhYmFzZUNsdXN0ZXJFbmdpbmUuQVVST1JBX01ZU1FMLFxuICAgICAgdnBjLFxuICAgICAgc25hcHNob3RJZGVudGlmaWVyOiAnbXlTbmFwc2hvdCcsXG4gICAgICBjcmVkZW50aWFsczogU25hcHNob3RDcmVkZW50aWFscy5mcm9tR2VuZXJhdGVkU2VjcmV0KCdhZG1pbicsIHtcbiAgICAgICAgcmVwbGljYVJlZ2lvbnM6IFt7IHJlZ2lvbjogJ2V1LXdlc3QtMScgfV0sXG4gICAgICB9KSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpTZWNyZXRzTWFuYWdlcjo6U2VjcmV0Jywge1xuICAgICAgUmVwbGljYVJlZ2lvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIFJlZ2lvbjogJ2V1LXdlc3QtMScsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCd0aHJvd3MgaWYgZ2VuZXJhdGluZyBhIG5ldyBwYXNzd29yZCB3aXRob3V0IGEgdXNlcm5hbWUnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSB0ZXN0U3RhY2soKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQycpO1xuXG4gICAgLy8gV0hFTlxuICAgIGV4cGVjdCgoKSA9PiBuZXcgU2VydmVybGVzc0NsdXN0ZXJGcm9tU25hcHNob3Qoc3RhY2ssICdTZXJ2ZXJsZXNzRGF0YWJhc2UnLCB7XG4gICAgICBlbmdpbmU6IERhdGFiYXNlQ2x1c3RlckVuZ2luZS5BVVJPUkFfTVlTUUwsXG4gICAgICB2cGMsXG4gICAgICBzbmFwc2hvdElkZW50aWZpZXI6ICdteVNuYXBzaG90JyxcbiAgICAgIGNyZWRlbnRpYWxzOiB7IGdlbmVyYXRlUGFzc3dvcmQ6IHRydWUgfSxcbiAgICB9KSkudG9UaHJvdygvYGNyZWRlbnRpYWxzYCBgdXNlcm5hbWVgIG11c3QgYmUgc3BlY2lmaWVkIHdoZW4gYGdlbmVyYXRlUGFzc3dvcmRgIGlzIHNldCB0byB0cnVlLyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NhbiBzZXQgYSBuZXcgc25hcHNob3QgcGFzc3dvcmQgZnJvbSBhbiBleGlzdGluZyBTZWNyZXRWYWx1ZScsICgpID0+IHtcbiAgICBjb25zdCBzdGFjayA9IHRlc3RTdGFjaygpO1xuICAgIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgbmV3IFNlcnZlcmxlc3NDbHVzdGVyRnJvbVNuYXBzaG90KHN0YWNrLCAnU2VydmVybGVzc0RhdGFiYXNlJywge1xuICAgICAgZW5naW5lOiBEYXRhYmFzZUNsdXN0ZXJFbmdpbmUuQVVST1JBX01ZU1FMLFxuICAgICAgdnBjLFxuICAgICAgc25hcHNob3RJZGVudGlmaWVyOiAnbXlTbmFwc2hvdCcsXG4gICAgICBjcmVkZW50aWFsczogU25hcHNob3RDcmVkZW50aWFscy5mcm9tUGFzc3dvcmQoY2RrLlNlY3JldFZhbHVlLnVuc2FmZVBsYWluVGV4dCgnbXlzZWNyZXRwYXNzd29yZCcpKSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpSRFM6OkRCQ2x1c3RlcicsIHtcbiAgICAgIE1hc3RlclVzZXJuYW1lOiBNYXRjaC5hYnNlbnQoKSxcbiAgICAgIE1hc3RlclVzZXJQYXNzd29yZDogJ215c2VjcmV0cGFzc3dvcmQnLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdjYW4gc2V0IGEgbmV3IHNuYXBzaG90IHBhc3N3b3JkIGZyb20gYW4gZXhpc3RpbmcgU2VjcmV0JywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YWNrID0gdGVzdFN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBzZWNyZXQgPSBuZXcgRGF0YWJhc2VTZWNyZXQoc3RhY2ssICdEQlNlY3JldCcsIHtcbiAgICAgIHVzZXJuYW1lOiAnYWRtaW4nLFxuICAgICAgZW5jcnlwdGlvbktleTogbmV3IGttcy5LZXkoc3RhY2ssICdQYXNzd29yZEtleScpLFxuICAgIH0pO1xuICAgIG5ldyBTZXJ2ZXJsZXNzQ2x1c3RlckZyb21TbmFwc2hvdChzdGFjaywgJ1NlcnZlcmxlc3NEYXRhYmFzZScsIHtcbiAgICAgIGVuZ2luZTogRGF0YWJhc2VDbHVzdGVyRW5naW5lLkFVUk9SQV9NWVNRTCxcbiAgICAgIHZwYyxcbiAgICAgIHNuYXBzaG90SWRlbnRpZmllcjogJ215U25hcHNob3QnLFxuICAgICAgY3JlZGVudGlhbHM6IFNuYXBzaG90Q3JlZGVudGlhbHMuZnJvbVNlY3JldChzZWNyZXQpLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlJEUzo6REJDbHVzdGVyJywge1xuICAgICAgTWFzdGVyVXNlcm5hbWU6IE1hdGNoLmFic2VudCgpLFxuICAgICAgTWFzdGVyVXNlclBhc3N3b3JkOiB7XG4gICAgICAgICdGbjo6Sm9pbic6IFsnJywgWyd7e3Jlc29sdmU6c2VjcmV0c21hbmFnZXI6JywgeyBSZWY6ICdEQlNlY3JldEQ1ODk1NUJDJyB9LCAnOlNlY3JldFN0cmluZzpwYXNzd29yZDo6fX0nXV0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5mdW5jdGlvbiB0ZXN0U3RhY2soKTogY2RrLlN0YWNrIHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB7IGVudjogeyBhY2NvdW50OiAnMTIzNDUnLCByZWdpb246ICd1cy10ZXN0LTEnIH0gfSk7XG4gIHN0YWNrLm5vZGUuc2V0Q29udGV4dCgnYXZhaWxhYmlsaXR5LXpvbmVzOjEyMzQ1OnVzLXRlc3QtMScsIFsndXMtdGVzdC0xYScsICd1cy10ZXN0LTFiJ10pO1xuICByZXR1cm4gc3RhY2s7XG59XG4iXX0=