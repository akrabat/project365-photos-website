"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const core = require("../../../core");
const rds = require("../../lib");
describe('sql server instance engine', () => {
    describe('SQL Server instance engine', () => {
        test("has ParameterGroup family ending in '11.0' for major version 11", () => {
            const stack = new core.Stack();
            new rds.ParameterGroup(stack, 'ParameterGroup', {
                engine: rds.DatabaseInstanceEngine.sqlServerWeb({
                    version: rds.SqlServerEngineVersion.VER_11,
                }),
            }).bindToInstance({});
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBParameterGroup', {
                Family: 'sqlserver-web-11.0',
            });
        });
        test("has MajorEngineVersion ending in '11.00' for major version 11", () => {
            const stack = new core.Stack();
            new rds.OptionGroup(stack, 'OptionGroup', {
                engine: rds.DatabaseInstanceEngine.sqlServerWeb({
                    version: rds.SqlServerEngineVersion.VER_11,
                }),
                configurations: [
                    {
                        name: 'SQLSERVER_BACKUP_RESTORE',
                        settings: {
                            IAM_ROLE_ARN: 'some-role-arn',
                        },
                    },
                ],
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::OptionGroup', {
                MajorEngineVersion: '11.00',
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FsLXNlcnZlci5pbnN0YW5jZS1lbmdpbmUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNxbC1zZXJ2ZXIuaW5zdGFuY2UtZW5naW5lLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvREFBK0M7QUFDL0Msc0NBQXNDO0FBQ3RDLGlDQUFpQztBQUVqQyxRQUFRLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFO0lBQzFDLFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7UUFDMUMsSUFBSSxDQUFDLGlFQUFpRSxFQUFFLEdBQUcsRUFBRTtZQUMzRSxNQUFNLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMvQixJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFO2dCQUM5QyxNQUFNLEVBQUUsR0FBRyxDQUFDLHNCQUFzQixDQUFDLFlBQVksQ0FBQztvQkFDOUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNO2lCQUMzQyxDQUFDO2FBQ0gsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUV0QixxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyw0QkFBNEIsRUFBRTtnQkFDNUUsTUFBTSxFQUFFLG9CQUFvQjthQUM3QixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQywrREFBK0QsRUFBRSxHQUFHLEVBQUU7WUFDekUsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDL0IsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUU7Z0JBQ3hDLE1BQU0sRUFBRSxHQUFHLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDO29CQUM5QyxPQUFPLEVBQUUsR0FBRyxDQUFDLHNCQUFzQixDQUFDLE1BQU07aUJBQzNDLENBQUM7Z0JBQ0YsY0FBYyxFQUFFO29CQUNkO3dCQUNFLElBQUksRUFBRSwwQkFBMEI7d0JBQ2hDLFFBQVEsRUFBRTs0QkFDUixZQUFZLEVBQUUsZUFBZTt5QkFDOUI7cUJBQ0Y7aUJBQ0Y7YUFDRixDQUFDLENBQUM7WUFFSCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyx1QkFBdUIsRUFBRTtnQkFDdkUsa0JBQWtCLEVBQUUsT0FBTzthQUM1QixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0ICogYXMgY29yZSBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIHJkcyBmcm9tICcuLi8uLi9saWInO1xuXG5kZXNjcmliZSgnc3FsIHNlcnZlciBpbnN0YW5jZSBlbmdpbmUnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdTUUwgU2VydmVyIGluc3RhbmNlIGVuZ2luZScsICgpID0+IHtcbiAgICB0ZXN0KFwiaGFzIFBhcmFtZXRlckdyb3VwIGZhbWlseSBlbmRpbmcgaW4gJzExLjAnIGZvciBtYWpvciB2ZXJzaW9uIDExXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNvcmUuU3RhY2soKTtcbiAgICAgIG5ldyByZHMuUGFyYW1ldGVyR3JvdXAoc3RhY2ssICdQYXJhbWV0ZXJHcm91cCcsIHtcbiAgICAgICAgZW5naW5lOiByZHMuRGF0YWJhc2VJbnN0YW5jZUVuZ2luZS5zcWxTZXJ2ZXJXZWIoe1xuICAgICAgICAgIHZlcnNpb246IHJkcy5TcWxTZXJ2ZXJFbmdpbmVWZXJzaW9uLlZFUl8xMSxcbiAgICAgICAgfSksXG4gICAgICB9KS5iaW5kVG9JbnN0YW5jZSh7fSk7XG5cbiAgICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlJEUzo6REJQYXJhbWV0ZXJHcm91cCcsIHtcbiAgICAgICAgRmFtaWx5OiAnc3Fsc2VydmVyLXdlYi0xMS4wJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdChcImhhcyBNYWpvckVuZ2luZVZlcnNpb24gZW5kaW5nIGluICcxMS4wMCcgZm9yIG1ham9yIHZlcnNpb24gMTFcIiwgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY29yZS5TdGFjaygpO1xuICAgICAgbmV3IHJkcy5PcHRpb25Hcm91cChzdGFjaywgJ09wdGlvbkdyb3VwJywge1xuICAgICAgICBlbmdpbmU6IHJkcy5EYXRhYmFzZUluc3RhbmNlRW5naW5lLnNxbFNlcnZlcldlYih7XG4gICAgICAgICAgdmVyc2lvbjogcmRzLlNxbFNlcnZlckVuZ2luZVZlcnNpb24uVkVSXzExLFxuICAgICAgICB9KSxcbiAgICAgICAgY29uZmlndXJhdGlvbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnU1FMU0VSVkVSX0JBQ0tVUF9SRVNUT1JFJyxcbiAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgIElBTV9ST0xFX0FSTjogJ3NvbWUtcm9sZS1hcm4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSk7XG5cbiAgICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlJEUzo6T3B0aW9uR3JvdXAnLCB7XG4gICAgICAgIE1ham9yRW5naW5lVmVyc2lvbjogJzExLjAwJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19