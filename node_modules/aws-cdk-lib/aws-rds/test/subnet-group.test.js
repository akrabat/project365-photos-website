"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const ec2 = require("../../aws-ec2");
const cdk = require("../../core");
const rds = require("../lib");
let stack;
let vpc;
describe('subnet group', () => {
    beforeEach(() => {
        stack = new cdk.Stack();
        vpc = new ec2.Vpc(stack, 'VPC');
    });
    test('creates a subnet group from minimal properties', () => {
        new rds.SubnetGroup(stack, 'Group', {
            description: 'MyGroup',
            vpc,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBSubnetGroup', {
            DBSubnetGroupDescription: 'MyGroup',
            SubnetIds: [
                { Ref: 'VPCPrivateSubnet1Subnet8BCA10E0' },
                { Ref: 'VPCPrivateSubnet2SubnetCFCDAA7A' },
            ],
        });
    });
    test('creates a subnet group from all properties', () => {
        new rds.SubnetGroup(stack, 'Group', {
            description: 'My Shared Group',
            subnetGroupName: 'SharedGroup',
            vpc,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBSubnetGroup', {
            DBSubnetGroupDescription: 'My Shared Group',
            DBSubnetGroupName: 'sharedgroup',
            SubnetIds: [
                { Ref: 'VPCPrivateSubnet1Subnet8BCA10E0' },
                { Ref: 'VPCPrivateSubnet2SubnetCFCDAA7A' },
            ],
        });
    });
    test('correctly creates a subnet group with a deploy-time value for its name', () => {
        const parameter = new cdk.CfnParameter(stack, 'Parameter');
        new rds.SubnetGroup(stack, 'Group', {
            description: 'My Shared Group',
            subnetGroupName: parameter.valueAsString,
            vpc,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBSubnetGroup', {
            DBSubnetGroupName: {
                Ref: 'Parameter',
            },
        });
    });
    describe('subnet selection', () => {
        test('defaults to private subnets', () => {
            new rds.SubnetGroup(stack, 'Group', {
                description: 'MyGroup',
                vpc,
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBSubnetGroup', {
                DBSubnetGroupDescription: 'MyGroup',
                SubnetIds: [
                    { Ref: 'VPCPrivateSubnet1Subnet8BCA10E0' },
                    { Ref: 'VPCPrivateSubnet2SubnetCFCDAA7A' },
                ],
            });
        });
        test('can specify subnet type', () => {
            new rds.SubnetGroup(stack, 'Group', {
                description: 'MyGroup',
                vpc,
                vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },
            });
            assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::RDS::DBSubnetGroup', {
                DBSubnetGroupDescription: 'MyGroup',
                SubnetIds: [
                    { Ref: 'VPCPublicSubnet1SubnetB4246D30' },
                    { Ref: 'VPCPublicSubnet2Subnet74179F39' },
                ],
            });
        });
    });
    test('import group by name', () => {
        const subnetGroup = rds.SubnetGroup.fromSubnetGroupName(stack, 'Group', 'my-subnet-group');
        expect(subnetGroup.subnetGroupName).toEqual('my-subnet-group');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VibmV0LWdyb3VwLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdWJuZXQtZ3JvdXAudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUE0QztBQUM1QyxxQ0FBcUM7QUFDckMsa0NBQWtDO0FBQ2xDLDhCQUE4QjtBQUU5QixJQUFJLEtBQWdCLENBQUM7QUFDckIsSUFBSSxHQUFhLENBQUM7QUFFbEIsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7SUFDNUIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN4QixHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxnREFBZ0QsRUFBRSxHQUFHLEVBQUU7UUFDMUQsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUU7WUFDbEMsV0FBVyxFQUFFLFNBQVM7WUFDdEIsR0FBRztTQUNKLENBQUMsQ0FBQztRQUVILHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLHlCQUF5QixFQUFFO1lBQ3pFLHdCQUF3QixFQUFFLFNBQVM7WUFDbkMsU0FBUyxFQUFFO2dCQUNULEVBQUUsR0FBRyxFQUFFLGlDQUFpQyxFQUFFO2dCQUMxQyxFQUFFLEdBQUcsRUFBRSxpQ0FBaUMsRUFBRTthQUMzQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDRDQUE0QyxFQUFFLEdBQUcsRUFBRTtRQUN0RCxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtZQUNsQyxXQUFXLEVBQUUsaUJBQWlCO1lBQzlCLGVBQWUsRUFBRSxhQUFhO1lBQzlCLEdBQUc7WUFD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QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vYXNzZXJ0aW9ucyc7XG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnLi4vLi4vYXdzLWVjMic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyByZHMgZnJvbSAnLi4vbGliJztcblxubGV0IHN0YWNrOiBjZGsuU3RhY2s7XG5sZXQgdnBjOiBlYzIuSVZwYztcblxuZGVzY3JpYmUoJ3N1Ym5ldCBncm91cCcsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcbiAgfSk7XG5cbiAgdGVzdCgnY3JlYXRlcyBhIHN1Ym5ldCBncm91cCBmcm9tIG1pbmltYWwgcHJvcGVydGllcycsICgpID0+IHtcbiAgICBuZXcgcmRzLlN1Ym5ldEdyb3VwKHN0YWNrLCAnR3JvdXAnLCB7XG4gICAgICBkZXNjcmlwdGlvbjogJ015R3JvdXAnLFxuICAgICAgdnBjLFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6UkRTOjpEQlN1Ym5ldEdyb3VwJywge1xuICAgICAgREJTdWJuZXRHcm91cERlc2NyaXB0aW9uOiAnTXlHcm91cCcsXG4gICAgICBTdWJuZXRJZHM6IFtcbiAgICAgICAgeyBSZWY6ICdWUENQcml2YXRlU3VibmV0MVN1Ym5ldDhCQ0ExMEUwJyB9LFxuICAgICAgICB7IFJlZjogJ1ZQQ1ByaXZhdGVTdWJuZXQyU3VibmV0Q0ZDREFBN0EnIH0sXG4gICAgICBdLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdjcmVhdGVzIGEgc3VibmV0IGdyb3VwIGZyb20gYWxsIHByb3BlcnRpZXMnLCAoKSA9PiB7XG4gICAgbmV3IHJkcy5TdWJuZXRHcm91cChzdGFjaywgJ0dyb3VwJywge1xuICAgICAgZGVzY3JpcHRpb246ICdNeSBTaGFyZWQgR3JvdXAnLFxuICAgICAgc3VibmV0R3JvdXBOYW1lOiAnU2hhcmVkR3JvdXAnLFxuICAgICAgdnBjLFxuICAgICAgdnBjU3VibmV0czogeyBzdWJuZXRUeXBlOiBlYzIuU3VibmV0VHlwZS5QUklWQVRFX1dJVEhfRUdSRVNTIH0sXG4gICAgfSk7XG5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpSRFM6OkRCU3VibmV0R3JvdXAnLCB7XG4gICAgICBEQlN1Ym5ldEdyb3VwRGVzY3JpcHRpb246ICdNeSBTaGFyZWQgR3JvdXAnLFxuICAgICAgREJTdWJuZXRHcm91cE5hbWU6ICdzaGFyZWRncm91cCcsXG4gICAgICBTdWJuZXRJZHM6IFtcbiAgICAgICAgeyBSZWY6ICdWUENQcml2YXRlU3VibmV0MVN1Ym5ldDhCQ0ExMEUwJyB9LFxuICAgICAgICB7IFJlZjogJ1ZQQ1ByaXZhdGVTdWJuZXQyU3VibmV0Q0ZDREFBN0EnIH0sXG4gICAgICBdLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdjb3JyZWN0bHkgY3JlYXRlcyBhIHN1Ym5ldCBncm91cCB3aXRoIGEgZGVwbG95LXRpbWUgdmFsdWUgZm9yIGl0cyBuYW1lJywgKCkgPT4ge1xuICAgIGNvbnN0IHBhcmFtZXRlciA9IG5ldyBjZGsuQ2ZuUGFyYW1ldGVyKHN0YWNrLCAnUGFyYW1ldGVyJyk7XG4gICAgbmV3IHJkcy5TdWJuZXRHcm91cChzdGFjaywgJ0dyb3VwJywge1xuICAgICAgZGVzY3JpcHRpb246ICdNeSBTaGFyZWQgR3JvdXAnLFxuICAgICAgc3VibmV0R3JvdXBOYW1lOiBwYXJhbWV0ZXIudmFsdWVBc1N0cmluZyxcbiAgICAgIHZwYyxcbiAgICAgIHZwY1N1Ym5ldHM6IHsgc3VibmV0VHlwZTogZWMyLlN1Ym5ldFR5cGUuUFJJVkFURV9XSVRIX0VHUkVTUyB9LFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6UkRTOjpEQlN1Ym5ldEdyb3VwJywge1xuICAgICAgREJTdWJuZXRHcm91cE5hbWU6IHtcbiAgICAgICAgUmVmOiAnUGFyYW1ldGVyJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdzdWJuZXQgc2VsZWN0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ2RlZmF1bHRzIHRvIHByaXZhdGUgc3VibmV0cycsICgpID0+IHtcbiAgICAgIG5ldyByZHMuU3VibmV0R3JvdXAoc3RhY2ssICdHcm91cCcsIHtcbiAgICAgICAgZGVzY3JpcHRpb246ICdNeUdyb3VwJyxcbiAgICAgICAgdnBjLFxuICAgICAgfSk7XG5cbiAgICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlJEUzo6REJTdWJuZXRHcm91cCcsIHtcbiAgICAgICAgREJTdWJuZXRHcm91cERlc2NyaXB0aW9uOiAnTXlHcm91cCcsXG4gICAgICAgIFN1Ym5ldElkczogW1xuICAgICAgICAgIHsgUmVmOiAnVlBDUHJpdmF0ZVN1Ym5ldDFTdWJuZXQ4QkNBMTBFMCcgfSxcbiAgICAgICAgICB7IFJlZjogJ1ZQQ1ByaXZhdGVTdWJuZXQyU3VibmV0Q0ZDREFBN0EnIH0sXG4gICAgICAgIF0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2NhbiBzcGVjaWZ5IHN1Ym5ldCB0eXBlJywgKCkgPT4ge1xuICAgICAgbmV3IHJkcy5TdWJuZXRHcm91cChzdGFjaywgJ0dyb3VwJywge1xuICAgICAgICBkZXNjcmlwdGlvbjogJ015R3JvdXAnLFxuICAgICAgICB2cGMsXG4gICAgICAgIHZwY1N1Ym5ldHM6IHsgc3VibmV0VHlwZTogZWMyLlN1Ym5ldFR5cGUuUFVCTElDIH0sXG4gICAgICB9KTtcblxuICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6UkRTOjpEQlN1Ym5ldEdyb3VwJywge1xuICAgICAgICBEQlN1Ym5ldEdyb3VwRGVzY3JpcHRpb246ICdNeUdyb3VwJyxcbiAgICAgICAgU3VibmV0SWRzOiBbXG4gICAgICAgICAgeyBSZWY6ICdWUENQdWJsaWNTdWJuZXQxU3VibmV0QjQyNDZEMzAnIH0sXG4gICAgICAgICAgeyBSZWY6ICdWUENQdWJsaWNTdWJuZXQyU3VibmV0NzQxNzlGMzknIH0sXG4gICAgICAgIF0sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnaW1wb3J0IGdyb3VwIGJ5IG5hbWUnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3VibmV0R3JvdXAgPSByZHMuU3VibmV0R3JvdXAuZnJvbVN1Ym5ldEdyb3VwTmFtZShzdGFjaywgJ0dyb3VwJywgJ215LXN1Ym5ldC1ncm91cCcpO1xuXG4gICAgZXhwZWN0KHN1Ym5ldEdyb3VwLnN1Ym5ldEdyb3VwTmFtZSkudG9FcXVhbCgnbXktc3VibmV0LWdyb3VwJyk7XG4gIH0pO1xufSk7XG4iXX0=