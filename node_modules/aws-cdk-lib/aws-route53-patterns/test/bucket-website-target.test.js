"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const aws_certificatemanager_1 = require("../../aws-certificatemanager");
const aws_route53_1 = require("../../aws-route53");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../core");
const cx_api_1 = require("../../cx-api");
const lib_1 = require("../lib");
(0, cdk_build_tools_1.testDeprecated)('create HTTPS redirect', () => {
    // GIVEN
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'test', { env: { region: 'us-east-1' } });
    // WHEN
    new lib_1.HttpsRedirect(stack, 'Redirect', {
        recordNames: ['foo.example.com', 'baz.example.com'],
        targetDomain: 'bar.example.com',
        zone: aws_route53_1.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
            hostedZoneId: 'ID',
            zoneName: 'example.com',
        }),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::Bucket', {
        WebsiteConfiguration: {
            RedirectAllRequestsTo: {
                HostName: 'bar.example.com',
                Protocol: 'https',
            },
        },
        PublicAccessBlockConfiguration: {
            BlockPublicAcls: true,
            BlockPublicPolicy: true,
            IgnorePublicAcls: true,
            RestrictPublicBuckets: true,
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
        DistributionConfig: {
            Aliases: ['foo.example.com', 'baz.example.com'],
            DefaultRootObject: '',
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Type: 'A',
        Name: 'foo.example.com.',
        HostedZoneId: 'ID',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Type: 'AAAA',
        Name: 'foo.example.com.',
        HostedZoneId: 'ID',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Type: 'A',
        Name: 'baz.example.com.',
        HostedZoneId: 'ID',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Type: 'AAAA',
        Name: 'baz.example.com.',
        HostedZoneId: 'ID',
    });
});
(0, cdk_build_tools_1.testDeprecated)('create HTTPS redirect for apex', () => {
    // GIVEN
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'test', { env: { region: 'us-east-1' } });
    // WHEN
    new lib_1.HttpsRedirect(stack, 'Redirect', {
        targetDomain: 'bar.example.com',
        zone: aws_route53_1.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
            hostedZoneId: 'ID',
            zoneName: 'example.com',
        }),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::Bucket', {
        WebsiteConfiguration: {
            RedirectAllRequestsTo: {
                HostName: 'bar.example.com',
                Protocol: 'https',
            },
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Type: 'A',
        Name: 'example.com.',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Type: 'AAAA',
        Name: 'example.com.',
    });
});
(0, cdk_build_tools_1.testDeprecated)('create HTTPS redirect with existing cert', () => {
    // GIVEN
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'test', { env: { region: 'us-east-1' } });
    // WHEN
    new lib_1.HttpsRedirect(stack, 'Redirect', {
        recordNames: ['foo.example.com'],
        certificate: aws_certificatemanager_1.Certificate.fromCertificateArn(stack, 'Certificate', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),
        targetDomain: 'bar.example.com',
        zone: aws_route53_1.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
            hostedZoneId: 'ID',
            zoneName: 'example.com',
        }),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::Bucket', {
        WebsiteConfiguration: {
            RedirectAllRequestsTo: {
                HostName: 'bar.example.com',
                Protocol: 'https',
            },
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
        DistributionConfig: {
            ViewerCertificate: {
                AcmCertificateArn: 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d',
            },
        },
    });
});
test('throws when certificate in region other than us-east-1 is supplied', () => {
    // GIVEN
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'test', { env: { region: 'us-east-1' } });
    const certificate = aws_certificatemanager_1.Certificate.fromCertificateArn(stack, 'Certificate', 'arn:aws:acm:us-east-2:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d');
    // WHEN / THEN
    expect(() => {
        new lib_1.HttpsRedirect(stack, 'Redirect', {
            recordNames: ['foo.example.com'],
            certificate,
            targetDomain: 'bar.example.com',
            zone: aws_route53_1.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
                hostedZoneId: 'ID',
                zoneName: 'example.com',
            }),
        });
    }).toThrow(/The certificate must be in the us-east-1 region and the certificate you provided is in us-east-2./);
});
describe('Uses Certificate when @aws-cdk/aws-route53-patters:useCertificate=true', () => {
    test('explicit different region', () => {
        // GIVEN
        const app = new core_1.App({
            context: {
                [cx_api_1.ROUTE53_PATTERNS_USE_CERTIFICATE]: true,
            },
        });
        // WHEN
        const stack = new core_1.Stack(app, 'test', { env: { region: 'us-east-2' }, crossRegionReferences: true });
        new lib_1.HttpsRedirect(stack, 'Redirect', {
            recordNames: ['foo.example.com'],
            targetDomain: 'bar.example.com',
            zone: aws_route53_1.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
                hostedZoneId: 'ID',
                zoneName: 'example.com',
            }),
        });
        // THEN
        const certStack = app.node.findChild(`certificate-redirect-stack-${stack.node.addr}`);
        assertions_1.Template.fromStack(certStack).hasResourceProperties('AWS::CertificateManager::Certificate', {
            DomainName: 'foo.example.com',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
            DistributionConfig: {
                ViewerCertificate: {
                    AcmCertificateArn: {
                        'Fn::GetAtt': [
                            'ExportsReader8B249524',
                            '/cdk/exports/test/certificateredirectstackc8e2763df63c0f7e0c9afe0394e299bb731e281e8euseast1RefRedirectCertificatec8693e36481e135aa76e35c2db892ec6a33a94c7461E1B6E15A36EB7DA',
                        ],
                    },
                },
            },
        });
    });
    test('explicit same region', () => {
        // GIVEN
        const app = new core_1.App({
            context: {
                [cx_api_1.ROUTE53_PATTERNS_USE_CERTIFICATE]: true,
            },
        });
        // WHEN
        const stack = new core_1.Stack(app, 'test', { env: { region: 'us-east-1' }, crossRegionReferences: true });
        new lib_1.HttpsRedirect(stack, 'Redirect', {
            recordNames: ['foo.example.com'],
            targetDomain: 'bar.example.com',
            zone: aws_route53_1.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
                hostedZoneId: 'ID',
                zoneName: 'example.com',
            }),
        });
        // THEN
        const certStack = app.node.tryFindChild(`certificate-redirect-stack-${stack.node.addr}`);
        expect(certStack).toBeUndefined();
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CertificateManager::Certificate', {
            DomainName: 'foo.example.com',
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudFront::Distribution', {
            DistributionConfig: {
                ViewerCertificate: {
                    AcmCertificateArn: {
                        Ref: 'RedirectRedirectCertificateB4F2F130',
                    },
                },
            },
        });
    });
    test('same support stack used for multiple certificates', () => {
        // GIVEN
        const app = new core_1.App({
            context: {
                [cx_api_1.ROUTE53_PATTERNS_USE_CERTIFICATE]: true,
            },
        });
        // WHEN
        const stack = new core_1.Stack(app, 'test', { env: { region: 'us-east-2' }, crossRegionReferences: true });
        new lib_1.HttpsRedirect(stack, 'Redirect', {
            recordNames: ['foo.example.com'],
            targetDomain: 'bar.example.com',
            zone: aws_route53_1.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
                hostedZoneId: 'ID',
                zoneName: 'example.com',
            }),
        });
        new lib_1.HttpsRedirect(stack, 'Redirect2', {
            recordNames: ['foo2.example.com'],
            targetDomain: 'bar2.example.com',
            zone: aws_route53_1.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone2', {
                hostedZoneId: 'ID',
                zoneName: 'example.com',
            }),
        });
        // THEN
        const certStack = app.node.tryFindChild(`certificate-redirect-stack-${stack.node.addr}`);
        assertions_1.Template.fromStack(certStack).hasResourceProperties('AWS::CertificateManager::Certificate', {
            DomainName: 'foo.example.com',
        });
        assertions_1.Template.fromStack(certStack).hasResourceProperties('AWS::CertificateManager::Certificate', {
            DomainName: 'foo2.example.com',
        });
    });
    test('unresolved region throws', () => {
        // GIVEN
        const app = new core_1.App({
            context: {
                [cx_api_1.ROUTE53_PATTERNS_USE_CERTIFICATE]: true,
            },
        });
        // WHEN
        const stack = new core_1.Stack(app, 'test');
        // THEN
        expect(() => {
            new lib_1.HttpsRedirect(stack, 'Redirect', {
                recordNames: ['foo.example.com'],
                targetDomain: 'bar.example.com',
                zone: aws_route53_1.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
                    hostedZoneId: 'ID',
                    zoneName: 'example.com',
                }),
            });
        }).toThrow(/When @aws-cdk\/aws-route53-patters:useCertificate is enabled, a region must be defined on the Stack/);
    });
});
//# sourceMappingURL=data:application/json;base64,