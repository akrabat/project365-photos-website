"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const route53 = require("../../aws-route53");
const s3 = require("../../aws-s3");
const core_1 = require("../../core");
const targets = require("../lib");
const [recordName, zoneName] = ['foo', 'test.public'];
const bucketName = [recordName, zoneName].join('.');
test('use S3 bucket website as record target', () => {
    // GIVEN
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'test', { env: { region: 'us-east-1' } });
    const bucketWebsite = new s3.Bucket(stack, 'Bucket', { bucketName });
    // WHEN
    const zone = new route53.PublicHostedZone(stack, 'HostedZone', { zoneName });
    new route53.ARecord(zone, 'Alias', {
        zone,
        recordName,
        target: route53.RecordTarget.fromAlias(new targets.BucketWebsiteTarget(bucketWebsite)),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        AliasTarget: {
            DNSName: 's3-website-us-east-1.amazonaws.com',
            HostedZoneId: 'Z3AQBSTGFYJSTF',
        },
    });
});
test('use S3 bucket website as record target (fromBucketName)', () => {
    // GIVEN
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'test', { env: { region: 'us-east-1' } });
    const bucketWebsite = s3.Bucket.fromBucketName(stack, 'Bucket', bucketName);
    // WHEN
    const zone = new route53.PublicHostedZone(stack, 'HostedZone', { zoneName });
    new route53.ARecord(zone, 'Alias', {
        zone,
        recordName,
        target: route53.RecordTarget.fromAlias(new targets.BucketWebsiteTarget(bucketWebsite)),
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        AliasTarget: {
            DNSName: 's3-website-us-east-1.amazonaws.com',
            HostedZoneId: 'Z3AQBSTGFYJSTF',
        },
    });
});
test('throws if region agnostic', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const bucketWebsite = new s3.Bucket(stack, 'Bucket', { bucketName });
    // WHEN
    const zone = new route53.PublicHostedZone(stack, 'HostedZone', { zoneName });
    // THEN
    expect(() => {
        new route53.ARecord(zone, 'Alias', {
            zone,
            recordName,
            target: route53.RecordTarget.fromAlias(new targets.BucketWebsiteTarget(bucketWebsite)),
        });
    }).toThrow(/Cannot use an S3 record alias in region-agnostic stacks/);
});
test('throws if bucket website hosting is unavailable (cn-north-1)', () => {
    // GIVEN
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'test', { env: { region: 'cn-north-1' } });
    const bucketWebsite = new s3.Bucket(stack, 'Bucket');
    // WHEN
    const zone = new route53.PublicHostedZone(stack, 'HostedZone', { zoneName });
    // THEN
    expect(() => {
        new route53.ARecord(zone, 'Alias', {
            zone,
            recordName,
            target: route53.RecordTarget.fromAlias(new targets.BucketWebsiteTarget(bucketWebsite)),
        });
    }).toThrow(/Bucket website target is not supported/);
});
//# sourceMappingURL=data:application/json;base64,