"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const globalaccelerator = require("../../aws-globalaccelerator");
const route53 = require("../../aws-route53");
const core_1 = require("../../core");
const targets = require("../lib");
test('GlobalAcceleratorTarget exposes a public constant of the zone id', () => {
    expect(targets.GlobalAcceleratorTarget.GLOBAL_ACCELERATOR_ZONE_ID).toStrictEqual('Z2BJ6XQ5FK7U4H');
    expect(targets.GlobalAcceleratorDomainTarget.GLOBAL_ACCELERATOR_ZONE_ID).toStrictEqual('Z2BJ6XQ5FK7U4H');
});
test('GlobalAcceleratorTarget creates an alias resource with a string domain name', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const zone = new route53.PublicHostedZone(stack, 'HostedZone', { zoneName: 'test.public' });
    // WHEN
    new route53.ARecord(stack, 'GlobalAcceleratorAlias', {
        target: route53.RecordTarget.fromAlias(new targets.GlobalAcceleratorDomainTarget('xyz.awsglobalaccelerator.com')),
        recordName: 'test',
        zone,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        AliasTarget: {
            DNSName: 'xyz.awsglobalaccelerator.com',
            HostedZoneId: 'Z2BJ6XQ5FK7U4H',
        },
    });
});
test('GlobalAcceleratorTarget creates an alias resource with a Global Accelerator reference domain name', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');
    const logicalId = stack.getLogicalId(accelerator.node.defaultChild);
    const zone = new route53.PublicHostedZone(stack, 'HostedZone', { zoneName: 'test.public' });
    // WHEN
    new route53.ARecord(stack, 'GlobalAcceleratorAlias', {
        target: route53.RecordTarget.fromAlias(new targets.GlobalAcceleratorTarget(accelerator)),
        recordName: 'test',
        zone,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        AliasTarget: {
            DNSName: {
                'Fn::GetAtt': [
                    logicalId,
                    'DnsName',
                ],
            },
            HostedZoneId: 'Z2BJ6XQ5FK7U4H',
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLWFjY2VsZXJhdG9yLXRhcmdldC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2xvYmFsLWFjY2VsZXJhdG9yLXRhcmdldC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLGlFQUFpRTtBQUNqRSw2Q0FBNkM7QUFDN0MscUNBQW1DO0FBQ25DLGtDQUFrQztBQUVsQyxJQUFJLENBQUMsa0VBQWtFLEVBQUUsR0FBRyxFQUFFO0lBQzVFLE1BQU0sQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNuRyxNQUFNLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLDBCQUEwQixDQUFDLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDM0csQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsNkVBQTZFLEVBQUUsR0FBRyxFQUFFO0lBQ3ZGLFFBQVE7SUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO0lBQzFCLE1BQU0sSUFBSSxHQUFHLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUU1RixPQUFPO0lBQ1AsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSx3QkFBd0IsRUFBRTtRQUNuRCxNQUFNLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxPQUFPLENBQUMsNkJBQTZCLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUNqSCxVQUFVLEVBQUUsTUFBTTtRQUNsQixJQUFJO0tBQ0wsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLHlCQUF5QixFQUFFO1FBQ3pFLFdBQVcsRUFBRTtZQUNYLE9BQU8sRUFBRSw4QkFBOEI7WUFDdkMsWUFBWSxFQUFFLGdCQUFnQjtTQUMvQjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLG1HQUFtRyxFQUFFLEdBQUcsRUFBRTtJQUM3RyxRQUFRO0lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztJQUMxQixNQUFNLFdBQVcsR0FBRyxJQUFJLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDNUUsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBbUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN0RyxNQUFNLElBQUksR0FBRyxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFFNUYsT0FBTztJQUNQLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsd0JBQXdCLEVBQUU7UUFDbkQsTUFBTSxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksT0FBTyxDQUFDLHVCQUF1QixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hGLFVBQVUsRUFBRSxNQUFNO1FBQ2xCLElBQUk7S0FDTCxDQUFDLENBQUM7SUFFSCxPQUFPO0lBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMseUJBQXlCLEVBQUU7UUFDekUsV0FBVyxFQUFFO1lBQ1gsT0FBTyxFQUFFO2dCQUNQLFlBQVksRUFBRTtvQkFDWixTQUFTO29CQUNULFNBQVM7aUJBQ1Y7YUFDRjtZQUNELFlBQVksRUFBRSxnQkFBZ0I7U0FDL0I7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vYXNzZXJ0aW9ucyc7XG5pbXBvcnQgKiBhcyBnbG9iYWxhY2NlbGVyYXRvciBmcm9tICcuLi8uLi9hd3MtZ2xvYmFsYWNjZWxlcmF0b3InO1xuaW1wb3J0ICogYXMgcm91dGU1MyBmcm9tICcuLi8uLi9hd3Mtcm91dGU1Myc7XG5pbXBvcnQgeyBTdGFjayB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgdGFyZ2V0cyBmcm9tICcuLi9saWInO1xuXG50ZXN0KCdHbG9iYWxBY2NlbGVyYXRvclRhcmdldCBleHBvc2VzIGEgcHVibGljIGNvbnN0YW50IG9mIHRoZSB6b25lIGlkJywgKCkgPT4ge1xuICBleHBlY3QodGFyZ2V0cy5HbG9iYWxBY2NlbGVyYXRvclRhcmdldC5HTE9CQUxfQUNDRUxFUkFUT1JfWk9ORV9JRCkudG9TdHJpY3RFcXVhbCgnWjJCSjZYUTVGSzdVNEgnKTtcbiAgZXhwZWN0KHRhcmdldHMuR2xvYmFsQWNjZWxlcmF0b3JEb21haW5UYXJnZXQuR0xPQkFMX0FDQ0VMRVJBVE9SX1pPTkVfSUQpLnRvU3RyaWN0RXF1YWwoJ1oyQko2WFE1Rks3VTRIJyk7XG59KTtcblxudGVzdCgnR2xvYmFsQWNjZWxlcmF0b3JUYXJnZXQgY3JlYXRlcyBhbiBhbGlhcyByZXNvdXJjZSB3aXRoIGEgc3RyaW5nIGRvbWFpbiBuYW1lJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICBjb25zdCB6b25lID0gbmV3IHJvdXRlNTMuUHVibGljSG9zdGVkWm9uZShzdGFjaywgJ0hvc3RlZFpvbmUnLCB7IHpvbmVOYW1lOiAndGVzdC5wdWJsaWMnIH0pO1xuXG4gIC8vIFdIRU5cbiAgbmV3IHJvdXRlNTMuQVJlY29yZChzdGFjaywgJ0dsb2JhbEFjY2VsZXJhdG9yQWxpYXMnLCB7XG4gICAgdGFyZ2V0OiByb3V0ZTUzLlJlY29yZFRhcmdldC5mcm9tQWxpYXMobmV3IHRhcmdldHMuR2xvYmFsQWNjZWxlcmF0b3JEb21haW5UYXJnZXQoJ3h5ei5hd3NnbG9iYWxhY2NlbGVyYXRvci5jb20nKSksXG4gICAgcmVjb3JkTmFtZTogJ3Rlc3QnLFxuICAgIHpvbmUsXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Um91dGU1Mzo6UmVjb3JkU2V0Jywge1xuICAgIEFsaWFzVGFyZ2V0OiB7XG4gICAgICBETlNOYW1lOiAneHl6LmF3c2dsb2JhbGFjY2VsZXJhdG9yLmNvbScsXG4gICAgICBIb3N0ZWRab25lSWQ6ICdaMkJKNlhRNUZLN1U0SCcsXG4gICAgfSxcbiAgfSk7XG59KTtcblxudGVzdCgnR2xvYmFsQWNjZWxlcmF0b3JUYXJnZXQgY3JlYXRlcyBhbiBhbGlhcyByZXNvdXJjZSB3aXRoIGEgR2xvYmFsIEFjY2VsZXJhdG9yIHJlZmVyZW5jZSBkb21haW4gbmFtZScsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgY29uc3QgYWNjZWxlcmF0b3IgPSBuZXcgZ2xvYmFsYWNjZWxlcmF0b3IuQWNjZWxlcmF0b3Ioc3RhY2ssICdBY2NlbGVyYXRvcicpO1xuICBjb25zdCBsb2dpY2FsSWQgPSBzdGFjay5nZXRMb2dpY2FsSWQoPGdsb2JhbGFjY2VsZXJhdG9yLkNmbkFjY2VsZXJhdG9yPmFjY2VsZXJhdG9yLm5vZGUuZGVmYXVsdENoaWxkKTtcbiAgY29uc3Qgem9uZSA9IG5ldyByb3V0ZTUzLlB1YmxpY0hvc3RlZFpvbmUoc3RhY2ssICdIb3N0ZWRab25lJywgeyB6b25lTmFtZTogJ3Rlc3QucHVibGljJyB9KTtcblxuICAvLyBXSEVOXG4gIG5ldyByb3V0ZTUzLkFSZWNvcmQoc3RhY2ssICdHbG9iYWxBY2NlbGVyYXRvckFsaWFzJywge1xuICAgIHRhcmdldDogcm91dGU1My5SZWNvcmRUYXJnZXQuZnJvbUFsaWFzKG5ldyB0YXJnZXRzLkdsb2JhbEFjY2VsZXJhdG9yVGFyZ2V0KGFjY2VsZXJhdG9yKSksXG4gICAgcmVjb3JkTmFtZTogJ3Rlc3QnLFxuICAgIHpvbmUsXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Um91dGU1Mzo6UmVjb3JkU2V0Jywge1xuICAgIEFsaWFzVGFyZ2V0OiB7XG4gICAgICBETlNOYW1lOiB7XG4gICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgIGxvZ2ljYWxJZCxcbiAgICAgICAgICAnRG5zTmFtZScsXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAgSG9zdGVkWm9uZUlkOiAnWjJCSjZYUTVGSzdVNEgnLFxuICAgIH0sXG4gIH0pO1xufSk7Il19