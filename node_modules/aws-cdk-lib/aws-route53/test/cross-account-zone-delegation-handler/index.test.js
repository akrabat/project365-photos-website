"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cross_account_zone_delegation_handler_1 = require("../../lib/cross-account-zone-delegation-handler");
const mockStsClient = {
    assumeRole: jest.fn().mockReturnThis(),
    promise: jest.fn(),
};
const mockRoute53Client = {
    changeResourceRecordSets: jest.fn().mockReturnThis(),
    listHostedZonesByName: jest.fn().mockReturnThis(),
    promise: jest.fn(),
};
jest.mock('aws-sdk', () => {
    return {
        ...jest.requireActual('aws-sdk'),
        STS: jest.fn(() => mockStsClient),
        Route53: jest.fn(() => mockRoute53Client),
    };
});
beforeEach(() => {
    mockStsClient.assumeRole.mockReturnThis();
    mockRoute53Client.changeResourceRecordSets.mockReturnThis();
    mockRoute53Client.listHostedZonesByName.mockReturnThis();
});
afterEach(() => {
    jest.clearAllMocks();
});
test('throws error if both ParentZoneId and ParentZoneName are not provided', async () => {
    // WHEN
    const event = getCfnEvent({}, {
        ParentZoneId: undefined,
        ParentZoneName: undefined,
    });
    // THEN
    await expect(invokeHandler(event)).rejects.toThrow(/One of ParentZoneId or ParentZoneName must be specified/);
});
test('throws error if getting credentials fails', async () => {
    // GIVEN
    mockStsClient.promise.mockResolvedValueOnce({ Credentials: undefined });
    // WHEN
    const event = getCfnEvent();
    // THEN
    await expect(invokeHandler(event)).rejects.toThrow(/Error getting assume role credentials/);
    expect(mockStsClient.assumeRole).toHaveBeenCalledTimes(1);
    expect(mockStsClient.assumeRole).toHaveBeenCalledWith({
        RoleArn: 'roleArn',
        RoleSessionName: expect.any(String),
    });
});
test('calls create resource record set with Upsert for Create event', async () => {
    // GIVEN
    mockStsClient.promise.mockResolvedValueOnce({ Credentials: { AccessKeyId: 'K', SecretAccessKey: 'S', SessionToken: 'T' } });
    mockRoute53Client.promise.mockResolvedValueOnce({});
    // WHEN
    const event = getCfnEvent();
    await invokeHandler(event);
    // THEN
    expect(mockRoute53Client.changeResourceRecordSets).toHaveBeenCalledTimes(1);
    expect(mockRoute53Client.changeResourceRecordSets).toHaveBeenCalledWith({
        HostedZoneId: '1',
        ChangeBatch: {
            Changes: [{
                    Action: 'UPSERT',
                    ResourceRecordSet: {
                        Name: 'recordName',
                        Type: 'NS',
                        TTL: 172800,
                        ResourceRecords: [{ Value: 'one' }, { Value: 'two' }],
                    },
                }],
        },
    });
});
test('calls create resource record set with DELETE for Delete event', async () => {
    // GIVEN
    mockStsClient.promise.mockResolvedValueOnce({ Credentials: { AccessKeyId: 'K', SecretAccessKey: 'S', SessionToken: 'T' } });
    mockRoute53Client.promise.mockResolvedValueOnce({});
    // WHEN
    const event = getCfnEvent({ RequestType: 'Delete' });
    await invokeHandler(event);
    // THEN
    expect(mockRoute53Client.changeResourceRecordSets).toHaveBeenCalledTimes(1);
    expect(mockRoute53Client.changeResourceRecordSets).toHaveBeenCalledWith({
        HostedZoneId: '1',
        ChangeBatch: {
            Changes: [{
                    Action: 'DELETE',
                    ResourceRecordSet: {
                        Name: 'recordName',
                        Type: 'NS',
                        TTL: 172800,
                        ResourceRecords: [{ Value: 'one' }, { Value: 'two' }],
                    },
                }],
        },
    });
});
test('calls listHostedZonesByName to get zoneId if ParentZoneId is not provided', async () => {
    // GIVEN
    const parentZoneName = 'some.zone';
    const parentZoneId = 'zone-id';
    mockStsClient.promise.mockResolvedValueOnce({ Credentials: { AccessKeyId: 'K', SecretAccessKey: 'S', SessionToken: 'T' } });
    mockRoute53Client.promise.mockResolvedValueOnce({ HostedZones: [{ Name: `${parentZoneName}.`, Id: parentZoneId }] });
    mockRoute53Client.promise.mockResolvedValueOnce({});
    // WHEN
    const event = getCfnEvent({}, {
        ParentZoneId: undefined,
        ParentZoneName: parentZoneName,
    });
    await invokeHandler(event);
    // THEN
    expect(mockRoute53Client.listHostedZonesByName).toHaveBeenCalledTimes(1);
    expect(mockRoute53Client.listHostedZonesByName).toHaveBeenCalledWith({ DNSName: parentZoneName });
    expect(mockRoute53Client.changeResourceRecordSets).toHaveBeenCalledTimes(1);
    expect(mockRoute53Client.changeResourceRecordSets).toHaveBeenCalledWith({
        HostedZoneId: parentZoneId,
        ChangeBatch: {
            Changes: [{
                    Action: 'UPSERT',
                    ResourceRecordSet: {
                        Name: 'recordName',
                        Type: 'NS',
                        TTL: 172800,
                        ResourceRecords: [{ Value: 'one' }, { Value: 'two' }],
                    },
                }],
        },
    });
});
test('throws if more than one HostedZones are returnd for the provided ParentHostedZone', async () => {
    // GIVEN
    const parentZoneName = 'some.zone';
    const parentZoneId = 'zone-id';
    mockStsClient.promise.mockResolvedValueOnce({ Credentials: { AccessKeyId: 'K', SecretAccessKey: 'S', SessionToken: 'T' } });
    mockRoute53Client.promise.mockResolvedValueOnce({
        HostedZones: [
            { Name: `${parentZoneName}.`, Id: parentZoneId },
            { Name: `${parentZoneName}.`, Id: parentZoneId },
        ],
    });
    // WHEN
    const event = getCfnEvent({}, {
        ParentZoneId: undefined,
        ParentZoneName: parentZoneName,
    });
    // THEN
    await expect(invokeHandler(event)).rejects.toThrow(/Expected one hosted zone to match the given name but found 2/);
    expect(mockRoute53Client.listHostedZonesByName).toHaveBeenCalledTimes(1);
    expect(mockRoute53Client.listHostedZonesByName).toHaveBeenCalledWith({ DNSName: parentZoneName });
});
function getCfnEvent(event, resourceProps) {
    return {
        RequestType: 'Create',
        ResourceProperties: {
            ServiceToken: 'Foo',
            AssumeRoleArn: 'roleArn',
            ParentZoneId: '1',
            DelegatedZoneName: 'recordName',
            DelegatedZoneNameServers: ['one', 'two'],
            TTL: 172800,
            ...resourceProps,
        },
        ...event,
    };
}
// helper function to get around TypeScript expecting a complete event object,
// even though our tests only need some of the fields
async function invokeHandler(event) {
    return (0, cross_account_zone_delegation_handler_1.handler)(event);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluZGV4LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyR0FBMEU7QUFFMUUsTUFBTSxhQUFhLEdBQUc7SUFDcEIsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUU7SUFDdEMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Q0FDbkIsQ0FBQztBQUNGLE1BQU0saUJBQWlCLEdBQUc7SUFDeEIsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRTtJQUNwRCxxQkFBcUIsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO0lBQ2pELE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0NBQ25CLENBQUM7QUFFRixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7SUFDeEIsT0FBTztRQUNMLEdBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQVM7UUFDekMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO1FBQ2pDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0tBQzFDLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDZCxhQUFhLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzFDLGlCQUFpQixDQUFDLHdCQUF3QixDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzVELGlCQUFpQixDQUFDLHFCQUFxQixDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzNELENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtJQUNiLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUN2QixD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O1lBQ2pCLGlCQUFpQixFQUFFLFlBQVk7WUFDL0Isd0JBQXdCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO1lBQ3hDLEdBQUcsRUFBRSxNQUFNO1lBQ1gsR0FBRyxhQUFhO1NBQ2pCO1FBQ0QsR0FBRyxLQUFLO0tBQ1QsQ0FBQztBQUNKLENBQUM7QUFFRCw4RUFBOEU7QUFDOUUscURBQXFEO0FBQ3JELEtBQUssVUFBVSxhQUFhLENBQUMsS0FBMkQ7SUFDdEYsT0FBTyxJQUFBLCtDQUFPLEVBQUMsS0FBb0QsQ0FBQyxDQUFDO0FBQ3ZFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoYW5kbGVyIH0gZnJvbSAnLi4vLi4vbGliL2Nyb3NzLWFjY291bnQtem9uZS1kZWxlZ2F0aW9uLWhhbmRsZXInO1xuXG5jb25zdCBtb2NrU3RzQ2xpZW50ID0ge1xuICBhc3N1bWVSb2xlOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgcHJvbWlzZTogamVzdC5mbigpLFxufTtcbmNvbnN0IG1vY2tSb3V0ZTUzQ2xpZW50ID0ge1xuICBjaGFuZ2VSZXNvdXJjZVJlY29yZFNldHM6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICBsaXN0SG9zdGVkWm9uZXNCeU5hbWU6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICBwcm9taXNlOiBqZXN0LmZuKCksXG59O1xuXG5qZXN0Lm1vY2soJ2F3cy1zZGsnLCAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgLi4uKGplc3QucmVxdWlyZUFjdHVhbCgnYXdzLXNkaycpIGFzIGFueSksXG4gICAgU1RTOiBqZXN0LmZuKCgpID0+IG1vY2tTdHNDbGllbnQpLFxuICAgIFJvdXRlNTM6IGplc3QuZm4oKCkgPT4gbW9ja1JvdXRlNTNDbGllbnQpLFxuICB9O1xufSk7XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBtb2NrU3RzQ2xpZW50LmFzc3VtZVJvbGUubW9ja1JldHVyblRoaXMoKTtcbiAgbW9ja1JvdXRlNTNDbGllbnQuY2hhbmdlUmVzb3VyY2VSZWNvcmRTZXRzLm1vY2tSZXR1cm5UaGlzKCk7XG4gIG1vY2tSb3V0ZTUzQ2xpZW50Lmxpc3RIb3N0ZWRab25lc0J5TmFtZS5tb2NrUmV0dXJuVGhpcygpO1xufSk7XG5cbmFmdGVyRWFjaCgoKSA9PiB7XG4gIGplc3QuY2xlYXJBbGxNb2NrcygpO1xufSk7XG5cbnRlc3QoJ3Rocm93cyBlcnJvciBpZiBib3RoIFBhcmVudFpvbmVJZCBhbmQgUGFyZW50Wm9uZU5hbWUgYXJlIG5vdCBwcm92aWRlZCcsIGFzeW5jICgpID0+IHtcbiAgLy8gV0hFTlxuICBjb25zdCBldmVudCA9IGdldENmbkV2ZW50KHt9LCB7XG4gICAgUGFyZW50Wm9uZUlkOiB1bmRlZmluZWQsXG4gICAgUGFyZW50Wm9uZU5hbWU6IHVuZGVmaW5lZCxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBhd2FpdCBleHBlY3QoaW52b2tlSGFuZGxlcihldmVudCkpLnJlamVjdHMudG9UaHJvdygvT25lIG9mIFBhcmVudFpvbmVJZCBvciBQYXJlbnRab25lTmFtZSBtdXN0IGJlIHNwZWNpZmllZC8pO1xufSk7XG5cbnRlc3QoJ3Rocm93cyBlcnJvciBpZiBnZXR0aW5nIGNyZWRlbnRpYWxzIGZhaWxzJywgYXN5bmMgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBtb2NrU3RzQ2xpZW50LnByb21pc2UubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgQ3JlZGVudGlhbHM6IHVuZGVmaW5lZCB9KTtcblxuICAvLyBXSEVOXG4gIGNvbnN0IGV2ZW50PSBnZXRDZm5FdmVudCgpO1xuXG4gIC8vIFRIRU5cbiAgYXdhaXQgZXhwZWN0KGludm9rZUhhbmRsZXIoZXZlbnQpKS5yZWplY3RzLnRvVGhyb3coL0Vycm9yIGdldHRpbmcgYXNzdW1lIHJvbGUgY3JlZGVudGlhbHMvKTtcblxuICBleHBlY3QobW9ja1N0c0NsaWVudC5hc3N1bWVSb2xlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIGV4cGVjdChtb2NrU3RzQ2xpZW50LmFzc3VtZVJvbGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICBSb2xlQXJuOiAncm9sZUFybicsXG4gICAgUm9sZVNlc3Npb25OYW1lOiBleHBlY3QuYW55KFN0cmluZyksXG4gIH0pO1xufSk7XG5cbnRlc3QoJ2NhbGxzIGNyZWF0ZSByZXNvdXJjZSByZWNvcmQgc2V0IHdpdGggVXBzZXJ0IGZvciBDcmVhdGUgZXZlbnQnLCBhc3luYyAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIG1vY2tTdHNDbGllbnQucHJvbWlzZS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBDcmVkZW50aWFsczogeyBBY2Nlc3NLZXlJZDogJ0snLCBTZWNyZXRBY2Nlc3NLZXk6ICdTJywgU2Vzc2lvblRva2VuOiAnVCcgfSB9KTtcbiAgbW9ja1JvdXRlNTNDbGllbnQucHJvbWlzZS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe30pO1xuXG4gIC8vIFdIRU5cbiAgY29uc3QgZXZlbnQ9IGdldENmbkV2ZW50KCk7XG4gIGF3YWl0IGludm9rZUhhbmRsZXIoZXZlbnQpO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KG1vY2tSb3V0ZTUzQ2xpZW50LmNoYW5nZVJlc291cmNlUmVjb3JkU2V0cykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICBleHBlY3QobW9ja1JvdXRlNTNDbGllbnQuY2hhbmdlUmVzb3VyY2VSZWNvcmRTZXRzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgSG9zdGVkWm9uZUlkOiAnMScsXG4gICAgQ2hhbmdlQmF0Y2g6IHtcbiAgICAgIENoYW5nZXM6IFt7XG4gICAgICAgIEFjdGlvbjogJ1VQU0VSVCcsXG4gICAgICAgIFJlc291cmNlUmVjb3JkU2V0OiB7XG4gICAgICAgICAgTmFtZTogJ3JlY29yZE5hbWUnLFxuICAgICAgICAgIFR5cGU6ICdOUycsXG4gICAgICAgICAgVFRMOiAxNzI4MDAsXG4gICAgICAgICAgUmVzb3VyY2VSZWNvcmRzOiBbeyBWYWx1ZTogJ29uZScgfSwgeyBWYWx1ZTogJ3R3bycgfV0sXG4gICAgICAgIH0sXG4gICAgICB9XSxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCdjYWxscyBjcmVhdGUgcmVzb3VyY2UgcmVjb3JkIHNldCB3aXRoIERFTEVURSBmb3IgRGVsZXRlIGV2ZW50JywgYXN5bmMgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBtb2NrU3RzQ2xpZW50LnByb21pc2UubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgQ3JlZGVudGlhbHM6IHsgQWNjZXNzS2V5SWQ6ICdLJywgU2VjcmV0QWNjZXNzS2V5OiAnUycsIFNlc3Npb25Ub2tlbjogJ1QnIH0gfSk7XG4gIG1vY2tSb3V0ZTUzQ2xpZW50LnByb21pc2UubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHt9KTtcblxuICAvLyBXSEVOXG4gIGNvbnN0IGV2ZW50PSBnZXRDZm5FdmVudCh7IFJlcXVlc3RUeXBlOiAnRGVsZXRlJyB9KTtcbiAgYXdhaXQgaW52b2tlSGFuZGxlcihldmVudCk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QobW9ja1JvdXRlNTNDbGllbnQuY2hhbmdlUmVzb3VyY2VSZWNvcmRTZXRzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIGV4cGVjdChtb2NrUm91dGU1M0NsaWVudC5jaGFuZ2VSZXNvdXJjZVJlY29yZFNldHMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICBIb3N0ZWRab25lSWQ6ICcxJyxcbiAgICBDaGFuZ2VCYXRjaDoge1xuICAgICAgQ2hhbmdlczogW3tcbiAgICAgICAgQWN0aW9uOiAnREVMRVRFJyxcbiAgICAgICAgUmVzb3VyY2VSZWNvcmRTZXQ6IHtcbiAgICAgICAgICBOYW1lOiAncmVjb3JkTmFtZScsXG4gICAgICAgICAgVHlwZTogJ05TJyxcbiAgICAgICAgICBUVEw6IDE3MjgwMCxcbiAgICAgICAgICBSZXNvdXJjZVJlY29yZHM6IFt7IFZhbHVlOiAnb25lJyB9LCB7IFZhbHVlOiAndHdvJyB9XSxcbiAgICAgICAgfSxcbiAgICAgIH1dLFxuICAgIH0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ2NhbGxzIGxpc3RIb3N0ZWRab25lc0J5TmFtZSB0byBnZXQgem9uZUlkIGlmIFBhcmVudFpvbmVJZCBpcyBub3QgcHJvdmlkZWQnLCBhc3luYyAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHBhcmVudFpvbmVOYW1lID0gJ3NvbWUuem9uZSc7XG4gIGNvbnN0IHBhcmVudFpvbmVJZCA9ICd6b25lLWlkJztcblxuICBtb2NrU3RzQ2xpZW50LnByb21pc2UubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgQ3JlZGVudGlhbHM6IHsgQWNjZXNzS2V5SWQ6ICdLJywgU2VjcmV0QWNjZXNzS2V5OiAnUycsIFNlc3Npb25Ub2tlbjogJ1QnIH0gfSk7XG4gIG1vY2tSb3V0ZTUzQ2xpZW50LnByb21pc2UubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgSG9zdGVkWm9uZXM6IFt7IE5hbWU6IGAke3BhcmVudFpvbmVOYW1lfS5gLCBJZDogcGFyZW50Wm9uZUlkIH1dIH0pO1xuICBtb2NrUm91dGU1M0NsaWVudC5wcm9taXNlLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7fSk7XG5cbiAgLy8gV0hFTlxuICBjb25zdCBldmVudCA9IGdldENmbkV2ZW50KHt9LCB7XG4gICAgUGFyZW50Wm9uZUlkOiB1bmRlZmluZWQsXG4gICAgUGFyZW50Wm9uZU5hbWU6IHBhcmVudFpvbmVOYW1lLFxuICB9KTtcbiAgYXdhaXQgaW52b2tlSGFuZGxlcihldmVudCk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QobW9ja1JvdXRlNTNDbGllbnQubGlzdEhvc3RlZFpvbmVzQnlOYW1lKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIGV4cGVjdChtb2NrUm91dGU1M0NsaWVudC5saXN0SG9zdGVkWm9uZXNCeU5hbWUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgRE5TTmFtZTogcGFyZW50Wm9uZU5hbWUgfSk7XG5cbiAgZXhwZWN0KG1vY2tSb3V0ZTUzQ2xpZW50LmNoYW5nZVJlc291cmNlUmVjb3JkU2V0cykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICBleHBlY3QobW9ja1JvdXRlNTNDbGllbnQuY2hhbmdlUmVzb3VyY2VSZWNvcmRTZXRzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgSG9zdGVkWm9uZUlkOiBwYXJlbnRab25lSWQsXG4gICAgQ2hhbmdlQmF0Y2g6IHtcbiAgICAgIENoYW5nZXM6IFt7XG4gICAgICAgIEFjdGlvbjogJ1VQU0VSVCcsXG4gICAgICAgIFJlc291cmNlUmVjb3JkU2V0OiB7XG4gICAgICAgICAgTmFtZTogJ3JlY29yZE5hbWUnLFxuICAgICAgICAgIFR5cGU6ICdOUycsXG4gICAgICAgICAgVFRMOiAxNzI4MDAsXG4gICAgICAgICAgUmVzb3VyY2VSZWNvcmRzOiBbeyBWYWx1ZTogJ29uZScgfSwgeyBWYWx1ZTogJ3R3bycgfV0sXG4gICAgICAgIH0sXG4gICAgICB9XSxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCd0aHJvd3MgaWYgbW9yZSB0aGFuIG9uZSBIb3N0ZWRab25lcyBhcmUgcmV0dXJuZCBmb3IgdGhlIHByb3ZpZGVkIFBhcmVudEhvc3RlZFpvbmUnLCBhc3luYyAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHBhcmVudFpvbmVOYW1lID0gJ3NvbWUuem9uZSc7XG4gIGNvbnN0IHBhcmVudFpvbmVJZCA9ICd6b25lLWlkJztcblxuICBtb2NrU3RzQ2xpZW50LnByb21pc2UubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgQ3JlZGVudGlhbHM6IHsgQWNjZXNzS2V5SWQ6ICdLJywgU2VjcmV0QWNjZXNzS2V5OiAnUycsIFNlc3Npb25Ub2tlbjogJ1QnIH0gfSk7XG4gIG1vY2tSb3V0ZTUzQ2xpZW50LnByb21pc2UubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICBIb3N0ZWRab25lczogW1xuICAgICAgeyBOYW1lOiBgJHtwYXJlbnRab25lTmFtZX0uYCwgSWQ6IHBhcmVudFpvbmVJZCB9LFxuICAgICAgeyBOYW1lOiBgJHtwYXJlbnRab25lTmFtZX0uYCwgSWQ6IHBhcmVudFpvbmVJZCB9LFxuICAgIF0sXG4gIH0pO1xuXG4gIC8vIFdIRU5cbiAgY29uc3QgZXZlbnQgPSBnZXRDZm5FdmVudCh7fSwge1xuICAgIFBhcmVudFpvbmVJZDogdW5kZWZpbmVkLFxuICAgIFBhcmVudFpvbmVOYW1lOiBwYXJlbnRab25lTmFtZSxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBhd2FpdCBleHBlY3QoaW52b2tlSGFuZGxlcihldmVudCkpLnJlamVjdHMudG9UaHJvdygvRXhwZWN0ZWQgb25lIGhvc3RlZCB6b25lIHRvIG1hdGNoIHRoZSBnaXZlbiBuYW1lIGJ1dCBmb3VuZCAyLyk7XG4gIGV4cGVjdChtb2NrUm91dGU1M0NsaWVudC5saXN0SG9zdGVkWm9uZXNCeU5hbWUpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgZXhwZWN0KG1vY2tSb3V0ZTUzQ2xpZW50Lmxpc3RIb3N0ZWRab25lc0J5TmFtZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoeyBETlNOYW1lOiBwYXJlbnRab25lTmFtZSB9KTtcbn0pO1xuXG5mdW5jdGlvbiBnZXRDZm5FdmVudChcbiAgZXZlbnQ/OiBQYXJ0aWFsPEFXU0xhbWJkYS5DbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnQ+LFxuICByZXNvdXJjZVByb3BzPzogYW55LFxuKTogUGFydGlhbDxBV1NMYW1iZGEuQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUV2ZW50PiB7XG4gIHJldHVybiB7XG4gICAgUmVxdWVzdFR5cGU6ICdDcmVhdGUnLFxuICAgIFJlc291cmNlUHJvcGVydGllczoge1xuICAgICAgU2VydmljZVRva2VuOiAnRm9vJyxcbiAgICAgIEFzc3VtZVJvbGVBcm46ICdyb2xlQXJuJyxcbiAgICAgIFBhcmVudFpvbmVJZDogJzEnLFxuICAgICAgRGVsZWdhdGVkWm9uZU5hbWU6ICdyZWNvcmROYW1lJyxcbiAgICAgIERlbGVnYXRlZFpvbmVOYW1lU2VydmVyczogWydvbmUnLCAndHdvJ10sXG4gICAgICBUVEw6IDE3MjgwMCxcbiAgICAgIC4uLnJlc291cmNlUHJvcHMsXG4gICAgfSxcbiAgICAuLi5ldmVudCxcbiAgfTtcbn1cblxuLy8gaGVscGVyIGZ1bmN0aW9uIHRvIGdldCBhcm91bmQgVHlwZVNjcmlwdCBleHBlY3RpbmcgYSBjb21wbGV0ZSBldmVudCBvYmplY3QsXG4vLyBldmVuIHRob3VnaCBvdXIgdGVzdHMgb25seSBuZWVkIHNvbWUgb2YgdGhlIGZpZWxkc1xuYXN5bmMgZnVuY3Rpb24gaW52b2tlSGFuZGxlcihldmVudDogUGFydGlhbDxBV1NMYW1iZGEuQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUV2ZW50Pikge1xuICByZXR1cm4gaGFuZGxlcihldmVudCBhcyBBV1NMYW1iZGEuQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUV2ZW50KTtcbn1cbiJdfQ==