"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mockListResourceRecordSetsResponse = jest.fn();
const mockChangeResourceRecordSetsResponse = jest.fn();
const mockRoute53 = {
    listResourceRecordSets: jest.fn().mockReturnValue({
        promise: mockListResourceRecordSetsResponse,
    }),
    changeResourceRecordSets: jest.fn().mockReturnValue({
        promise: mockChangeResourceRecordSetsResponse,
    }),
    waitFor: jest.fn().mockReturnValue({
        promise: jest.fn().mockResolvedValue({}),
    }),
};
jest.mock('aws-sdk', () => {
    return {
        Route53: jest.fn(() => mockRoute53),
    };
});
const delete_existing_record_set_handler_1 = require("../lib/delete-existing-record-set-handler");
const event = {
    RequestType: 'Create',
    ServiceToken: 'service-token',
    ResponseURL: 'response-url',
    StackId: 'stack-id',
    RequestId: 'request-id',
    LogicalResourceId: 'logical-resource-id',
    ResourceType: 'Custom::DeleteExistingRecordSet',
    ResourceProperties: {
        ServiceToken: 'service-token',
        HostedZoneId: 'hosted-zone-id',
        RecordName: 'dev.cdk.aws.',
        RecordType: 'A',
    },
};
beforeEach(() => {
    jest.clearAllMocks();
});
test('create request with existing record', async () => {
    mockListResourceRecordSetsResponse.mockResolvedValueOnce({
        ResourceRecordSets: [
            {
                Name: 'dev.cdk.aws.',
                Type: 'A',
                TTL: 900,
            },
            {
                Name: 'dev.cdk.aws.',
                Type: 'AAAA',
                TTL: 900,
            },
        ],
    });
    mockChangeResourceRecordSetsResponse.mockResolvedValueOnce({
        ChangeInfo: {
            Id: 'change-id',
        },
    });
    await (0, delete_existing_record_set_handler_1.handler)(event);
    expect(mockRoute53.listResourceRecordSets).toHaveBeenCalledWith({
        HostedZoneId: 'hosted-zone-id',
        StartRecordName: 'dev.cdk.aws.',
        StartRecordType: 'A',
    });
    expect(mockRoute53.changeResourceRecordSets).toHaveBeenCalledWith({
        HostedZoneId: 'hosted-zone-id',
        ChangeBatch: {
            Changes: [
                {
                    Action: 'DELETE',
                    ResourceRecordSet: {
                        Name: 'dev.cdk.aws.',
                        TTL: 900,
                        Type: 'A',
                    },
                },
            ],
        },
    });
    expect(mockRoute53.waitFor).toHaveBeenCalledWith('resourceRecordSetsChanged', {
        Id: 'change-id',
    });
});
test('create request with non existing record', async () => {
    mockListResourceRecordSetsResponse.mockResolvedValueOnce({
        ResourceRecordSets: [
            {
                Name: 'www.cdk.aws.',
                Type: 'A',
                TTL: 900,
            },
            {
                Name: 'dev.cdk.aws.',
                Type: 'MX',
                TTL: 900,
            },
        ],
    });
    await (0, delete_existing_record_set_handler_1.handler)(event);
    expect(mockRoute53.changeResourceRecordSets).not.toHaveBeenCalled();
});
test('update request', async () => {
    await (0, delete_existing_record_set_handler_1.handler)({
        ...event,
        RequestType: 'Update',
        PhysicalResourceId: 'id',
        OldResourceProperties: {},
    });
    expect(mockRoute53.changeResourceRecordSets).not.toHaveBeenCalled();
});
test('delete request', async () => {
    await (0, delete_existing_record_set_handler_1.handler)({
        ...event,
        RequestType: 'Delete',
        PhysicalResourceId: 'id',
    });
    expect(mockRoute53.changeResourceRecordSets).not.toHaveBeenCalled();
});
test('with alias target', async () => {
    mockListResourceRecordSetsResponse.mockResolvedValueOnce({
        ResourceRecordSets: [
            {
                Name: 'dev.cdk.aws.',
                Type: 'A',
                TTL: undefined,
                ResourceRecords: [],
                AliasTarget: {
                    HostedZoneId: 'hosted-zone-id',
                    DNSName: 'dns-name',
                    EvaluateTargetHealth: false,
                },
            },
        ],
    });
    mockChangeResourceRecordSetsResponse.mockResolvedValueOnce({
        ChangeInfo: {
            Id: 'change-id',
        },
    });
    await (0, delete_existing_record_set_handler_1.handler)(event);
    expect(mockRoute53.changeResourceRecordSets).toHaveBeenCalledWith({
        HostedZoneId: 'hosted-zone-id',
        ChangeBatch: {
            Changes: [
                {
                    Action: 'DELETE',
                    ResourceRecordSet: {
                        Name: 'dev.cdk.aws.',
                        Type: 'A',
                        AliasTarget: {
                            HostedZoneId: 'hosted-zone-id',
                            DNSName: 'dns-name',
                            EvaluateTargetHealth: false,
                        },
                    },
                },
            ],
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlLWV4aXN0aW5nLXJlY29yZC1zZXQtaGFuZGxlci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVsZXRlLWV4aXN0aW5nLXJlY29yZC1zZXQtaGFuZGxlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxrQ0FBa0MsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDckQsTUFBTSxvQ0FBb0MsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFFdkQsTUFBTSxXQUFXLEdBQUc7SUFDbEIsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQztRQUNoRCxPQUFPLEVBQUUsa0NBQWtDO0tBQzVDLENBQUM7SUFDRix3QkFBd0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDO1FBQ2xELE9BQU8sRUFBRSxvQ0FBb0M7S0FDOUMsQ0FBQztJQUNGLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDO1FBQ2pDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO0tBQ3pDLENBQUM7Q0FDSCxDQUFDO0FBRUYsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO0lBQ3hCLE9BQU87UUFDTCxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUM7S0FDcEMsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsa0dBQW9FO0FBRXBFLE1BQU0sS0FBSyxHQUFrRjtJQUMzRixXQUFXLEVBQUUsUUFBUTtJQUNyQixZQUFZLEVBQUUsZUFBZTtJQUM3QixXQUFXLEVBQUUsY0FBYztJQUMzQixPQUFPLEVBQUUsVUFBVTtJQUNuQixTQUFTLEVBQUUsWUFBWTtJQUN2QixpQkFBaUIsRUFBRSxxQkFBcUI7SUFD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S0FBSzt5QkFDNUI7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb2NrTGlzdFJlc291cmNlUmVjb3JkU2V0c1Jlc3BvbnNlID0gamVzdC5mbigpO1xuY29uc3QgbW9ja0NoYW5nZVJlc291cmNlUmVjb3JkU2V0c1Jlc3BvbnNlID0gamVzdC5mbigpO1xuXG5jb25zdCBtb2NrUm91dGU1MyA9IHtcbiAgbGlzdFJlc291cmNlUmVjb3JkU2V0czogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgcHJvbWlzZTogbW9ja0xpc3RSZXNvdXJjZVJlY29yZFNldHNSZXNwb25zZSxcbiAgfSksXG4gIGNoYW5nZVJlc291cmNlUmVjb3JkU2V0czogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgcHJvbWlzZTogbW9ja0NoYW5nZVJlc291cmNlUmVjb3JkU2V0c1Jlc3BvbnNlLFxuICB9KSxcbiAgd2FpdEZvcjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgcHJvbWlzZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHt9KSxcbiAgfSksXG59O1xuXG5qZXN0Lm1vY2soJ2F3cy1zZGsnLCAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgUm91dGU1MzogamVzdC5mbigoKSA9PiBtb2NrUm91dGU1MyksXG4gIH07XG59KTtcblxuaW1wb3J0IHsgaGFuZGxlciB9IGZyb20gJy4uL2xpYi9kZWxldGUtZXhpc3RpbmctcmVjb3JkLXNldC1oYW5kbGVyJztcblxuY29uc3QgZXZlbnQ6IEFXU0xhbWJkYS5DbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnQgJiB7IFBoeXNpY2FsUmVzb3VyY2VJZD86IHN0cmluZyB9ID0ge1xuICBSZXF1ZXN0VHlwZTogJ0NyZWF0ZScsXG4gIFNlcnZpY2VUb2tlbjogJ3NlcnZpY2UtdG9rZW4nLFxuICBSZXNwb25zZVVSTDogJ3Jlc3BvbnNlLXVybCcsXG4gIFN0YWNrSWQ6ICdzdGFjay1pZCcsXG4gIFJlcXVlc3RJZDogJ3JlcXVlc3QtaWQnLFxuICBMb2dpY2FsUmVzb3VyY2VJZDogJ2xvZ2ljYWwtcmVzb3VyY2UtaWQnLFxuICBSZXNvdXJjZVR5cGU6ICdDdXN0b206OkRlbGV0ZUV4aXN0aW5nUmVjb3JkU2V0JyxcbiAgUmVzb3VyY2VQcm9wZXJ0aWVzOiB7XG4gICAgU2VydmljZVRva2VuOiAnc2VydmljZS10b2tlbicsXG4gICAgSG9zdGVkWm9uZUlkOiAnaG9zdGVkLXpvbmUtaWQnLFxuICAgIFJlY29yZE5hbWU6ICdkZXYuY2RrLmF3cy4nLFxuICAgIFJlY29yZFR5cGU6ICdBJyxcbiAgfSxcbn07XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbn0pO1xuXG50ZXN0KCdjcmVhdGUgcmVxdWVzdCB3aXRoIGV4aXN0aW5nIHJlY29yZCcsIGFzeW5jICgpID0+IHtcbiAgbW9ja0xpc3RSZXNvdXJjZVJlY29yZFNldHNSZXNwb25zZS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgIFJlc291cmNlUmVjb3JkU2V0czogW1xuICAgICAge1xuICAgICAgICBOYW1lOiAnZGV2LmNkay5hd3MuJyxcbiAgICAgICAgVHlwZTogJ0EnLFxuICAgICAgICBUVEw6IDkwMCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIE5hbWU6ICdkZXYuY2RrLmF3cy4nLFxuICAgICAgICBUeXBlOiAnQUFBQScsXG4gICAgICAgIFRUTDogOTAwLFxuICAgICAgfSxcbiAgICBdLFxuICB9KTtcblxuICBtb2NrQ2hhbmdlUmVzb3VyY2VSZWNvcmRTZXRzUmVzcG9uc2UubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICBDaGFuZ2VJbmZvOiB7XG4gICAgICBJZDogJ2NoYW5nZS1pZCcsXG4gICAgfSxcbiAgfSk7XG5cbiAgYXdhaXQgaGFuZGxlcihldmVudCk7XG5cbiAgZXhwZWN0KG1vY2tSb3V0ZTUzLmxpc3RSZXNvdXJjZVJlY29yZFNldHMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICBIb3N0ZWRab25lSWQ6ICdob3N0ZWQtem9uZS1pZCcsXG4gICAgU3RhcnRSZWNvcmROYW1lOiAnZGV2LmNkay5hd3MuJyxcbiAgICBTdGFydFJlY29yZFR5cGU6ICdBJyxcbiAgfSk7XG5cbiAgZXhwZWN0KG1vY2tSb3V0ZTUzLmNoYW5nZVJlc291cmNlUmVjb3JkU2V0cykudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgIEhvc3RlZFpvbmVJZDogJ2hvc3RlZC16b25lLWlkJyxcbiAgICBDaGFuZ2VCYXRjaDoge1xuICAgICAgQ2hhbmdlczogW1xuICAgICAgICB7XG4gICAgICAgICAgQWN0aW9uOiAnREVMRVRFJyxcbiAgICAgICAgICBSZXNvdXJjZVJlY29yZFNldDoge1xuICAgICAgICAgICAgTmFtZTogJ2Rldi5jZGsuYXdzLicsXG4gICAgICAgICAgICBUVEw6IDkwMCxcbiAgICAgICAgICAgIFR5cGU6ICdBJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICB9KTtcblxuICBleHBlY3QobW9ja1JvdXRlNTMud2FpdEZvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Jlc291cmNlUmVjb3JkU2V0c0NoYW5nZWQnLCB7XG4gICAgSWQ6ICdjaGFuZ2UtaWQnLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdjcmVhdGUgcmVxdWVzdCB3aXRoIG5vbiBleGlzdGluZyByZWNvcmQnLCBhc3luYyAoKSA9PiB7XG4gIG1vY2tMaXN0UmVzb3VyY2VSZWNvcmRTZXRzUmVzcG9uc2UubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICBSZXNvdXJjZVJlY29yZFNldHM6IFtcbiAgICAgIHtcbiAgICAgICAgTmFtZTogJ3d3dy5jZGsuYXdzLicsXG4gICAgICAgIFR5cGU6ICdBJyxcbiAgICAgICAgVFRMOiA5MDAsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBOYW1lOiAnZGV2LmNkay5hd3MuJyxcbiAgICAgICAgVHlwZTogJ01YJyxcbiAgICAgICAgVFRMOiA5MDAsXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xuXG4gIGF3YWl0IGhhbmRsZXIoZXZlbnQpO1xuXG4gIGV4cGVjdChtb2NrUm91dGU1My5jaGFuZ2VSZXNvdXJjZVJlY29yZFNldHMpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG59KTtcblxudGVzdCgndXBkYXRlIHJlcXVlc3QnLCBhc3luYyAoKSA9PiB7XG4gIGF3YWl0IGhhbmRsZXIoe1xuICAgIC4uLmV2ZW50LFxuICAgIFJlcXVlc3RUeXBlOiAnVXBkYXRlJyxcbiAgICBQaHlzaWNhbFJlc291cmNlSWQ6ICdpZCcsXG4gICAgT2xkUmVzb3VyY2VQcm9wZXJ0aWVzOiB7fSxcbiAgfSk7XG5cbiAgZXhwZWN0KG1vY2tSb3V0ZTUzLmNoYW5nZVJlc291cmNlUmVjb3JkU2V0cykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbn0pO1xuXG50ZXN0KCdkZWxldGUgcmVxdWVzdCcsIGFzeW5jICgpID0+IHtcbiAgYXdhaXQgaGFuZGxlcih7XG4gICAgLi4uZXZlbnQsXG4gICAgUmVxdWVzdFR5cGU6ICdEZWxldGUnLFxuICAgIFBoeXNpY2FsUmVzb3VyY2VJZDogJ2lkJyxcbiAgfSk7XG5cbiAgZXhwZWN0KG1vY2tSb3V0ZTUzLmNoYW5nZVJlc291cmNlUmVjb3JkU2V0cykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbn0pO1xuXG50ZXN0KCd3aXRoIGFsaWFzIHRhcmdldCcsIGFzeW5jICgpID0+IHtcbiAgbW9ja0xpc3RSZXNvdXJjZVJlY29yZFNldHNSZXNwb25zZS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgIFJlc291cmNlUmVjb3JkU2V0czogW1xuICAgICAge1xuICAgICAgICBOYW1lOiAnZGV2LmNkay5hd3MuJyxcbiAgICAgICAgVHlwZTogJ0EnLFxuICAgICAgICBUVEw6IHVuZGVmaW5lZCxcbiAgICAgICAgUmVzb3VyY2VSZWNvcmRzOiBbXSxcbiAgICAgICAgQWxpYXNUYXJnZXQ6IHtcbiAgICAgICAgICBIb3N0ZWRab25lSWQ6ICdob3N0ZWQtem9uZS1pZCcsXG4gICAgICAgICAgRE5TTmFtZTogJ2Rucy1uYW1lJyxcbiAgICAgICAgICBFdmFsdWF0ZVRhcmdldEhlYWx0aDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xuXG4gIG1vY2tDaGFuZ2VSZXNvdXJjZVJlY29yZFNldHNSZXNwb25zZS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgIENoYW5nZUluZm86IHtcbiAgICAgIElkOiAnY2hhbmdlLWlkJyxcbiAgICB9LFxuICB9KTtcblxuICBhd2FpdCBoYW5kbGVyKGV2ZW50KTtcblxuICBleHBlY3QobW9ja1JvdXRlNTMuY2hhbmdlUmVzb3VyY2VSZWNvcmRTZXRzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgSG9zdGVkWm9uZUlkOiAnaG9zdGVkLXpvbmUtaWQnLFxuICAgIENoYW5nZUJhdGNoOiB7XG4gICAgICBDaGFuZ2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBBY3Rpb246ICdERUxFVEUnLFxuICAgICAgICAgIFJlc291cmNlUmVjb3JkU2V0OiB7XG4gICAgICAgICAgICBOYW1lOiAnZGV2LmNkay5hd3MuJyxcbiAgICAgICAgICAgIFR5cGU6ICdBJyxcbiAgICAgICAgICAgIEFsaWFzVGFyZ2V0OiB7XG4gICAgICAgICAgICAgIEhvc3RlZFpvbmVJZDogJ2hvc3RlZC16b25lLWlkJyxcbiAgICAgICAgICAgICAgRE5TTmFtZTogJ2Rucy1uYW1lJyxcbiAgICAgICAgICAgICAgRXZhbHVhdGVUYXJnZXRIZWFsdGg6IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICB9KTtcbn0pO1xuIl19