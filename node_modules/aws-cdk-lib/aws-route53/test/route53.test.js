"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const ec2 = require("../../aws-ec2");
const cdk = require("../../core");
const lib_1 = require("../lib");
describe('route53', () => {
    describe('default properties', () => {
        test('public hosted zone', () => {
            const app = new TestApp();
            new lib_1.PublicHostedZone(app.stack, 'HostedZone', { zoneName: 'test.public' });
            assertions_1.Template.fromStack(app.stack).hasResourceProperties('AWS::Route53::HostedZone', {
                Name: 'test.public.',
            });
        });
        test('private hosted zone', () => {
            const app = new TestApp();
            const vpcNetwork = new ec2.Vpc(app.stack, 'VPC');
            new lib_1.PrivateHostedZone(app.stack, 'HostedZone', { zoneName: 'test.private', vpc: vpcNetwork });
            assertions_1.Template.fromStack(app.stack).hasResourceProperties('AWS::Route53::HostedZone', {
                Name: 'test.private.',
                VPCs: [{
                        VPCId: { Ref: 'VPCB9E5F0B4' },
                        VPCRegion: 'bermuda-triangle',
                    }],
            });
        });
        test('when specifying multiple VPCs', () => {
            const app = new TestApp();
            const vpcNetworkA = new ec2.Vpc(app.stack, 'VPC1');
            const vpcNetworkB = new ec2.Vpc(app.stack, 'VPC2');
            new lib_1.PrivateHostedZone(app.stack, 'HostedZone', { zoneName: 'test.private', vpc: vpcNetworkA })
                .addVpc(vpcNetworkB);
            assertions_1.Template.fromStack(app.stack).hasResourceProperties('AWS::Route53::HostedZone', {
                Name: 'test.private.',
                VPCs: [{
                        VPCId: { Ref: 'VPC17DE2CF87' },
                        VPCRegion: 'bermuda-triangle',
                    },
                    {
                        VPCId: { Ref: 'VPC2C1F0E711' },
                        VPCRegion: 'bermuda-triangle',
                    }],
            });
        });
    });
    test('exporting and importing works', () => {
        const stack2 = new cdk.Stack();
        const importedZone = lib_1.HostedZone.fromHostedZoneAttributes(stack2, 'Imported', {
            hostedZoneId: 'hosted-zone-id',
            zoneName: 'cdk.local',
        });
        new lib_1.TxtRecord(importedZone, 'Record', {
            zone: importedZone,
            recordName: 'lookHere',
            values: ['SeeThere'],
        });
        assertions_1.Template.fromStack(stack2).hasResourceProperties('AWS::Route53::RecordSet', {
            HostedZoneId: 'hosted-zone-id',
            Name: 'lookHere.cdk.local.',
            ResourceRecords: ['"SeeThere"'],
            Type: 'TXT',
        });
    });
    test('adds period to name if not provided', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new lib_1.HostedZone(stack, 'MyHostedZone', {
            zoneName: 'zonename',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::HostedZone', {
            Name: 'zonename.',
        });
    });
    test('fails if zone name ends with a trailing dot', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // THEN
        expect(() => new lib_1.HostedZone(stack, 'MyHostedZone', { zoneName: 'zonename.' })).toThrow(/zone name must not end with a trailing dot/);
    });
    test('a hosted zone can be assiciated with a VPC either upon creation or using "addVpc"', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc1 = new ec2.Vpc(stack, 'VPC1');
        const vpc2 = new ec2.Vpc(stack, 'VPC2');
        const vpc3 = new ec2.Vpc(stack, 'VPC3');
        // WHEN
        const zone = new lib_1.HostedZone(stack, 'MyHostedZone', {
            zoneName: 'zonename',
            vpcs: [vpc1, vpc2],
        });
        zone.addVpc(vpc3);
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::HostedZone', {
            VPCs: [
                {
                    VPCId: {
                        Ref: 'VPC17DE2CF87',
                    },
                    VPCRegion: {
                        Ref: 'AWS::Region',
                    },
                },
                {
                    VPCId: {
                        Ref: 'VPC2C1F0E711',
                    },
                    VPCRegion: {
                        Ref: 'AWS::Region',
                    },
                },
                {
                    VPCId: {
                        Ref: 'VPC3CB5FCDA8',
                    },
                    VPCRegion: {
                        Ref: 'AWS::Region',
                    },
                },
            ],
        });
    });
    test('public zone cannot be associated with a vpc (runtime error)', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const zone = new lib_1.PublicHostedZone(stack, 'MyHostedZone', { zoneName: 'zonename' });
        const vpc = new ec2.Vpc(stack, 'VPC');
        // THEN
        expect(() => zone.addVpc(vpc)).toThrow(/Cannot associate public hosted zones with a VPC/);
    });
    test('setting up zone delegation', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const zone = new lib_1.PublicHostedZone(stack, 'TopZone', { zoneName: 'top.test' });
        const delegate = new lib_1.PublicHostedZone(stack, 'SubZone', { zoneName: 'sub.top.test' });
        // WHEN
        zone.addDelegation(delegate, { ttl: cdk.Duration.seconds(1337) });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
            Type: 'NS',
            Name: 'sub.top.test.',
            HostedZoneId: stack.resolve(zone.hostedZoneId),
            ResourceRecords: stack.resolve(delegate.hostedZoneNameServers),
            TTL: '1337',
        });
    });
    test('public hosted zone wiht caaAmazon set to true', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new lib_1.PublicHostedZone(stack, 'MyHostedZone', {
            zoneName: 'protected.com',
            caaAmazon: true,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
            Type: 'CAA',
            Name: 'protected.com.',
            ResourceRecords: [
                '0 issue "amazon.com"',
            ],
        });
    });
});
class TestApp {
    constructor() {
        const account = '123456789012';
        const region = 'bermuda-triangle';
        const context = {
            [`availability-zones:${account}:${region}`]: `${region}-1a`,
        };
        this.app = new cdk.App({ context });
        this.stack = new cdk.Stack(this.app, 'MyStack', { env: { account, region } });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGU1My50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGU1My50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLHFDQUFxQztBQUNyQyxrQ0FBa0M7QUFDbEMsZ0NBQW9GO0FBRXBGLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO0lBQ3ZCLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7UUFDbEMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtZQUM5QixNQUFNLEdBQUcsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQzFCLElBQUksc0JBQWdCLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztZQUMzRSxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsMEJBQTBCLEVBQUU7Z0JBQzlFLElBQUksRUFBRSxjQUFjO2FBQ3JCLENBQUMsQ0FBQztRQUVMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtZQUMvQixNQUFNLEdBQUcsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQzFCLE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2pELElBQUksdUJBQWlCLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1lBQzlGLHFCQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQywwQkFBMEIsRUFBRTtnQkFDOUUsSUFBSSxFQUFFLGVBQWU7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QUFzQixPQUFPLElBQUksTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLE1BQU0sS0FBSztTQUM1RCxDQUFDO1FBQ0YsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztLQUMvRTtDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIGVjMiBmcm9tICcuLi8uLi9hd3MtZWMyJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IEhvc3RlZFpvbmUsIFByaXZhdGVIb3N0ZWRab25lLCBQdWJsaWNIb3N0ZWRab25lLCBUeHRSZWNvcmQgfSBmcm9tICcuLi9saWInO1xuXG5kZXNjcmliZSgncm91dGU1MycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ2RlZmF1bHQgcHJvcGVydGllcycsICgpID0+IHtcbiAgICB0ZXN0KCdwdWJsaWMgaG9zdGVkIHpvbmUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBhcHAgPSBuZXcgVGVzdEFwcCgpO1xuICAgICAgbmV3IFB1YmxpY0hvc3RlZFpvbmUoYXBwLnN0YWNrLCAnSG9zdGVkWm9uZScsIHsgem9uZU5hbWU6ICd0ZXN0LnB1YmxpYycgfSk7XG4gICAgICBUZW1wbGF0ZS5mcm9tU3RhY2soYXBwLnN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Um91dGU1Mzo6SG9zdGVkWm9uZScsIHtcbiAgICAgICAgTmFtZTogJ3Rlc3QucHVibGljLicsXG4gICAgICB9KTtcblxuICAgIH0pO1xuICAgIHRlc3QoJ3ByaXZhdGUgaG9zdGVkIHpvbmUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBhcHAgPSBuZXcgVGVzdEFwcCgpO1xuICAgICAgY29uc3QgdnBjTmV0d29yayA9IG5ldyBlYzIuVnBjKGFwcC5zdGFjaywgJ1ZQQycpO1xuICAgICAgbmV3IFByaXZhdGVIb3N0ZWRab25lKGFwcC5zdGFjaywgJ0hvc3RlZFpvbmUnLCB7IHpvbmVOYW1lOiAndGVzdC5wcml2YXRlJywgdnBjOiB2cGNOZXR3b3JrIH0pO1xuICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKGFwcC5zdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlJvdXRlNTM6Okhvc3RlZFpvbmUnLCB7XG4gICAgICAgIE5hbWU6ICd0ZXN0LnByaXZhdGUuJyxcbiAgICAgICAgVlBDczogW3tcbiAgICAgICAgICBWUENJZDogeyBSZWY6ICdWUENCOUU1RjBCNCcgfSxcbiAgICAgICAgICBWUENSZWdpb246ICdiZXJtdWRhLXRyaWFuZ2xlJyxcbiAgICAgICAgfV0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3doZW4gc3BlY2lmeWluZyBtdWx0aXBsZSBWUENzJywgKCkgPT4ge1xuICAgICAgY29uc3QgYXBwID0gbmV3IFRlc3RBcHAoKTtcbiAgICAgIGNvbnN0IHZwY05ldHdvcmtBID0gbmV3IGVjMi5WcGMoYXBwLnN0YWNrLCAnVlBDMScpO1xuICAgICAgY29uc3QgdnBjTmV0d29ya0IgPSBuZXcgZWMyLlZwYyhhcHAuc3RhY2ssICdWUEMyJyk7XG4gICAgICBuZXcgUHJpdmF0ZUhvc3RlZFpvbmUoYXBwLnN0YWNrLCAnSG9zdGVkWm9uZScsIHsgem9uZU5hbWU6ICd0ZXN0LnByaXZhdGUnLCB2cGM6IHZwY05ldHdvcmtBIH0pXG4gICAgICAgIC5hZGRWcGModnBjTmV0d29ya0IpO1xuICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKGFwcC5zdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlJvdXRlNTM6Okhvc3RlZFpvbmUnLCB7XG4gICAgICAgIE5hbWU6ICd0ZXN0LnByaXZhdGUuJyxcbiAgICAgICAgVlBDczogW3tcbiAgICAgICAgICBWUENJZDogeyBSZWY6ICdWUEMxN0RFMkNGODcnIH0sXG4gICAgICAgICAgVlBDUmVnaW9uOiAnYmVybXVkYS10cmlhbmdsZScsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBWUENJZDogeyBSZWY6ICdWUEMyQzFGMEU3MTEnIH0sXG4gICAgICAgICAgVlBDUmVnaW9uOiAnYmVybXVkYS10cmlhbmdsZScsXG4gICAgICAgIH1dLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2V4cG9ydGluZyBhbmQgaW1wb3J0aW5nIHdvcmtzJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YWNrMiA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgIGNvbnN0IGltcG9ydGVkWm9uZSA9IEhvc3RlZFpvbmUuZnJvbUhvc3RlZFpvbmVBdHRyaWJ1dGVzKHN0YWNrMiwgJ0ltcG9ydGVkJywge1xuICAgICAgaG9zdGVkWm9uZUlkOiAnaG9zdGVkLXpvbmUtaWQnLFxuICAgICAgem9uZU5hbWU6ICdjZGsubG9jYWwnLFxuICAgIH0pO1xuXG4gICAgbmV3IFR4dFJlY29yZChpbXBvcnRlZFpvbmUgYXMgYW55LCAnUmVjb3JkJywge1xuICAgICAgem9uZTogaW1wb3J0ZWRab25lLFxuICAgICAgcmVjb3JkTmFtZTogJ2xvb2tIZXJlJyxcbiAgICAgIHZhbHVlczogWydTZWVUaGVyZSddLFxuICAgIH0pO1xuXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrMikuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlJvdXRlNTM6OlJlY29yZFNldCcsIHtcbiAgICAgIEhvc3RlZFpvbmVJZDogJ2hvc3RlZC16b25lLWlkJyxcbiAgICAgIE5hbWU6ICdsb29rSGVyZS5jZGsubG9jYWwuJyxcbiAgICAgIFJlc291cmNlUmVjb3JkczogWydcIlNlZVRoZXJlXCInXSxcbiAgICAgIFR5cGU6ICdUWFQnLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdhZGRzIHBlcmlvZCB0byBuYW1lIGlmIG5vdCBwcm92aWRlZCcsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBIb3N0ZWRab25lKHN0YWNrLCAnTXlIb3N0ZWRab25lJywge1xuICAgICAgem9uZU5hbWU6ICd6b25lbmFtZScsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Um91dGU1Mzo6SG9zdGVkWm9uZScsIHtcbiAgICAgIE5hbWU6ICd6b25lbmFtZS4nLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdmYWlscyBpZiB6b25lIG5hbWUgZW5kcyB3aXRoIGEgdHJhaWxpbmcgZG90JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KCgpID0+IG5ldyBIb3N0ZWRab25lKHN0YWNrLCAnTXlIb3N0ZWRab25lJywgeyB6b25lTmFtZTogJ3pvbmVuYW1lLicgfSkpLnRvVGhyb3coL3pvbmUgbmFtZSBtdXN0IG5vdCBlbmQgd2l0aCBhIHRyYWlsaW5nIGRvdC8pO1xuICB9KTtcblxuICB0ZXN0KCdhIGhvc3RlZCB6b25lIGNhbiBiZSBhc3NpY2lhdGVkIHdpdGggYSBWUEMgZWl0aGVyIHVwb24gY3JlYXRpb24gb3IgdXNpbmcgXCJhZGRWcGNcIicsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IHZwYzEgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZQQzEnKTtcbiAgICBjb25zdCB2cGMyID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMyJyk7XG4gICAgY29uc3QgdnBjMyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDMycpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHpvbmUgPSBuZXcgSG9zdGVkWm9uZShzdGFjaywgJ015SG9zdGVkWm9uZScsIHtcbiAgICAgIHpvbmVOYW1lOiAnem9uZW5hbWUnLFxuICAgICAgdnBjczogW3ZwYzEsIHZwYzJdLFxuICAgIH0pO1xuICAgIHpvbmUuYWRkVnBjKHZwYzMpO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlJvdXRlNTM6Okhvc3RlZFpvbmUnLCB7XG4gICAgICBWUENzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBWUENJZDoge1xuICAgICAgICAgICAgUmVmOiAnVlBDMTdERTJDRjg3JyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFZQQ1JlZ2lvbjoge1xuICAgICAgICAgICAgUmVmOiAnQVdTOjpSZWdpb24nLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBWUENJZDoge1xuICAgICAgICAgICAgUmVmOiAnVlBDMkMxRjBFNzExJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFZQQ1JlZ2lvbjoge1xuICAgICAgICAgICAgUmVmOiAnQVdTOjpSZWdpb24nLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBWUENJZDoge1xuICAgICAgICAgICAgUmVmOiAnVlBDM0NCNUZDREE4JyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFZQQ1JlZ2lvbjoge1xuICAgICAgICAgICAgUmVmOiAnQVdTOjpSZWdpb24nLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdwdWJsaWMgem9uZSBjYW5ub3QgYmUgYXNzb2NpYXRlZCB3aXRoIGEgdnBjIChydW50aW1lIGVycm9yKScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IHpvbmUgPSBuZXcgUHVibGljSG9zdGVkWm9uZShzdGFjaywgJ015SG9zdGVkWm9uZScsIHsgem9uZU5hbWU6ICd6b25lbmFtZScgfSk7XG4gICAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4gem9uZS5hZGRWcGModnBjKSkudG9UaHJvdygvQ2Fubm90IGFzc29jaWF0ZSBwdWJsaWMgaG9zdGVkIHpvbmVzIHdpdGggYSBWUEMvKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2V0dGluZyB1cCB6b25lIGRlbGVnYXRpb24nLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCB6b25lID0gbmV3IFB1YmxpY0hvc3RlZFpvbmUoc3RhY2ssICdUb3Bab25lJywgeyB6b25lTmFtZTogJ3RvcC50ZXN0JyB9KTtcbiAgICBjb25zdCBkZWxlZ2F0ZSA9IG5ldyBQdWJsaWNIb3N0ZWRab25lKHN0YWNrLCAnU3ViWm9uZScsIHsgem9uZU5hbWU6ICdzdWIudG9wLnRlc3QnIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIHpvbmUuYWRkRGVsZWdhdGlvbihkZWxlZ2F0ZSwgeyB0dGw6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDEzMzcpIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlJvdXRlNTM6OlJlY29yZFNldCcsIHtcbiAgICAgIFR5cGU6ICdOUycsXG4gICAgICBOYW1lOiAnc3ViLnRvcC50ZXN0LicsXG4gICAgICBIb3N0ZWRab25lSWQ6IHN0YWNrLnJlc29sdmUoem9uZS5ob3N0ZWRab25lSWQpLFxuICAgICAgUmVzb3VyY2VSZWNvcmRzOiBzdGFjay5yZXNvbHZlKGRlbGVnYXRlLmhvc3RlZFpvbmVOYW1lU2VydmVycyksXG4gICAgICBUVEw6ICcxMzM3JyxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgncHVibGljIGhvc3RlZCB6b25lIHdpaHQgY2FhQW1hem9uIHNldCB0byB0cnVlJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgbmV3IFB1YmxpY0hvc3RlZFpvbmUoc3RhY2ssICdNeUhvc3RlZFpvbmUnLCB7XG4gICAgICB6b25lTmFtZTogJ3Byb3RlY3RlZC5jb20nLFxuICAgICAgY2FhQW1hem9uOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlJvdXRlNTM6OlJlY29yZFNldCcsIHtcbiAgICAgIFR5cGU6ICdDQUEnLFxuICAgICAgTmFtZTogJ3Byb3RlY3RlZC5jb20uJyxcbiAgICAgIFJlc291cmNlUmVjb3JkczogW1xuICAgICAgICAnMCBpc3N1ZSBcImFtYXpvbi5jb21cIicsXG4gICAgICBdLFxuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5jbGFzcyBUZXN0QXBwIHtcbiAgcHVibGljIHJlYWRvbmx5IHN0YWNrOiBjZGsuU3RhY2s7XG4gIHByaXZhdGUgcmVhZG9ubHkgYXBwOiBjZGsuQXBwO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IGFjY291bnQgPSAnMTIzNDU2Nzg5MDEyJztcbiAgICBjb25zdCByZWdpb24gPSAnYmVybXVkYS10cmlhbmdsZSc7XG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgIFtgYXZhaWxhYmlsaXR5LXpvbmVzOiR7YWNjb3VudH06JHtyZWdpb259YF06IGAke3JlZ2lvbn0tMWFgLFxuICAgIH07XG4gICAgdGhpcy5hcHAgPSBuZXcgY2RrLkFwcCh7IGNvbnRleHQgfSk7XG4gICAgdGhpcy5zdGFjayA9IG5ldyBjZGsuU3RhY2sodGhpcy5hcHAsICdNeVN0YWNrJywgeyBlbnY6IHsgYWNjb3VudCwgcmVnaW9uIH0gfSk7XG4gIH1cbn1cbiJdfQ==