"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const aws_ec2_1 = require("../../aws-ec2");
const core_1 = require("../../core");
const lib_1 = require("../lib");
let stack;
let nlb;
let vpces;
let zone;
/**
 * A load balancer that can host a VPC Endpoint Service
 */
class DummyEndpointLoadBalancer {
    constructor(arn) {
        this.loadBalancerArn = arn;
    }
}
beforeEach(() => {
    stack = new core_1.Stack();
    nlb = new DummyEndpointLoadBalancer('arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/Test/9bn6qkf4e9jrw77a');
    vpces = new aws_ec2_1.VpcEndpointService(stack, 'VPCES', {
        vpcEndpointServiceLoadBalancers: [nlb],
    });
    zone = new lib_1.PublicHostedZone(stack, 'PHZ', {
        zoneName: 'aws-cdk.dev',
    });
});
test('create domain name resource', () => {
    // GIVEN
    // WHEN
    new lib_1.VpcEndpointServiceDomainName(stack, 'EndpointDomain', {
        endpointService: vpces,
        domainName: 'my-stuff.aws-cdk.dev',
        publicHostedZone: zone,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResource('Custom::AWS', {
        Properties: {
            Create: {
                'Fn::Join': [
                    '',
                    [
                        '{"service":"EC2","action":"modifyVpcEndpointServiceConfiguration","parameters":{"ServiceId":"',
                        {
                            Ref: 'VPCES3AE7D565',
                        },
                        '","PrivateDnsName":"my-stuff.aws-cdk.dev"},"physicalResourceId":{"id":"VPCES"}}',
                    ],
                ],
            },
            Update: {
                'Fn::Join': [
                    '',
                    [
                        '{"service":"EC2","action":"modifyVpcEndpointServiceConfiguration","parameters":{"ServiceId":"',
                        {
                            Ref: 'VPCES3AE7D565',
                        },
                        '","PrivateDnsName":"my-stuff.aws-cdk.dev"},"physicalResourceId":{"id":"VPCES"}}',
                    ],
                ],
            },
            Delete: {
                'Fn::Join': [
                    '',
                    [
                        '{"service":"EC2","action":"modifyVpcEndpointServiceConfiguration","parameters":{"ServiceId":"',
                        {
                            Ref: 'VPCES3AE7D565',
                        },
                        '","RemovePrivateDnsName":true}}',
                    ],
                ],
            },
        },
        DependsOn: [
            'EndpointDomainEnableDnsCustomResourcePolicy5E6DE7EB',
            'VPCES3AE7D565',
        ],
    });
    // Have to use `haveResourceLike` because there is a property that, by design, changes on every build
    assertions_1.Template.fromStack(stack).hasResource('Custom::AWS', {
        Properties: {
            Create: {
                'Fn::Join': [
                    '',
                    [
                        '{"service":"EC2","action":"describeVpcEndpointServiceConfigurations","parameters":{"ServiceIds":["',
                        {
                            Ref: 'VPCES3AE7D565',
                        },
                        '"]},"physicalResourceId":{"id":"fcd2563479244a851a9a59af60831b01"}}',
                    ],
                ],
            },
            Update: {
                'Fn::Join': [
                    '',
                    [
                        '{"service":"EC2","action":"describeVpcEndpointServiceConfigurations","parameters":{"ServiceIds":["',
                        {
                            Ref: 'VPCES3AE7D565',
                        },
                        '"]},"physicalResourceId":{"id":"fcd2563479244a851a9a59af60831b01"}}',
                    ],
                ],
            },
        },
        DependsOn: [
            'EndpointDomainEnableDnsCustomResourcePolicy5E6DE7EB',
            'EndpointDomainEnableDnsDACBF5A6',
            'EndpointDomainGetNamesCustomResourcePolicy141775B1',
            'VPCES3AE7D565',
        ],
    });
    assertions_1.Template.fromStack(stack).hasResource('AWS::Route53::RecordSet', {
        Properties: {
            Name: {
                'Fn::Join': [
                    '',
                    [
                        {
                            'Fn::GetAtt': [
                                'EndpointDomainGetNames9E697ED2',
                                'ServiceConfigurations.0.PrivateDnsNameConfiguration.Name',
                            ],
                        },
                        '.aws-cdk.dev.',
                    ],
                ],
            },
            Type: 'TXT',
            HostedZoneId: {
                Ref: 'PHZ45BE903D',
            },
            ResourceRecords: [
                {
                    'Fn::Join': [
                        '',
                        [
                            '\"',
                            {
                                'Fn::GetAtt': [
                                    'EndpointDomainGetNames9E697ED2',
                                    'ServiceConfigurations.0.PrivateDnsNameConfiguration.Value',
                                ],
                            },
                            '\"',
                        ],
                    ],
                },
            ],
            TTL: '1800',
        },
        DependsOn: [
            'VPCES3AE7D565',
        ],
    });
    assertions_1.Template.fromStack(stack).hasResource('Custom::AWS', {
        Properties: {
            Create: {
                'Fn::Join': [
                    '',
                    [
                        '{"service":"EC2","action":"startVpcEndpointServicePrivateDnsVerification","parameters":{"ServiceId":"',
                        {
                            Ref: 'VPCES3AE7D565',
                        },
                        '"},"physicalResourceId":{"id":"',
                        {
                            'Fn::Join': [
                                ':',
                                [
                                    {
                                        'Fn::GetAtt': [
                                            'EndpointDomainGetNames9E697ED2',
                                            'ServiceConfigurations.0.PrivateDnsNameConfiguration.Name',
                                        ],
                                    },
                                    {
                                        'Fn::GetAtt': [
                                            'EndpointDomainGetNames9E697ED2',
                                            'ServiceConfigurations.0.PrivateDnsNameConfiguration.Value',
                                        ],
                                    },
                                ],
                            ],
                        },
                        '"}}',
                    ],
                ],
            },
            Update: {
                'Fn::Join': [
                    '',
                    [
                        '{"service":"EC2","action":"startVpcEndpointServicePrivateDnsVerification","parameters":{"ServiceId":"',
                        {
                            Ref: 'VPCES3AE7D565',
                        },
                        '"},"physicalResourceId":{"id":"',
                        {
                            'Fn::Join': [
                                ':',
                                [
                                    {
                                        'Fn::GetAtt': [
                                            'EndpointDomainGetNames9E697ED2',
                                            'ServiceConfigurations.0.PrivateDnsNameConfiguration.Name',
                                        ],
                                    },
                                    {
                                        'Fn::GetAtt': [
                                            'EndpointDomainGetNames9E697ED2',
                                            'ServiceConfigurations.0.PrivateDnsNameConfiguration.Value',
                                        ],
                                    },
                                ],
                            ],
                        },
                        '"}}',
                    ],
                ],
            },
        },
        DependsOn: [
            'EndpointDomainDnsVerificationRecord66623BDA',
            'EndpointDomainStartVerificationCustomResourcePolicyD2BAC9A6',
            'VPCES3AE7D565',
        ],
    });
});
test('throws if creating multiple domains for a single service', () => {
    // GIVEN
    vpces = new aws_ec2_1.VpcEndpointService(stack, 'VPCES-2', {
        vpcEndpointServiceLoadBalancers: [nlb],
    });
    new lib_1.VpcEndpointServiceDomainName(stack, 'EndpointDomain', {
        endpointService: vpces,
        domainName: 'my-stuff-1.aws-cdk.dev',
        publicHostedZone: zone,
    });
    // WHEN / THEN
    expect(() => {
        new lib_1.VpcEndpointServiceDomainName(stack, 'EndpointDomain2', {
            endpointService: vpces,
            domainName: 'my-stuff-2.aws-cdk.dev',
            publicHostedZone: zone,
        });
    }).toThrow(/Cannot create a VpcEndpointServiceDomainName for service/);
});
test('endpoint domain name property equals input domain name', () => {
    // GIVEN
    vpces = new aws_ec2_1.VpcEndpointService(stack, 'NameTest', {
        vpcEndpointServiceLoadBalancers: [nlb],
    });
    const dn = new lib_1.VpcEndpointServiceDomainName(stack, 'EndpointDomain', {
        endpointService: vpces,
        domainName: 'name-test.aws-cdk.dev',
        publicHostedZone: zone,
    });
    expect(dn.domainName).toEqual('name-test.aws-cdk.dev');
});
//# sourceMappingURL=data:application/json;base64,