"use strict";
/**
 * This file asserts that it is possible to write a custom stacksynthesizer that will synthesize
 * ONE thing to the asset manifest, while returning another thing (including tokens) to the
 * CloudFormation template -- without reaching into the library internals
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const lib_1 = require("../lib");
test('use custom synthesizer', () => {
    // GIVEN
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'Stack', {
        synthesizer: new CustomSynthesizer(),
    });
    // WHEN
    const asset = new lib_1.Asset(stack, 'MyAsset', {
        path: path.join(__dirname, 'file-asset.txt'),
    });
    new core_1.CfnResource(stack, 'TestResource', {
        type: 'CDK::TestResource',
        properties: {
            Bucket: asset.s3BucketName,
            ObjectKey: asset.s3ObjectKey,
            S3Url: asset.s3ObjectUrl,
            HttpUrl: asset.httpUrl,
        },
    });
    // THEN
    const assembly = app.synth();
    const stackArtifact = assembly.getStackArtifact(stack.artifactId);
    const assetArtifact = stackArtifact.dependencies[0];
    const stackTemplate = assertions_1.Template.fromJSON(stackArtifact.template);
    stackTemplate.hasResourceProperties('CDK::TestResource', {
        Bucket: { 'Fn::Sub': '${BucketName}' },
        ObjectKey: '78add9eaf468dfa2191da44a7da92a21baba4c686cf6053d772556768ef21197.txt',
        S3Url: { 'Fn::Sub': 's3://${BucketName}/78add9eaf468dfa2191da44a7da92a21baba4c686cf6053d772556768ef21197.txt' },
        HttpUrl: { 'Fn::Sub': 'https://s3.${AWS::Region}.${AWS::URLSuffix}/${BucketName}/78add9eaf468dfa2191da44a7da92a21baba4c686cf6053d772556768ef21197.txt' },
    });
    expect(assetArtifact.contents).toEqual(expect.objectContaining({
        files: expect.objectContaining({
            '78add9eaf468dfa2191da44a7da92a21baba4c686cf6053d772556768ef21197': {
                destinations: {
                    'current_account-current_region': {
                        bucketName: 'write-bucket',
                        objectKey: '78add9eaf468dfa2191da44a7da92a21baba4c686cf6053d772556768ef21197.txt',
                    },
                },
                source: {
                    packaging: 'file',
                    path: 'asset.78add9eaf468dfa2191da44a7da92a21baba4c686cf6053d772556768ef21197.txt',
                },
            },
        }),
    }));
});
class CustomSynthesizer extends core_1.StackSynthesizer {
    constructor() {
        super(...arguments);
        this.manifest = new core_1.AssetManifestBuilder();
    }
    bind(stack) {
        super.bind(stack);
        this.parameter = new core_1.CfnParameter(stack, 'BucketName');
    }
    addFileAsset(asset) {
        const dest = this.manifest.defaultAddFileAsset(this.boundStack, asset, {
            bucketName: 'write-bucket',
        });
        return this.cloudFormationLocationFromFileAsset({
            ...dest,
            bucketName: ['${', this.parameter.logicalId, '}'].join(''),
        });
    }
    addDockerImageAsset(asset) {
        void (asset);
        throw new Error('Docker images are not supported here');
    }
    synthesize(session) {
        const templateAsset = this.addFileAsset(this.synthesizeTemplate(session));
        const assetManifestId = this.manifest.emitManifest(this.boundStack, session);
        this.emitArtifact(session, {
            stackTemplateAssetObjectUrl: templateAsset.s3ObjectUrlWithPlaceholders,
            additionalDependencies: [assetManifestId],
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXN5bnRoZXNpcy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3VzdG9tLXN5bnRoZXNpcy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOztBQUVILDZCQUE2QjtBQUM3QixpREFBNEM7QUFDNUMscUNBQW9OO0FBRXBOLGdDQUErQjtBQUUvQixJQUFJLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLFFBQVE7SUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQUcsRUFBRSxDQUFDO0lBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUU7UUFDcEMsV0FBVyxFQUFFLElBQUksaUJBQWlCLEVBQUU7S0FDckMsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7UUFDeEMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGdCQUFnQixDQUFDO0tBQzdDLENBQUMsQ0FBQztJQUNILElBQUksa0JBQVcsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO1FBQ3JDLElBQUksRUFBRSxtQkFBbUI7UUFDekIsVUFBVSxFQUFFO1lBQ1YsTUFBTSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQzFCLFNBQVMsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM1QixLQUFLLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDeEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1NBQ3ZCO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM3QixNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUEwQixDQUFDO0lBRTdFLE1BQU0sYUFBYSxHQUFHLHFCQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoRSxhQUFhLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLEVBQUU7UUFDdkQsTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRTtRQUN0QyxTQUFTLEVBQUUsc0VBQXNFO1FBQ2pGLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSx5RkFBeUYsRUFBRTtRQUMvRyxPQUFPLEVBQUUsRUFBRSxTQUFTLEVBQUUsZ0lBQWdJLEVBQUU7S0FDekosQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1FBQzdELEtBQUssRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFDN0Isa0VBQWtFLEVBQUU7Z0JBQ2xFLFlBQVksRUFBRTtvQkFDWixnQ0FBZ0MsRUFBRTt3QkFDaEMsVUFBVSxFQUFFLGNBQWM7d0JBQzFCLFNBQVMsRUFBRSxzRUFBc0U7cUJBQ2xGO2lCQUNGO2dCQUNELE1BQU0sRUFBRTtvQkFDTixTQUFTLEVBQUUsTUFBTTtvQkFDakIsSUFBSSxFQUFFLDRFQUE0RTtpQkFDbkY7YUFDRjtTQUNGLENBQUM7S0FDSCxDQUFDLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxpQkFBa0IsU0FBUSx1QkFBZ0I7SUFBaEQ7O1FBQ21CLGFBQVEsR0FBRyxJQUFJLDJCQUFvQixFQUFFLENBQUM7SUFpQ3pELENBQUM7SUE5QlUsSUFBSSxDQUFDLEtBQVk7UUFDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVsQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksbUJBQVksQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDeEQ7SUFFRCxZQUFZLENBQUMsS0FBc0I7UUFDakMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRTtZQUNyRSxVQUFVLEVBQUUsY0FBYztTQUMzQixDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQztZQUM5QyxHQUFHLElBQUk7WUFDUCxVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVUsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztTQUM1RCxDQUFDLENBQUM7S0FDSjtJQUVELG1CQUFtQixDQUFDLEtBQTZCO1FBQy9DLEtBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztLQUN6RDtJQUVELFVBQVUsQ0FBQyxPQUEwQjtRQUNuQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzFFLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFN0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUU7WUFDekIsMkJBQTJCLEVBQUUsYUFBYSxDQUFDLDJCQUEyQjtZQUN0RSxzQkFBc0IsRUFBRSxDQUFDLGVBQWUsQ0FBQztTQUMxQyxDQUFDLENBQUM7S0FDSjtDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGZpbGUgYXNzZXJ0cyB0aGF0IGl0IGlzIHBvc3NpYmxlIHRvIHdyaXRlIGEgY3VzdG9tIHN0YWNrc3ludGhlc2l6ZXIgdGhhdCB3aWxsIHN5bnRoZXNpemVcbiAqIE9ORSB0aGluZyB0byB0aGUgYXNzZXQgbWFuaWZlc3QsIHdoaWxlIHJldHVybmluZyBhbm90aGVyIHRoaW5nIChpbmNsdWRpbmcgdG9rZW5zKSB0byB0aGVcbiAqIENsb3VkRm9ybWF0aW9uIHRlbXBsYXRlIC0tIHdpdGhvdXQgcmVhY2hpbmcgaW50byB0aGUgbGlicmFyeSBpbnRlcm5hbHNcbiAqL1xuXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCB7IFN0YWNrU3ludGhlc2l6ZXIsIEZpbGVBc3NldFNvdXJjZSwgRmlsZUFzc2V0TG9jYXRpb24sIERvY2tlckltYWdlQXNzZXRTb3VyY2UsIERvY2tlckltYWdlQXNzZXRMb2NhdGlvbiwgSVN5bnRoZXNpc1Nlc3Npb24sIEFwcCwgU3RhY2ssIEFzc2V0TWFuaWZlc3RCdWlsZGVyLCBDZm5QYXJhbWV0ZXIsIENmblJlc291cmNlIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBBc3NldE1hbmlmZXN0QXJ0aWZhY3QgfSBmcm9tICcuLi8uLi9jeC1hcGknO1xuaW1wb3J0IHsgQXNzZXQgfSBmcm9tICcuLi9saWInO1xuXG50ZXN0KCd1c2UgY3VzdG9tIHN5bnRoZXNpemVyJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBhcHAgPSBuZXcgQXBwKCk7XG4gIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKGFwcCwgJ1N0YWNrJywge1xuICAgIHN5bnRoZXNpemVyOiBuZXcgQ3VzdG9tU3ludGhlc2l6ZXIoKSxcbiAgfSk7XG5cbiAgLy8gV0hFTlxuICBjb25zdCBhc3NldCA9IG5ldyBBc3NldChzdGFjaywgJ015QXNzZXQnLCB7XG4gICAgcGF0aDogcGF0aC5qb2luKF9fZGlybmFtZSwgJ2ZpbGUtYXNzZXQudHh0JyksXG4gIH0pO1xuICBuZXcgQ2ZuUmVzb3VyY2Uoc3RhY2ssICdUZXN0UmVzb3VyY2UnLCB7XG4gICAgdHlwZTogJ0NESzo6VGVzdFJlc291cmNlJyxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBCdWNrZXQ6IGFzc2V0LnMzQnVja2V0TmFtZSxcbiAgICAgIE9iamVjdEtleTogYXNzZXQuczNPYmplY3RLZXksXG4gICAgICBTM1VybDogYXNzZXQuczNPYmplY3RVcmwsXG4gICAgICBIdHRwVXJsOiBhc3NldC5odHRwVXJsLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgY29uc3QgYXNzZW1ibHkgPSBhcHAuc3ludGgoKTtcbiAgY29uc3Qgc3RhY2tBcnRpZmFjdCA9IGFzc2VtYmx5LmdldFN0YWNrQXJ0aWZhY3Qoc3RhY2suYXJ0aWZhY3RJZCk7XG4gIGNvbnN0IGFzc2V0QXJ0aWZhY3QgPSBzdGFja0FydGlmYWN0LmRlcGVuZGVuY2llc1swXSBhcyBBc3NldE1hbmlmZXN0QXJ0aWZhY3Q7XG5cbiAgY29uc3Qgc3RhY2tUZW1wbGF0ZSA9IFRlbXBsYXRlLmZyb21KU09OKHN0YWNrQXJ0aWZhY3QudGVtcGxhdGUpO1xuICBzdGFja1RlbXBsYXRlLmhhc1Jlc291cmNlUHJvcGVydGllcygnQ0RLOjpUZXN0UmVzb3VyY2UnLCB7XG4gICAgQnVja2V0OiB7ICdGbjo6U3ViJzogJyR7QnVja2V0TmFtZX0nIH0sXG4gICAgT2JqZWN0S2V5OiAnNzhhZGQ5ZWFmNDY4ZGZhMjE5MWRhNDRhN2RhOTJhMjFiYWJhNGM2ODZjZjYwNTNkNzcyNTU2NzY4ZWYyMTE5Ny50eHQnLFxuICAgIFMzVXJsOiB7ICdGbjo6U3ViJzogJ3MzOi8vJHtCdWNrZXROYW1lfS83OGFkZDllYWY0NjhkZmEyMTkxZGE0NGE3ZGE5MmEyMWJhYmE0YzY4NmNmNjA1M2Q3NzI1NTY3NjhlZjIxMTk3LnR4dCcgfSxcbiAgICBIdHRwVXJsOiB7ICdGbjo6U3ViJzogJ2h0dHBzOi8vczMuJHtBV1M6OlJlZ2lvbn0uJHtBV1M6OlVSTFN1ZmZpeH0vJHtCdWNrZXROYW1lfS83OGFkZDllYWY0NjhkZmEyMTkxZGE0NGE3ZGE5MmEyMWJhYmE0YzY4NmNmNjA1M2Q3NzI1NTY3NjhlZjIxMTk3LnR4dCcgfSxcbiAgfSk7XG5cbiAgZXhwZWN0KGFzc2V0QXJ0aWZhY3QuY29udGVudHMpLnRvRXF1YWwoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgIGZpbGVzOiBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAnNzhhZGQ5ZWFmNDY4ZGZhMjE5MWRhNDRhN2RhOTJhMjFiYWJhNGM2ODZjZjYwNTNkNzcyNTU2NzY4ZWYyMTE5Nyc6IHtcbiAgICAgICAgZGVzdGluYXRpb25zOiB7XG4gICAgICAgICAgJ2N1cnJlbnRfYWNjb3VudC1jdXJyZW50X3JlZ2lvbic6IHtcbiAgICAgICAgICAgIGJ1Y2tldE5hbWU6ICd3cml0ZS1idWNrZXQnLFxuICAgICAgICAgICAgb2JqZWN0S2V5OiAnNzhhZGQ5ZWFmNDY4ZGZhMjE5MWRhNDRhN2RhOTJhMjFiYWJhNGM2ODZjZjYwNTNkNzcyNTU2NzY4ZWYyMTE5Ny50eHQnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNvdXJjZToge1xuICAgICAgICAgIHBhY2thZ2luZzogJ2ZpbGUnLFxuICAgICAgICAgIHBhdGg6ICdhc3NldC43OGFkZDllYWY0NjhkZmEyMTkxZGE0NGE3ZGE5MmEyMWJhYmE0YzY4NmNmNjA1M2Q3NzI1NTY3NjhlZjIxMTk3LnR4dCcsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pLFxuICB9KSk7XG59KTtcblxuY2xhc3MgQ3VzdG9tU3ludGhlc2l6ZXIgZXh0ZW5kcyBTdGFja1N5bnRoZXNpemVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBtYW5pZmVzdCA9IG5ldyBBc3NldE1hbmlmZXN0QnVpbGRlcigpO1xuICBwcml2YXRlIHBhcmFtZXRlcj86IENmblBhcmFtZXRlcjtcblxuICBvdmVycmlkZSBiaW5kKHN0YWNrOiBTdGFjaykge1xuICAgIHN1cGVyLmJpbmQoc3RhY2spO1xuXG4gICAgdGhpcy5wYXJhbWV0ZXIgPSBuZXcgQ2ZuUGFyYW1ldGVyKHN0YWNrLCAnQnVja2V0TmFtZScpO1xuICB9XG5cbiAgYWRkRmlsZUFzc2V0KGFzc2V0OiBGaWxlQXNzZXRTb3VyY2UpOiBGaWxlQXNzZXRMb2NhdGlvbiB7XG4gICAgY29uc3QgZGVzdCA9IHRoaXMubWFuaWZlc3QuZGVmYXVsdEFkZEZpbGVBc3NldCh0aGlzLmJvdW5kU3RhY2ssIGFzc2V0LCB7XG4gICAgICBidWNrZXROYW1lOiAnd3JpdGUtYnVja2V0JyxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5jbG91ZEZvcm1hdGlvbkxvY2F0aW9uRnJvbUZpbGVBc3NldCh7XG4gICAgICAuLi5kZXN0LFxuICAgICAgYnVja2V0TmFtZTogWyckeycsIHRoaXMucGFyYW1ldGVyIS5sb2dpY2FsSWQsICd9J10uam9pbignJyksXG4gICAgfSk7XG4gIH1cblxuICBhZGREb2NrZXJJbWFnZUFzc2V0KGFzc2V0OiBEb2NrZXJJbWFnZUFzc2V0U291cmNlKTogRG9ja2VySW1hZ2VBc3NldExvY2F0aW9uIHtcbiAgICB2b2lkKGFzc2V0KTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RvY2tlciBpbWFnZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaGVyZScpO1xuICB9XG5cbiAgc3ludGhlc2l6ZShzZXNzaW9uOiBJU3ludGhlc2lzU2Vzc2lvbik6IHZvaWQge1xuICAgIGNvbnN0IHRlbXBsYXRlQXNzZXQgPSB0aGlzLmFkZEZpbGVBc3NldCh0aGlzLnN5bnRoZXNpemVUZW1wbGF0ZShzZXNzaW9uKSk7XG4gICAgY29uc3QgYXNzZXRNYW5pZmVzdElkID0gdGhpcy5tYW5pZmVzdC5lbWl0TWFuaWZlc3QodGhpcy5ib3VuZFN0YWNrLCBzZXNzaW9uKTtcblxuICAgIHRoaXMuZW1pdEFydGlmYWN0KHNlc3Npb24sIHtcbiAgICAgIHN0YWNrVGVtcGxhdGVBc3NldE9iamVjdFVybDogdGVtcGxhdGVBc3NldC5zM09iamVjdFVybFdpdGhQbGFjZWhvbGRlcnMsXG4gICAgICBhZGRpdGlvbmFsRGVwZW5kZW5jaWVzOiBbYXNzZXRNYW5pZmVzdElkXSxcbiAgICB9KTtcbiAgfVxufVxuIl19