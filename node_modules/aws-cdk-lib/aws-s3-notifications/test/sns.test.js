"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const s3 = require("../../aws-s3");
const sns = require("../../aws-sns");
const cdk = require("../../core");
const notif = require("../lib");
test('asBucketNotificationDestination adds bucket permissions only once for each bucket', () => {
    const stack = new cdk.Stack();
    const topic = new sns.Topic(stack, 'MyTopic');
    const bucket = new s3.Bucket(stack, 'Bucket');
    const bucket2 = new s3.Bucket(stack, 'Bucket2');
    new notif.SnsDestination(topic).bind(bucket, bucket);
    new notif.SnsDestination(topic).bind(bucket, bucket);
    // another bucket will be added to the topic policy
    new notif.SnsDestination(topic).bind(bucket2, bucket2);
    assertions_1.Template.fromStack(stack).templateMatches({
        Resources: {
            Bucket83908E77: {
                Type: 'AWS::S3::Bucket',
                DeletionPolicy: 'Retain',
                UpdateReplacePolicy: 'Retain',
            },
            Bucket25524B414: {
                Type: 'AWS::S3::Bucket',
                DeletionPolicy: 'Retain',
                UpdateReplacePolicy: 'Retain',
            },
            MyTopic86869434: {
                Type: 'AWS::SNS::Topic',
            },
            MyTopicPolicy12A5EC17: {
                Type: 'AWS::SNS::TopicPolicy',
                Properties: {
                    PolicyDocument: {
                        Statement: [
                            {
                                Action: 'sns:Publish',
                                Condition: {
                                    ArnLike: {
                                        'aws:SourceArn': { 'Fn::GetAtt': ['Bucket83908E77', 'Arn'] },
                                    },
                                },
                                Effect: 'Allow',
                                Principal: {
                                    Service: 's3.amazonaws.com',
                                },
                                Resource: {
                                    Ref: 'MyTopic86869434',
                                },
                                Sid: '0',
                            },
                            {
                                Action: 'sns:Publish',
                                Condition: {
                                    ArnLike: {
                                        'aws:SourceArn': { 'Fn::GetAtt': ['Bucket25524B414', 'Arn'] },
                                    },
                                },
                                Effect: 'Allow',
                                Principal: {
                                    Service: 's3.amazonaws.com',
                                },
                                Resource: {
                                    Ref: 'MyTopic86869434',
                                },
                                Sid: '1',
                            },
                        ],
                        Version: '2012-10-17',
                    },
                    Topics: [
                        {
                            Ref: 'MyTopic86869434',
                        },
                    ],
                },
            },
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25zLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzbnMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUE0QztBQUM1QyxtQ0FBbUM7QUFDbkMscUNBQXFDO0FBQ3JDLGtDQUFrQztBQUNsQyxnQ0FBZ0M7QUFFaEMsSUFBSSxDQUFDLG1GQUFtRixFQUFFLEdBQUcsRUFBRTtJQUM3RixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUU5QixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzlDLE1BQU0sTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDOUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVoRCxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyRCxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyRCxtREFBbUQ7SUFDbkQsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFdkQscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsZUFBZSxDQUFDO1FBQ3hDLFNBQVMsRUFBRTtZQUNULGNBQWMsRUFBRTtnQkFDZCxJQUFJLEVBQUUsaUJBQWlCO2dCQUN2QixjQUFjLEVBQUUsUUFBUTtnQkFDeEIsbUJBQW1CLEVBQUUsUUFBUTthQUM5QjtZQUNELGVBQWUsRUFBRTtnQkFDZixJQUFJLEVBQUUsaUJBQWlCO2dCQUN2QixjQUFjLEVBQUUsUUFBUTtnQkFDeEIsbUJBQW1CLEVBQUUsUUFBUTthQUM5QjtZQUNELGVBQWUsRUFBRTtnQkFDZixJQUFJLEVBQUUsaUJBQWlCO2FBQ3hCO1lBQ0QscUJBQXFCLEVBQUU7Z0JBQ3JCLElBQUksRUFBRSx1QkFBdUI7Z0JBQzdCLFVBQVUsRUFBRTtvQkFDVixjQUFjLEVBQUU7d0JBQ2QsU0FBUyxFQUFFOzRCQUNUO2dDQUNFLE1BQU0sRUFBRSxhQUFhO2dDQUNyQixTQUFTLEVBQUU7b0NBQ1QsT0FBTyxFQUFFO3dDQUNQLGVBQWUsRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxFQUFFO3FDQUM3RDtpQ0FDRjtnQ0FDRCxNQUFNLEVBQUUsT0FBTztnQ0FDZixTQUFTLEVBQUU7b0NBQ1QsT0FBTyxFQUFFLGtCQUFrQjtpQ0FDNUI7Z0NBQ0QsUUFBUSxFQUFFO29DQUNSLEdBQUcsRUFBRSxpQkFBaUI7aUNBQ3ZCO2dDQUNELEdBQUcsRUFBRSxHQUFHOzZCQUNUOzRCQUNEO2dDQUNFLE1BQU0sRUFBRSxhQUFhO2dDQUNyQixTQUFTLEVBQUU7b0NBQ1QsT0FBTyxFQUFFO3dDQUNQLGVBQWUsRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxFQUFFO3FDQUM5RDtpQ0FDRjtnQ0FDRCxNQUFNLEVBQUUsT0FBTztnQ0FDZixTQUFTLEVBQUU7b0NBQ1QsT0FBTyxFQUFFLGtCQUFrQjtpQ0FDNUI7Z0NBQ0QsUUFBUSxFQUFFO29DQUNSLEdBQUcsRUFBRSxpQkFBaUI7aUNBQ3ZCO2dDQUNELEdBQUcsRUFBRSxHQUFHOzZCQUNUO3lCQUNGO3dCQUNELE9BQU8sRUFBRSxZQUFZO3FCQUN0QjtvQkFDRCxNQUFNLEVBQUU7d0JBQ047NEJBQ0UsR0FBRyxFQUFFLGlCQUFpQjt5QkFDdkI7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0ICogYXMgczMgZnJvbSAnLi4vLi4vYXdzLXMzJztcbmltcG9ydCAqIGFzIHNucyBmcm9tICcuLi8uLi9hd3Mtc25zJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIG5vdGlmIGZyb20gJy4uL2xpYic7XG5cbnRlc3QoJ2FzQnVja2V0Tm90aWZpY2F0aW9uRGVzdGluYXRpb24gYWRkcyBidWNrZXQgcGVybWlzc2lvbnMgb25seSBvbmNlIGZvciBlYWNoIGJ1Y2tldCcsICgpID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnTXlUb3BpYycpO1xuICBjb25zdCBidWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG4gIGNvbnN0IGJ1Y2tldDIgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0MicpO1xuXG4gIG5ldyBub3RpZi5TbnNEZXN0aW5hdGlvbih0b3BpYykuYmluZChidWNrZXQsIGJ1Y2tldCk7XG4gIG5ldyBub3RpZi5TbnNEZXN0aW5hdGlvbih0b3BpYykuYmluZChidWNrZXQsIGJ1Y2tldCk7XG4gIC8vIGFub3RoZXIgYnVja2V0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIHRvcGljIHBvbGljeVxuICBuZXcgbm90aWYuU25zRGVzdGluYXRpb24odG9waWMpLmJpbmQoYnVja2V0MiwgYnVja2V0Mik7XG5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS50ZW1wbGF0ZU1hdGNoZXMoe1xuICAgIFJlc291cmNlczoge1xuICAgICAgQnVja2V0ODM5MDhFNzc6IHtcbiAgICAgICAgVHlwZTogJ0FXUzo6UzM6OkJ1Y2tldCcsXG4gICAgICAgIERlbGV0aW9uUG9saWN5OiAnUmV0YWluJyxcbiAgICAgICAgVXBkYXRlUmVwbGFjZVBvbGljeTogJ1JldGFpbicsXG4gICAgICB9LFxuICAgICAgQnVja2V0MjU1MjRCNDE0OiB7XG4gICAgICAgIFR5cGU6ICdBV1M6OlMzOjpCdWNrZXQnLFxuICAgICAgICBEZWxldGlvblBvbGljeTogJ1JldGFpbicsXG4gICAgICAgIFVwZGF0ZVJlcGxhY2VQb2xpY3k6ICdSZXRhaW4nLFxuICAgICAgfSxcbiAgICAgIE15VG9waWM4Njg2OTQzNDoge1xuICAgICAgICBUeXBlOiAnQVdTOjpTTlM6OlRvcGljJyxcbiAgICAgIH0sXG4gICAgICBNeVRvcGljUG9saWN5MTJBNUVDMTc6IHtcbiAgICAgICAgVHlwZTogJ0FXUzo6U05TOjpUb3BpY1BvbGljeScsXG4gICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICBQb2xpY3lEb2N1bWVudDoge1xuICAgICAgICAgICAgU3RhdGVtZW50OiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBBY3Rpb246ICdzbnM6UHVibGlzaCcsXG4gICAgICAgICAgICAgICAgQ29uZGl0aW9uOiB7XG4gICAgICAgICAgICAgICAgICBBcm5MaWtlOiB7XG4gICAgICAgICAgICAgICAgICAgICdhd3M6U291cmNlQXJuJzogeyAnRm46OkdldEF0dCc6IFsnQnVja2V0ODM5MDhFNzcnLCAnQXJuJ10gfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBFZmZlY3Q6ICdBbGxvdycsXG4gICAgICAgICAgICAgICAgUHJpbmNpcGFsOiB7XG4gICAgICAgICAgICAgICAgICBTZXJ2aWNlOiAnczMuYW1hem9uYXdzLmNvbScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBSZXNvdXJjZToge1xuICAgICAgICAgICAgICAgICAgUmVmOiAnTXlUb3BpYzg2ODY5NDM0JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFNpZDogJzAnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgQWN0aW9uOiAnc25zOlB1Ymxpc2gnLFxuICAgICAgICAgICAgICAgIENvbmRpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgQXJuTGlrZToge1xuICAgICAgICAgICAgICAgICAgICAnYXdzOlNvdXJjZUFybic6IHsgJ0ZuOjpHZXRBdHQnOiBbJ0J1Y2tldDI1NTI0QjQxNCcsICdBcm4nXSB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIEVmZmVjdDogJ0FsbG93JyxcbiAgICAgICAgICAgICAgICBQcmluY2lwYWw6IHtcbiAgICAgICAgICAgICAgICAgIFNlcnZpY2U6ICdzMy5hbWF6b25hd3MuY29tJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFJlc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICBSZWY6ICdNeVRvcGljODY4Njk0MzQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgU2lkOiAnMScsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgVmVyc2lvbjogJzIwMTItMTAtMTcnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgVG9waWNzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFJlZjogJ015VG9waWM4Njg2OTQzNCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufSk7XG4iXX0=