"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const aws_iam_1 = require("../../aws-iam");
const core_1 = require("../../core");
const s3 = require("../lib");
// to make it easy to copy & paste from output:
/* eslint-disable quote-props */
describe('bucket policy', () => {
    test('default properties', () => {
        const stack = new core_1.Stack();
        const myBucket = new s3.Bucket(stack, 'MyBucket');
        const myBucketPolicy = new s3.BucketPolicy(stack, 'MyBucketPolicy', {
            bucket: myBucket,
        });
        myBucketPolicy.document.addStatements(new aws_iam_1.PolicyStatement({
            resources: [myBucket.bucketArn],
            actions: ['s3:GetObject*'],
            principals: [new aws_iam_1.AnyPrincipal()],
        }));
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::BucketPolicy', {
            Bucket: {
                'Ref': 'MyBucketF68F3FF0',
            },
            PolicyDocument: {
                'Version': '2012-10-17',
                'Statement': [
                    {
                        'Action': 's3:GetObject*',
                        'Effect': 'Allow',
                        'Principal': { AWS: '*' },
                        'Resource': { 'Fn::GetAtt': ['MyBucketF68F3FF0', 'Arn'] },
                    },
                ],
            },
        });
    });
    test('when specifying a removalPolicy at creation', () => {
        const stack = new core_1.Stack();
        const myBucket = new s3.Bucket(stack, 'MyBucket');
        const myBucketPolicy = new s3.BucketPolicy(stack, 'MyBucketPolicy', {
            bucket: myBucket,
            removalPolicy: core_1.RemovalPolicy.RETAIN,
        });
        myBucketPolicy.document.addStatements(new aws_iam_1.PolicyStatement({
            resources: [myBucket.bucketArn],
            actions: ['s3:GetObject*'],
            principals: [new aws_iam_1.AnyPrincipal()],
        }));
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'MyBucketF68F3FF0': {
                    'Type': 'AWS::S3::Bucket',
                    'DeletionPolicy': 'Retain',
                    'UpdateReplacePolicy': 'Retain',
                },
                'MyBucketPolicy0AFEFDBE': {
                    'Type': 'AWS::S3::BucketPolicy',
                    'Properties': {
                        'Bucket': {
                            'Ref': 'MyBucketF68F3FF0',
                        },
                        'PolicyDocument': {
                            'Statement': [
                                {
                                    'Action': 's3:GetObject*',
                                    'Effect': 'Allow',
                                    'Principal': { AWS: '*' },
                                    'Resource': { 'Fn::GetAtt': ['MyBucketF68F3FF0', 'Arn'] },
                                },
                            ],
                            'Version': '2012-10-17',
                        },
                    },
                    'DeletionPolicy': 'Retain',
                    'UpdateReplacePolicy': 'Retain',
                },
            },
        });
    });
    test('when specifying a removalPolicy after creation', () => {
        const stack = new core_1.Stack();
        const myBucket = new s3.Bucket(stack, 'MyBucket');
        myBucket.addToResourcePolicy(new aws_iam_1.PolicyStatement({
            resources: [myBucket.bucketArn],
            actions: ['s3:GetObject*'],
            principals: [new aws_iam_1.AnyPrincipal()],
        }));
        myBucket.policy?.applyRemovalPolicy(core_1.RemovalPolicy.RETAIN);
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'MyBucketF68F3FF0': {
                    'Type': 'AWS::S3::Bucket',
                    'DeletionPolicy': 'Retain',
                    'UpdateReplacePolicy': 'Retain',
                },
                'MyBucketPolicyE7FBAC7B': {
                    'Type': 'AWS::S3::BucketPolicy',
                    'Properties': {
                        'Bucket': {
                            'Ref': 'MyBucketF68F3FF0',
                        },
                        'PolicyDocument': {
                            'Statement': [
                                {
                                    'Action': 's3:GetObject*',
                                    'Effect': 'Allow',
                                    'Principal': { AWS: '*' },
                                    'Resource': { 'Fn::GetAtt': ['MyBucketF68F3FF0', 'Arn'] },
                                },
                            ],
                            'Version': '2012-10-17',
                        },
                    },
                    'DeletionPolicy': 'Retain',
                    'UpdateReplacePolicy': 'Retain',
                },
            },
        });
    });
    test('fails if bucket policy has no actions', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'my-stack');
        const myBucket = new s3.Bucket(stack, 'MyBucket');
        myBucket.addToResourcePolicy(new aws_iam_1.PolicyStatement({
            resources: [myBucket.bucketArn],
            principals: [new aws_iam_1.AnyPrincipal()],
        }));
        expect(() => app.synth()).toThrow(/A PolicyStatement must specify at least one \'action\' or \'notAction\'/);
    });
    test('fails if bucket policy has no IAM principals', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'my-stack');
        const myBucket = new s3.Bucket(stack, 'MyBucket');
        myBucket.addToResourcePolicy(new aws_iam_1.PolicyStatement({
            resources: [myBucket.bucketArn],
            actions: ['s3:GetObject*'],
        }));
        expect(() => app.synth()).toThrow(/A PolicyStatement used in a resource-based policy must specify at least one IAM principal/);
    });
    describe('fromCfnBucketPolicy()', () => {
        const stack = new core_1.Stack();
        test('correctly extracts the Document and Bucket from the L1', () => {
            const cfnBucket = new s3.CfnBucket(stack, 'CfnBucket');
            const cfnBucketPolicy = bucketPolicyForBucketNamed(cfnBucket.ref);
            const bucketPolicy = s3.BucketPolicy.fromCfnBucketPolicy(cfnBucketPolicy);
            expect(bucketPolicy.document).not.toBeUndefined();
            expect(bucketPolicy.document.isEmpty).toBeFalsy();
            expect(bucketPolicy.bucket).not.toBeUndefined();
            expect(bucketPolicy.bucket.policy).not.toBeUndefined();
            expect(bucketPolicy.bucket.policy?.document.isEmpty).toBeFalsy();
        });
        test('correctly references a bucket by name', () => {
            const cfnBucketPolicy = bucketPolicyForBucketNamed('hardcoded-name');
            const bucketPolicy = s3.BucketPolicy.fromCfnBucketPolicy(cfnBucketPolicy);
            expect(bucketPolicy.bucket).not.toBeUndefined();
            expect(bucketPolicy.bucket.bucketName).toBe('hardcoded-name');
        });
        function bucketPolicyForBucketNamed(name) {
            return new s3.CfnBucketPolicy(stack, `CfnBucketPolicy-${name}`, {
                policyDocument: {
                    'Statement': [
                        {
                            'Action': 's3:*',
                            'Effect': 'Deny',
                            'Principal': {
                                'AWS': '*',
                            },
                            'Resource': '*',
                        },
                    ],
                    'Version': '2012-10-17',
                },
                bucket: name,
            });
        }
    });
});
//# sourceMappingURL=data:application/json;base64,