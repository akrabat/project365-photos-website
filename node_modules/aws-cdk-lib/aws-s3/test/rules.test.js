"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const lib_1 = require("../lib");
describe('rules', () => {
    test('Bucket with expiration days', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.Bucket(stack, 'Bucket', {
            lifecycleRules: [{
                    expiration: core_1.Duration.days(30),
                }],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::Bucket', {
            LifecycleConfiguration: {
                Rules: [{
                        ExpirationInDays: 30,
                        Status: 'Enabled',
                    }],
            },
        });
    });
    test('Can use addLifecycleRule() to add a lifecycle rule', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const bucket = new lib_1.Bucket(stack, 'Bucket');
        bucket.addLifecycleRule({
            expiration: core_1.Duration.days(30),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::Bucket', {
            LifecycleConfiguration: {
                Rules: [{
                        ExpirationInDays: 30,
                        Status: 'Enabled',
                    }],
            },
        });
    });
    test('Bucket with expiration date', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.Bucket(stack, 'Bucket', {
            lifecycleRules: [{
                    expirationDate: new Date('2018-01-01'),
                }],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::Bucket', {
            LifecycleConfiguration: {
                Rules: [{
                        ExpirationDate: '2018-01-01T00:00:00',
                        Status: 'Enabled',
                    }],
            },
        });
    });
    test('Bucket with transition rule', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.Bucket(stack, 'Bucket', {
            lifecycleRules: [{
                    transitions: [{
                            storageClass: lib_1.StorageClass.GLACIER,
                            transitionAfter: core_1.Duration.days(30),
                        }],
                }],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::Bucket', {
            LifecycleConfiguration: {
                Rules: [{
                        Transitions: [{
                                StorageClass: 'GLACIER',
                                TransitionInDays: 30,
                            }],
                        Status: 'Enabled',
                    }],
            },
        });
    });
    test('Bucket with expiredObjectDeleteMarker', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.Bucket(stack, 'Bucket', {
            lifecycleRules: [{
                    expiredObjectDeleteMarker: true,
                }],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::Bucket', {
            LifecycleConfiguration: {
                Rules: [{
                        ExpiredObjectDeleteMarker: true,
                        Status: 'Enabled',
                    }],
            },
        });
    });
    test('Noncurrent transistion rule with versions to retain', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN: Noncurrent version to retain available
        new lib_1.Bucket(stack, 'Bucket1', {
            lifecycleRules: [{
                    noncurrentVersionExpiration: core_1.Duration.days(10),
                    noncurrentVersionTransitions: [
                        {
                            storageClass: lib_1.StorageClass.GLACIER_INSTANT_RETRIEVAL,
                            transitionAfter: core_1.Duration.days(10),
                            noncurrentVersionsToRetain: 1,
                        },
                    ],
                }],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::Bucket', {
            LifecycleConfiguration: {
                Rules: [{
                        NoncurrentVersionExpiration: {
                            NoncurrentDays: 10,
                        },
                        NoncurrentVersionTransitions: [
                            {
                                NewerNoncurrentVersions: 1,
                                StorageClass: 'GLACIER_IR',
                                TransitionInDays: 10,
                            },
                        ],
                        Status: 'Enabled',
                    }],
            },
        });
    });
    test('Noncurrent transistion rule without versions to retain', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN: Noncurrent version to retain not set
        new lib_1.Bucket(stack, 'Bucket1', {
            lifecycleRules: [{
                    noncurrentVersionExpiration: core_1.Duration.days(10),
                    noncurrentVersionTransitions: [
                        {
                            storageClass: lib_1.StorageClass.GLACIER_INSTANT_RETRIEVAL,
                            transitionAfter: core_1.Duration.days(10),
                        },
                    ],
                }],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::Bucket', {
            LifecycleConfiguration: {
                Rules: [{
                        NoncurrentVersionExpiration: {
                            NoncurrentDays: 10,
                        },
                        NoncurrentVersionTransitions: [
                            {
                                StorageClass: 'GLACIER_IR',
                                TransitionInDays: 10,
                            },
                        ],
                        Status: 'Enabled',
                    }],
            },
        });
    });
    test('Noncurrent expiration rule with versions to retain', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN: Noncurrent version to retain available
        new lib_1.Bucket(stack, 'Bucket1', {
            lifecycleRules: [{
                    noncurrentVersionExpiration: core_1.Duration.days(10),
                    noncurrentVersionsToRetain: 1,
                    noncurrentVersionTransitions: [
                        {
                            storageClass: lib_1.StorageClass.GLACIER_INSTANT_RETRIEVAL,
                            transitionAfter: core_1.Duration.days(10),
                        },
                    ],
                }],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::Bucket', {
            LifecycleConfiguration: {
                Rules: [{
                        NoncurrentVersionExpiration: {
                            NoncurrentDays: 10,
                            NewerNoncurrentVersions: 1,
                        },
                        NoncurrentVersionTransitions: [
                            {
                                StorageClass: 'GLACIER_IR',
                                TransitionInDays: 10,
                            },
                        ],
                        Status: 'Enabled',
                    }],
            },
        });
    });
    test('Noncurrent expiration rule without versions to retain', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN: Noncurrent version to retain not set
        new lib_1.Bucket(stack, 'Bucket1', {
            lifecycleRules: [{
                    noncurrentVersionExpiration: core_1.Duration.days(10),
                    noncurrentVersionTransitions: [
                        {
                            storageClass: lib_1.StorageClass.GLACIER_INSTANT_RETRIEVAL,
                            transitionAfter: core_1.Duration.days(10),
                        },
                    ],
                }],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::Bucket', {
            LifecycleConfiguration: {
                Rules: [{
                        NoncurrentVersionExpiration: {
                            NoncurrentDays: 10,
                        },
                        NoncurrentVersionTransitions: [
                            {
                                StorageClass: 'GLACIER_IR',
                                TransitionInDays: 10,
                            },
                        ],
                        Status: 'Enabled',
                    }],
            },
        });
    });
    test('Bucket with object size rules', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.Bucket(stack, 'Bucket', {
            lifecycleRules: [{
                    objectSizeLessThan: 0,
                    objectSizeGreaterThan: 0,
                }],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::S3::Bucket', {
            LifecycleConfiguration: {
                Rules: [{
                        ObjectSizeLessThan: 0,
                        ObjectSizeGreaterThan: 0,
                        Status: 'Enabled',
                    }],
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,