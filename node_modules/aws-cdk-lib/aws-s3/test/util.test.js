"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("../../core");
const util_1 = require("../lib/util");
describe('utils', () => {
    describe('parseBucketArn', () => {
        test('explicit arn', () => {
            const stack = new cdk.Stack();
            const bucketArn = 'my:bucket:arn';
            expect((0, util_1.parseBucketArn)(stack, { bucketArn })).toEqual(bucketArn);
        });
        test('produce arn from bucket name', () => {
            const stack = new cdk.Stack();
            const bucketName = 'hello';
            expect(stack.resolve((0, util_1.parseBucketArn)(stack, { bucketName }))).toEqual({
                'Fn::Join': ['',
                    ['arn:',
                        { Ref: 'AWS::Partition' },
                        ':s3:::hello']],
            });
        });
        test('fails if neither arn nor name are provided', () => {
            const stack = new cdk.Stack();
            expect(() => (0, util_1.parseBucketArn)(stack, {})).toThrow(/Cannot determine bucket ARN. At least `bucketArn` or `bucketName` is needed/);
        });
    });
    describe('parseBucketName', () => {
        test('explicit name', () => {
            const stack = new cdk.Stack();
            const bucketName = 'foo';
            expect(stack.resolve((0, util_1.parseBucketName)(stack, { bucketName }))).toEqual('foo');
        });
        test('extract bucket name from string arn', () => {
            const stack = new cdk.Stack();
            const bucketArn = 'arn:aws:s3:::my-bucket';
            expect(stack.resolve((0, util_1.parseBucketName)(stack, { bucketArn }))).toEqual('my-bucket');
        });
        test('can parse bucket name even if it contains a token', () => {
            const stack = new cdk.Stack();
            const bucketArn = `arn:aws:s3:::${cdk.Token.asString({ Ref: 'my-bucket' })}`;
            expect(stack.resolve((0, util_1.parseBucketName)(stack, { bucketArn }))).toEqual({ Ref: 'my-bucket' });
        });
        test('fails if ARN has invalid format', () => {
            const stack = new cdk.Stack();
            const bucketArn = 'invalid-arn';
            expect(() => (0, util_1.parseBucketName)(stack, { bucketArn })).toThrow(/ARNs must/);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXRpbC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0NBQWtDO0FBQ2xDLHNDQUE4RDtBQUU5RCxRQUFRLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtJQUNyQixRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO1FBQzlCLElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO1lBQ3hCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlCLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQztZQUNsQyxNQUFNLENBQUMsSUFBQSxxQkFBYyxFQUFDLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1lBQ3hDLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlCLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQztZQUMzQixNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFBLHFCQUFjLEVBQUMsS0FBSyxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUNuRSxVQUFVLEVBQ1IsQ0FBQyxFQUFFO29CQUNELENBQUMsTUFBTTt3QkFDTCxFQUFFLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRTt3QkFDekIsYUFBYSxDQUFDLENBQUM7YUFDdEIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsNENBQTRDLEVBQUUsR0FBRyxFQUFFO1lBQ3RELE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFBLHFCQUFjLEVBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLDZFQUE2RSxDQUFDLENBQUM7UUFDakksQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7UUFFL0IsSUFBSSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7WUFDekIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUEsc0JBQWUsRUFBQyxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0UsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO1lBQy9DLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlCLE1BQU0sU0FBUyxHQUFHLHdCQUF3QixDQUFDO1lBQzNDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUEsc0JBQWUsRUFBQyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDcEYsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsbURBQW1ELEVBQUUsR0FBRyxFQUFFO1lBQzdELE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlCLE1BQU0sU0FBUyxHQUFHLGdCQUFnQixHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFFN0UsTUFBTSxDQUNKLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBQSxzQkFBZSxFQUFDLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FDckQsQ0FBQyxPQUFPLENBQ1AsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLENBQ3JCLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7WUFDM0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFBLHNCQUFlLEVBQUMsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMzRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBwYXJzZUJ1Y2tldEFybiwgcGFyc2VCdWNrZXROYW1lIH0gZnJvbSAnLi4vbGliL3V0aWwnO1xuXG5kZXNjcmliZSgndXRpbHMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdwYXJzZUJ1Y2tldEFybicsICgpID0+IHtcbiAgICB0ZXN0KCdleHBsaWNpdCBhcm4nLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IGJ1Y2tldEFybiA9ICdteTpidWNrZXQ6YXJuJztcbiAgICAgIGV4cGVjdChwYXJzZUJ1Y2tldEFybihzdGFjaywgeyBidWNrZXRBcm4gfSkpLnRvRXF1YWwoYnVja2V0QXJuKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Byb2R1Y2UgYXJuIGZyb20gYnVja2V0IG5hbWUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IGJ1Y2tldE5hbWUgPSAnaGVsbG8nO1xuICAgICAgZXhwZWN0KHN0YWNrLnJlc29sdmUocGFyc2VCdWNrZXRBcm4oc3RhY2ssIHsgYnVja2V0TmFtZSB9KSkpLnRvRXF1YWwoe1xuICAgICAgICAnRm46OkpvaW4nOlxuICAgICAgICAgIFsnJyxcbiAgICAgICAgICAgIFsnYXJuOicsXG4gICAgICAgICAgICAgIHsgUmVmOiAnQVdTOjpQYXJ0aXRpb24nIH0sXG4gICAgICAgICAgICAgICc6czM6OjpoZWxsbyddXSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnZmFpbHMgaWYgbmVpdGhlciBhcm4gbm9yIG5hbWUgYXJlIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBleHBlY3QoKCkgPT4gcGFyc2VCdWNrZXRBcm4oc3RhY2ssIHt9KSkudG9UaHJvdygvQ2Fubm90IGRldGVybWluZSBidWNrZXQgQVJOLiBBdCBsZWFzdCBgYnVja2V0QXJuYCBvciBgYnVja2V0TmFtZWAgaXMgbmVlZGVkLyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdwYXJzZUJ1Y2tldE5hbWUnLCAoKSA9PiB7XG5cbiAgICB0ZXN0KCdleHBsaWNpdCBuYW1lJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBjb25zdCBidWNrZXROYW1lID0gJ2Zvbyc7XG4gICAgICBleHBlY3Qoc3RhY2sucmVzb2x2ZShwYXJzZUJ1Y2tldE5hbWUoc3RhY2ssIHsgYnVja2V0TmFtZSB9KSkpLnRvRXF1YWwoJ2ZvbycpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnZXh0cmFjdCBidWNrZXQgbmFtZSBmcm9tIHN0cmluZyBhcm4nLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IGJ1Y2tldEFybiA9ICdhcm46YXdzOnMzOjo6bXktYnVja2V0JztcbiAgICAgIGV4cGVjdChzdGFjay5yZXNvbHZlKHBhcnNlQnVja2V0TmFtZShzdGFjaywgeyBidWNrZXRBcm4gfSkpKS50b0VxdWFsKCdteS1idWNrZXQnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2NhbiBwYXJzZSBidWNrZXQgbmFtZSBldmVuIGlmIGl0IGNvbnRhaW5zIGEgdG9rZW4nLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IGJ1Y2tldEFybiA9IGBhcm46YXdzOnMzOjo6JHtjZGsuVG9rZW4uYXNTdHJpbmcoeyBSZWY6ICdteS1idWNrZXQnIH0pfWA7XG5cbiAgICAgIGV4cGVjdChcbiAgICAgICAgc3RhY2sucmVzb2x2ZShwYXJzZUJ1Y2tldE5hbWUoc3RhY2ssIHsgYnVja2V0QXJuIH0pKSxcbiAgICAgICkudG9FcXVhbChcbiAgICAgICAgeyBSZWY6ICdteS1idWNrZXQnIH0sXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnZmFpbHMgaWYgQVJOIGhhcyBpbnZhbGlkIGZvcm1hdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgY29uc3QgYnVja2V0QXJuID0gJ2ludmFsaWQtYXJuJztcbiAgICAgIGV4cGVjdCgoKSA9PiBwYXJzZUJ1Y2tldE5hbWUoc3RhY2ssIHsgYnVja2V0QXJuIH0pKS50b1Rocm93KC9BUk5zIG11c3QvKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==