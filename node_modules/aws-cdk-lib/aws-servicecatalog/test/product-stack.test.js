"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const assertions_1 = require("../../assertions");
const lambda = require("../../aws-lambda");
const s3 = require("../../aws-s3");
const s3_assets = require("../../aws-s3-assets");
const sns = require("../../aws-sns");
const cdk = require("../../core");
const constructs_1 = require("constructs");
const servicecatalog = require("../lib");
/* eslint-disable quote-props */
describe('ProductStack', () => {
    test('Asset bucket undefined in product stack without assets', () => {
        // GIVEN
        const app = new cdk.App();
        const mainStack = new cdk.Stack(app, 'MyStack');
        const productStack = new servicecatalog.ProductStack(mainStack, 'MyProductStack');
        // THEN
        expect(productStack._getAssetBucket()).toBeUndefined();
    }),
        test('Used defined Asset bucket in product stack with assets', () => {
            // GIVEN
            const app = new cdk.App({ outdir: 'cdk.out' });
            const mainStack = new cdk.Stack(app, 'MyStack');
            const testAssetBucket = new s3.Bucket(mainStack, 'TestAssetBucket', {
                bucketName: 'test-asset-bucket',
            });
            const productStack = new servicecatalog.ProductStack(mainStack, 'MyProductStack', {
                assetBucket: testAssetBucket,
            });
            new lambda.Function(productStack, 'HelloHandler', {
                runtime: lambda.Runtime.PYTHON_3_9,
                code: lambda.Code.fromAsset(path.join(__dirname, 'assets')),
                handler: 'index.handler',
            });
            // WHEN
            const assembly = app.synth();
            // THEN
            expect(productStack._getAssetBucket()).toBeDefined();
            const template = JSON.parse(fs.readFileSync(path.join(assembly.directory, productStack.templateFile), 'utf-8'));
            assertions_1.Template.fromJSON(template).hasResourceProperties('AWS::Lambda::Function', {
                Code: {
                    S3Bucket: 'test-asset-bucket',
                    S3Key: 'd3833f63e813b3a96ea04c8c50ca98209330867f5f6ac358efca11f85a3476c2.zip',
                },
            });
        });
    test('Use correct assetPath when outdir is absolute', () => {
        // GIVEN
        const app = new cdk.App({ outdir: '/tmp/foobar' });
        const mainStack = new cdk.Stack(app, 'MyStackAbsolutePath');
        const testAssetBucket = new s3.Bucket(mainStack, 'TestAssetBucket', {
            bucketName: 'test-asset-bucket',
        });
        const productStack = new servicecatalog.ProductStack(mainStack, 'MyProductStackAbsolutePath', {
            assetBucket: testAssetBucket,
        });
        new lambda.Function(productStack, 'HelloHandler', {
            runtime: lambda.Runtime.PYTHON_3_9,
            code: lambda.Code.fromAsset(path.join(__dirname, 'assets')),
            handler: 'index.handler',
        });
        // WHEN
        const assembly = app.synth();
        // THEN
        expect(assembly.directory).toBe('/tmp/foobar');
    });
    test('Used defined Asset bucket in product stack with nested assets', () => {
        // GIVEN
        const app = new cdk.App({ outdir: 'cdk.out' });
        const mainStack = new cdk.Stack(app, 'MyStack');
        let templateFileUrl = '';
        class PortfolioStage extends cdk.Stage {
            constructor(scope, id) {
                super(scope, id);
                const portfolioStack = new cdk.Stack(this, 'NestedStack');
                const testAssetBucket = new s3.Bucket(portfolioStack, 'TestAssetBucket', {
                    bucketName: 'test-asset-bucket',
                });
                const productStack = new servicecatalog.ProductStack(portfolioStack, 'MyProductStack', {
                    assetBucket: testAssetBucket,
                });
                new lambda.Function(productStack, 'HelloHandler', {
                    runtime: lambda.Runtime.PYTHON_3_9,
                    code: lambda.Code.fromAsset(path.join(__dirname, 'assets')),
                    handler: 'index.handler',
                });
                expect(productStack._getAssetBucket()).toBeDefined();
                templateFileUrl = productStack.templateFile;
            }
        }
        const portfolioStage = new PortfolioStage(mainStack, 'PortfolioStage');
        // WHEN
        app.synth();
        //THEN
        const template = JSON.parse(fs.readFileSync(path.join(portfolioStage.outdir, templateFileUrl), 'utf-8'));
        assertions_1.Template.fromJSON(template).hasResourceProperties('AWS::Lambda::Function', {
            Code: {
                S3Bucket: 'test-asset-bucket',
                S3Key: 'd3833f63e813b3a96ea04c8c50ca98209330867f5f6ac358efca11f85a3476c2.zip',
            },
        });
    });
    test('fails if bucketName is not specified in product stack with assets', () => {
        // GIVEN
        const app = new cdk.App({ outdir: 'cdk.out' });
        const mainStack = new cdk.Stack(app, 'MyStack');
        const testAssetBucket = new s3.Bucket(mainStack, 'TestAssetBucket', {});
        const productStack = new servicecatalog.ProductStack(mainStack, 'MyProductStack', {
            assetBucket: testAssetBucket,
        });
        // THEN
        expect(() => {
            new s3_assets.Asset(productStack, 'testAsset', {
                path: path.join(__dirname, 'assets'),
            });
        }).toThrow('A bucketName must be provided to use Assets');
    });
    test('fails if Asset bucket is not defined in product stack with assets', () => {
        // GIVEN
        const app = new cdk.App();
        const mainStack = new cdk.Stack(app, 'MyStack');
        const productStack = new servicecatalog.ProductStack(mainStack, 'MyProductStack');
        // THEN
        expect(() => {
            new s3_assets.Asset(productStack, 'testAsset', {
                path: path.join(__dirname, 'assets'),
            });
        }).toThrow('An Asset Bucket must be provided to use Assets');
    });
    test('fails if defined at root', () => {
        // GIVEN
        const app = new cdk.App();
        // THEN
        expect(() => {
            new servicecatalog.ProductStack(app, 'ProductStack');
        }).toThrow(/must be defined within scope of another non-product stack/);
    }),
        test('fails if defined without a parent stack', () => {
            // GIVEN
            const app = new cdk.App();
            const group = new constructs_1.Construct(app, 'group');
            // THEN
            expect(() => {
                new servicecatalog.ProductStack(group, 'ProductStack');
            }).toThrow(/must be defined within scope of another non-product stack/);
        }),
        test('can be defined as a direct child or an indirect child of a Stack', () => {
            // GIVEN
            const parent = new cdk.Stack();
            // THEN
            expect(() => {
                new servicecatalog.ProductStack(parent, 'direct');
            }).not.toThrow();
        });
    test('product stack is not synthesized as a stack artifact into the assembly', () => {
        // GIVEN
        const app = new cdk.App();
        const parentStack = new cdk.Stack(app, 'ParentStack');
        new servicecatalog.ProductStack(parentStack, 'ProductStack');
        // WHEN
        const assembly = app.synth();
        // THEN
        expect(assembly.artifacts.length).toEqual(3);
    });
    test('the template of the product stack is synthesized into the cloud assembly', () => {
        // GIVEN
        const app = new cdk.App();
        const parent = new cdk.Stack(app, 'ParentStack');
        const productStack = new servicecatalog.ProductStack(parent, 'ProductStack');
        new sns.Topic(productStack, 'SNSTopicProduct');
        // WHEN
        const assembly = app.synth();
        // THEN
        const template = JSON.parse(fs.readFileSync(path.join(assembly.directory, productStack.templateFile), 'utf-8'));
        expect(template).toEqual({
            Resources: {
                SNSTopicProduct20605D98: {
                    Type: 'AWS::SNS::Topic',
                },
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1zdGFjay50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHJvZHVjdC1zdGFjay50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixpREFBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLG1DQUFtQztBQUNuQyxpREFBaUQ7QUFDakQscUNBQXFDO0FBQ3JDLGtDQUFrQztBQUNsQywyQ0FBdUM7QUFDdkMseUNBQXlDO0FBRXpDLGdDQUFnQztBQUNoQyxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtJQUM1QixJQUFJLENBQUMsd0RBQXdELEVBQUUsR0FBRyxFQUFFO1FBQ2xFLFFBQVE7UUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMxQixNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUVsRixPQUFPO1FBQ1AsTUFBTSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pELENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyx3REFBd0QsRUFBRSxHQUFHLEVBQUU7WUFDbEUsUUFBUTtZQUNSLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FDckIsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQ3RCLENBQUM7WUFDRixNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ2hELE1BQU0sZUFBZSxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsaUJBQWlCLEVBQUU7Z0JBQ2xFLFVBQVUsRUFBRSxtQkFBbUI7YUFDaEMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxZQUFZLEdBQUcsSUFBSSxjQUFjLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFDaEYsV0FBVyxFQUFFLGVBQWU7YUFDN0IsQ0FBQyxDQUFDO1lBRUgsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxjQUFjLEVBQUU7Z0JBQ2hELE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVU7Z0JBQ2xDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDM0QsT0FBTyxFQUFFLGVBQWU7YUFDekIsQ0FBQyxDQUFDO1lBRUgsT0FBTztZQUNQLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUU3QixPQUFPO1lBQ1AsTUFBTSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3JELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLFlBQVksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDaEgscUJBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMscUJBQXFCLENBQUMsdUJBQXVCLEVBQUU7Z0JBQ3pFLElBQUksRUFBRTtvQkFDSixRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixLQUFLLEVBQUUsc0VBQXNFO2lCQUM5RTthQUNGLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLCtDQUErQyxFQUFFLEdBQUcsRUFBRTtRQUN6RCxRQUFRO1FBQ1IsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUNyQixFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsQ0FDMUIsQ0FBQztRQUNGLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQUM1RCxNQUFNLGVBQWUsR0FBRyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLGlCQUFpQixFQUFFO1lBQ2xFLFVBQVUsRUFBRSxtQkFBbUI7U0FDaEMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxZQUFZLEdBQUcsSUFBSSxjQUFjLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSw0QkFBNEIsRUFBRTtZQUM1RixXQUFXLEVBQUUsZUFBZTtTQUM3QixDQUFDLENBQUM7UUFFSCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLGNBQWMsRUFBRTtZQUNoRCxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVO1lBQ2xDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUMzRCxPQUFPLEVBQUUsZUFBZTtTQUN6QixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTdCLE9BQU87UUFDUCxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywrREFBK0QsRUFBRSxHQUFHLEVBQUU7UUFDekUsUUFBUTtRQUNSLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FDckIsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQ3RCLENBQUM7UUFDRixNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hELElBQUksZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUN6QixNQUFNLGNBQWUsU0FBUSxHQUFHLENBQUMsS0FBSztZQUNwQyxZQUFZLEtBQWdCLEVBQUUsRUFBVTtnQkFDdEMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFFakIsTUFBTSxjQUFjLEdBQWMsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztnQkFFckUsTUFBTSxlQUFlLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxpQkFBaUIsRUFBRTtvQkFDdkUsVUFBVSxFQUFFLG1CQUFtQjtpQkFDaEMsQ0FBQyxDQUFDO2dCQUNILE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLEVBQUU7b0JBQ3JGLFdBQVcsRUFBRSxlQUFlO2lCQUM3QixDQUFDLENBQUM7Z0JBRUgsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxjQUFjLEVBQUU7b0JBQ2hELE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVU7b0JBQ2xDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztvQkFDM0QsT0FBTyxFQUFFLGVBQWU7aUJBQ3pCLENBQUMsQ0FBQztnQkFFSCxNQUFNLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ3JELGVBQWUsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDO2FBQzdDO1NBQ0Y7UUFDRCxNQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUV2RSxPQUFPO1FBQ1AsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRVosTUFBTTtRQUNOLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN6RyxxQkFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyx1QkFBdUIsRUFBRTtZQUN6RSxJQUFJLEVBQUU7Z0JBQ0osUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsS0FBSyxFQUFFLHNFQUFzRTthQUM5RTtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG1FQUFtRSxFQUFFLEdBQUcsRUFBRTtRQUM3RSxRQUFRO1FBQ1IsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUNyQixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsQ0FDdEIsQ0FBQztRQUNGLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxFQUNuRSxDQUFDLENBQUM7UUFDSCxNQUFNLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLGdCQUFnQixFQUFFO1lBQ2hGLFdBQVcsRUFBRSxlQUFlO1NBQzdCLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUU7Z0JBQzdDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUM7YUFDckMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7SUFDNUQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsbUVBQW1FLEVBQUUsR0FBRyxFQUFFO1FBQzdFLFFBQVE7UUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMxQixNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUVsRixPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFO2dCQUM3QyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDO2FBQ3JDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUNwQyxRQUFRO1FBQ1IsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFMUIsT0FBTztRQUNQLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDVixJQUFJLGNBQWMsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQywyREFBMkQsQ0FBQyxDQUFDO0lBQzFFLENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7WUFDbkQsUUFBUTtZQUNSLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksc0JBQVMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFMUMsT0FBTztZQUNQLE1BQU0sQ0FBQyxHQUFHLEVBQUU7Z0JBQ1YsSUFBSSxjQUFjLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQztZQUN6RCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsMkRBQTJELENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUM7UUFFRixJQUFJLENBQUMsa0VBQWtFLEVBQUUsR0FBRyxFQUFFO1lBQzVFLFFBQVE7WUFDUixNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUUvQixPQUFPO1lBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRTtnQkFDVixJQUFJLGNBQWMsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3BELENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx3RUFBd0UsRUFBRSxHQUFHLEVBQUU7UUFDbEYsUUFBUTtRQUNSLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzFCLE1BQU0sV0FBVyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDdEQsSUFBSSxjQUFjLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUU3RCxPQUFPO1FBQ1AsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTdCLE9BQU87UUFDUCxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsMEVBQTBFLEVBQUUsR0FBRyxFQUFFO1FBQ3BGLFFBQVE7UUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMxQixNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDN0UsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBRS9DLE9BQU87UUFDUCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFN0IsT0FBTztRQUNQLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLFlBQVksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDaEgsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUN2QixTQUFTLEVBQUU7Z0JBQ1QsdUJBQXVCLEVBQUU7b0JBQ3ZCLElBQUksRUFBRSxpQkFBaUI7aUJBQ3hCO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vYXNzZXJ0aW9ucyc7XG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSAnLi4vLi4vYXdzLWxhbWJkYSc7XG5pbXBvcnQgKiBhcyBzMyBmcm9tICcuLi8uLi9hd3MtczMnO1xuaW1wb3J0ICogYXMgczNfYXNzZXRzIGZyb20gJy4uLy4uL2F3cy1zMy1hc3NldHMnO1xuaW1wb3J0ICogYXMgc25zIGZyb20gJy4uLy4uL2F3cy1zbnMnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBzZXJ2aWNlY2F0YWxvZyBmcm9tICcuLi9saWInO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBxdW90ZS1wcm9wcyAqL1xuZGVzY3JpYmUoJ1Byb2R1Y3RTdGFjaycsICgpID0+IHtcbiAgdGVzdCgnQXNzZXQgYnVja2V0IHVuZGVmaW5lZCBpbiBwcm9kdWN0IHN0YWNrIHdpdGhvdXQgYXNzZXRzJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbiAgICBjb25zdCBtYWluU3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ015U3RhY2snKTtcbiAgICBjb25zdCBwcm9kdWN0U3RhY2sgPSBuZXcgc2VydmljZWNhdGFsb2cuUHJvZHVjdFN0YWNrKG1haW5TdGFjaywgJ015UHJvZHVjdFN0YWNrJyk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHByb2R1Y3RTdGFjay5fZ2V0QXNzZXRCdWNrZXQoKSkudG9CZVVuZGVmaW5lZCgpO1xuICB9KSxcblxuICB0ZXN0KCdVc2VkIGRlZmluZWQgQXNzZXQgYnVja2V0IGluIHByb2R1Y3Qgc3RhY2sgd2l0aCBhc3NldHMnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBhcHAgPSBuZXcgY2RrLkFwcChcbiAgICAgIHsgb3V0ZGlyOiAnY2RrLm91dCcgfSxcbiAgICApO1xuICAgIGNvbnN0IG1haW5TdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnTXlTdGFjaycpO1xuICAgIGNvbnN0IHRlc3RBc3NldEJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQobWFpblN0YWNrLCAnVGVzdEFzc2V0QnVja2V0Jywge1xuICAgICAgYnVja2V0TmFtZTogJ3Rlc3QtYXNzZXQtYnVja2V0JyxcbiAgICB9KTtcbiAgICBjb25zdCBwcm9kdWN0U3RhY2sgPSBuZXcgc2VydmljZWNhdGFsb2cuUHJvZHVjdFN0YWNrKG1haW5TdGFjaywgJ015UHJvZHVjdFN0YWNrJywge1xuICAgICAgYXNzZXRCdWNrZXQ6IHRlc3RBc3NldEJ1Y2tldCxcbiAgICB9KTtcblxuICAgIG5ldyBsYW1iZGEuRnVuY3Rpb24ocHJvZHVjdFN0YWNrLCAnSGVsbG9IYW5kbGVyJywge1xuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuUFlUSE9OXzNfOSxcbiAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldChwYXRoLmpvaW4oX19kaXJuYW1lLCAnYXNzZXRzJykpLFxuICAgICAgaGFuZGxlcjogJ2luZGV4LmhhbmRsZXInLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGFzc2VtYmx5ID0gYXBwLnN5bnRoKCk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHByb2R1Y3RTdGFjay5fZ2V0QXNzZXRCdWNrZXQoKSkudG9CZURlZmluZWQoKTtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihhc3NlbWJseS5kaXJlY3RvcnksIHByb2R1Y3RTdGFjay50ZW1wbGF0ZUZpbGUpLCAndXRmLTgnKSk7XG4gICAgVGVtcGxhdGUuZnJvbUpTT04odGVtcGxhdGUpLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpMYW1iZGE6OkZ1bmN0aW9uJywge1xuICAgICAgQ29kZToge1xuICAgICAgICBTM0J1Y2tldDogJ3Rlc3QtYXNzZXQtYnVja2V0JyxcbiAgICAgICAgUzNLZXk6ICdkMzgzM2Y2M2U4MTNiM2E5NmVhMDRjOGM1MGNhOTgyMDkzMzA4NjdmNWY2YWMzNThlZmNhMTFmODVhMzQ3NmMyLnppcCcsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdVc2UgY29ycmVjdCBhc3NldFBhdGggd2hlbiBvdXRkaXIgaXMgYWJzb2x1dGUnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBhcHAgPSBuZXcgY2RrLkFwcChcbiAgICAgIHsgb3V0ZGlyOiAnL3RtcC9mb29iYXInIH0sXG4gICAgKTtcbiAgICBjb25zdCBtYWluU3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ015U3RhY2tBYnNvbHV0ZVBhdGgnKTtcbiAgICBjb25zdCB0ZXN0QXNzZXRCdWNrZXQgPSBuZXcgczMuQnVja2V0KG1haW5TdGFjaywgJ1Rlc3RBc3NldEJ1Y2tldCcsIHtcbiAgICAgIGJ1Y2tldE5hbWU6ICd0ZXN0LWFzc2V0LWJ1Y2tldCcsXG4gICAgfSk7XG4gICAgY29uc3QgcHJvZHVjdFN0YWNrID0gbmV3IHNlcnZpY2VjYXRhbG9nLlByb2R1Y3RTdGFjayhtYWluU3RhY2ssICdNeVByb2R1Y3RTdGFja0Fic29sdXRlUGF0aCcsIHtcbiAgICAgIGFzc2V0QnVja2V0OiB0ZXN0QXNzZXRCdWNrZXQsXG4gICAgfSk7XG5cbiAgICBuZXcgbGFtYmRhLkZ1bmN0aW9uKHByb2R1Y3RTdGFjaywgJ0hlbGxvSGFuZGxlcicsIHtcbiAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLlBZVEhPTl8zXzksXG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJ2Fzc2V0cycpKSxcbiAgICAgIGhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBhc3NlbWJseSA9IGFwcC5zeW50aCgpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChhc3NlbWJseS5kaXJlY3RvcnkpLnRvQmUoJy90bXAvZm9vYmFyJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ1VzZWQgZGVmaW5lZCBBc3NldCBidWNrZXQgaW4gcHJvZHVjdCBzdGFjayB3aXRoIG5lc3RlZCBhc3NldHMnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBhcHAgPSBuZXcgY2RrLkFwcChcbiAgICAgIHsgb3V0ZGlyOiAnY2RrLm91dCcgfSxcbiAgICApO1xuICAgIGNvbnN0IG1haW5TdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnTXlTdGFjaycpO1xuICAgIGxldCB0ZW1wbGF0ZUZpbGVVcmwgPSAnJztcbiAgICBjbGFzcyBQb3J0Zm9saW9TdGFnZSBleHRlbmRzIGNkay5TdGFnZSB7XG4gICAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3QgcG9ydGZvbGlvU3RhY2s6IGNkay5TdGFjayA9IG5ldyBjZGsuU3RhY2sodGhpcywgJ05lc3RlZFN0YWNrJyk7XG5cbiAgICAgICAgY29uc3QgdGVzdEFzc2V0QnVja2V0ID0gbmV3IHMzLkJ1Y2tldChwb3J0Zm9saW9TdGFjaywgJ1Rlc3RBc3NldEJ1Y2tldCcsIHtcbiAgICAgICAgICBidWNrZXROYW1lOiAndGVzdC1hc3NldC1idWNrZXQnLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcHJvZHVjdFN0YWNrID0gbmV3IHNlcnZpY2VjYXRhbG9nLlByb2R1Y3RTdGFjayhwb3J0Zm9saW9TdGFjaywgJ015UHJvZHVjdFN0YWNrJywge1xuICAgICAgICAgIGFzc2V0QnVja2V0OiB0ZXN0QXNzZXRCdWNrZXQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBsYW1iZGEuRnVuY3Rpb24ocHJvZHVjdFN0YWNrLCAnSGVsbG9IYW5kbGVyJywge1xuICAgICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLlBZVEhPTl8zXzksXG4gICAgICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KHBhdGguam9pbihfX2Rpcm5hbWUsICdhc3NldHMnKSksXG4gICAgICAgICAgaGFuZGxlcjogJ2luZGV4LmhhbmRsZXInLFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QocHJvZHVjdFN0YWNrLl9nZXRBc3NldEJ1Y2tldCgpKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICB0ZW1wbGF0ZUZpbGVVcmwgPSBwcm9kdWN0U3RhY2sudGVtcGxhdGVGaWxlO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwb3J0Zm9saW9TdGFnZSA9IG5ldyBQb3J0Zm9saW9TdGFnZShtYWluU3RhY2ssICdQb3J0Zm9saW9TdGFnZScpO1xuXG4gICAgLy8gV0hFTlxuICAgIGFwcC5zeW50aCgpO1xuXG4gICAgLy9USEVOXG4gICAgY29uc3QgdGVtcGxhdGUgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4ocG9ydGZvbGlvU3RhZ2Uub3V0ZGlyLCB0ZW1wbGF0ZUZpbGVVcmwpLCAndXRmLTgnKSk7XG4gICAgVGVtcGxhdGUuZnJvbUpTT04odGVtcGxhdGUpLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpMYW1iZGE6OkZ1bmN0aW9uJywge1xuICAgICAgQ29kZToge1xuICAgICAgICBTM0J1Y2tldDogJ3Rlc3QtYXNzZXQtYnVja2V0JyxcbiAgICAgICAgUzNLZXk6ICdkMzgzM2Y2M2U4MTNiM2E5NmVhMDRjOGM1MGNhOTgyMDkzMzA4NjdmNWY2YWMzNThlZmNhMTFmODVhMzQ3NmMyLnppcCcsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdmYWlscyBpZiBidWNrZXROYW1lIGlzIG5vdCBzcGVjaWZpZWQgaW4gcHJvZHVjdCBzdGFjayB3aXRoIGFzc2V0cycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKFxuICAgICAgeyBvdXRkaXI6ICdjZGsub3V0JyB9LFxuICAgICk7XG4gICAgY29uc3QgbWFpblN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdNeVN0YWNrJyk7XG4gICAgY29uc3QgdGVzdEFzc2V0QnVja2V0ID0gbmV3IHMzLkJ1Y2tldChtYWluU3RhY2ssICdUZXN0QXNzZXRCdWNrZXQnLCB7XG4gICAgfSk7XG4gICAgY29uc3QgcHJvZHVjdFN0YWNrID0gbmV3IHNlcnZpY2VjYXRhbG9nLlByb2R1Y3RTdGFjayhtYWluU3RhY2ssICdNeVByb2R1Y3RTdGFjaycsIHtcbiAgICAgIGFzc2V0QnVja2V0OiB0ZXN0QXNzZXRCdWNrZXQsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIG5ldyBzM19hc3NldHMuQXNzZXQocHJvZHVjdFN0YWNrLCAndGVzdEFzc2V0Jywge1xuICAgICAgICBwYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnYXNzZXRzJyksXG4gICAgICB9KTtcbiAgICB9KS50b1Rocm93KCdBIGJ1Y2tldE5hbWUgbXVzdCBiZSBwcm92aWRlZCB0byB1c2UgQXNzZXRzJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2ZhaWxzIGlmIEFzc2V0IGJ1Y2tldCBpcyBub3QgZGVmaW5lZCBpbiBwcm9kdWN0IHN0YWNrIHdpdGggYXNzZXRzJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbiAgICBjb25zdCBtYWluU3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ015U3RhY2snKTtcbiAgICBjb25zdCBwcm9kdWN0U3RhY2sgPSBuZXcgc2VydmljZWNhdGFsb2cuUHJvZHVjdFN0YWNrKG1haW5TdGFjaywgJ015UHJvZHVjdFN0YWNrJyk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIG5ldyBzM19hc3NldHMuQXNzZXQocHJvZHVjdFN0YWNrLCAndGVzdEFzc2V0Jywge1xuICAgICAgICBwYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnYXNzZXRzJyksXG4gICAgICB9KTtcbiAgICB9KS50b1Rocm93KCdBbiBBc3NldCBCdWNrZXQgbXVzdCBiZSBwcm92aWRlZCB0byB1c2UgQXNzZXRzJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2ZhaWxzIGlmIGRlZmluZWQgYXQgcm9vdCcsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIG5ldyBzZXJ2aWNlY2F0YWxvZy5Qcm9kdWN0U3RhY2soYXBwLCAnUHJvZHVjdFN0YWNrJyk7XG4gICAgfSkudG9UaHJvdygvbXVzdCBiZSBkZWZpbmVkIHdpdGhpbiBzY29wZSBvZiBhbm90aGVyIG5vbi1wcm9kdWN0IHN0YWNrLyk7XG4gIH0pLFxuXG4gIHRlc3QoJ2ZhaWxzIGlmIGRlZmluZWQgd2l0aG91dCBhIHBhcmVudCBzdGFjaycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG4gICAgY29uc3QgZ3JvdXAgPSBuZXcgQ29uc3RydWN0KGFwcCwgJ2dyb3VwJyk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIG5ldyBzZXJ2aWNlY2F0YWxvZy5Qcm9kdWN0U3RhY2soZ3JvdXAsICdQcm9kdWN0U3RhY2snKTtcbiAgICB9KS50b1Rocm93KC9tdXN0IGJlIGRlZmluZWQgd2l0aGluIHNjb3BlIG9mIGFub3RoZXIgbm9uLXByb2R1Y3Qgc3RhY2svKTtcbiAgfSksXG5cbiAgdGVzdCgnY2FuIGJlIGRlZmluZWQgYXMgYSBkaXJlY3QgY2hpbGQgb3IgYW4gaW5kaXJlY3QgY2hpbGQgb2YgYSBTdGFjaycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHBhcmVudCA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgbmV3IHNlcnZpY2VjYXRhbG9nLlByb2R1Y3RTdGFjayhwYXJlbnQsICdkaXJlY3QnKTtcbiAgICB9KS5ub3QudG9UaHJvdygpO1xuICB9KTtcblxuICB0ZXN0KCdwcm9kdWN0IHN0YWNrIGlzIG5vdCBzeW50aGVzaXplZCBhcyBhIHN0YWNrIGFydGlmYWN0IGludG8gdGhlIGFzc2VtYmx5JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbiAgICBjb25zdCBwYXJlbnRTdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnUGFyZW50U3RhY2snKTtcbiAgICBuZXcgc2VydmljZWNhdGFsb2cuUHJvZHVjdFN0YWNrKHBhcmVudFN0YWNrLCAnUHJvZHVjdFN0YWNrJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgYXNzZW1ibHkgPSBhcHAuc3ludGgoKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoYXNzZW1ibHkuYXJ0aWZhY3RzLmxlbmd0aCkudG9FcXVhbCgzKTtcbiAgfSk7XG5cbiAgdGVzdCgndGhlIHRlbXBsYXRlIG9mIHRoZSBwcm9kdWN0IHN0YWNrIGlzIHN5bnRoZXNpemVkIGludG8gdGhlIGNsb3VkIGFzc2VtYmx5JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbiAgICBjb25zdCBwYXJlbnQgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ1BhcmVudFN0YWNrJyk7XG4gICAgY29uc3QgcHJvZHVjdFN0YWNrID0gbmV3IHNlcnZpY2VjYXRhbG9nLlByb2R1Y3RTdGFjayhwYXJlbnQsICdQcm9kdWN0U3RhY2snKTtcbiAgICBuZXcgc25zLlRvcGljKHByb2R1Y3RTdGFjaywgJ1NOU1RvcGljUHJvZHVjdCcpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGFzc2VtYmx5ID0gYXBwLnN5bnRoKCk7XG5cbiAgICAvLyBUSEVOXG4gICAgY29uc3QgdGVtcGxhdGUgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oYXNzZW1ibHkuZGlyZWN0b3J5LCBwcm9kdWN0U3RhY2sudGVtcGxhdGVGaWxlKSwgJ3V0Zi04JykpO1xuICAgIGV4cGVjdCh0ZW1wbGF0ZSkudG9FcXVhbCh7XG4gICAgICBSZXNvdXJjZXM6IHtcbiAgICAgICAgU05TVG9waWNQcm9kdWN0MjA2MDVEOTg6IHtcbiAgICAgICAgICBUeXBlOiAnQVdTOjpTTlM6OlRvcGljJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=