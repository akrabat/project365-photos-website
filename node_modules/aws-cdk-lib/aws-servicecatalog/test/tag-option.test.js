"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const cdk = require("../../core");
const servicecatalog = require("../lib");
describe('TagOptions', () => {
    let app;
    let stack;
    beforeEach(() => {
        app = new cdk.App();
        stack = new cdk.Stack(app);
    });
    describe('creating tagOption(s)', () => {
        test('default tagOptions creation', () => {
            new servicecatalog.TagOptions(stack, 'TagOptions', {
                allowedValuesForTags: {
                    key1: ['value1', 'value2'],
                    key2: ['value1', 'value2', 'value3'],
                },
            });
            assertions_1.Template.fromStack(stack).resourceCountIs('AWS::ServiceCatalog::TagOption', 5);
        }),
            test('fails to create tag option with invalid minimum key length', () => {
                expect(() => {
                    new servicecatalog.TagOptions(stack, 'TagOptions', {
                        allowedValuesForTags: {
                            '': ['value1', 'value2'],
                        },
                    });
                }).toThrowError(/Invalid TagOption key for resource/);
            }),
            test('fails to create tag option with invalid maxium key length', () => {
                expect(() => {
                    new servicecatalog.TagOptions(stack, 'TagOptions', {
                        allowedValuesForTags: {
                            ['longKey'.repeat(1000)]: ['value1', 'value2'],
                        },
                    });
                }).toThrowError(/Invalid TagOption key for resource/);
            }),
            test('fails to create tag option with invalid value length', () => {
                expect(() => {
                    new servicecatalog.TagOptions(stack, 'TagOptions', {
                        allowedValuesForTags: {
                            key: ['tagOptionValue'.repeat(1000)],
                        },
                    });
                }).toThrowError(/Invalid TagOption value for resource/);
            }),
            test('fails to create tag options with no tag keys or values', () => {
                expect(() => {
                    new servicecatalog.TagOptions(stack, 'TagOptions', {
                        allowedValuesForTags: {},
                    });
                }).toThrowError(/No tag option keys or values were provided/);
            }),
            test('fails to create tag options for tag key with no values', () => {
                expect(() => {
                    new servicecatalog.TagOptions(stack, 'TagOptions', {
                        allowedValuesForTags: {
                            key1: ['value1', 'value2'],
                            key2: [],
                        },
                    });
                }).toThrowError(/No tag option values were provided for tag option key/);
            }),
            test('associate tag options', () => {
                const portfolio = new servicecatalog.Portfolio(stack, 'MyPortfolio', {
                    displayName: 'testPortfolio',
                    providerName: 'testProvider',
                });
                const tagOptions = new servicecatalog.TagOptions(stack, 'TagOptions', {
                    allowedValuesForTags: {
                        key1: ['value1', 'value2'],
                        key2: ['value1', 'value2', 'value3'],
                    },
                });
                portfolio.associateTagOptions(tagOptions);
                assertions_1.Template.fromStack(stack).hasResource('AWS::ServiceCatalog::TagOption', 5);
                assertions_1.Template.fromStack(stack).hasResource('AWS::ServiceCatalog::TagOptionAssociation', 5);
            }),
            test('creating tag options with duplicate values is idempotent', () => {
                const portfolio = new servicecatalog.Portfolio(stack, 'MyPortfolio', {
                    displayName: 'testPortfolio',
                    providerName: 'testProvider',
                });
                const tagOptions = new servicecatalog.TagOptions(stack, 'TagOptions', {
                    allowedValuesForTags: {
                        key1: ['value1', 'value2', 'value2'],
                        key2: ['value1', 'value2', 'value3', 'value3'],
                    },
                });
                portfolio.associateTagOptions(tagOptions);
                assertions_1.Template.fromStack(stack).hasResource('AWS::ServiceCatalog::TagOption', 5);
                assertions_1.Template.fromStack(stack).hasResource('AWS::ServiceCatalog::TagOptionAssociation', 5);
            }),
            test('create and associate tag options to different resources', () => {
                const portfolio1 = new servicecatalog.Portfolio(stack, 'MyPortfolio1', {
                    displayName: 'testPortfolio1',
                    providerName: 'testProvider1',
                });
                const portfolio2 = new servicecatalog.Portfolio(stack, 'MyPortfolio2', {
                    displayName: 'testPortfolio2',
                    providerName: 'testProvider2',
                });
                const tagOptions = new servicecatalog.TagOptions(stack, 'TagOptions', {
                    allowedValuesForTags: {
                        key1: ['value1', 'value2'],
                        key2: ['value1', 'value2', 'value3'],
                    },
                });
                portfolio1.associateTagOptions(tagOptions);
                portfolio2.associateTagOptions(tagOptions);
                assertions_1.Template.fromStack(stack).hasResource('AWS::ServiceCatalog::TagOption', 5);
                assertions_1.Template.fromStack(stack).hasResource('AWS::ServiceCatalog::TagOptionAssociation', 10);
            }),
            test('adding tag options to portfolio and product creates unique tag options and enumerated associations', () => {
                const tagOptions = new servicecatalog.TagOptions(stack, 'TagOptions', {
                    allowedValuesForTags: {
                        key1: ['value1', 'value2'],
                        key2: ['value1'],
                    },
                });
                const portfolio = new servicecatalog.Portfolio(stack, 'MyPortfolio', {
                    displayName: 'testPortfolio',
                    providerName: 'testProvider',
                });
                const product = new servicecatalog.CloudFormationProduct(stack, 'MyProduct', {
                    productName: 'testProduct',
                    owner: 'testOwner',
                    productVersions: [
                        {
                            cloudFormationTemplate: servicecatalog.CloudFormationTemplate.fromUrl('https://awsdocs.s3.amazonaws.com/servicecatalog/development-environment.template'),
                        },
                    ],
                    tagOptions: tagOptions,
                });
                portfolio.associateTagOptions(tagOptions);
                product.associateTagOptions(tagOptions);
                assertions_1.Template.fromStack(stack).resourceCountIs('AWS::ServiceCatalog::TagOption', 3); //Generates a resource for each unique key-value pair
                assertions_1.Template.fromStack(stack).resourceCountIs('AWS::ServiceCatalog::TagOptionAssociation', 6);
            });
        test('create and associate tag options in another stack', () => {
            const tagOptionsStack = new cdk.Stack(app, 'TagOptionsStack');
            const productStack = new cdk.Stack(app, 'ProductStack');
            const tagOptions = new servicecatalog.TagOptions(tagOptionsStack, 'TagOptions', {
                allowedValuesForTags: {
                    key1: ['value1', 'value2'],
                    key2: ['value1', 'value2', 'value3'],
                },
            });
            new servicecatalog.CloudFormationProduct(productStack, 'MyProduct', {
                productName: 'testProduct',
                owner: 'testOwner',
                productVersions: [
                    {
                        cloudFormationTemplate: servicecatalog.CloudFormationTemplate.fromUrl('https://awsdocs.s3.amazonaws.com/servicecatalog/development-environment.template'),
                    },
                ],
                tagOptions: tagOptions,
            });
            assertions_1.Template.fromStack(tagOptionsStack).hasResource('AWS::ServiceCatalog::TagOption', 5);
            assertions_1.Template.fromStack(productStack).resourceCountIs('AWS::ServiceCatalog::TagOption', 0);
            assertions_1.Template.fromStack(productStack).hasResource('AWS::ServiceCatalog::TagOptionAssociation', 5);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLW9wdGlvbi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGFnLW9wdGlvbi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLGtDQUFrQztBQUNsQyx5Q0FBeUM7QUFFekMsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFDMUIsSUFBSSxHQUFZLENBQUM7SUFDakIsSUFBSSxLQUFnQixDQUFDO0lBRXJCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDcEIsS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7UUFDckMsSUFBSSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtZQUN2QyxJQUFJLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtnQkFDakQsb0JBQW9CLEVBQUU7b0JBQ3BCLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7b0JBQzFCLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDO2lCQUNyQzthQUNGLENBQUMsQ0FBQztZQUVILHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLGVBQWUsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqRixDQUFDLENBQUM7WUFFRixJQUFJLENBQUMsNERBQTRELEVBQUUsR0FBRyxFQUFFO2dCQUN0RSxNQUFNLENBQUMsR0FBRyxFQUFFO29CQUNWLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO3dCQUNqRCxvQkFBb0IsRUFBRTs0QkFDcEIsRUFBRSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQzt5QkFDekI7cUJBQ0YsQ0FBQyxDQUFDO2dCQUNMLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1lBQ3hELENBQUMsQ0FBQztZQUVGLElBQUksQ0FBQywyREFBMkQsRUFBRSxHQUFHLEVBQUU7Z0JBQ3JFLE1BQU0sQ0FBQyxHQUFHLEVBQUU7b0JBQ1YsSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7d0JBQ2pELG9CQUFvQixFQUFFOzRCQUNwQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7eUJBQy9DO3FCQUNGLENBQUMsQ0FBQztnQkFDTCxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsb0NBQW9DLENBQUMsQ0FBQztZQUN4RCxDQUFDLENBQUM7WUFFRixJQUFJLENBQUMsc0RBQXNELEVBQUUsR0FBRyxFQUFFO2dCQUNoRSxNQUFNLENBQUMsR0FBRyxFQUFFO29CQUNWLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO3dCQUNqRCxvQkFBb0IsRUFBRTs0QkFDcEIsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO3lCQUNyQztxQkFDRixDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLHNDQUFzQyxDQUFDLENBQUM7WUFDMUQsQ0FBQyxDQUFDO1lBRUYsSUFBSSxDQUFDLHdEQUF3RCxFQUFFLEdBQUcsRUFBRTtnQkFDbEUsTUFBTSxDQUFDLEdBQUcsRUFBRTtvQkFDVixJQUFJLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTt3QkFDakQsb0JBQW9CLEVBQUUsRUFBRTtxQkFDekIsQ0FBQyxDQUFDO2dCQUNMLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1lBQ2hFLENBQUMsQ0FBQztZQUVGLElBQUksQ0FBQyx3REFBd0QsRUFBRSxHQUFHLEVBQUU7Z0JBQ2xFLE1BQU0sQ0FBQyxHQUFHLEVBQUU7b0JBQ1YsSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7d0JBQ2pELG9CQUFvQixFQUFFOzRCQUNwQixJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDOzRCQUMxQixJQUFJLEVBQUUsRUFBRTt5QkFDVDtxQkFDRixDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLHVEQUF1RCxDQUFDLENBQUM7WUFDM0UsQ0FBQyxDQUFDO1lBRUYsSUFBSSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtnQkFDakMsTUFBTSxTQUFTLEdBQUcsSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUU7b0JBQ25FLFdBQVcsRUFBRSxlQUFlO29CQUM1QixZQUFZLEVBQUUsY0FBYztpQkFDN0IsQ0FBQyxDQUFDO2dCQUVILE1BQU0sVUFBVSxHQUFHLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO29CQUNwRSxvQkFBb0IsRUFBRTt3QkFDcEIsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQzt3QkFDMUIsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7cUJBQ3JDO2lCQUNGLENBQUMsQ0FBQztnQkFDSCxTQUFTLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBRTFDLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDM0UscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLDJDQUEyQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3hGLENBQUMsQ0FBQztZQUVGLElBQUksQ0FBQywwREFBMEQsRUFBRSxHQUFHLEVBQUU7Z0JBQ3BFLE1BQU0sU0FBUyxHQUFHLElBQUksY0FBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO29CQUNuRSxXQUFXLEVBQUUsZUFBZTtvQkFDNUIsWUFBWSxFQUFFLGNBQWM7aUJBQzdCLENBQUMsQ0FBQztnQkFFSCxNQUFNLFVBQVUsR0FBRyxJQUFJLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtvQkFDcEUsb0JBQW9CLEVBQUU7d0JBQ3BCLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDO3dCQUNwQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7cUJBQy9DO2lCQUNGLENBQUMsQ0FBQztnQkFDSCxTQUFTLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBRTFDLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDM0UscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLDJDQUEyQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3hGLENBQUMsQ0FBQztZQUVGLElBQUksQ0FBQyx5REFBeUQsRUFBRSxHQUFHLEVBQUU7Z0JBQ25FLE1BQU0sVUFBVSxHQUFHLElBQUksY0FBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO29CQUNyRSxXQUFXLEVBQUUsZ0JBQWdCO29CQUM3QixZQUFZLEVBQUUsZUFBZTtpQkFDOUIsQ0FBQyxDQUFDO2dCQUVILE1BQU0sVUFBVSxHQUFHLElBQUksY0FBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO29CQUNyRSxXQUFXLEVBQUUsZ0JBQWdCO29CQUM3QixZQUFZLEVBQUUsZUFBZTtpQkFDOUIsQ0FBQyxDQUFDO2dCQUVILE1BQU0sVUFBVSxHQUFHLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO29CQUNwRSxvQkFBb0IsRUFBRTt3QkFDcEIsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQzt3QkFDMUIsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7cUJBQ3JDO2lCQUNGLENBQUMsQ0FBQztnQkFFSCxVQUFVLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzNDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFFM0MscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLGdDQUFnQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUMzRSxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUMsMkNBQTJDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDekYsQ0FBQyxDQUFDO1lBRUYsSUFBSSxDQUFDLG9HQUFvRyxFQUFFLEdBQUcsRUFBRTtnQkFDOUcsTUFBTSxVQUFVLEdBQUcsSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7b0JBQ3BFLG9CQUFvQixFQUFFO3dCQUNwQixJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO3dCQUMxQixJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUM7cUJBQ2pCO2lCQUNGLENBQUMsQ0FBQztnQkFFSCxNQUFNLFNBQVMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRTtvQkFDbkUsV0FBVyxFQUFFLGVBQWU7b0JBQzVCLFlBQVksRUFBRSxjQUFjO2lCQUM3QixDQUFDLENBQUM7Z0JBRUgsTUFBTSxPQUFPLEdBQUcsSUFBSSxjQUFjLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtvQkFDM0UsV0FBVyxFQUFFLGFBQWE7b0JBQzFCLEtBQUssRUFBRSxXQUFXO29CQUNsQixlQUFlLEVBQUU7d0JBQ2Y7NEJBQ0Usc0JBQXNCLEVBQUUsY0FBYyxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxrRkFBa0YsQ0FBQzt5QkFDMUo7cUJBQ0Y7b0JBQ0QsVUFBVSxFQUFFLFVBQVU7aUJBQ3ZCLENBQUMsQ0FBQztnQkFFSCxTQUFTLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFFeEMscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsZUFBZSxDQUFDLGdDQUFnQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMscURBQXFEO2dCQUNySSxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUMsMkNBQTJDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUYsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsbURBQW1ELEVBQUUsR0FBRyxFQUFFO1lBQzdELE1BQU0sZUFBZSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBRXhELE1BQU0sVUFBVSxHQUFHLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsWUFBWSxFQUFFO2dCQUM5RSxvQkFBb0IsRUFBRTtvQkFDcEIsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztvQkFDMUIsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7aUJBQ3JDO2FBQ0YsQ0FBQyxDQUFDO1lBRUgsSUFBSSxjQUFjLENBQUMscUJBQXFCLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRTtnQkFDbEUsV0FBVyxFQUFFLGFBQWE7Z0JBQzFCLEtBQUssRUFBRSxXQUFXO2dCQUNsQixlQUFlLEVBQUU7b0JBQ2Y7d0JBQ0Usc0JBQXNCLEVBQUUsY0FBYyxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxrRkFBa0YsQ0FBQztxQkFDMUo7aUJBQ0Y7Z0JBQ0QsVUFBVSxFQUFFLFVBQVU7YUFDdkIsQ0FBQyxDQUFDO1lBRUgscUJBQVEsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUMsV0FBVyxDQUFDLGdDQUFnQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JGLHFCQUFRLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN0RixxQkFBUSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLENBQUMsMkNBQTJDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIHNlcnZpY2VjYXRhbG9nIGZyb20gJy4uL2xpYic7XG5cbmRlc2NyaWJlKCdUYWdPcHRpb25zJywgKCkgPT4ge1xuICBsZXQgYXBwOiBjZGsuQXBwO1xuICBsZXQgc3RhY2s6IGNkay5TdGFjaztcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuICAgIHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHApO1xuICB9KTtcblxuICBkZXNjcmliZSgnY3JlYXRpbmcgdGFnT3B0aW9uKHMpJywgKCkgPT4ge1xuICAgIHRlc3QoJ2RlZmF1bHQgdGFnT3B0aW9ucyBjcmVhdGlvbicsICgpID0+IHtcbiAgICAgIG5ldyBzZXJ2aWNlY2F0YWxvZy5UYWdPcHRpb25zKHN0YWNrLCAnVGFnT3B0aW9ucycsIHtcbiAgICAgICAgYWxsb3dlZFZhbHVlc0ZvclRhZ3M6IHtcbiAgICAgICAgICBrZXkxOiBbJ3ZhbHVlMScsICd2YWx1ZTInXSxcbiAgICAgICAgICBrZXkyOiBbJ3ZhbHVlMScsICd2YWx1ZTInLCAndmFsdWUzJ10sXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6U2VydmljZUNhdGFsb2c6OlRhZ09wdGlvbicsIDUpO1xuICAgIH0pLFxuXG4gICAgdGVzdCgnZmFpbHMgdG8gY3JlYXRlIHRhZyBvcHRpb24gd2l0aCBpbnZhbGlkIG1pbmltdW0ga2V5IGxlbmd0aCcsICgpID0+IHtcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIG5ldyBzZXJ2aWNlY2F0YWxvZy5UYWdPcHRpb25zKHN0YWNrLCAnVGFnT3B0aW9ucycsIHtcbiAgICAgICAgICBhbGxvd2VkVmFsdWVzRm9yVGFnczoge1xuICAgICAgICAgICAgJyc6IFsndmFsdWUxJywgJ3ZhbHVlMiddLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSkudG9UaHJvd0Vycm9yKC9JbnZhbGlkIFRhZ09wdGlvbiBrZXkgZm9yIHJlc291cmNlLyk7XG4gICAgfSksXG5cbiAgICB0ZXN0KCdmYWlscyB0byBjcmVhdGUgdGFnIG9wdGlvbiB3aXRoIGludmFsaWQgbWF4aXVtIGtleSBsZW5ndGgnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICBuZXcgc2VydmljZWNhdGFsb2cuVGFnT3B0aW9ucyhzdGFjaywgJ1RhZ09wdGlvbnMnLCB7XG4gICAgICAgICAgYWxsb3dlZFZhbHVlc0ZvclRhZ3M6IHtcbiAgICAgICAgICAgIFsnbG9uZ0tleScucmVwZWF0KDEwMDApXTogWyd2YWx1ZTEnLCAndmFsdWUyJ10sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9KS50b1Rocm93RXJyb3IoL0ludmFsaWQgVGFnT3B0aW9uIGtleSBmb3IgcmVzb3VyY2UvKTtcbiAgICB9KSxcblxuICAgIHRlc3QoJ2ZhaWxzIHRvIGNyZWF0ZSB0YWcgb3B0aW9uIHdpdGggaW52YWxpZCB2YWx1ZSBsZW5ndGgnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICBuZXcgc2VydmljZWNhdGFsb2cuVGFnT3B0aW9ucyhzdGFjaywgJ1RhZ09wdGlvbnMnLCB7XG4gICAgICAgICAgYWxsb3dlZFZhbHVlc0ZvclRhZ3M6IHtcbiAgICAgICAgICAgIGtleTogWyd0YWdPcHRpb25WYWx1ZScucmVwZWF0KDEwMDApXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0pLnRvVGhyb3dFcnJvcigvSW52YWxpZCBUYWdPcHRpb24gdmFsdWUgZm9yIHJlc291cmNlLyk7XG4gICAgfSksXG5cbiAgICB0ZXN0KCdmYWlscyB0byBjcmVhdGUgdGFnIG9wdGlvbnMgd2l0aCBubyB0YWcga2V5cyBvciB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICBuZXcgc2VydmljZWNhdGFsb2cuVGFnT3B0aW9ucyhzdGFjaywgJ1RhZ09wdGlvbnMnLCB7XG4gICAgICAgICAgYWxsb3dlZFZhbHVlc0ZvclRhZ3M6IHt9LFxuICAgICAgICB9KTtcbiAgICAgIH0pLnRvVGhyb3dFcnJvcigvTm8gdGFnIG9wdGlvbiBrZXlzIG9yIHZhbHVlcyB3ZXJlIHByb3ZpZGVkLyk7XG4gICAgfSksXG5cbiAgICB0ZXN0KCdmYWlscyB0byBjcmVhdGUgdGFnIG9wdGlvbnMgZm9yIHRhZyBrZXkgd2l0aCBubyB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICBuZXcgc2VydmljZWNhdGFsb2cuVGFnT3B0aW9ucyhzdGFjaywgJ1RhZ09wdGlvbnMnLCB7XG4gICAgICAgICAgYWxsb3dlZFZhbHVlc0ZvclRhZ3M6IHtcbiAgICAgICAgICAgIGtleTE6IFsndmFsdWUxJywgJ3ZhbHVlMiddLFxuICAgICAgICAgICAga2V5MjogW10sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9KS50b1Rocm93RXJyb3IoL05vIHRhZyBvcHRpb24gdmFsdWVzIHdlcmUgcHJvdmlkZWQgZm9yIHRhZyBvcHRpb24ga2V5Lyk7XG4gICAgfSksXG5cbiAgICB0ZXN0KCdhc3NvY2lhdGUgdGFnIG9wdGlvbnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBwb3J0Zm9saW8gPSBuZXcgc2VydmljZWNhdGFsb2cuUG9ydGZvbGlvKHN0YWNrLCAnTXlQb3J0Zm9saW8nLCB7XG4gICAgICAgIGRpc3BsYXlOYW1lOiAndGVzdFBvcnRmb2xpbycsXG4gICAgICAgIHByb3ZpZGVyTmFtZTogJ3Rlc3RQcm92aWRlcicsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgdGFnT3B0aW9ucyA9IG5ldyBzZXJ2aWNlY2F0YWxvZy5UYWdPcHRpb25zKHN0YWNrLCAnVGFnT3B0aW9ucycsIHtcbiAgICAgICAgYWxsb3dlZFZhbHVlc0ZvclRhZ3M6IHtcbiAgICAgICAgICBrZXkxOiBbJ3ZhbHVlMScsICd2YWx1ZTInXSxcbiAgICAgICAgICBrZXkyOiBbJ3ZhbHVlMScsICd2YWx1ZTInLCAndmFsdWUzJ10sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIHBvcnRmb2xpby5hc3NvY2lhdGVUYWdPcHRpb25zKHRhZ09wdGlvbnMpO1xuXG4gICAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlKCdBV1M6OlNlcnZpY2VDYXRhbG9nOjpUYWdPcHRpb24nLCA1KTtcbiAgICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2UoJ0FXUzo6U2VydmljZUNhdGFsb2c6OlRhZ09wdGlvbkFzc29jaWF0aW9uJywgNSk7XG4gICAgfSksXG5cbiAgICB0ZXN0KCdjcmVhdGluZyB0YWcgb3B0aW9ucyB3aXRoIGR1cGxpY2F0ZSB2YWx1ZXMgaXMgaWRlbXBvdGVudCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHBvcnRmb2xpbyA9IG5ldyBzZXJ2aWNlY2F0YWxvZy5Qb3J0Zm9saW8oc3RhY2ssICdNeVBvcnRmb2xpbycsIHtcbiAgICAgICAgZGlzcGxheU5hbWU6ICd0ZXN0UG9ydGZvbGlvJyxcbiAgICAgICAgcHJvdmlkZXJOYW1lOiAndGVzdFByb3ZpZGVyJyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB0YWdPcHRpb25zID0gbmV3IHNlcnZpY2VjYXRhbG9nLlRhZ09wdGlvbnMoc3RhY2ssICdUYWdPcHRpb25zJywge1xuICAgICAgICBhbGxvd2VkVmFsdWVzRm9yVGFnczoge1xuICAgICAgICAgIGtleTE6IFsndmFsdWUxJywgJ3ZhbHVlMicsICd2YWx1ZTInXSxcbiAgICAgICAgICBrZXkyOiBbJ3ZhbHVlMScsICd2YWx1ZTInLCAndmFsdWUzJywgJ3ZhbHVlMyddLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBwb3J0Zm9saW8uYXNzb2NpYXRlVGFnT3B0aW9ucyh0YWdPcHRpb25zKTtcblxuICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZSgnQVdTOjpTZXJ2aWNlQ2F0YWxvZzo6VGFnT3B0aW9uJywgNSk7XG4gICAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlKCdBV1M6OlNlcnZpY2VDYXRhbG9nOjpUYWdPcHRpb25Bc3NvY2lhdGlvbicsIDUpO1xuICAgIH0pLFxuXG4gICAgdGVzdCgnY3JlYXRlIGFuZCBhc3NvY2lhdGUgdGFnIG9wdGlvbnMgdG8gZGlmZmVyZW50IHJlc291cmNlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHBvcnRmb2xpbzEgPSBuZXcgc2VydmljZWNhdGFsb2cuUG9ydGZvbGlvKHN0YWNrLCAnTXlQb3J0Zm9saW8xJywge1xuICAgICAgICBkaXNwbGF5TmFtZTogJ3Rlc3RQb3J0Zm9saW8xJyxcbiAgICAgICAgcHJvdmlkZXJOYW1lOiAndGVzdFByb3ZpZGVyMScsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcG9ydGZvbGlvMiA9IG5ldyBzZXJ2aWNlY2F0YWxvZy5Qb3J0Zm9saW8oc3RhY2ssICdNeVBvcnRmb2xpbzInLCB7XG4gICAgICAgIGRpc3BsYXlOYW1lOiAndGVzdFBvcnRmb2xpbzInLFxuICAgICAgICBwcm92aWRlck5hbWU6ICd0ZXN0UHJvdmlkZXIyJyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB0YWdPcHRpb25zID0gbmV3IHNlcnZpY2VjYXRhbG9nLlRhZ09wdGlvbnMoc3RhY2ssICdUYWdPcHRpb25zJywge1xuICAgICAgICBhbGxvd2VkVmFsdWVzRm9yVGFnczoge1xuICAgICAgICAgIGtleTE6IFsndmFsdWUxJywgJ3ZhbHVlMiddLFxuICAgICAgICAgIGtleTI6IFsndmFsdWUxJywgJ3ZhbHVlMicsICd2YWx1ZTMnXSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBwb3J0Zm9saW8xLmFzc29jaWF0ZVRhZ09wdGlvbnModGFnT3B0aW9ucyk7XG4gICAgICBwb3J0Zm9saW8yLmFzc29jaWF0ZVRhZ09wdGlvbnModGFnT3B0aW9ucyk7XG5cbiAgICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2UoJ0FXUzo6U2VydmljZUNhdGFsb2c6OlRhZ09wdGlvbicsIDUpO1xuICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZSgnQVdTOjpTZXJ2aWNlQ2F0YWxvZzo6VGFnT3B0aW9uQXNzb2NpYXRpb24nLCAxMCk7XG4gICAgfSksXG5cbiAgICB0ZXN0KCdhZGRpbmcgdGFnIG9wdGlvbnMgdG8gcG9ydGZvbGlvIGFuZCBwcm9kdWN0IGNyZWF0ZXMgdW5pcXVlIHRhZyBvcHRpb25zIGFuZCBlbnVtZXJhdGVkIGFzc29jaWF0aW9ucycsICgpID0+IHtcbiAgICAgIGNvbnN0IHRhZ09wdGlvbnMgPSBuZXcgc2VydmljZWNhdGFsb2cuVGFnT3B0aW9ucyhzdGFjaywgJ1RhZ09wdGlvbnMnLCB7XG4gICAgICAgIGFsbG93ZWRWYWx1ZXNGb3JUYWdzOiB7XG4gICAgICAgICAga2V5MTogWyd2YWx1ZTEnLCAndmFsdWUyJ10sXG4gICAgICAgICAga2V5MjogWyd2YWx1ZTEnXSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBwb3J0Zm9saW8gPSBuZXcgc2VydmljZWNhdGFsb2cuUG9ydGZvbGlvKHN0YWNrLCAnTXlQb3J0Zm9saW8nLCB7XG4gICAgICAgIGRpc3BsYXlOYW1lOiAndGVzdFBvcnRmb2xpbycsXG4gICAgICAgIHByb3ZpZGVyTmFtZTogJ3Rlc3RQcm92aWRlcicsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcHJvZHVjdCA9IG5ldyBzZXJ2aWNlY2F0YWxvZy5DbG91ZEZvcm1hdGlvblByb2R1Y3Qoc3RhY2ssICdNeVByb2R1Y3QnLCB7XG4gICAgICAgIHByb2R1Y3ROYW1lOiAndGVzdFByb2R1Y3QnLFxuICAgICAgICBvd25lcjogJ3Rlc3RPd25lcicsXG4gICAgICAgIHByb2R1Y3RWZXJzaW9uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNsb3VkRm9ybWF0aW9uVGVtcGxhdGU6IHNlcnZpY2VjYXRhbG9nLkNsb3VkRm9ybWF0aW9uVGVtcGxhdGUuZnJvbVVybCgnaHR0cHM6Ly9hd3Nkb2NzLnMzLmFtYXpvbmF3cy5jb20vc2VydmljZWNhdGFsb2cvZGV2ZWxvcG1lbnQtZW52aXJvbm1lbnQudGVtcGxhdGUnKSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICB0YWdPcHRpb25zOiB0YWdPcHRpb25zLFxuICAgICAgfSk7XG5cbiAgICAgIHBvcnRmb2xpby5hc3NvY2lhdGVUYWdPcHRpb25zKHRhZ09wdGlvbnMpO1xuICAgICAgcHJvZHVjdC5hc3NvY2lhdGVUYWdPcHRpb25zKHRhZ09wdGlvbnMpO1xuXG4gICAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLnJlc291cmNlQ291bnRJcygnQVdTOjpTZXJ2aWNlQ2F0YWxvZzo6VGFnT3B0aW9uJywgMyk7IC8vR2VuZXJhdGVzIGEgcmVzb3VyY2UgZm9yIGVhY2ggdW5pcXVlIGtleS12YWx1ZSBwYWlyXG4gICAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLnJlc291cmNlQ291bnRJcygnQVdTOjpTZXJ2aWNlQ2F0YWxvZzo6VGFnT3B0aW9uQXNzb2NpYXRpb24nLCA2KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2NyZWF0ZSBhbmQgYXNzb2NpYXRlIHRhZyBvcHRpb25zIGluIGFub3RoZXIgc3RhY2snLCAoKSA9PiB7XG4gICAgICBjb25zdCB0YWdPcHRpb25zU3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ1RhZ09wdGlvbnNTdGFjaycpO1xuICAgICAgY29uc3QgcHJvZHVjdFN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdQcm9kdWN0U3RhY2snKTtcblxuICAgICAgY29uc3QgdGFnT3B0aW9ucyA9IG5ldyBzZXJ2aWNlY2F0YWxvZy5UYWdPcHRpb25zKHRhZ09wdGlvbnNTdGFjaywgJ1RhZ09wdGlvbnMnLCB7XG4gICAgICAgIGFsbG93ZWRWYWx1ZXNGb3JUYWdzOiB7XG4gICAgICAgICAga2V5MTogWyd2YWx1ZTEnLCAndmFsdWUyJ10sXG4gICAgICAgICAga2V5MjogWyd2YWx1ZTEnLCAndmFsdWUyJywgJ3ZhbHVlMyddLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIG5ldyBzZXJ2aWNlY2F0YWxvZy5DbG91ZEZvcm1hdGlvblByb2R1Y3QocHJvZHVjdFN0YWNrLCAnTXlQcm9kdWN0Jywge1xuICAgICAgICBwcm9kdWN0TmFtZTogJ3Rlc3RQcm9kdWN0JyxcbiAgICAgICAgb3duZXI6ICd0ZXN0T3duZXInLFxuICAgICAgICBwcm9kdWN0VmVyc2lvbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbG91ZEZvcm1hdGlvblRlbXBsYXRlOiBzZXJ2aWNlY2F0YWxvZy5DbG91ZEZvcm1hdGlvblRlbXBsYXRlLmZyb21VcmwoJ2h0dHBzOi8vYXdzZG9jcy5zMy5hbWF6b25hd3MuY29tL3NlcnZpY2VjYXRhbG9nL2RldmVsb3BtZW50LWVudmlyb25tZW50LnRlbXBsYXRlJyksXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgdGFnT3B0aW9uczogdGFnT3B0aW9ucyxcbiAgICAgIH0pO1xuXG4gICAgICBUZW1wbGF0ZS5mcm9tU3RhY2sodGFnT3B0aW9uc1N0YWNrKS5oYXNSZXNvdXJjZSgnQVdTOjpTZXJ2aWNlQ2F0YWxvZzo6VGFnT3B0aW9uJywgNSk7XG4gICAgICBUZW1wbGF0ZS5mcm9tU3RhY2socHJvZHVjdFN0YWNrKS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6U2VydmljZUNhdGFsb2c6OlRhZ09wdGlvbicsIDApO1xuICAgICAgVGVtcGxhdGUuZnJvbVN0YWNrKHByb2R1Y3RTdGFjaykuaGFzUmVzb3VyY2UoJ0FXUzo6U2VydmljZUNhdGFsb2c6OlRhZ09wdGlvbkFzc29jaWF0aW9uJywgNSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=