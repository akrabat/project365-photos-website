"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const ec2 = require("../../aws-ec2");
const cdk = require("../../core");
const core_1 = require("../../core");
const servicediscovery = require("../lib");
describe('namespace', () => {
    test('HTTP namespace', () => {
        const stack = new cdk.Stack();
        new servicediscovery.HttpNamespace(stack, 'MyNamespace', {
            name: 'foobar.com',
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyNamespaceD0BB8558: {
                    Type: 'AWS::ServiceDiscovery::HttpNamespace',
                    Properties: {
                        Name: 'foobar.com',
                    },
                },
            },
        });
    });
    test('Public DNS namespace', () => {
        const stack = new cdk.Stack();
        new servicediscovery.PublicDnsNamespace(stack, 'MyNamespace', {
            name: 'foobar.com',
        });
        assertions_1.Template.fromStack(stack).templateMatches({
            Resources: {
                MyNamespaceD0BB8558: {
                    Type: 'AWS::ServiceDiscovery::PublicDnsNamespace',
                    Properties: {
                        Name: 'foobar.com',
                    },
                },
            },
        });
    });
    test('Private DNS namespace', () => {
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'MyVpc');
        new servicediscovery.PrivateDnsNamespace(stack, 'MyNamespace', {
            name: 'foobar.com',
            vpc,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ServiceDiscovery::PrivateDnsNamespace', {
            Name: 'foobar.com',
            Vpc: {
                Ref: 'MyVpcF9F0CA6F',
            },
        });
    });
    test('CloudFormation attributes', () => {
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'MyVpc');
        const privateNs = new servicediscovery.PrivateDnsNamespace(stack, 'MyPrivateNamespace', {
            name: 'foobar.com',
            vpc,
        });
        const publicNs = new servicediscovery.PrivateDnsNamespace(stack, 'MyPublicNamespace', {
            name: 'foobar.com',
            vpc,
        });
        new core_1.CfnOutput(stack, 'PrivateNsId', { value: privateNs.namespaceId });
        new core_1.CfnOutput(stack, 'PrivateNsArn', { value: privateNs.namespaceArn });
        new core_1.CfnOutput(stack, 'PrivateHostedZoneId', { value: privateNs.namespaceHostedZoneId });
        new core_1.CfnOutput(stack, 'PublicNsId', { value: publicNs.namespaceId });
        new core_1.CfnOutput(stack, 'PublicNsArn', { value: publicNs.namespaceArn });
        new core_1.CfnOutput(stack, 'PublicHostedZoneId', { value: publicNs.namespaceHostedZoneId });
        assertions_1.Template.fromStack(stack).hasOutput('PrivateNsId', {
            Value: {
                'Fn::GetAtt': [
                    'MyPrivateNamespace8CB3AE39',
                    'Id',
                ],
            },
        });
        assertions_1.Template.fromStack(stack).hasOutput('PrivateNsArn', {
            Value: {
                'Fn::GetAtt': [
                    'MyPrivateNamespace8CB3AE39',
                    'Arn',
                ],
            },
        });
        assertions_1.Template.fromStack(stack).hasOutput('PrivateHostedZoneId', {
            Value: {
                'Fn::GetAtt': [
                    'MyPrivateNamespace8CB3AE39',
                    'HostedZoneId',
                ],
            },
        });
        assertions_1.Template.fromStack(stack).hasOutput('PublicNsId', {
            Value: {
                'Fn::GetAtt': [
                    'MyPublicNamespaceAB66AFAC',
                    'Id',
                ],
            },
        });
        assertions_1.Template.fromStack(stack).hasOutput('PublicNsArn', {
            Value: {
                'Fn::GetAtt': [
                    'MyPublicNamespaceAB66AFAC',
                    'Arn',
                ],
            },
        });
        assertions_1.Template.fromStack(stack).hasOutput('PublicHostedZoneId', {
            Value: {
                'Fn::GetAtt': [
                    'MyPublicNamespaceAB66AFAC',
                    'HostedZoneId',
                ],
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,