"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationSet = exports.SuppressionReasons = exports.ConfigurationSetTlsPolicy = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../../core");
const utils_1 = require("./private/utils");
const ses_generated_1 = require("./ses.generated");
/**
 * TLS policy for a configuration set
 */
var ConfigurationSetTlsPolicy;
(function (ConfigurationSetTlsPolicy) {
    /**
     * Messages are only delivered if a TLS connection can be established
     */
    ConfigurationSetTlsPolicy["REQUIRE"] = "REQUIRE";
    /**
     * Messages can be delivered in plain text if a TLS connection can't be established
     */
    ConfigurationSetTlsPolicy["OPTIONAL"] = "OPTIONAL";
})(ConfigurationSetTlsPolicy = exports.ConfigurationSetTlsPolicy || (exports.ConfigurationSetTlsPolicy = {}));
/**
 * Reasons for which recipient email addresses should be automatically added
 * to your account's suppression list
 */
var SuppressionReasons;
(function (SuppressionReasons) {
    /**
     * Bounces and complaints
     */
    SuppressionReasons["BOUNCES_AND_COMPLAINTS"] = "BOUNCES_AND_COMPLAINTS";
    /**
     * Bounces only
     */
    SuppressionReasons["BOUNCES_ONLY"] = "BOUNCES_ONLY";
    /**
     * Complaints only
     */
    SuppressionReasons["COMPLAINTS_ONLY"] = "COMPLAINTS_ONLY";
})(SuppressionReasons = exports.SuppressionReasons || (exports.SuppressionReasons = {}));
/**
 * A configuration set
 */
class ConfigurationSet extends core_1.Resource {
    /**
     * Use an existing configuration set
     */
    static fromConfigurationSetName(scope, id, configurationSetName) {
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.configurationSetName = configurationSetName;
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props = {}) {
        super(scope, id, {
            physicalName: props.configurationSetName,
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ses_ConfigurationSetProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ConfigurationSet);
            }
            throw error;
        }
        const configurationSet = new ses_generated_1.CfnConfigurationSet(this, 'Resource', {
            deliveryOptions: (0, utils_1.undefinedIfNoKeys)({
                sendingPoolName: props.dedicatedIpPool?.dedicatedIpPoolName,
                tlsPolicy: props.tlsPolicy,
            }),
            name: this.physicalName,
            reputationOptions: (0, utils_1.undefinedIfNoKeys)({
                reputationMetricsEnabled: props.reputationMetrics,
            }),
            sendingOptions: (0, utils_1.undefinedIfNoKeys)({
                sendingEnabled: props.sendingEnabled,
            }),
            suppressionOptions: (0, utils_1.undefinedIfNoKeys)({
                suppressedReasons: renderSuppressedReasons(props.suppressionReasons),
            }),
            trackingOptions: (0, utils_1.undefinedIfNoKeys)({
                customRedirectDomain: props.customTrackingRedirectDomain,
            }),
        });
        this.configurationSetName = configurationSet.ref;
    }
}
_a = JSII_RTTI_SYMBOL_1;
ConfigurationSet[_a] = { fqn: "aws-cdk-lib.aws_ses.ConfigurationSet", version: "2.73.0" };
exports.ConfigurationSet = ConfigurationSet;
function renderSuppressedReasons(suppressionReasons) {
    if (!suppressionReasons) {
        return undefined;
    }
    switch (suppressionReasons) {
        case SuppressionReasons.BOUNCES_AND_COMPLAINTS:
            return ['BOUNCE', 'COMPLAINT'];
        case SuppressionReasons.BOUNCES_ONLY:
            return ['BOUNCE'];
        case SuppressionReasons.COMPLAINTS_ONLY:
            return ['COMPLAINT'];
    }
}
//# sourceMappingURL=data:application/json;base64,