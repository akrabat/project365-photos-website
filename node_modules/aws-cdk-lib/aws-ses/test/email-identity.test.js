"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const route53 = require("../../aws-route53");
const core_1 = require("../../core");
const lib_1 = require("../lib");
let stack;
beforeEach(() => {
    stack = new core_1.Stack();
});
test('default email identity for a domain', () => {
    new lib_1.EmailIdentity(stack, 'Identity', {
        identity: lib_1.Identity.domain('cdk.dev'),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SES::EmailIdentity', {
        EmailIdentity: 'cdk.dev',
    });
});
test('email identity from a hosted zone with easy dkim', () => {
    const hostedZone = new route53.PublicHostedZone(stack, 'HostedZone', {
        zoneName: 'cdk.dev',
    });
    new lib_1.EmailIdentity(stack, 'Identity', {
        identity: lib_1.Identity.publicHostedZone(hostedZone),
        configurationSet: new lib_1.ConfigurationSet(stack, 'ConfigurationSet'),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SES::EmailIdentity', {
        EmailIdentity: 'cdk.dev',
        ConfigurationSetAttributes: {
            ConfigurationSetName: {
                Ref: 'ConfigurationSet3DD38186',
            },
        },
    });
    assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Route53::RecordSet', 3);
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Name: {
            'Fn::GetAtt': [
                'Identity2D60E2CC',
                'DkimDNSTokenName1',
            ],
        },
        Type: 'CNAME',
        HostedZoneId: {
            Ref: 'HostedZoneDB99F866',
        },
        ResourceRecords: [
            {
                'Fn::GetAtt': [
                    'Identity2D60E2CC',
                    'DkimDNSTokenValue1',
                ],
            },
        ],
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Name: {
            'Fn::GetAtt': [
                'Identity2D60E2CC',
                'DkimDNSTokenName2',
            ],
        },
        Type: 'CNAME',
        HostedZoneId: {
            Ref: 'HostedZoneDB99F866',
        },
        ResourceRecords: [
            {
                'Fn::GetAtt': [
                    'Identity2D60E2CC',
                    'DkimDNSTokenValue2',
                ],
            },
        ],
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Name: {
            'Fn::GetAtt': [
                'Identity2D60E2CC',
                'DkimDNSTokenName3',
            ],
        },
        Type: 'CNAME',
        HostedZoneId: {
            Ref: 'HostedZoneDB99F866',
        },
        ResourceRecords: [
            {
                'Fn::GetAtt': [
                    'Identity2D60E2CC',
                    'DkimDNSTokenValue3',
                ],
            },
        ],
    });
});
test('email identity from a hosted zone with BYO dkim', () => {
    const hostedZone = new route53.PublicHostedZone(stack, 'HostedZone', {
        zoneName: 'cdk.dev',
    });
    new lib_1.EmailIdentity(stack, 'Identity', {
        identity: lib_1.Identity.publicHostedZone(hostedZone),
        dkimIdentity: lib_1.DkimIdentity.byoDkim({
            privateKey: core_1.SecretValue.secretsManager('my-secret'),
            selector: 'selector',
            publicKey: 'public-key',
        }),
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SES::EmailIdentity', {
        EmailIdentity: 'cdk.dev',
        DkimSigningAttributes: {
            DomainSigningPrivateKey: '{{resolve:secretsmanager:my-secret:SecretString:::}}',
            DomainSigningSelector: 'selector',
        },
    });
    assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Route53::RecordSet', 1);
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Name: 'selector._domainkey.cdk.dev.',
        Type: 'TXT',
        HostedZoneId: {
            Ref: 'HostedZoneDB99F866',
        },
        ResourceRecords: [
            '"p=public-key"',
        ],
    });
});
test('with mail from and hosted zone', () => {
    const hostedZone = new route53.PublicHostedZone(stack, 'HostedZone', {
        zoneName: 'cdk.dev',
    });
    new lib_1.EmailIdentity(stack, 'Identity', {
        identity: lib_1.Identity.publicHostedZone(hostedZone),
        mailFromDomain: 'mail.cdk.dev',
        mailFromBehaviorOnMxFailure: lib_1.MailFromBehaviorOnMxFailure.REJECT_MESSAGE,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SES::EmailIdentity', {
        MailFromAttributes: {
            BehaviorOnMxFailure: 'REJECT_MESSAGE',
            MailFromDomain: 'mail.cdk.dev',
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Name: 'mail.cdk.dev.',
        Type: 'MX',
        HostedZoneId: {
            Ref: 'HostedZoneDB99F866',
        },
        ResourceRecords: [
            {
                'Fn::Join': [
                    '',
                    [
                        '10 feedback-smtp.',
                        {
                            Ref: 'AWS::Region',
                        },
                        '.amazonses.com',
                    ],
                ],
            },
        ],
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Route53::RecordSet', {
        Name: 'mail.cdk.dev.',
        Type: 'TXT',
        HostedZoneId: {
            Ref: 'HostedZoneDB99F866',
        },
        ResourceRecords: [
            '"v=spf1 include:amazonses.com ~all"',
        ],
    });
});
//# sourceMappingURL=data:application/json;base64,