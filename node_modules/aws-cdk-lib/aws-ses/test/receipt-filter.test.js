"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const lib_1 = require("../lib");
/* eslint-disable quote-props */
describe('receipt filter', () => {
    test('can create a receipt filter', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.ReceiptFilter(stack, 'Filter', {
            ip: '1.2.3.4/16',
            receiptFilterName: 'MyFilter',
            policy: lib_1.ReceiptFilterPolicy.BLOCK,
        });
        // THEN
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'FilterC907D6DA': {
                    'Type': 'AWS::SES::ReceiptFilter',
                    'Properties': {
                        'Filter': {
                            'IpFilter': {
                                'Cidr': '1.2.3.4/16',
                                'Policy': 'Block',
                            },
                            'Name': 'MyFilter',
                        },
                    },
                },
            },
        });
    });
    test('can create an allow list filter', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.AllowListReceiptFilter(stack, 'AllowList', {
            ips: [
                '10.0.0.0/16',
                '1.2.3.4',
            ],
        });
        // THEN
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'AllowListBlockAll094C9B97': {
                    'Type': 'AWS::SES::ReceiptFilter',
                    'Properties': {
                        'Filter': {
                            'IpFilter': {
                                'Cidr': '0.0.0.0/0',
                                'Policy': 'Block',
                            },
                        },
                    },
                },
                'AllowListAllow10000164654C092': {
                    'Type': 'AWS::SES::ReceiptFilter',
                    'Properties': {
                        'Filter': {
                            'IpFilter': {
                                'Cidr': '10.0.0.0/16',
                                'Policy': 'Allow',
                            },
                        },
                    },
                },
                'AllowListAllow12345BCAE5C3': {
                    'Type': 'AWS::SES::ReceiptFilter',
                    'Properties': {
                        'Filter': {
                            'IpFilter': {
                                'Cidr': '1.2.3.4',
                                'Policy': 'Allow',
                            },
                        },
                    },
                },
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjZWlwdC1maWx0ZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlY2VpcHQtZmlsdGVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBNEM7QUFDNUMscUNBQW1DO0FBQ25DLGdDQUFvRjtBQUVwRixnQ0FBZ0M7QUFFaEMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixJQUFJLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO1FBQ3ZDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBRTFCLE9BQU87UUFDUCxJQUFJLG1CQUFhLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtZQUNqQyxFQUFFLEVBQUUsWUFBWTtZQUNoQixpQkFBaUIsRUFBRSxVQUFVO1lBQzdCLE1BQU0sRUFBRSx5QkFBbUIsQ0FBQyxLQUFLO1NBQ2xDLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUM7WUFDeEMsV0FBVyxFQUFFO2dCQUNYLGdCQUFnQixFQUFFO29CQUNoQixNQUFNLEVBQUUseUJBQXlCO29CQUNqQyxZQUFZLEVBQUU7d0JBQ1osUUFBUSxFQUFFOzRCQUNSLFVBQVUsRUFBRTtnQ0FDVixNQUFNLEVBQUUsWUFBWTtnQ0FDcEIsUUFBUSxFQUFFLE9BQU87NkJBQ2xCOzRCQUNELE1BQU0sRUFBRSxVQUFVO3lCQUNuQjtxQkFDRjtpQkFDRjthQUNGO1NBQ0YsQ0FBQyxDQUFDO0lBR0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO1FBQzNDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBRTFCLE9BQU87UUFDUCxJQUFJLDRCQUFzQixDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUU7WUFDN0MsR0FBRyxFQUFFO2dCQUNILGFBQWE7Z0JBQ2IsU0FBUzthQUNWO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLGVBQWUsQ0FBQztZQUN4QyxXQUFXLEVBQUU7Z0JBQ1gsMkJBQTJCLEVBQUU7b0JBQzNCLE1BQU0sRUFBRSx5QkFBeUI7b0JBQ2pDLFlBQVksRUFBRTt3QkFDWixRQUFRLEVBQUU7NEJBQ1IsVUFBVSxFQUFFO2dDQUNWLE1BQU0sRUFBRSxXQUFXO2dDQUNuQixRQUFRLEVBQUUsT0FBTzs2QkFDbEI7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7Z0JBQ0QsK0JBQStCLEVBQUU7b0JBQy9CLE1BQU0sRUFBRSx5QkFBeUI7b0JBQ2pDLFlBQVksRUFBRTt3QkFDWixRQUFRLEVBQUU7NEJBQ1IsVUFBVSxFQUFFO2dDQUNWLE1BQU0sRUFBRSxhQUFhO2dDQUNyQixRQUFRLEVBQUUsT0FBTzs2QkFDbEI7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7Z0JBQ0QsNEJBQTRCLEVBQUU7b0JBQzVCLE1BQU0sRUFBRSx5QkFBeUI7b0JBQ2pDLFlBQVksRUFBRTt3QkFDWixRQUFRLEVBQUU7NEJBQ1IsVUFBVSxFQUFFO2dDQUNWLE1BQU0sRUFBRSxTQUFTO2dDQUNqQixRQUFRLEVBQUUsT0FBTzs2QkFDbEI7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUdMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IEFsbG93TGlzdFJlY2VpcHRGaWx0ZXIsIFJlY2VpcHRGaWx0ZXIsIFJlY2VpcHRGaWx0ZXJQb2xpY3kgfSBmcm9tICcuLi9saWInO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBxdW90ZS1wcm9wcyAqL1xuXG5kZXNjcmliZSgncmVjZWlwdCBmaWx0ZXInLCAoKSA9PiB7XG4gIHRlc3QoJ2NhbiBjcmVhdGUgYSByZWNlaXB0IGZpbHRlcicsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgbmV3IFJlY2VpcHRGaWx0ZXIoc3RhY2ssICdGaWx0ZXInLCB7XG4gICAgICBpcDogJzEuMi4zLjQvMTYnLFxuICAgICAgcmVjZWlwdEZpbHRlck5hbWU6ICdNeUZpbHRlcicsXG4gICAgICBwb2xpY3k6IFJlY2VpcHRGaWx0ZXJQb2xpY3kuQkxPQ0ssXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS50ZW1wbGF0ZU1hdGNoZXMoe1xuICAgICAgJ1Jlc291cmNlcyc6IHtcbiAgICAgICAgJ0ZpbHRlckM5MDdENkRBJzoge1xuICAgICAgICAgICdUeXBlJzogJ0FXUzo6U0VTOjpSZWNlaXB0RmlsdGVyJyxcbiAgICAgICAgICAnUHJvcGVydGllcyc6IHtcbiAgICAgICAgICAgICdGaWx0ZXInOiB7XG4gICAgICAgICAgICAgICdJcEZpbHRlcic6IHtcbiAgICAgICAgICAgICAgICAnQ2lkcic6ICcxLjIuMy40LzE2JyxcbiAgICAgICAgICAgICAgICAnUG9saWN5JzogJ0Jsb2NrJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ05hbWUnOiAnTXlGaWx0ZXInLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuXG4gIH0pO1xuXG4gIHRlc3QoJ2NhbiBjcmVhdGUgYW4gYWxsb3cgbGlzdCBmaWx0ZXInLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBBbGxvd0xpc3RSZWNlaXB0RmlsdGVyKHN0YWNrLCAnQWxsb3dMaXN0Jywge1xuICAgICAgaXBzOiBbXG4gICAgICAgICcxMC4wLjAuMC8xNicsXG4gICAgICAgICcxLjIuMy40JyxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS50ZW1wbGF0ZU1hdGNoZXMoe1xuICAgICAgJ1Jlc291cmNlcyc6IHtcbiAgICAgICAgJ0FsbG93TGlzdEJsb2NrQWxsMDk0QzlCOTcnOiB7XG4gICAgICAgICAgJ1R5cGUnOiAnQVdTOjpTRVM6OlJlY2VpcHRGaWx0ZXInLFxuICAgICAgICAgICdQcm9wZXJ0aWVzJzoge1xuICAgICAgICAgICAgJ0ZpbHRlcic6IHtcbiAgICAgICAgICAgICAgJ0lwRmlsdGVyJzoge1xuICAgICAgICAgICAgICAgICdDaWRyJzogJzAuMC4wLjAvMCcsXG4gICAgICAgICAgICAgICAgJ1BvbGljeSc6ICdCbG9jaycsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgICdBbGxvd0xpc3RBbGxvdzEwMDAwMTY0NjU0QzA5Mic6IHtcbiAgICAgICAgICAnVHlwZSc6ICdBV1M6OlNFUzo6UmVjZWlwdEZpbHRlcicsXG4gICAgICAgICAgJ1Byb3BlcnRpZXMnOiB7XG4gICAgICAgICAgICAnRmlsdGVyJzoge1xuICAgICAgICAgICAgICAnSXBGaWx0ZXInOiB7XG4gICAgICAgICAgICAgICAgJ0NpZHInOiAnMTAuMC4wLjAvMTYnLFxuICAgICAgICAgICAgICAgICdQb2xpY3knOiAnQWxsb3cnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICAnQWxsb3dMaXN0QWxsb3cxMjM0NUJDQUU1QzMnOiB7XG4gICAgICAgICAgJ1R5cGUnOiAnQVdTOjpTRVM6OlJlY2VpcHRGaWx0ZXInLFxuICAgICAgICAgICdQcm9wZXJ0aWVzJzoge1xuICAgICAgICAgICAgJ0ZpbHRlcic6IHtcbiAgICAgICAgICAgICAgJ0lwRmlsdGVyJzoge1xuICAgICAgICAgICAgICAgICdDaWRyJzogJzEuMi4zLjQnLFxuICAgICAgICAgICAgICAgICdQb2xpY3knOiAnQWxsb3cnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuXG4gIH0pO1xufSk7XG4iXX0=