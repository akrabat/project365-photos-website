"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const lib_1 = require("../lib");
/* eslint-disable quote-props */
describe('receipt rule set', () => {
    test('can create a receipt rule set', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.ReceiptRuleSet(stack, 'RuleSet', {
            receiptRuleSetName: 'MyRuleSet',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SES::ReceiptRuleSet', {
            RuleSetName: 'MyRuleSet',
        });
    });
    test('can create a receipt rule set with drop spam', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.ReceiptRuleSet(stack, 'RuleSet', {
            dropSpam: true,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SES::ReceiptRule', {
            Rule: {
                Actions: [
                    {
                        LambdaAction: {
                            FunctionArn: {
                                'Fn::GetAtt': [
                                    'SingletonLambda224e77f9a32e4b4dac32983477abba164533EA15',
                                    'Arn',
                                ],
                            },
                            InvocationType: 'RequestResponse',
                        },
                    },
                ],
                Enabled: true,
                ScanEnabled: true,
            },
        });
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Lambda::Function', 1);
    });
    test('drop spam rule should always appear first', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.ReceiptRuleSet(stack, 'RuleSet', {
            dropSpam: true,
            rules: [
                {
                    scanEnabled: true,
                    recipients: ['foo@example.com'],
                },
            ],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SES::ReceiptRule', {
            Rule: {
                Enabled: true,
                Recipients: [
                    'foo@example.com',
                ],
                ScanEnabled: true,
            },
            // All "regular" rules should come after the drop spam rule
            After: {
                Ref: 'RuleSetDropSpamRule5809F51B',
            },
        });
        assertions_1.Template.fromStack(stack).resourceCountIs('AWS::Lambda::Function', 1);
    });
    test('import receipt rule set', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const receiptRuleSet = lib_1.ReceiptRuleSet.fromReceiptRuleSetName(stack, 'ImportedRuleSet', 'MyRuleSet');
        receiptRuleSet.addRule('MyRule');
        // THEN
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'ImportedRuleSetMyRule53EE2F7F': {
                    'Type': 'AWS::SES::ReceiptRule',
                    'Properties': {
                        'Rule': {
                            'Enabled': true,
                        },
                        'RuleSetName': 'MyRuleSet',
                    },
                },
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjZWlwdC1ydWxlLXNldC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVjZWlwdC1ydWxlLXNldC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLHFDQUFtQztBQUNuQyxnQ0FBd0M7QUFFeEMsZ0NBQWdDO0FBRWhDLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFDaEMsSUFBSSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtRQUN6QyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUUxQixPQUFPO1FBQ1AsSUFBSSxvQkFBYyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7WUFDbkMsa0JBQWtCLEVBQUUsV0FBVztTQUNoQyxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsMEJBQTBCLEVBQUU7WUFDMUUsV0FBVyxFQUFFLFdBQVc7U0FDekIsQ0FBQyxDQUFDO0lBR0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsOENBQThDLEVBQUUsR0FBRyxFQUFFO1FBQ3hELFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBRTFCLE9BQU87UUFDUCxJQUFJLG9CQUFjLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUNuQyxRQUFRLEVBQUUsSUFBSTtTQUNmLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyx1QkFBdUIsRUFBRTtZQUN2RSxJQUFJLEVBQUU7Z0JBQ0osT0FBTyxFQUFFO29CQUNQO3dCQUNFLFlBQVksRUFBRTs0QkFDWixXQUFXLEVBQUU7Z0NBQ1gsWUFBWSxFQUFFO29DQUNaLHlEQUF5RDtvQ0FDekQsS0FBSztpQ0FDTjs2QkFDRjs0QkFDRCxjQUFjLEVBQUUsaUJBQWlCO3lCQUNsQztxQkFDRjtpQkFDRjtnQkFDRCxPQUFPLEVBQUUsSUFBSTtnQkFDYixXQUFXLEVBQUUsSUFBSTthQUNsQjtTQUNGLENBQUMsQ0FBQztRQUVILHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLGVBQWUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUd4RSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywyQ0FBMkMsRUFBRSxHQUFHLEVBQUU7UUFDckQsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7UUFFMUIsT0FBTztRQUNQLElBQUksb0JBQWMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQ25DLFFBQVEsRUFBRSxJQUFJO1lBQ2QsS0FBSyxFQUFFO2dCQUNMO29CQUNFLFdBQVcsRUFBRSxJQUFJO29CQUNqQixVQUFVLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztpQkFDaEM7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyx1QkFBdUIsRUFBRTtZQUN2RSxJQUFJLEVBQUU7Z0JBQ0osT0FBTyxFQUFFLElBQUk7Z0JBQ2IsVUFBVSxFQUFFO29CQUNWLGlCQUFpQjtpQkFDbEI7Z0JBQ0QsV0FBVyxFQUFFLElBQUk7YUFDbEI7WUFDRCwyREFBMkQ7WUFDM0QsS0FBSyxFQUFFO2dCQUNMLEdBQUcsRUFBRSw2QkFBNkI7YUFDbkM7U0FDRixDQUFDLENBQUM7UUFFSCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFHeEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO1FBQ25DLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBRTFCLE9BQU87UUFDUCxNQUFNLGNBQWMsR0FBRyxvQkFBYyxDQUFDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUVwRyxjQUFjLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWpDLE9BQU87UUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUM7WUFDeEMsV0FBVyxFQUFFO2dCQUNYLCtCQUErQixFQUFFO29CQUMvQixNQUFNLEVBQUUsdUJBQXVCO29CQUMvQixZQUFZLEVBQUU7d0JBQ1osTUFBTSxFQUFFOzRCQUNOLFNBQVMsRUFBRSxJQUFJO3lCQUNoQjt3QkFDRCxhQUFhLEVBQUUsV0FBVztxQkFDM0I7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUdMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IFJlY2VpcHRSdWxlU2V0IH0gZnJvbSAnLi4vbGliJztcblxuLyogZXNsaW50LWRpc2FibGUgcXVvdGUtcHJvcHMgKi9cblxuZGVzY3JpYmUoJ3JlY2VpcHQgcnVsZSBzZXQnLCAoKSA9PiB7XG4gIHRlc3QoJ2NhbiBjcmVhdGUgYSByZWNlaXB0IHJ1bGUgc2V0JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgUmVjZWlwdFJ1bGVTZXQoc3RhY2ssICdSdWxlU2V0Jywge1xuICAgICAgcmVjZWlwdFJ1bGVTZXROYW1lOiAnTXlSdWxlU2V0JyxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpTRVM6OlJlY2VpcHRSdWxlU2V0Jywge1xuICAgICAgUnVsZVNldE5hbWU6ICdNeVJ1bGVTZXQnLFxuICAgIH0pO1xuXG5cbiAgfSk7XG5cbiAgdGVzdCgnY2FuIGNyZWF0ZSBhIHJlY2VpcHQgcnVsZSBzZXQgd2l0aCBkcm9wIHNwYW0nLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBSZWNlaXB0UnVsZVNldChzdGFjaywgJ1J1bGVTZXQnLCB7XG4gICAgICBkcm9wU3BhbTogdHJ1ZSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpTRVM6OlJlY2VpcHRSdWxlJywge1xuICAgICAgUnVsZToge1xuICAgICAgICBBY3Rpb25zOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgTGFtYmRhQWN0aW9uOiB7XG4gICAgICAgICAgICAgIEZ1bmN0aW9uQXJuOiB7XG4gICAgICAgICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgICAgICAgICAnU2luZ2xldG9uTGFtYmRhMjI0ZTc3ZjlhMzJlNGI0ZGFjMzI5ODM0NzdhYmJhMTY0NTMzRUExNScsXG4gICAgICAgICAgICAgICAgICAnQXJuJyxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBJbnZvY2F0aW9uVHlwZTogJ1JlcXVlc3RSZXNwb25zZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIEVuYWJsZWQ6IHRydWUsXG4gICAgICAgIFNjYW5FbmFibGVkOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykucmVzb3VyY2VDb3VudElzKCdBV1M6OkxhbWJkYTo6RnVuY3Rpb24nLCAxKTtcblxuXG4gIH0pO1xuXG4gIHRlc3QoJ2Ryb3Agc3BhbSBydWxlIHNob3VsZCBhbHdheXMgYXBwZWFyIGZpcnN0JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgUmVjZWlwdFJ1bGVTZXQoc3RhY2ssICdSdWxlU2V0Jywge1xuICAgICAgZHJvcFNwYW06IHRydWUsXG4gICAgICBydWxlczogW1xuICAgICAgICB7XG4gICAgICAgICAgc2NhbkVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgcmVjaXBpZW50czogWydmb29AZXhhbXBsZS5jb20nXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6U0VTOjpSZWNlaXB0UnVsZScsIHtcbiAgICAgIFJ1bGU6IHtcbiAgICAgICAgRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgUmVjaXBpZW50czogW1xuICAgICAgICAgICdmb29AZXhhbXBsZS5jb20nLFxuICAgICAgICBdLFxuICAgICAgICBTY2FuRW5hYmxlZDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICAvLyBBbGwgXCJyZWd1bGFyXCIgcnVsZXMgc2hvdWxkIGNvbWUgYWZ0ZXIgdGhlIGRyb3Agc3BhbSBydWxlXG4gICAgICBBZnRlcjoge1xuICAgICAgICBSZWY6ICdSdWxlU2V0RHJvcFNwYW1SdWxlNTgwOUY1MUInLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykucmVzb3VyY2VDb3VudElzKCdBV1M6OkxhbWJkYTo6RnVuY3Rpb24nLCAxKTtcblxuXG4gIH0pO1xuXG4gIHRlc3QoJ2ltcG9ydCByZWNlaXB0IHJ1bGUgc2V0JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCByZWNlaXB0UnVsZVNldCA9IFJlY2VpcHRSdWxlU2V0LmZyb21SZWNlaXB0UnVsZVNldE5hbWUoc3RhY2ssICdJbXBvcnRlZFJ1bGVTZXQnLCAnTXlSdWxlU2V0Jyk7XG5cbiAgICByZWNlaXB0UnVsZVNldC5hZGRSdWxlKCdNeVJ1bGUnKTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLnRlbXBsYXRlTWF0Y2hlcyh7XG4gICAgICAnUmVzb3VyY2VzJzoge1xuICAgICAgICAnSW1wb3J0ZWRSdWxlU2V0TXlSdWxlNTNFRTJGN0YnOiB7XG4gICAgICAgICAgJ1R5cGUnOiAnQVdTOjpTRVM6OlJlY2VpcHRSdWxlJyxcbiAgICAgICAgICAnUHJvcGVydGllcyc6IHtcbiAgICAgICAgICAgICdSdWxlJzoge1xuICAgICAgICAgICAgICAnRW5hYmxlZCc6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ1J1bGVTZXROYW1lJzogJ015UnVsZVNldCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cblxuICB9KTtcbn0pO1xuIl19