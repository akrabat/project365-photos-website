"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const core_1 = require("../../core");
const lib_1 = require("../lib");
/* eslint-disable quote-props */
describe('receipt rule', () => {
    test('can create receipt rules with second after first', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        new lib_1.ReceiptRuleSet(stack, 'RuleSet', {
            rules: [
                {
                    receiptRuleName: 'FirstRule',
                },
                {
                    enabled: false,
                    receiptRuleName: 'SecondRule',
                    recipients: ['hello@aws.com'],
                    scanEnabled: true,
                    tlsPolicy: lib_1.TlsPolicy.REQUIRE,
                },
            ],
        });
        // THEN
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'RuleSetE30C6C48': {
                    'Type': 'AWS::SES::ReceiptRuleSet',
                },
                'RuleSetRule023C3B8E1': {
                    'Type': 'AWS::SES::ReceiptRule',
                    'Properties': {
                        'Rule': {
                            'Name': 'FirstRule',
                            'Enabled': true,
                        },
                        'RuleSetName': {
                            'Ref': 'RuleSetE30C6C48',
                        },
                    },
                },
                'RuleSetRule117041B57': {
                    'Type': 'AWS::SES::ReceiptRule',
                    'Properties': {
                        'Rule': {
                            'Enabled': false,
                            'Name': 'SecondRule',
                            'Recipients': [
                                'hello@aws.com',
                            ],
                            'ScanEnabled': true,
                            'TlsPolicy': 'Require',
                        },
                        'RuleSetName': {
                            'Ref': 'RuleSetE30C6C48',
                        },
                        'After': {
                            'Ref': 'RuleSetRule023C3B8E1',
                        },
                    },
                },
            },
        });
    });
    test('import receipt rule', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const receiptRule = lib_1.ReceiptRule.fromReceiptRuleName(stack, 'ImportedRule', 'MyRule');
        const receiptRuleSet = new lib_1.ReceiptRuleSet(stack, 'RuleSet');
        receiptRuleSet.addRule('MyRule', {
            after: receiptRule,
        });
        // THEN
        assertions_1.Template.fromStack(stack).templateMatches({
            'Resources': {
                'RuleSetE30C6C48': {
                    'Type': 'AWS::SES::ReceiptRuleSet',
                },
                'RuleSetMyRule60B1D107': {
                    'Type': 'AWS::SES::ReceiptRule',
                    'Properties': {
                        'Rule': {
                            'Enabled': true,
                        },
                        'RuleSetName': {
                            'Ref': 'RuleSetE30C6C48',
                        },
                        'After': 'MyRule',
                    },
                },
            },
        });
    });
    test('can add actions in rule props', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const ruleSet = new lib_1.ReceiptRuleSet(stack, 'RuleSet');
        ruleSet.addRule('Rule', {
            actions: [
                {
                    bind: () => ({
                        stopAction: {
                            scope: 'RuleSet',
                        },
                    }),
                },
            ],
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SES::ReceiptRule', {
            'Rule': {
                'Actions': [
                    {
                        'StopAction': {
                            'Scope': 'RuleSet',
                        },
                    },
                ],
                'Enabled': true,
            },
            'RuleSetName': {
                'Ref': 'RuleSetE30C6C48',
            },
        });
    });
    test('can add action with addAction', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const ruleSet = new lib_1.ReceiptRuleSet(stack, 'RuleSet');
        const rule = ruleSet.addRule('Rule');
        rule.addAction({
            bind: () => ({
                stopAction: {
                    scope: 'RuleSet',
                },
            }),
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SES::ReceiptRule', {
            'Rule': {
                'Actions': [
                    {
                        'StopAction': {
                            'Scope': 'RuleSet',
                        },
                    },
                ],
                'Enabled': true,
            },
            'RuleSetName': {
                'Ref': 'RuleSetE30C6C48',
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,