"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const aws_sqs_1 = require("../../aws-sqs");
const cdk = require("../../core");
const sns = require("../lib");
const lib_1 = require("../lib");
describe('Subscription', () => {
    test('create a subscription', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        new sns.Subscription(stack, 'Subscription', {
            endpoint: 'endpoint',
            protocol: sns.SubscriptionProtocol.LAMBDA,
            topic,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SNS::Subscription', {
            Endpoint: 'endpoint',
            Protocol: 'lambda',
            TopicArn: {
                Ref: 'TopicBFC7AF6E',
            },
        });
    });
    test('create a subscription with DLQ when client provides DLQ', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        const dlQueue = new aws_sqs_1.Queue(stack, 'DeadLetterQueue', {
            queueName: 'MySubscription_DLQ',
            retentionPeriod: cdk.Duration.days(14),
        });
        // WHEN
        new sns.Subscription(stack, 'Subscription', {
            endpoint: 'endpoint',
            protocol: sns.SubscriptionProtocol.LAMBDA,
            topic,
            deadLetterQueue: dlQueue,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SNS::Subscription', {
            Endpoint: 'endpoint',
            Protocol: 'lambda',
            TopicArn: {
                Ref: 'TopicBFC7AF6E',
            },
            RedrivePolicy: {
                deadLetterTargetArn: {
                    'Fn::GetAtt': [
                        'DeadLetterQueue9F481546',
                        'Arn',
                    ],
                },
            },
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::Queue', {
            QueueName: 'MySubscription_DLQ',
            MessageRetentionPeriod: 1209600,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SQS::QueuePolicy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: 'sqs:SendMessage',
                        Condition: {
                            ArnEquals: {
                                'aws:SourceArn': {
                                    Ref: 'TopicBFC7AF6E',
                                },
                            },
                        },
                        Effect: 'Allow',
                        Principal: {
                            Service: 'sns.amazonaws.com',
                        },
                        Resource: {
                            'Fn::GetAtt': [
                                'DeadLetterQueue9F481546',
                                'Arn',
                            ],
                        },
                    },
                ],
                Version: '2012-10-17',
            },
            Queues: [
                {
                    Ref: 'DeadLetterQueue9F481546',
                },
            ],
        });
    });
    test('with filter policy', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        new sns.Subscription(stack, 'Subscription', {
            endpoint: 'endpoint',
            filterPolicy: {
                color: sns.SubscriptionFilter.stringFilter({
                    allowlist: ['red', 'green'],
                    denylist: ['white', 'orange'],
                    matchPrefixes: ['bl', 'ye'],
                }),
                price: sns.SubscriptionFilter.numericFilter({
                    allowlist: [100, 200],
                    between: { start: 300, stop: 350 },
                    greaterThan: 500,
                    lessThan: 1000,
                    betweenStrict: { start: 2000, stop: 3000 },
                    greaterThanOrEqualTo: 1000,
                    lessThanOrEqualTo: -2,
                }),
            },
            protocol: sns.SubscriptionProtocol.LAMBDA,
            topic,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SNS::Subscription', {
            FilterPolicy: {
                color: [
                    'red',
                    'green',
                    { 'anything-but': ['white', 'orange'] },
                    { prefix: 'bl' },
                    { prefix: 'ye' },
                ],
                price: [
                    { numeric: ['=', 100] },
                    { numeric: ['=', 200] },
                    { numeric: ['>', 500] },
                    { numeric: ['>=', 1000] },
                    { numeric: ['<', 1000] },
                    { numeric: ['<=', -2] },
                    { numeric: ['>=', 300, '<=', 350] },
                    { numeric: ['>', 2000, '<', 3000] },
                ],
            },
        });
    });
    test('with filter policy and filter policy scope MessageBody', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        new sns.Subscription(stack, 'Subscription', {
            endpoint: 'endpoint',
            filterPolicyWithMessageBody: {
                background: sns.Policy.policy({
                    color: sns.Filter.filter(sns.SubscriptionFilter.stringFilter({
                        allowlist: ['red', 'green'],
                        denylist: ['white', 'orange'],
                    })),
                }),
                price: sns.Filter.filter(sns.SubscriptionFilter.numericFilter({
                    allowlist: [100, 200],
                    between: { start: 300, stop: 350 },
                    greaterThan: 500,
                    lessThan: 1000,
                    betweenStrict: { start: 2000, stop: 3000 },
                })),
            },
            protocol: sns.SubscriptionProtocol.LAMBDA,
            topic,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SNS::Subscription', {
            FilterPolicy: {
                background: {
                    color: [
                        'red',
                        'green',
                        { 'anything-but': ['white', 'orange'] },
                    ],
                },
                price: [
                    { numeric: ['=', 100] },
                    { numeric: ['=', 200] },
                    { numeric: ['>', 500] },
                    { numeric: ['<', 1000] },
                    { numeric: ['>=', 300, '<=', 350] },
                    { numeric: ['>', 2000, '<', 3000] },
                ],
            },
            FilterPolicyScope: 'MessageBody',
        });
    });
    test('with numeric filter and 0 values', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        new sns.Subscription(stack, 'Subscription', {
            endpoint: 'endpoint',
            filterPolicy: {
                price: sns.SubscriptionFilter.numericFilter({
                    greaterThan: 0,
                    greaterThanOrEqualTo: 0,
                    lessThan: 0,
                    lessThanOrEqualTo: 0,
                }),
            },
            protocol: sns.SubscriptionProtocol.LAMBDA,
            topic,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SNS::Subscription', {
            FilterPolicy: {
                price: [
                    { numeric: ['>', 0] },
                    { numeric: ['>=', 0] },
                    { numeric: ['<', 0] },
                    { numeric: ['<=', 0] },
                ],
            },
        });
    });
    test('with existsFilter', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        new sns.Subscription(stack, 'Subscription', {
            endpoint: 'endpoint',
            filterPolicy: {
                size: sns.SubscriptionFilter.existsFilter(),
            },
            protocol: sns.SubscriptionProtocol.LAMBDA,
            topic,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::SNS::Subscription', {
            FilterPolicy: {
                size: [{ exists: true }],
            },
        });
    });
    test.each([
        lib_1.SubscriptionProtocol.LAMBDA,
        lib_1.SubscriptionProtocol.EMAIL,
        lib_1.SubscriptionProtocol.EMAIL_JSON,
        lib_1.SubscriptionProtocol.SMS,
        lib_1.SubscriptionProtocol.APPLICATION,
    ])('throws with raw delivery for %s protocol', (protocol) => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        // THEN
        expect(() => new sns.Subscription(stack, 'Subscription', {
            endpoint: 'endpoint',
            protocol: protocol,
            topic,
            rawMessageDelivery: true,
        })).toThrow(/Raw message delivery/);
    });
    test('throws with more than 5 attributes in a filter policy', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        const cond = { conditions: [] };
        // THEN
        expect(() => new sns.Subscription(stack, 'Subscription', {
            endpoint: 'endpoint',
            protocol: sns.SubscriptionProtocol.LAMBDA,
            topic,
            filterPolicy: {
                a: cond,
                b: cond,
                c: cond,
                d: cond,
                e: cond,
                f: cond,
            },
        })).toThrow(/5 attribute names/);
    });
    test('throws with more than 150 conditions in a filter policy', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        // THEN
        expect(() => new sns.Subscription(stack, 'Subscription', {
            endpoint: 'endpoint',
            protocol: sns.SubscriptionProtocol.LAMBDA,
            topic,
            filterPolicy: {
                a: { conditions: [...Array.from(Array(2).keys())] },
                b: { conditions: [...Array.from(Array(10).keys())] },
                c: { conditions: [...Array.from(Array(8).keys())] },
            },
        })).toThrow(/\(160\) must not exceed 150/);
    });
    test('throws with more than 150 conditions in a filter policy with filter policy scope set to MessageBody', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        // THEN
        expect(() => new sns.Subscription(stack, 'Subscription', {
            endpoint: 'endpoint',
            protocol: sns.SubscriptionProtocol.LAMBDA,
            topic,
            filterPolicyWithMessageBody: {
                a: sns.Policy.policy({ b: sns.Filter.filter(new sns.SubscriptionFilter([...Array.from(Array(10).keys())])) }),
                c: sns.Policy.policy({ d: sns.Filter.filter(new sns.SubscriptionFilter([...Array.from(Array(5).keys())])) }),
            },
        })).toThrow(/\(200\) must not exceed 150/);
    });
    test('throws an error when subscription role arn is not entered with firehose subscription protocol', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        //THEN
        expect(() => new sns.Subscription(stack, 'Subscription', {
            endpoint: 'endpoint',
            protocol: sns.SubscriptionProtocol.FIREHOSE,
            topic,
        })).toThrow(/Subscription role arn is required field for subscriptions with a firehose protocol./);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Vic2NyaXB0aW9uLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdWJzY3JpcHRpb24udGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUE0QztBQUM1QywyQ0FBc0M7QUFDdEMsa0NBQWtDO0FBQ2xDLDhCQUE4QjtBQUM5QixnQ0FBOEM7QUFFOUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7SUFDNUIsSUFBSSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtRQUNqQyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU1QyxPQUFPO1FBQ1AsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7WUFDMUMsUUFBUSxFQUFFLFVBQVU7WUFDcEIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNO1lBQ3pDLEtBQUs7U0FDTixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsd0JBQXdCLEVBQUU7WUFDeEUsUUFBUSxFQUFFLFVBQVU7WUFDcEIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsUUFBUSxFQUFFO2dCQUNSLEdBQUcsRUFBRSxlQUFlO2FBQ3JCO1NBQ0YsQ0FBQyxDQUFDO0lBRUwsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMseURBQXlELEVBQUUsR0FBRyxFQUFFO1FBQ25FLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxD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cnRpb25zJztcbmltcG9ydCB7IFF1ZXVlIH0gZnJvbSAnLi4vLi4vYXdzLXNxcyc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBzbnMgZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvblByb3RvY29sIH0gZnJvbSAnLi4vbGliJztcblxuZGVzY3JpYmUoJ1N1YnNjcmlwdGlvbicsICgpID0+IHtcbiAgdGVzdCgnY3JlYXRlIGEgc3Vic2NyaXB0aW9uJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnVG9waWMnKTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgc25zLlN1YnNjcmlwdGlvbihzdGFjaywgJ1N1YnNjcmlwdGlvbicsIHtcbiAgICAgIGVuZHBvaW50OiAnZW5kcG9pbnQnLFxuICAgICAgcHJvdG9jb2w6IHNucy5TdWJzY3JpcHRpb25Qcm90b2NvbC5MQU1CREEsXG4gICAgICB0b3BpYyxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpTTlM6OlN1YnNjcmlwdGlvbicsIHtcbiAgICAgIEVuZHBvaW50OiAnZW5kcG9pbnQnLFxuICAgICAgUHJvdG9jb2w6ICdsYW1iZGEnLFxuICAgICAgVG9waWNBcm46IHtcbiAgICAgICAgUmVmOiAnVG9waWNCRkM3QUY2RScsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gIH0pO1xuXG4gIHRlc3QoJ2NyZWF0ZSBhIHN1YnNjcmlwdGlvbiB3aXRoIERMUSB3aGVuIGNsaWVudCBwcm92aWRlcyBETFEnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCB0b3BpYyA9IG5ldyBzbnMuVG9waWMoc3RhY2ssICdUb3BpYycpO1xuICAgIGNvbnN0IGRsUXVldWUgPSBuZXcgUXVldWUoc3RhY2ssICdEZWFkTGV0dGVyUXVldWUnLCB7XG4gICAgICBxdWV1ZU5hbWU6ICdNeVN1YnNjcmlwdGlvbl9ETFEnLFxuICAgICAgcmV0ZW50aW9uUGVyaW9kOiBjZGsuRHVyYXRpb24uZGF5cygxNCksXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgbmV3IHNucy5TdWJzY3JpcHRpb24oc3RhY2ssICdTdWJzY3JpcHRpb24nLCB7XG4gICAgICBlbmRwb2ludDogJ2VuZHBvaW50JyxcbiAgICAgIHByb3RvY29sOiBzbnMuU3Vic2NyaXB0aW9uUHJvdG9jb2wuTEFNQkRBLFxuICAgICAgdG9waWMsXG4gICAgICBkZWFkTGV0dGVyUXVldWU6IGRsUXVldWUsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6U05TOjpTdWJzY3JpcHRpb24nLCB7XG4gICAgICBFbmRwb2ludDogJ2VuZHBvaW50JyxcbiAgICAgIFByb3RvY29sOiAnbGFtYmRhJyxcbiAgICAgIFRvcGljQXJuOiB7XG4gICAgICAgIFJlZjogJ1RvcGljQkZDN0FGNkUnLFxuICAgICAgfSxcbiAgICAgIFJlZHJpdmVQb2xpY3k6IHtcbiAgICAgICAgZGVhZExldHRlclRhcmdldEFybjoge1xuICAgICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgICAgJ0RlYWRMZXR0ZXJRdWV1ZTlGNDgxNTQ2JyxcbiAgICAgICAgICAgICdBcm4nLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlNRUzo6UXVldWUnLCB7XG4gICAgICBRdWV1ZU5hbWU6ICdNeVN1YnNjcmlwdGlvbl9ETFEnLFxuICAgICAgTWVzc2FnZVJldGVudGlvblBlcmlvZDogMTIwOTYwMCxcbiAgICB9KTtcbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpTUVM6OlF1ZXVlUG9saWN5Jywge1xuICAgICAgUG9saWN5RG9jdW1lbnQ6IHtcbiAgICAgICAgU3RhdGVtZW50OiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgQWN0aW9uOiAnc3FzOlNlbmRNZXNzYWdlJyxcbiAgICAgICAgICAgIENvbmRpdGlvbjoge1xuICAgICAgICAgICAgICBBcm5FcXVhbHM6IHtcbiAgICAgICAgICAgICAgICAnYXdzOlNvdXJjZUFybic6IHtcbiAgICAgICAgICAgICAgICAgIFJlZjogJ1RvcGljQkZDN0FGNkUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgRWZmZWN0OiAnQWxsb3cnLFxuICAgICAgICAgICAgUHJpbmNpcGFsOiB7XG4gICAgICAgICAgICAgIFNlcnZpY2U6ICdzbnMuYW1hem9uYXdzLmNvbScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmVzb3VyY2U6IHtcbiAgICAgICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgICAgICAgJ0RlYWRMZXR0ZXJRdWV1ZTlGNDgxNTQ2JyxcbiAgICAgICAgICAgICAgICAnQXJuJyxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgVmVyc2lvbjogJzIwMTItMTAtMTcnLFxuICAgICAgfSxcbiAgICAgIFF1ZXVlczogW1xuICAgICAgICB7XG4gICAgICAgICAgUmVmOiAnRGVhZExldHRlclF1ZXVlOUY0ODE1NDYnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICB9KTtcblxuICB0ZXN0KCd3aXRoIGZpbHRlciBwb2xpY3knLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCB0b3BpYyA9IG5ldyBzbnMuVG9waWMoc3RhY2ssICdUb3BpYycpO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBzbnMuU3Vic2NyaXB0aW9uKHN0YWNrLCAnU3Vic2NyaXB0aW9uJywge1xuICAgICAgZW5kcG9pbnQ6ICdlbmRwb2ludCcsXG4gICAgICBmaWx0ZXJQb2xpY3k6IHtcbiAgICAgICAgY29sb3I6IHNucy5TdWJzY3JpcHRpb25GaWx0ZXIuc3RyaW5nRmlsdGVyKHtcbiAgICAgICAgICBhbGxvd2xpc3Q6IFsncmVkJywgJ2dyZWVuJ10sXG4gICAgICAgICAgZGVueWxpc3Q6IFsnd2hpdGUnLCAnb3JhbmdlJ10sXG4gICAgICAgICAgbWF0Y2hQcmVmaXhlczogWydibCcsICd5ZSddLFxuICAgICAgICB9KSxcbiAgICAgICAgcHJpY2U6IHNucy5TdWJzY3JpcHRpb25GaWx0ZXIubnVtZXJpY0ZpbHRlcih7XG4gICAgICAgICAgYWxsb3dsaXN0OiBbMTAwLCAyMDBdLFxuICAgICAgICAgIGJldHdlZW46IHsgc3RhcnQ6IDMwMCwgc3RvcDogMzUwIH0sXG4gICAgICAgICAgZ3JlYXRlclRoYW46IDUwMCxcbiAgICAgICAgICBsZXNzVGhhbjogMTAwMCxcbiAgICAgICAgICBiZXR3ZWVuU3RyaWN0OiB7IHN0YXJ0OiAyMDAwLCBzdG9wOiAzMDAwIH0sXG4gICAgICAgICAgZ3JlYXRlclRoYW5PckVxdWFsVG86IDEwMDAsXG4gICAgICAgICAgbGVzc1RoYW5PckVxdWFsVG86IC0yLFxuICAgICAgICB9KSxcbiAgICAgIH0sXG4gICAgICBwcm90b2NvbDogc25zLlN1YnNjcmlwdGlvblByb3RvY29sLkxBTUJEQSxcbiAgICAgIHRvcGljLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlNOUzo6U3Vic2NyaXB0aW9uJywge1xuICAgICAgRmlsdGVyUG9saWN5OiB7XG4gICAgICAgIGNvbG9yOiBbXG4gICAgICAgICAgJ3JlZCcsXG4gICAgICAgICAgJ2dyZWVuJyxcbiAgICAgICAgICB7ICdhbnl0aGluZy1idXQnOiBbJ3doaXRlJywgJ29yYW5nZSddIH0sXG4gICAgICAgICAgeyBwcmVmaXg6ICdibCcgfSxcbiAgICAgICAgICB7IHByZWZpeDogJ3llJyB9LFxuICAgICAgICBdLFxuICAgICAgICBwcmljZTogW1xuICAgICAgICAgIHsgbnVtZXJpYzogWyc9JywgMTAwXSB9LFxuICAgICAgICAgIHsgbnVtZXJpYzogWyc9JywgMjAwXSB9LFxuICAgICAgICAgIHsgbnVtZXJpYzogWyc+JywgNTAwXSB9LFxuICAgICAgICAgIHsgbnVtZXJpYzogWyc+PScsIDEwMDBdIH0sXG4gICAgICAgICAgeyBudW1lcmljOiBbJzwnLCAxMDAwXSB9LFxuICAgICAgICAgIHsgbnVtZXJpYzogWyc8PScsIC0yXSB9LFxuICAgICAgICAgIHsgbnVtZXJpYzogWyc+PScsIDMwMCwgJzw9JywgMzUwXSB9LFxuICAgICAgICAgIHsgbnVtZXJpYzogWyc+JywgMjAwMCwgJzwnLCAzMDAwXSB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9KTtcblxuICB9KTtcblxuICB0ZXN0KCd3aXRoIGZpbHRlciBwb2xpY3kgYW5kIGZpbHRlciBwb2xpY3kgc2NvcGUgTWVzc2FnZUJvZHknLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCB0b3BpYyA9IG5ldyBzbnMuVG9waWMoc3RhY2ssICdUb3BpYycpO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBzbnMuU3Vic2NyaXB0aW9uKHN0YWNrLCAnU3Vic2NyaXB0aW9uJywge1xuICAgICAgZW5kcG9pbnQ6ICdlbmRwb2ludCcsXG4gICAgICBmaWx0ZXJQb2xpY3lXaXRoTWVzc2FnZUJvZHk6IHtcbiAgICAgICAgYmFja2dyb3VuZDogc25zLlBvbGljeS5wb2xpY3koe1xuICAgICAgICAgIGNvbG9yOiBzbnMuRmlsdGVyLmZpbHRlcihzbnMuU3Vic2NyaXB0aW9uRmlsdGVyLnN0cmluZ0ZpbHRlcih7XG4gICAgICAgICAgICBhbGxvd2xpc3Q6IFsncmVkJywgJ2dyZWVuJ10sXG4gICAgICAgICAgICBkZW55bGlzdDogWyd3aGl0ZScsICdvcmFuZ2UnXSxcbiAgICAgICAgICB9KSksXG4gICAgICAgIH0pLFxuICAgICAgICBwcmljZTogc25zLkZpbHRlci5maWx0ZXIoc25zLlN1YnNjcmlwdGlvbkZpbHRlci5udW1lcmljRmlsdGVyKHtcbiAgICAgICAgICBhbGxvd2xpc3Q6IFsxMDAsIDIwMF0sXG4gICAgICAgICAgYmV0d2VlbjogeyBzdGFydDogMzAwLCBzdG9wOiAzNTAgfSxcbiAgICAgICAgICBncmVhdGVyVGhhbjogNTAwLFxuICAgICAgICAgIGxlc3NUaGFuOiAxMDAwLFxuICAgICAgICAgIGJldHdlZW5TdHJpY3Q6IHsgc3RhcnQ6IDIwMDAsIHN0b3A6IDMwMDAgfSxcbiAgICAgICAgfSkpLFxuICAgICAgfSxcbiAgICAgIHByb3RvY29sOiBzbnMuU3Vic2NyaXB0aW9uUHJvdG9jb2wuTEFNQkRBLFxuICAgICAgdG9waWMsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6U05TOjpTdWJzY3JpcHRpb24nLCB7XG4gICAgICBGaWx0ZXJQb2xpY3k6IHtcbiAgICAgICAgYmFja2dyb3VuZDoge1xuICAgICAgICAgIGNvbG9yOiBbXG4gICAgICAgICAgICAncmVkJyxcbiAgICAgICAgICAgICdncmVlbicsXG4gICAgICAgICAgICB7ICdhbnl0aGluZy1idXQnOiBbJ3doaXRlJywgJ29yYW5nZSddIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgcHJpY2U6IFtcbiAgICAgICAgICB7IG51bWVyaWM6IFsnPScsIDEwMF0gfSxcbiAgICAgICAgICB7IG51bWVyaWM6IFsnPScsIDIwMF0gfSxcbiAgICAgICAgICB7IG51bWVyaWM6IFsnPicsIDUwMF0gfSxcbiAgICAgICAgICB7IG51bWVyaWM6IFsnPCcsIDEwMDBdIH0sXG4gICAgICAgICAgeyBudW1lcmljOiBbJz49JywgMzAwLCAnPD0nLCAzNTBdIH0sXG4gICAgICAgICAgeyBudW1lcmljOiBbJz4nLCAyMDAwLCAnPCcsIDMwMDBdIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAgRmlsdGVyUG9saWN5U2NvcGU6ICdNZXNzYWdlQm9keScsXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3dpdGggbnVtZXJpYyBmaWx0ZXIgYW5kIDAgdmFsdWVzJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnVG9waWMnKTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgc25zLlN1YnNjcmlwdGlvbihzdGFjaywgJ1N1YnNjcmlwdGlvbicsIHtcbiAgICAgIGVuZHBvaW50OiAnZW5kcG9pbnQnLFxuICAgICAgZmlsdGVyUG9saWN5OiB7XG4gICAgICAgIHByaWNlOiBzbnMuU3Vic2NyaXB0aW9uRmlsdGVyLm51bWVyaWNGaWx0ZXIoe1xuICAgICAgICAgIGdyZWF0ZXJUaGFuOiAwLFxuICAgICAgICAgIGdyZWF0ZXJUaGFuT3JFcXVhbFRvOiAwLFxuICAgICAgICAgIGxlc3NUaGFuOiAwLFxuICAgICAgICAgIGxlc3NUaGFuT3JFcXVhbFRvOiAwLFxuICAgICAgICB9KSxcbiAgICAgIH0sXG4gICAgICBwcm90b2NvbDogc25zLlN1YnNjcmlwdGlvblByb3RvY29sLkxBTUJEQSxcbiAgICAgIHRvcGljLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlNOUzo6U3Vic2NyaXB0aW9uJywge1xuICAgICAgRmlsdGVyUG9saWN5OiB7XG4gICAgICAgIHByaWNlOiBbXG4gICAgICAgICAgeyBudW1lcmljOiBbJz4nLCAwXSB9LFxuICAgICAgICAgIHsgbnVtZXJpYzogWyc+PScsIDBdIH0sXG4gICAgICAgICAgeyBudW1lcmljOiBbJzwnLCAwXSB9LFxuICAgICAgICAgIHsgbnVtZXJpYzogWyc8PScsIDBdIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gIH0pO1xuXG4gIHRlc3QoJ3dpdGggZXhpc3RzRmlsdGVyJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnVG9waWMnKTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgc25zLlN1YnNjcmlwdGlvbihzdGFjaywgJ1N1YnNjcmlwdGlvbicsIHtcbiAgICAgIGVuZHBvaW50OiAnZW5kcG9pbnQnLFxuICAgICAgZmlsdGVyUG9saWN5OiB7XG4gICAgICAgIHNpemU6IHNucy5TdWJzY3JpcHRpb25GaWx0ZXIuZXhpc3RzRmlsdGVyKCksXG4gICAgICB9LFxuICAgICAgcHJvdG9jb2w6IHNucy5TdWJzY3JpcHRpb25Qcm90b2NvbC5MQU1CREEsXG4gICAgICB0b3BpYyxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpTTlM6OlN1YnNjcmlwdGlvbicsIHtcbiAgICAgIEZpbHRlclBvbGljeToge1xuICAgICAgICBzaXplOiBbeyBleGlzdHM6IHRydWUgfV0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gIH0pO1xuXG5cbiAgdGVzdC5lYWNoKFxuICAgIFtcbiAgICAgIFN1YnNjcmlwdGlvblByb3RvY29sLkxBTUJEQSxcbiAgICAgIFN1YnNjcmlwdGlvblByb3RvY29sLkVNQUlMLFxuICAgICAgU3Vic2NyaXB0aW9uUHJvdG9jb2wuRU1BSUxfSlNPTixcbiAgICAgIFN1YnNjcmlwdGlvblByb3RvY29sLlNNUyxcbiAgICAgIFN1YnNjcmlwdGlvblByb3RvY29sLkFQUExJQ0FUSU9OLFxuICAgIF0pXG4gICgndGhyb3dzIHdpdGggcmF3IGRlbGl2ZXJ5IGZvciAlcyBwcm90b2NvbCcsIChwcm90b2NvbDogU3Vic2NyaXB0aW9uUHJvdG9jb2wpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IHRvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ1RvcGljJyk7XG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCgoKSA9PiBuZXcgc25zLlN1YnNjcmlwdGlvbihzdGFjaywgJ1N1YnNjcmlwdGlvbicsIHtcbiAgICAgIGVuZHBvaW50OiAnZW5kcG9pbnQnLFxuICAgICAgcHJvdG9jb2w6IHByb3RvY29sLFxuICAgICAgdG9waWMsXG4gICAgICByYXdNZXNzYWdlRGVsaXZlcnk6IHRydWUsXG4gICAgfSkpLnRvVGhyb3coL1JhdyBtZXNzYWdlIGRlbGl2ZXJ5Lyk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Rocm93cyB3aXRoIG1vcmUgdGhhbiA1IGF0dHJpYnV0ZXMgaW4gYSBmaWx0ZXIgcG9saWN5JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnVG9waWMnKTtcbiAgICBjb25zdCBjb25kID0geyBjb25kaXRpb25zOiBbXSB9O1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCgoKSA9PiBuZXcgc25zLlN1YnNjcmlwdGlvbihzdGFjaywgJ1N1YnNjcmlwdGlvbicsIHtcbiAgICAgIGVuZHBvaW50OiAnZW5kcG9pbnQnLFxuICAgICAgcHJvdG9jb2w6IHNucy5TdWJzY3JpcHRpb25Qcm90b2NvbC5MQU1CREEsXG4gICAgICB0b3BpYyxcbiAgICAgIGZpbHRlclBvbGljeToge1xuICAgICAgICBhOiBjb25kLFxuICAgICAgICBiOiBjb25kLFxuICAgICAgICBjOiBjb25kLFxuICAgICAgICBkOiBjb25kLFxuICAgICAgICBlOiBjb25kLFxuICAgICAgICBmOiBjb25kLFxuICAgICAgfSxcbiAgICB9KSkudG9UaHJvdygvNSBhdHRyaWJ1dGUgbmFtZXMvKTtcblxuICB9KTtcblxuICB0ZXN0KCd0aHJvd3Mgd2l0aCBtb3JlIHRoYW4gMTUwIGNvbmRpdGlvbnMgaW4gYSBmaWx0ZXIgcG9saWN5JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnVG9waWMnKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4gbmV3IHNucy5TdWJzY3JpcHRpb24oc3RhY2ssICdTdWJzY3JpcHRpb24nLCB7XG4gICAgICBlbmRwb2ludDogJ2VuZHBvaW50JyxcbiAgICAgIHByb3RvY29sOiBzbnMuU3Vic2NyaXB0aW9uUHJvdG9jb2wuTEFNQkRBLFxuICAgICAgdG9waWMsXG4gICAgICBmaWx0ZXJQb2xpY3k6IHtcbiAgICAgICAgYTogeyBjb25kaXRpb25zOiBbLi4uQXJyYXkuZnJvbShBcnJheSgyKS5rZXlzKCkpXSB9LFxuICAgICAgICBiOiB7IGNvbmRpdGlvbnM6IFsuLi5BcnJheS5mcm9tKEFycmF5KDEwKS5rZXlzKCkpXSB9LFxuICAgICAgICBjOiB7IGNvbmRpdGlvbnM6IFsuLi5BcnJheS5mcm9tKEFycmF5KDgpLmtleXMoKSldIH0sXG4gICAgICB9LFxuICAgIH0pKS50b1Rocm93KC9cXCgxNjBcXCkgbXVzdCBub3QgZXhjZWVkIDE1MC8pO1xuXG4gIH0pO1xuXG4gIHRlc3QoJ3Rocm93cyB3aXRoIG1vcmUgdGhhbiAxNTAgY29uZGl0aW9ucyBpbiBhIGZpbHRlciBwb2xpY3kgd2l0aCBmaWx0ZXIgcG9saWN5IHNjb3BlIHNldCB0byBNZXNzYWdlQm9keScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IHRvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ1RvcGljJyk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KCgpID0+IG5ldyBzbnMuU3Vic2NyaXB0aW9uKHN0YWNrLCAnU3Vic2NyaXB0aW9uJywge1xuICAgICAgZW5kcG9pbnQ6ICdlbmRwb2ludCcsXG4gICAgICBwcm90b2NvbDogc25zLlN1YnNjcmlwdGlvblByb3RvY29sLkxBTUJEQSxcbiAgICAgIHRvcGljLFxuICAgICAgZmlsdGVyUG9saWN5V2l0aE1lc3NhZ2VCb2R5OiB7XG4gICAgICAgIGE6IHNucy5Qb2xpY3kucG9saWN5KHsgYjogc25zLkZpbHRlci5maWx0ZXIobmV3IHNucy5TdWJzY3JpcHRpb25GaWx0ZXIoWy4uLkFycmF5LmZyb20oQXJyYXkoMTApLmtleXMoKSldKSkgfSksXG4gICAgICAgIGM6IHNucy5Qb2xpY3kucG9saWN5KHsgZDogc25zLkZpbHRlci5maWx0ZXIobmV3IHNucy5TdWJzY3JpcHRpb25GaWx0ZXIoWy4uLkFycmF5LmZyb20oQXJyYXkoNSkua2V5cygpKV0pKSB9KSxcbiAgICAgIH0sXG4gICAgfSkpLnRvVGhyb3coL1xcKDIwMFxcKSBtdXN0IG5vdCBleGNlZWQgMTUwLyk7XG5cbiAgfSk7XG5cbiAgdGVzdCgndGhyb3dzIGFuIGVycm9yIHdoZW4gc3Vic2NyaXB0aW9uIHJvbGUgYXJuIGlzIG5vdCBlbnRlcmVkIHdpdGggZmlyZWhvc2Ugc3Vic2NyaXB0aW9uIHByb3RvY29sJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnVG9waWMnKTtcblxuICAgIC8vVEhFTlxuICAgIGV4cGVjdCgoKSA9PiBuZXcgc25zLlN1YnNjcmlwdGlvbihzdGFjaywgJ1N1YnNjcmlwdGlvbicsIHtcbiAgICAgIGVuZHBvaW50OiAnZW5kcG9pbnQnLFxuICAgICAgcHJvdG9jb2w6IHNucy5TdWJzY3JpcHRpb25Qcm90b2NvbC5GSVJFSE9TRSxcbiAgICAgIHRvcGljLFxuICAgIH0pKS50b1Rocm93KC9TdWJzY3JpcHRpb24gcm9sZSBhcm4gaXMgcmVxdWlyZWQgZmllbGQgZm9yIHN1YnNjcmlwdGlvbnMgd2l0aCBhIGZpcmVob3NlIHByb3RvY29sLi8pO1xuICB9KTtcbn0pO1xuIl19