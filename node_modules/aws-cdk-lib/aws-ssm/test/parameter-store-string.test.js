"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const cdk = require("../../core");
const ssm = require("../lib");
test('can reference SSMPS string - specific version', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    const ref = ssm.StringParameter.fromStringParameterAttributes(stack, 'Ref', {
        parameterName: '/some/key',
        version: 123,
    });
    // THEN
    expect(stack.resolve(ref.stringValue)).toEqual('{{resolve:ssm:/some/key:123}}');
});
test('can reference SSMPS string - latest version', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    const ref = ssm.StringParameter.fromStringParameterAttributes(stack, 'Ref', {
        parameterName: '/some/key',
    });
    // THEN
    assertions_1.Template.fromStack(stack).templateMatches({
        Parameters: {
            RefParameter: {
                Type: 'AWS::SSM::Parameter::Value<String>',
                Default: '/some/key',
            },
        },
    });
    expect(stack.resolve(ref.stringValue)).toEqual({ Ref: 'RefParameter' });
});
test('can reference SSMPS secure string', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    const ref = ssm.StringParameter.fromSecureStringParameterAttributes(stack, 'Ref', {
        parameterName: '/some/key',
        version: 123,
    }).stringValue;
    // THEN
    expect(stack.resolve(ref)).toEqual('{{resolve:ssm-secure:/some/key:123}}');
});
test('empty parameterName will throw', () => {
    // GIVEN
    const stack = new cdk.Stack();
    // WHEN
    expect(() => {
        ssm.StringParameter.fromStringParameterAttributes(stack, 'Ref', {
            parameterName: '',
        });
    }).toThrow(/parameterName cannot be an empty string/);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW1ldGVyLXN0b3JlLXN0cmluZy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGFyYW1ldGVyLXN0b3JlLXN0cmluZy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLGtDQUFrQztBQUNsQyw4QkFBOEI7QUFFOUIsSUFBSSxDQUFDLCtDQUErQyxFQUFFLEdBQUcsRUFBRTtJQUN6RCxRQUFRO0lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFOUIsT0FBTztJQUNQLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsNkJBQTZCLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtRQUMxRSxhQUFhLEVBQUUsV0FBVztRQUMxQixPQUFPLEVBQUUsR0FBRztLQUNiLENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQUNsRixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxHQUFHLEVBQUU7SUFDdkQsUUFBUTtJQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRTlCLE9BQU87SUFDUCxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLDZCQUE2QixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDMUUsYUFBYSxFQUFFLFdBQVc7S0FDM0IsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLGVBQWUsQ0FBQztRQUN4QyxVQUFVLEVBQUU7WUFDVixZQUFZLEVBQUU7Z0JBQ1osSUFBSSxFQUFFLG9DQUFvQztnQkFDMUMsT0FBTyxFQUFFLFdBQVc7YUFDckI7U0FDRjtLQUNGLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0FBQzFFLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtJQUM3QyxRQUFRO0lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFOUIsT0FBTztJQUNQLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsbUNBQW1DLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtRQUNoRixhQUFhLEVBQUUsV0FBVztRQUMxQixPQUFPLEVBQUUsR0FBRztLQUNiLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFFZixPQUFPO0lBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM3RSxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7SUFDMUMsUUFBUTtJQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRTlCLE9BQU87SUFDUCxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsR0FBRyxDQUFDLGVBQWUsQ0FBQyw2QkFBNkIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO1lBQzlELGFBQWEsRUFBRSxFQUFFO1NBQ2xCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0FBQ3hELENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIHNzbSBmcm9tICcuLi9saWInO1xuXG50ZXN0KCdjYW4gcmVmZXJlbmNlIFNTTVBTIHN0cmluZyAtIHNwZWNpZmljIHZlcnNpb24nLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gIC8vIFdIRU5cbiAgY29uc3QgcmVmID0gc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU3RyaW5nUGFyYW1ldGVyQXR0cmlidXRlcyhzdGFjaywgJ1JlZicsIHtcbiAgICBwYXJhbWV0ZXJOYW1lOiAnL3NvbWUva2V5JyxcbiAgICB2ZXJzaW9uOiAxMjMsXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KHN0YWNrLnJlc29sdmUocmVmLnN0cmluZ1ZhbHVlKSkudG9FcXVhbCgne3tyZXNvbHZlOnNzbTovc29tZS9rZXk6MTIzfX0nKTtcbn0pO1xuXG50ZXN0KCdjYW4gcmVmZXJlbmNlIFNTTVBTIHN0cmluZyAtIGxhdGVzdCB2ZXJzaW9uJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAvLyBXSEVOXG4gIGNvbnN0IHJlZiA9IHNzbS5TdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlckF0dHJpYnV0ZXMoc3RhY2ssICdSZWYnLCB7XG4gICAgcGFyYW1ldGVyTmFtZTogJy9zb21lL2tleScsXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS50ZW1wbGF0ZU1hdGNoZXMoe1xuICAgIFBhcmFtZXRlcnM6IHtcbiAgICAgIFJlZlBhcmFtZXRlcjoge1xuICAgICAgICBUeXBlOiAnQVdTOjpTU006OlBhcmFtZXRlcjo6VmFsdWU8U3RyaW5nPicsXG4gICAgICAgIERlZmF1bHQ6ICcvc29tZS9rZXknLFxuICAgICAgfSxcbiAgICB9LFxuICB9KTtcblxuICBleHBlY3Qoc3RhY2sucmVzb2x2ZShyZWYuc3RyaW5nVmFsdWUpKS50b0VxdWFsKHsgUmVmOiAnUmVmUGFyYW1ldGVyJyB9KTtcbn0pO1xuXG50ZXN0KCdjYW4gcmVmZXJlbmNlIFNTTVBTIHNlY3VyZSBzdHJpbmcnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gIC8vIFdIRU5cbiAgY29uc3QgcmVmID0gc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU2VjdXJlU3RyaW5nUGFyYW1ldGVyQXR0cmlidXRlcyhzdGFjaywgJ1JlZicsIHtcbiAgICBwYXJhbWV0ZXJOYW1lOiAnL3NvbWUva2V5JyxcbiAgICB2ZXJzaW9uOiAxMjMsXG4gIH0pLnN0cmluZ1ZhbHVlO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KHN0YWNrLnJlc29sdmUocmVmKSkudG9FcXVhbCgne3tyZXNvbHZlOnNzbS1zZWN1cmU6L3NvbWUva2V5OjEyM319Jyk7XG59KTtcblxudGVzdCgnZW1wdHkgcGFyYW1ldGVyTmFtZSB3aWxsIHRocm93JywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAvLyBXSEVOXG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgc3NtLlN0cmluZ1BhcmFtZXRlci5mcm9tU3RyaW5nUGFyYW1ldGVyQXR0cmlidXRlcyhzdGFjaywgJ1JlZicsIHtcbiAgICAgIHBhcmFtZXRlck5hbWU6ICcnLFxuICAgIH0pO1xuICB9KS50b1Rocm93KC9wYXJhbWV0ZXJOYW1lIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcvKTtcbn0pO1xuIl19