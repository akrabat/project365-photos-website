"use strict";
/* eslint-disable max-len */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../../core");
const util_1 = require("../lib/util");
describe('arnForParameterName', () => {
    describe('simple names', () => {
        test('concrete parameterName and no physical name (sep is "/")', () => {
            const stack = new core_1.Stack();
            expect(stack.resolve((0, util_1.arnForParameterName)(stack, 'myParam', undefined))).toEqual({
                'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':ssm:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':parameter/myParam']],
            });
        });
        test('token parameterName and concrete physical name (no additional "/")', () => {
            const stack = new core_1.Stack();
            expect(stack.resolve((0, util_1.arnForParameterName)(stack, core_1.Token.asString({ Ref: 'Boom' }), { physicalName: 'myParam' }))).toEqual({
                'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':ssm:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':parameter/', { Ref: 'Boom' }]],
            });
        });
        test('token parameterName, explicit "/" separator', () => {
            const stack = new core_1.Stack();
            expect(stack.resolve((0, util_1.arnForParameterName)(stack, core_1.Token.asString({ Ref: 'Boom' }), { simpleName: true }))).toEqual({
                'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':ssm:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':parameter/', { Ref: 'Boom' }]],
            });
        });
    });
    describe('path names', () => {
        test('concrete parameterName and no physical name (sep is "/")', () => {
            const stack = new core_1.Stack();
            expect(stack.resolve((0, util_1.arnForParameterName)(stack, '/foo/bar', undefined))).toEqual({
                'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':ssm:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':parameter/foo/bar']],
            });
        });
        test('token parameterName and concrete physical name (no sep)', () => {
            const stack = new core_1.Stack();
            expect(stack.resolve((0, util_1.arnForParameterName)(stack, core_1.Token.asString({ Ref: 'Boom' }), { physicalName: '/foo/bar' }))).toEqual({
                'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':ssm:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':parameter', { Ref: 'Boom' }]],
            });
        });
        test('token parameterName, explicit "" separator', () => {
            const stack = new core_1.Stack();
            expect(stack.resolve((0, util_1.arnForParameterName)(stack, core_1.Token.asString({ Ref: 'Boom' }), { simpleName: false }))).toEqual({
                'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':ssm:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':parameter', { Ref: 'Boom' }]],
            });
        });
    });
    test('fails if explicit separator is not defined and parameterName is a token', () => {
        const stack = new core_1.Stack();
        expect(() => (0, util_1.arnForParameterName)(stack, core_1.Token.asString({ Ref: 'Boom' }))).toThrow(/Unable to determine ARN separator for SSM parameter since the parameter name is an unresolved token. Use "fromAttributes" and specify "simpleName" explicitly/);
    });
});
//# sourceMappingURL=data:application/json;base64,