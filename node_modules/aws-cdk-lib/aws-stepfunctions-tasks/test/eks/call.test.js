"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const eks = require("../../../aws-eks");
const sfn = require("../../../aws-stepfunctions");
const core_1 = require("../../../core");
const call_1 = require("../../lib/eks/call");
let stack;
let cluster;
beforeEach(() => {
    //GIVEN
    stack = new core_1.Stack();
    cluster = new eks.Cluster(stack, 'Cluster', {
        version: eks.KubernetesVersion.V1_21,
        clusterName: 'eksCluster',
    });
});
test('Call an EKS endpoint', () => {
    // WHEN
    const task = new call_1.EksCall(stack, 'Call', {
        cluster: cluster,
        httpMethod: call_1.HttpMethods.GET,
        httpPath: 'path',
        requestBody: sfn.TaskInput.fromObject({
            Body: 'requestBody',
        }),
    });
    // THEN
    expect(stack.resolve(task.toStateJson())).toEqual({
        Type: 'Task',
        Resource: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':states:::eks:call',
                ],
            ],
        },
        End: true,
        Parameters: {
            ClusterName: {
                Ref: 'Cluster9EE0221C',
            },
            CertificateAuthority: {
                'Fn::GetAtt': [
                    'Cluster9EE0221C',
                    'CertificateAuthorityData',
                ],
            },
            Endpoint: {
                'Fn::GetAtt': [
                    'Cluster9EE0221C',
                    'Endpoint',
                ],
            },
            Method: 'GET',
            Path: 'path',
            RequestBody: {
                Body: 'requestBody',
            },
        },
    });
});
test('Call an EKS endpoint with requestBody as a string', () => {
    // WHEN
    const task = new call_1.EksCall(stack, 'Call', {
        cluster: cluster,
        httpMethod: call_1.HttpMethods.GET,
        httpPath: 'path',
        requestBody: sfn.TaskInput.fromText('requestBody'),
    });
    // THEN
    expect(stack.resolve(task.toStateJson())).toEqual({
        Type: 'Task',
        Resource: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':states:::eks:call',
                ],
            ],
        },
        End: true,
        Parameters: {
            ClusterName: {
                Ref: 'Cluster9EE0221C',
            },
            CertificateAuthority: {
                'Fn::GetAtt': [
                    'Cluster9EE0221C',
                    'CertificateAuthorityData',
                ],
            },
            Endpoint: {
                'Fn::GetAtt': [
                    'Cluster9EE0221C',
                    'Endpoint',
                ],
            },
            Method: 'GET',
            Path: 'path',
            RequestBody: 'requestBody',
        },
    });
});
test('Call an EKS endpoint with requestBody supply through path', () => {
    // WHEN
    const task = new call_1.EksCall(stack, 'Call', {
        cluster: cluster,
        httpMethod: call_1.HttpMethods.GET,
        httpPath: 'path',
        requestBody: sfn.TaskInput.fromJsonPathAt('$.Request.Body'),
    });
    // THEN
    expect(stack.resolve(task.toStateJson())).toEqual({
        Type: 'Task',
        Resource: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':states:::eks:call',
                ],
            ],
        },
        End: true,
        Parameters: {
            'ClusterName': {
                Ref: 'Cluster9EE0221C',
            },
            'CertificateAuthority': {
                'Fn::GetAtt': [
                    'Cluster9EE0221C',
                    'CertificateAuthorityData',
                ],
            },
            'Endpoint': {
                'Fn::GetAtt': [
                    'Cluster9EE0221C',
                    'Endpoint',
                ],
            },
            'Method': 'GET',
            'Path': 'path',
            'RequestBody.$': '$.Request.Body',
        },
    });
});
test('Task throws if RUN_JOB is supplied as service integration pattern', () => {
    expect(() => {
        new call_1.EksCall(stack, 'Call', {
            cluster: cluster,
            httpMethod: call_1.HttpMethods.GET,
            httpPath: 'path',
            requestBody: sfn.TaskInput.fromObject({
                RequestBody: 'requestBody',
            }),
            integrationPattern: sfn.IntegrationPattern.RUN_JOB,
        });
    }).toThrow(/Unsupported service integration pattern. Supported Patterns: REQUEST_RESPONSE. Received: RUN_JOB/);
});
test('Task throws if WAIT_FOR_TASK_TOKEN is supplied as service integration pattern', () => {
    expect(() => {
        new call_1.EksCall(stack, 'Call', {
            cluster: cluster,
            httpMethod: call_1.HttpMethods.GET,
            httpPath: 'path',
            requestBody: sfn.TaskInput.fromObject({
                RequestBody: 'requestBody',
            }),
            integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,
        });
    }).toThrow(/Unsupported service integration pattern. Supported Patterns: REQUEST_RESPONSE. Received: WAIT_FOR_TASK_TOKEN/);
});
test('Task throws if cluster supplied does not have clusterEndpoint configured', () => {
    const importedCluster = eks.Cluster.fromClusterAttributes(stack, 'InvalidCluster', {
        clusterName: 'importedCluster',
        clusterCertificateAuthorityData: 'clusterCertificateAuthorityData',
    });
    expect(() => {
        new call_1.EksCall(stack, 'Call', {
            cluster: importedCluster,
            httpMethod: call_1.HttpMethods.GET,
            httpPath: 'path',
            requestBody: sfn.TaskInput.fromObject({
                RequestBody: 'requestBody',
            }),
        });
    }).toThrow(/The "clusterEndpoint" property must be specified when using an imported Cluster./);
});
test('Task throws if cluster supplied does not have clusterCertificateAuthorityData configured', () => {
    const importedCluster = eks.Cluster.fromClusterAttributes(stack, 'InvalidCluster', {
        clusterName: 'importedCluster',
        clusterEndpoint: 'clusterEndpoint',
    });
    expect(() => {
        new call_1.EksCall(stack, 'Call', {
            cluster: importedCluster,
            httpMethod: call_1.HttpMethods.GET,
            httpPath: 'path',
            requestBody: sfn.TaskInput.fromObject({
                RequestBody: 'requestBody',
            }),
        });
    }).toThrow(/The "clusterCertificateAuthorityData" property must be specified when using an imported Cluster./);
});
//# sourceMappingURL=data:application/json;base64,