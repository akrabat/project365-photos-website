"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const sfn = require("../../../aws-stepfunctions");
const cdk = require("../../../core");
const tasks = require("../../lib");
let stack;
beforeEach(() => {
    // GIVEN
    stack = new cdk.Stack();
});
test('Set termination protection with static ClusterId and TerminationProtected', () => {
    // WHEN
    const task = new tasks.EmrSetClusterTerminationProtection(stack, 'Task', {
        clusterId: 'ClusterId',
        terminationProtected: false,
    });
    // THEN
    expect(stack.resolve(task.toStateJson())).toEqual({
        Type: 'Task',
        Resource: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':states:::elasticmapreduce:setClusterTerminationProtection',
                ],
            ],
        },
        End: true,
        Parameters: {
            ClusterId: 'ClusterId',
            TerminationProtected: false,
        },
    });
});
test('task policies are generated', () => {
    // WHEN
    const task = new tasks.EmrSetClusterTerminationProtection(stack, 'Task', {
        clusterId: 'ClusterId',
        terminationProtected: false,
    });
    new sfn.StateMachine(stack, 'SM', {
        definition: task,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: 'elasticmapreduce:SetTerminationProtection',
                    Effect: 'Allow',
                    Resource: {
                        'Fn::Join': [
                            '',
                            [
                                'arn:',
                                {
                                    Ref: 'AWS::Partition',
                                },
                                ':elasticmapreduce:',
                                {
                                    Ref: 'AWS::Region',
                                },
                                ':',
                                {
                                    Ref: 'AWS::AccountId',
                                },
                                ':cluster/*',
                            ],
                        ],
                    },
                },
            ],
        },
    });
});
test('Set termination protection with static ClusterId and TerminationProtected from payload', () => {
    // WHEN
    const task = new tasks.EmrSetClusterTerminationProtection(stack, 'Task', {
        clusterId: 'ClusterId',
        terminationProtected: sfn.TaskInput.fromJsonPathAt('$.TerminationProtected').value,
    });
    // THEN
    expect(stack.resolve(task.toStateJson())).toEqual({
        Type: 'Task',
        Resource: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':states:::elasticmapreduce:setClusterTerminationProtection',
                ],
            ],
        },
        End: true,
        Parameters: {
            'ClusterId': 'ClusterId',
            'TerminationProtected.$': '$.TerminationProtected',
        },
    });
});
test('Set termination protection with ClusterId from payload and static TerminationProtected', () => {
    // WHEN
    const task = new tasks.EmrSetClusterTerminationProtection(stack, 'Task', {
        clusterId: sfn.TaskInput.fromJsonPathAt('$.ClusterId').value,
        terminationProtected: false,
    });
    // THEN
    expect(stack.resolve(task.toStateJson())).toEqual({
        Type: 'Task',
        Resource: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':states:::elasticmapreduce:setClusterTerminationProtection',
                ],
            ],
        },
        End: true,
        Parameters: {
            'ClusterId.$': '$.ClusterId',
            'TerminationProtected': false,
        },
    });
});
//# sourceMappingURL=data:application/json;base64,