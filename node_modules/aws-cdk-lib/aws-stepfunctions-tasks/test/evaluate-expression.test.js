"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const sfn = require("../../aws-stepfunctions");
const core_1 = require("../../core");
const tasks = require("../lib");
let stack;
beforeEach(() => {
    stack = new core_1.Stack();
});
test('Eval with Node.js', () => {
    // WHEN
    const task = new tasks.EvaluateExpression(stack, 'Task', {
        expression: '$.a + $.b',
    });
    new sfn.StateMachine(stack, 'SM', {
        definition: task,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::StepFunctions::StateMachine', {
        DefinitionString: {
            'Fn::Join': [
                '',
                [
                    '{"StartAt":"Task","States":{"Task":{"End":true,"Type":"Task","Resource":"',
                    {
                        'Fn::GetAtt': ['Evalda2d1181604e4a4586941a6abd7fe42dF371675D', 'Arn'],
                    },
                    '","Parameters":{"expression":"$.a + $.b","expressionAttributeValues":{"$.a.$":"$.a","$.b.$":"$.b"}}}}}',
                ],
            ],
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::Lambda::Function', {
        Runtime: 'nodejs14.x',
    });
});
test('expression does not contain paths', () => {
    // WHEN
    const task = new tasks.EvaluateExpression(stack, 'Task', {
        expression: '2 + 2',
    });
    new sfn.StateMachine(stack, 'SM', {
        definition: task,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::StepFunctions::StateMachine', {
        DefinitionString: {
            'Fn::Join': [
                '',
                [
                    '{"StartAt":"Task","States":{"Task":{"End":true,"Type":"Task","Resource":"',
                    {
                        'Fn::GetAtt': ['Evalda2d1181604e4a4586941a6abd7fe42dF371675D', 'Arn'],
                    },
                    '","Parameters":{"expression":"2 + 2","expressionAttributeValues":{}}}}}',
                ],
            ],
        },
    });
});
test('with dash and underscore in path', () => {
    // WHEN
    const task = new tasks.EvaluateExpression(stack, 'Task', {
        expression: '$.a_b + $.c-d + $[_e]',
    });
    new sfn.StateMachine(stack, 'SM', {
        definition: task,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::StepFunctions::StateMachine', {
        DefinitionString: {
            'Fn::Join': [
                '',
                [
                    '{"StartAt":"Task","States":{"Task":{"End":true,"Type":"Task","Resource":"',
                    {
                        'Fn::GetAtt': ['Evalda2d1181604e4a4586941a6abd7fe42dF371675D', 'Arn'],
                    },
                    '","Parameters":{"expression":"$.a_b + $.c-d + $[_e]","expressionAttributeValues":{"$.a_b.$":"$.a_b","$.c-d.$":"$.c-d","$[_e].$":"$[_e]"}}}}}',
                ],
            ],
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbHVhdGUtZXhwcmVzc2lvbi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXZhbHVhdGUtZXhwcmVzc2lvbi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLCtDQUErQztBQUMvQyxxQ0FBbUM7QUFDbkMsZ0NBQWdDO0FBRWhDLElBQUksS0FBWSxDQUFDO0FBQ2pCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDZCxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztBQUN0QixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7SUFDN0IsT0FBTztJQUNQLE1BQU0sSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7UUFDdkQsVUFBVSxFQUFFLFdBQVc7S0FDeEIsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUU7UUFDaEMsVUFBVSxFQUFFLElBQUk7S0FDakIsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLGtDQUFrQyxFQUFFO1FBQ2xGLGdCQUFnQixFQUFFO1lBQ2hCLFVBQVUsRUFBRTtnQkFDVixFQUFFO2dCQUNGO29CQUNFLDJFQUEyRTtvQkFDM0U7d0JBQ0UsWUFBWSxFQUFFLENBQUMsOENBQThDLEVBQUUsS0FBSyxDQUFDO3FCQUN0RTtvQkFDRCx3R0FBd0c7aUJBQ3pHO2FBQ0Y7U0FDRjtLQUNGLENBQUMsQ0FBQztJQUVILHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLHVCQUF1QixFQUFFO1FBQ3ZFLE9BQU8sRUFBRSxZQUFZO0tBQ3RCLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtJQUM3QyxPQUFPO0lBQ1AsTUFBTSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtRQUN2RCxVQUFVLEVBQUUsT0FBTztLQUNwQixDQUFDLENBQUM7SUFDSCxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtRQUNoQyxVQUFVLEVBQUUsSUFBSTtLQUNqQixDQUFDLENBQUM7SUFFSCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxrQ0FBa0MsRUFBRTtRQUNsRixnQkFBZ0IsRUFBRTtZQUNoQixVQUFVLEVBQUU7Z0JBQ1YsRUFBRTtnQkFDRjtvQkFDRSwyRUFBMkU7b0JBQzNFO3dCQUNFLFlBQVksRUFBRSxDQUFDLDhDQUE4QyxFQUFFLEtBQUssQ0FBQztxQkFDdEU7b0JBQ0QseUVBQXlFO2lCQUMxRTthQUNGO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7SUFDNUMsT0FBTztJQUNQLE1BQU0sSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7UUFDdkQsVUFBVSxFQUFFLHVCQUF1QjtLQUNwQyxDQUFDLENBQUM7SUFDSCxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtRQUNoQyxVQUFVLEVBQUUsSUFBSTtLQUNqQixDQUFDLENBQUM7SUFFSCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxrQ0FBa0MsRUFBRTtRQUNsRixnQkFBZ0IsRUFBRTtZQUNoQixVQUFVLEVBQUU7Z0JBQ1YsRUFBRTtnQkFDRjtvQkFDRSwyRUFBMkU7b0JBQzNFO3dCQUNFLFlBQVksRUFBRSxDQUFDLDhDQUE4QyxFQUFFLEtBQUssQ0FBQztxQkFDdEU7b0JBQ0QsOElBQThJO2lCQUMvSTthQUNGO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vYXNzZXJ0aW9ucyc7XG5pbXBvcnQgKiBhcyBzZm4gZnJvbSAnLi4vLi4vYXdzLXN0ZXBmdW5jdGlvbnMnO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIHRhc2tzIGZyb20gJy4uL2xpYic7XG5cbmxldCBzdGFjazogU3RhY2s7XG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgc3RhY2sgPSBuZXcgU3RhY2soKTtcbn0pO1xuXG50ZXN0KCdFdmFsIHdpdGggTm9kZS5qcycsICgpID0+IHtcbiAgLy8gV0hFTlxuICBjb25zdCB0YXNrID0gbmV3IHRhc2tzLkV2YWx1YXRlRXhwcmVzc2lvbihzdGFjaywgJ1Rhc2snLCB7XG4gICAgZXhwcmVzc2lvbjogJyQuYSArICQuYicsXG4gIH0pO1xuICBuZXcgc2ZuLlN0YXRlTWFjaGluZShzdGFjaywgJ1NNJywge1xuICAgIGRlZmluaXRpb246IHRhc2ssXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6U3RlcEZ1bmN0aW9uczo6U3RhdGVNYWNoaW5lJywge1xuICAgIERlZmluaXRpb25TdHJpbmc6IHtcbiAgICAgICdGbjo6Sm9pbic6IFtcbiAgICAgICAgJycsXG4gICAgICAgIFtcbiAgICAgICAgICAne1wiU3RhcnRBdFwiOlwiVGFza1wiLFwiU3RhdGVzXCI6e1wiVGFza1wiOntcIkVuZFwiOnRydWUsXCJUeXBlXCI6XCJUYXNrXCIsXCJSZXNvdXJjZVwiOlwiJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAnRm46OkdldEF0dCc6IFsnRXZhbGRhMmQxMTgxNjA0ZTRhNDU4Njk0MWE2YWJkN2ZlNDJkRjM3MTY3NUQnLCAnQXJuJ10sXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnXCIsXCJQYXJhbWV0ZXJzXCI6e1wiZXhwcmVzc2lvblwiOlwiJC5hICsgJC5iXCIsXCJleHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXCI6e1wiJC5hLiRcIjpcIiQuYVwiLFwiJC5iLiRcIjpcIiQuYlwifX19fX0nLFxuICAgICAgICBdLFxuICAgICAgXSxcbiAgICB9LFxuICB9KTtcblxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpMYW1iZGE6OkZ1bmN0aW9uJywge1xuICAgIFJ1bnRpbWU6ICdub2RlanMxNC54JyxcbiAgfSk7XG59KTtcblxudGVzdCgnZXhwcmVzc2lvbiBkb2VzIG5vdCBjb250YWluIHBhdGhzJywgKCkgPT4ge1xuICAvLyBXSEVOXG4gIGNvbnN0IHRhc2sgPSBuZXcgdGFza3MuRXZhbHVhdGVFeHByZXNzaW9uKHN0YWNrLCAnVGFzaycsIHtcbiAgICBleHByZXNzaW9uOiAnMiArIDInLFxuICB9KTtcbiAgbmV3IHNmbi5TdGF0ZU1hY2hpbmUoc3RhY2ssICdTTScsIHtcbiAgICBkZWZpbml0aW9uOiB0YXNrLFxuICB9KTtcblxuICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpTdGVwRnVuY3Rpb25zOjpTdGF0ZU1hY2hpbmUnLCB7XG4gICAgRGVmaW5pdGlvblN0cmluZzoge1xuICAgICAgJ0ZuOjpKb2luJzogW1xuICAgICAgICAnJyxcbiAgICAgICAgW1xuICAgICAgICAgICd7XCJTdGFydEF0XCI6XCJUYXNrXCIsXCJTdGF0ZXNcIjp7XCJUYXNrXCI6e1wiRW5kXCI6dHJ1ZSxcIlR5cGVcIjpcIlRhc2tcIixcIlJlc291cmNlXCI6XCInLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgICdGbjo6R2V0QXR0JzogWydFdmFsZGEyZDExODE2MDRlNGE0NTg2OTQxYTZhYmQ3ZmU0MmRGMzcxNjc1RCcsICdBcm4nXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgICdcIixcIlBhcmFtZXRlcnNcIjp7XCJleHByZXNzaW9uXCI6XCIyICsgMlwiLFwiZXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1wiOnt9fX19fScsXG4gICAgICAgIF0sXG4gICAgICBdLFxuICAgIH0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3dpdGggZGFzaCBhbmQgdW5kZXJzY29yZSBpbiBwYXRoJywgKCkgPT4ge1xuICAvLyBXSEVOXG4gIGNvbnN0IHRhc2sgPSBuZXcgdGFza3MuRXZhbHVhdGVFeHByZXNzaW9uKHN0YWNrLCAnVGFzaycsIHtcbiAgICBleHByZXNzaW9uOiAnJC5hX2IgKyAkLmMtZCArICRbX2VdJyxcbiAgfSk7XG4gIG5ldyBzZm4uU3RhdGVNYWNoaW5lKHN0YWNrLCAnU00nLCB7XG4gICAgZGVmaW5pdGlvbjogdGFzayxcbiAgfSk7XG5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6U3RlcEZ1bmN0aW9uczo6U3RhdGVNYWNoaW5lJywge1xuICAgIERlZmluaXRpb25TdHJpbmc6IHtcbiAgICAgICdGbjo6Sm9pbic6IFtcbiAgICAgICAgJycsXG4gICAgICAgIFtcbiAgICAgICAgICAne1wiU3RhcnRBdFwiOlwiVGFza1wiLFwiU3RhdGVzXCI6e1wiVGFza1wiOntcIkVuZFwiOnRydWUsXCJUeXBlXCI6XCJUYXNrXCIsXCJSZXNvdXJjZVwiOlwiJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAnRm46OkdldEF0dCc6IFsnRXZhbGRhMmQxMTgxNjA0ZTRhNDU4Njk0MWE2YWJkN2ZlNDJkRjM3MTY3NUQnLCAnQXJuJ10sXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnXCIsXCJQYXJhbWV0ZXJzXCI6e1wiZXhwcmVzc2lvblwiOlwiJC5hX2IgKyAkLmMtZCArICRbX2VdXCIsXCJleHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXCI6e1wiJC5hX2IuJFwiOlwiJC5hX2JcIixcIiQuYy1kLiRcIjpcIiQuYy1kXCIsXCIkW19lXS4kXCI6XCIkW19lXVwifX19fX0nLFxuICAgICAgICBdLFxuICAgICAgXSxcbiAgICB9LFxuICB9KTtcbn0pO1xuIl19