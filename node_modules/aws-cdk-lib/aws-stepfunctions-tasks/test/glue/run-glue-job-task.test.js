"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const sfn = require("../../../aws-stepfunctions");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../../core");
const tasks = require("../../lib");
const jobName = 'GlueJob';
let stack;
beforeEach(() => {
    stack = new core_1.Stack();
});
(0, cdk_build_tools_1.describeDeprecated)('RunGlueJobTask', () => {
    test('Invoke glue job with just job ARN', () => {
        const task = new sfn.Task(stack, 'Task', {
            task: new tasks.RunGlueJobTask(jobName),
        });
        new sfn.StateMachine(stack, 'SM', {
            definition: task,
        });
        expect(stack.resolve(task.toStateJson())).toEqual({
            Type: 'Task',
            Resource: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':states:::glue:startJobRun',
                    ],
                ],
            },
            End: true,
            Parameters: {
                JobName: jobName,
            },
        });
    });
    test('Invoke glue job with full properties', () => {
        const jobArguments = {
            key: 'value',
        };
        const timeoutMinutes = 1440;
        const timeout = core_1.Duration.minutes(timeoutMinutes);
        const securityConfiguration = 'securityConfiguration';
        const notifyDelayAfterMinutes = 10;
        const notifyDelayAfter = core_1.Duration.minutes(notifyDelayAfterMinutes);
        const task = new sfn.Task(stack, 'Task', {
            task: new tasks.RunGlueJobTask(jobName, {
                integrationPattern: sfn.ServiceIntegrationPattern.SYNC,
                arguments: jobArguments,
                timeout,
                securityConfiguration,
                notifyDelayAfter,
            }),
        });
        new sfn.StateMachine(stack, 'SM', {
            definition: task,
        });
        expect(stack.resolve(task.toStateJson())).toEqual({
            Type: 'Task',
            Resource: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':states:::glue:startJobRun.sync',
                    ],
                ],
            },
            End: true,
            Parameters: {
                JobName: jobName,
                Arguments: jobArguments,
                Timeout: timeoutMinutes,
                SecurityConfiguration: securityConfiguration,
                NotificationProperty: {
                    NotifyDelayAfter: notifyDelayAfterMinutes,
                },
            },
        });
    });
    test('permitted role actions limited to start job run if service integration pattern is FIRE_AND_FORGET', () => {
        const task = new sfn.Task(stack, 'Task', {
            task: new tasks.RunGlueJobTask(jobName, {
                integrationPattern: sfn.ServiceIntegrationPattern.FIRE_AND_FORGET,
            }),
        });
        new sfn.StateMachine(stack, 'SM', {
            definition: task,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [assertions_1.Match.objectLike({
                        Action: 'glue:StartJobRun',
                    })],
            },
        });
    });
    test('permitted role actions include start, get, and stop job run if service integration pattern is SYNC', () => {
        const task = new sfn.Task(stack, 'Task', {
            task: new tasks.RunGlueJobTask(jobName, {
                integrationPattern: sfn.ServiceIntegrationPattern.SYNC,
            }),
        });
        new sfn.StateMachine(stack, 'SM', {
            definition: task,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [assertions_1.Match.objectLike({
                        Action: [
                            'glue:StartJobRun',
                            'glue:GetJobRun',
                            'glue:GetJobRuns',
                            'glue:BatchStopJobRun',
                        ],
                    })],
            },
        });
    });
    test('Task throws if WAIT_FOR_TASK_TOKEN is supplied as service integration pattern', () => {
        expect(() => {
            new sfn.Task(stack, 'Task', {
                task: new tasks.RunGlueJobTask(jobName, {
                    integrationPattern: sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN,
                }),
            });
        }).toThrow(/Invalid Service Integration Pattern: WAIT_FOR_TASK_TOKEN is not supported to call Glue./i);
    });
});
//# sourceMappingURL=data:application/json;base64,