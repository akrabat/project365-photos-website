"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../assertions");
const sfn = require("../../aws-stepfunctions");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../core");
const tasks = require("../lib");
(0, cdk_build_tools_1.describeDeprecated)('InvokeActivity', () => {
    test('Activity can be used in a Task', () => {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const activity = new sfn.Activity(stack, 'Activity');
        const task = new sfn.Task(stack, 'Task', { task: new tasks.InvokeActivity(activity) });
        new sfn.StateMachine(stack, 'SM', {
            definition: task,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::StepFunctions::StateMachine', {
            DefinitionString: {
                'Fn::Join': ['', [
                        '{"StartAt":"Task","States":{"Task":{"End":true,"Type":"Task","Resource":"',
                        { Ref: 'Activity04690B0A' },
                        '"}}}',
                    ]],
            },
        });
    });
    test('Activity Task metrics and Activity metrics are the same', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const activity = new sfn.Activity(stack, 'Activity');
        const task = new sfn.Task(stack, 'Invoke', { task: new tasks.InvokeActivity(activity) });
        // WHEN
        const activityMetrics = [
            activity.metricFailed(),
            activity.metricHeartbeatTimedOut(),
            activity.metricRunTime(),
            activity.metricScheduled(),
            activity.metricScheduleTime(),
            activity.metricStarted(),
            activity.metricSucceeded(),
            activity.metricTime(),
            activity.metricTimedOut(),
        ];
        const taskMetrics = [
            task.metricFailed(),
            task.metricHeartbeatTimedOut(),
            task.metricRunTime(),
            task.metricScheduled(),
            task.metricScheduleTime(),
            task.metricStarted(),
            task.metricSucceeded(),
            task.metricTime(),
            task.metricTimedOut(),
        ];
        // THEN
        for (let i = 0; i < activityMetrics.length; i++) {
            expect(activityMetrics[i]).toEqual(taskMetrics[i]);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52b2tlLWFjdGl2aXR5LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnZva2UtYWN0aXZpdHkudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUE0QztBQUM1QywrQ0FBK0M7QUFDL0MsOERBQThEO0FBQzlELHFDQUFtQztBQUNuQyxnQ0FBZ0M7QUFFaEMsSUFBQSxvQ0FBa0IsRUFBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDeEMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtRQUM1QyxRQUFRO1FBQ04sTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUUxQixPQUFPO1FBQ1AsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNyRCxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZGLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQ2hDLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxrQ0FBa0MsRUFBRTtZQUNsRixnQkFBZ0IsRUFBRTtnQkFDaEIsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO3dCQUNmLDJFQUEyRTt3QkFDM0UsRUFBRSxHQUFHLEVBQUUsa0JBQWtCLEVBQUU7d0JBQzNCLE1BQU07cUJBQ1AsQ0FBQzthQUNIO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMseURBQXlELEVBQUUsR0FBRyxFQUFFO1FBQ3JFLFFBQVE7UUFDTixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDckQsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV6RixPQUFPO1FBQ1AsTUFBTSxlQUFlLEdBQUc7WUFDdEIsUUFBUSxDQUFDLFlBQVksRUFBRTtZQUN2QixRQUFRLENBQUMsdUJBQXVCLEVBQUU7WUFDbEMsUUFBUSxDQUFDLGFBQWEsRUFBRTtZQUN4QixRQUFRLENBQUMsZUFBZSxFQUFFO1lBQzFCLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRTtZQUM3QixRQUFRLENBQUMsYUFBYSxFQUFFO1lBQ3hCLFFBQVEsQ0FBQyxlQUFlLEVBQUU7WUFDMUIsUUFBUSxDQUFDLFVBQVUsRUFBRTtZQUNyQixRQUFRLENBQUMsY0FBYyxFQUFFO1NBQzFCLENBQUM7UUFFRixNQUFNLFdBQVcsR0FBRztZQUNsQixJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25CLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUM5QixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ3pCLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN0QixJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxjQUFjLEVBQUU7U0FDdEIsQ0FBQztRQUVGLE9BQU87UUFDUCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vYXNzZXJ0aW9ucyc7XG5pbXBvcnQgKiBhcyBzZm4gZnJvbSAnLi4vLi4vYXdzLXN0ZXBmdW5jdGlvbnMnO1xuaW1wb3J0IHsgZGVzY3JpYmVEZXByZWNhdGVkIH0gZnJvbSAnQGF3cy1jZGsvY2RrLWJ1aWxkLXRvb2xzJztcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyB0YXNrcyBmcm9tICcuLi9saWInO1xuXG5kZXNjcmliZURlcHJlY2F0ZWQoJ0ludm9rZUFjdGl2aXR5JywgKCkgPT4ge1xuICB0ZXN0KCdBY3Rpdml0eSBjYW4gYmUgdXNlZCBpbiBhIFRhc2snLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBhY3Rpdml0eSA9IG5ldyBzZm4uQWN0aXZpdHkoc3RhY2ssICdBY3Rpdml0eScpO1xuICAgIGNvbnN0IHRhc2sgPSBuZXcgc2ZuLlRhc2soc3RhY2ssICdUYXNrJywgeyB0YXNrOiBuZXcgdGFza3MuSW52b2tlQWN0aXZpdHkoYWN0aXZpdHkpIH0pO1xuICAgIG5ldyBzZm4uU3RhdGVNYWNoaW5lKHN0YWNrLCAnU00nLCB7XG4gICAgICBkZWZpbml0aW9uOiB0YXNrLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlN0ZXBGdW5jdGlvbnM6OlN0YXRlTWFjaGluZScsIHtcbiAgICAgIERlZmluaXRpb25TdHJpbmc6IHtcbiAgICAgICAgJ0ZuOjpKb2luJzogWycnLCBbXG4gICAgICAgICAgJ3tcIlN0YXJ0QXRcIjpcIlRhc2tcIixcIlN0YXRlc1wiOntcIlRhc2tcIjp7XCJFbmRcIjp0cnVlLFwiVHlwZVwiOlwiVGFza1wiLFwiUmVzb3VyY2VcIjpcIicsXG4gICAgICAgICAgeyBSZWY6ICdBY3Rpdml0eTA0NjkwQjBBJyB9LFxuICAgICAgICAgICdcIn19fScsXG4gICAgICAgIF1dLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnQWN0aXZpdHkgVGFzayBtZXRyaWNzIGFuZCBBY3Rpdml0eSBtZXRyaWNzIGFyZSB0aGUgc2FtZScsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IGFjdGl2aXR5ID0gbmV3IHNmbi5BY3Rpdml0eShzdGFjaywgJ0FjdGl2aXR5Jyk7XG4gICAgY29uc3QgdGFzayA9IG5ldyBzZm4uVGFzayhzdGFjaywgJ0ludm9rZScsIHsgdGFzazogbmV3IHRhc2tzLkludm9rZUFjdGl2aXR5KGFjdGl2aXR5KSB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBhY3Rpdml0eU1ldHJpY3MgPSBbXG4gICAgICBhY3Rpdml0eS5tZXRyaWNGYWlsZWQoKSxcbiAgICAgIGFjdGl2aXR5Lm1ldHJpY0hlYXJ0YmVhdFRpbWVkT3V0KCksXG4gICAgICBhY3Rpdml0eS5tZXRyaWNSdW5UaW1lKCksXG4gICAgICBhY3Rpdml0eS5tZXRyaWNTY2hlZHVsZWQoKSxcbiAgICAgIGFjdGl2aXR5Lm1ldHJpY1NjaGVkdWxlVGltZSgpLFxuICAgICAgYWN0aXZpdHkubWV0cmljU3RhcnRlZCgpLFxuICAgICAgYWN0aXZpdHkubWV0cmljU3VjY2VlZGVkKCksXG4gICAgICBhY3Rpdml0eS5tZXRyaWNUaW1lKCksXG4gICAgICBhY3Rpdml0eS5tZXRyaWNUaW1lZE91dCgpLFxuICAgIF07XG5cbiAgICBjb25zdCB0YXNrTWV0cmljcyA9IFtcbiAgICAgIHRhc2subWV0cmljRmFpbGVkKCksXG4gICAgICB0YXNrLm1ldHJpY0hlYXJ0YmVhdFRpbWVkT3V0KCksXG4gICAgICB0YXNrLm1ldHJpY1J1blRpbWUoKSxcbiAgICAgIHRhc2subWV0cmljU2NoZWR1bGVkKCksXG4gICAgICB0YXNrLm1ldHJpY1NjaGVkdWxlVGltZSgpLFxuICAgICAgdGFzay5tZXRyaWNTdGFydGVkKCksXG4gICAgICB0YXNrLm1ldHJpY1N1Y2NlZWRlZCgpLFxuICAgICAgdGFzay5tZXRyaWNUaW1lKCksXG4gICAgICB0YXNrLm1ldHJpY1RpbWVkT3V0KCksXG4gICAgXTtcblxuICAgIC8vIFRIRU5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdGl2aXR5TWV0cmljcy5sZW5ndGg7IGkrKykge1xuICAgICAgZXhwZWN0KGFjdGl2aXR5TWV0cmljc1tpXSkudG9FcXVhbCh0YXNrTWV0cmljc1tpXSk7XG4gICAgfVxuICB9KTtcbn0pOyJdfQ==