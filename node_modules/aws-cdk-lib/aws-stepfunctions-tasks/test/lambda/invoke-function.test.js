"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const lambda = require("../../../aws-lambda");
const sfn = require("../../../aws-stepfunctions");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../../core");
const tasks = require("../../lib");
let stack;
let fn;
beforeEach(() => {
    stack = new core_1.Stack();
    fn = new lambda.Function(stack, 'Fn', {
        code: lambda.Code.fromInline('hello'),
        handler: 'index.hello',
        runtime: lambda.Runtime.PYTHON_3_9,
    });
});
(0, cdk_build_tools_1.describeDeprecated)('InvokeFunction', () => {
    test('Invoke lambda with function ARN', () => {
        // WHEN
        const task = new sfn.Task(stack, 'Task', { task: new tasks.InvokeFunction(fn) });
        new sfn.StateMachine(stack, 'SM', {
            definition: task,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::StepFunctions::StateMachine', {
            DefinitionString: {
                'Fn::Join': ['', [
                        '{"StartAt":"Task","States":{"Task":{"End":true,"Type":"Task","Resource":"',
                        { 'Fn::GetAtt': ['Fn9270CBC0', 'Arn'] },
                        '"}}}',
                    ]],
            },
        });
    });
    test('Lambda function payload ends up in Parameters', () => {
        new sfn.StateMachine(stack, 'SM', {
            definition: new sfn.Task(stack, 'Task', {
                task: new tasks.InvokeFunction(fn, {
                    payload: {
                        foo: sfn.JsonPath.stringAt('$.bar'),
                    },
                }),
            }),
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::StepFunctions::StateMachine', {
            DefinitionString: {
                'Fn::Join': ['', [
                        '{"StartAt":"Task","States":{"Task":{"End":true,"Parameters":{"foo.$":"$.bar"},"Type":"Task","Resource":"',
                        { 'Fn::GetAtt': ['Fn9270CBC0', 'Arn'] },
                        '"}}}',
                    ]],
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52b2tlLWZ1bmN0aW9uLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnZva2UtZnVuY3Rpb24udGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9EQUErQztBQUMvQyw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBQ2xELDhEQUE4RDtBQUM5RCx3Q0FBc0M7QUFDdEMsbUNBQW1DO0FBRW5DLElBQUksS0FBWSxDQUFDO0FBQ2pCLElBQUksRUFBbUIsQ0FBQztBQUN4QixVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7SUFDcEIsRUFBRSxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFO1FBQ3BDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7UUFDckMsT0FBTyxFQUFFLGFBQWE7UUFDdEIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVTtLQUNuQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUEsb0NBQWtCLEVBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO0lBQ3hDLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7UUFDN0MsT0FBTztRQUNMLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakYsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDaEMsVUFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLGtDQUFrQyxFQUFFO1lBQ2xGLGdCQUFnQixFQUFFO2dCQUNoQixVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUU7d0JBQ2YsMkVBQTJFO3dCQUMzRSxFQUFFLFlBQVksRUFBRSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsRUFBRTt3QkFDdkMsTUFBTTtxQkFDUCxDQUFDO2FBQ0g7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywrQ0FBK0MsRUFBRSxHQUFHLEVBQUU7UUFDekQsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDaEMsVUFBVSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO2dCQUN0QyxJQUFJLEVBQUUsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRTtvQkFDakMsT0FBTyxFQUFFO3dCQUNQLEdBQUcsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7cUJBQ3BDO2lCQUNGLENBQUM7YUFDSCxDQUFDO1NBQ0gsQ0FBQyxDQUFDO1FBRUgscUJBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsa0NBQWtDLEVBQUU7WUFDbEYsZ0JBQWdCLEVBQUU7Z0JBQ2hCLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRTt3QkFDZiwwR0FBMEc7d0JBQzFHLEVBQUUsWUFBWSxFQUFFLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxFQUFFO3dCQUN2QyxNQUFNO3FCQUNQLENBQUM7YUFDSDtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJy4uLy4uLy4uL2F3cy1sYW1iZGEnO1xuaW1wb3J0ICogYXMgc2ZuIGZyb20gJy4uLy4uLy4uL2F3cy1zdGVwZnVuY3Rpb25zJztcbmltcG9ydCB7IGRlc2NyaWJlRGVwcmVjYXRlZCB9IGZyb20gJ0Bhd3MtY2RrL2Nkay1idWlsZC10b29scyc7XG5pbXBvcnQgeyBTdGFjayB9IGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgdGFza3MgZnJvbSAnLi4vLi4vbGliJztcblxubGV0IHN0YWNrOiBTdGFjaztcbmxldCBmbjogbGFtYmRhLkZ1bmN0aW9uO1xuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gIGZuID0gbmV3IGxhbWJkYS5GdW5jdGlvbihzdGFjaywgJ0ZuJywge1xuICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21JbmxpbmUoJ2hlbGxvJyksXG4gICAgaGFuZGxlcjogJ2luZGV4LmhlbGxvJyxcbiAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5QWVRIT05fM185LFxuICB9KTtcbn0pO1xuXG5kZXNjcmliZURlcHJlY2F0ZWQoJ0ludm9rZUZ1bmN0aW9uJywgKCkgPT4ge1xuICB0ZXN0KCdJbnZva2UgbGFtYmRhIHdpdGggZnVuY3Rpb24gQVJOJywgKCkgPT4ge1xuICAvLyBXSEVOXG4gICAgY29uc3QgdGFzayA9IG5ldyBzZm4uVGFzayhzdGFjaywgJ1Rhc2snLCB7IHRhc2s6IG5ldyB0YXNrcy5JbnZva2VGdW5jdGlvbihmbikgfSk7XG4gICAgbmV3IHNmbi5TdGF0ZU1hY2hpbmUoc3RhY2ssICdTTScsIHtcbiAgICAgIGRlZmluaXRpb246IHRhc2ssXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6U3RlcEZ1bmN0aW9uczo6U3RhdGVNYWNoaW5lJywge1xuICAgICAgRGVmaW5pdGlvblN0cmluZzoge1xuICAgICAgICAnRm46OkpvaW4nOiBbJycsIFtcbiAgICAgICAgICAne1wiU3RhcnRBdFwiOlwiVGFza1wiLFwiU3RhdGVzXCI6e1wiVGFza1wiOntcIkVuZFwiOnRydWUsXCJUeXBlXCI6XCJUYXNrXCIsXCJSZXNvdXJjZVwiOlwiJyxcbiAgICAgICAgICB7ICdGbjo6R2V0QXR0JzogWydGbjkyNzBDQkMwJywgJ0FybiddIH0sXG4gICAgICAgICAgJ1wifX19JyxcbiAgICAgICAgXV0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdMYW1iZGEgZnVuY3Rpb24gcGF5bG9hZCBlbmRzIHVwIGluIFBhcmFtZXRlcnMnLCAoKSA9PiB7XG4gICAgbmV3IHNmbi5TdGF0ZU1hY2hpbmUoc3RhY2ssICdTTScsIHtcbiAgICAgIGRlZmluaXRpb246IG5ldyBzZm4uVGFzayhzdGFjaywgJ1Rhc2snLCB7XG4gICAgICAgIHRhc2s6IG5ldyB0YXNrcy5JbnZva2VGdW5jdGlvbihmbiwge1xuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIGZvbzogc2ZuLkpzb25QYXRoLnN0cmluZ0F0KCckLmJhcicpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpTdGVwRnVuY3Rpb25zOjpTdGF0ZU1hY2hpbmUnLCB7XG4gICAgICBEZWZpbml0aW9uU3RyaW5nOiB7XG4gICAgICAgICdGbjo6Sm9pbic6IFsnJywgW1xuICAgICAgICAgICd7XCJTdGFydEF0XCI6XCJUYXNrXCIsXCJTdGF0ZXNcIjp7XCJUYXNrXCI6e1wiRW5kXCI6dHJ1ZSxcIlBhcmFtZXRlcnNcIjp7XCJmb28uJFwiOlwiJC5iYXJcIn0sXCJUeXBlXCI6XCJUYXNrXCIsXCJSZXNvdXJjZVwiOlwiJyxcbiAgICAgICAgICB7ICdGbjo6R2V0QXR0JzogWydGbjkyNzBDQkMwJywgJ0FybiddIH0sXG4gICAgICAgICAgJ1wifX19JyxcbiAgICAgICAgXV0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19