"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lambda = require("../../../aws-lambda");
const sfn = require("../../../aws-stepfunctions");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../../core");
const lib_1 = require("../../lib");
/* eslint-disable quote-props */
describe('LambdaInvoke', () => {
    let stack;
    let lambdaFunction;
    beforeEach(() => {
        // GIVEN
        stack = new core_1.Stack();
        lambdaFunction = new lambda.Function(stack, 'Fn', {
            code: lambda.Code.fromInline('foo'),
            handler: 'handler',
            runtime: lambda.Runtime.NODEJS_14_X,
        });
    });
    test('default settings', () => {
        // WHEN
        const task = new lib_1.LambdaInvoke(stack, 'Task', {
            lambdaFunction,
        });
        // THEN
        expect(stack.resolve(task.toStateJson())).toEqual({
            End: true,
            Type: 'Task',
            Resource: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':states:::lambda:invoke',
                    ],
                ],
            },
            Parameters: {
                FunctionName: {
                    'Fn::GetAtt': [
                        'Fn9270CBC0',
                        'Arn',
                    ],
                },
                'Payload.$': '$',
            },
            Retry: [
                {
                    ErrorEquals: [
                        'Lambda.ServiceException',
                        'Lambda.AWSLambdaException',
                        'Lambda.SdkClientException',
                    ],
                    IntervalSeconds: 2,
                    MaxAttempts: 6,
                    BackoffRate: 2,
                },
            ],
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('optional settings', () => {
        // WHEN
        const task = new lib_1.LambdaInvoke(stack, 'Task', {
            lambdaFunction,
            payload: sfn.TaskInput.fromObject({
                foo: 'bar',
            }),
            invocationType: lib_1.LambdaInvocationType.REQUEST_RESPONSE,
            clientContext: 'eyJoZWxsbyI6IndvcmxkIn0=',
            qualifier: '1',
        });
        // THEN
        expect(stack.resolve(task.toStateJson())).toEqual(expect.objectContaining({
            Type: 'Task',
            Resource: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':states:::lambda:invoke',
                    ],
                ],
            },
            End: true,
            Parameters: {
                FunctionName: {
                    'Fn::GetAtt': [
                        'Fn9270CBC0',
                        'Arn',
                    ],
                },
                Payload: {
                    foo: 'bar',
                },
                InvocationType: 'RequestResponse',
                ClientContext: 'eyJoZWxsbyI6IndvcmxkIn0=',
                Qualifier: '1',
            },
        }));
    });
    test('resultSelector', () => {
        // WHEN
        const task = new lib_1.LambdaInvoke(stack, 'Task', {
            lambdaFunction,
            resultSelector: {
                Result: sfn.JsonPath.stringAt('$.output.Payload'),
            },
        });
        // THEN
        expect(stack.resolve(task.toStateJson())).toEqual(expect.objectContaining({
            Type: 'Task',
            Resource: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':states:::lambda:invoke',
                    ],
                ],
            },
            End: true,
            Parameters: {
                FunctionName: {
                    'Fn::GetAtt': [
                        'Fn9270CBC0',
                        'Arn',
                    ],
                },
                'Payload.$': '$',
            },
            ResultSelector: {
                'Result.$': '$.output.Payload',
            },
            Retry: [
                {
                    ErrorEquals: [
                        'Lambda.ServiceException',
                        'Lambda.AWSLambdaException',
                        'Lambda.SdkClientException',
                    ],
                    IntervalSeconds: 2,
                    MaxAttempts: 6,
                    BackoffRate: 2,
                },
            ],
        }));
    });
    (0, cdk_build_tools_1.testDeprecated)('invoke Lambda function and wait for task token', () => {
        // GIVEN
        const task = new lib_1.LambdaInvoke(stack, 'Task', {
            lambdaFunction,
            integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,
            payload: sfn.TaskInput.fromObject({
                token: sfn.JsonPath.taskToken,
            }),
            qualifier: 'my-alias',
        });
        // THEN
        expect(stack.resolve(task.toStateJson())).toEqual(expect.objectContaining({
            Type: 'Task',
            Resource: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':states:::lambda:invoke.waitForTaskToken',
                    ],
                ],
            },
            End: true,
            Parameters: {
                FunctionName: {
                    'Fn::GetAtt': [
                        'Fn9270CBC0',
                        'Arn',
                    ],
                },
                Payload: {
                    'token.$': '$$.Task.Token',
                },
                Qualifier: 'my-alias',
            },
        }));
    });
    test('pass part of state input as input to Lambda function ', () => {
        // WHEN
        const task = new lib_1.LambdaInvoke(stack, 'Task', {
            lambdaFunction,
            payload: sfn.TaskInput.fromJsonPathAt('$.foo'),
        });
        // THEN
        expect(stack.resolve(task.toStateJson())).toEqual(expect.objectContaining({
            Type: 'Task',
            Resource: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':states:::lambda:invoke',
                    ],
                ],
            },
            End: true,
            Parameters: {
                'FunctionName': {
                    'Fn::GetAtt': [
                        'Fn9270CBC0',
                        'Arn',
                    ],
                },
                'Payload.$': '$.foo',
            },
        }));
    });
    test('Invoke lambda with payloadResponseOnly', () => {
        // WHEN
        const task = new lib_1.LambdaInvoke(stack, 'Task', {
            lambdaFunction,
            payloadResponseOnly: true,
        });
        // THEN
        expect(stack.resolve(task.toStateJson())).toEqual(expect.objectContaining({
            End: true,
            Type: 'Task',
            Resource: {
                'Fn::GetAtt': [
                    'Fn9270CBC0',
                    'Arn',
                ],
            },
        }));
    });
    test('Invoke lambda with payloadResponseOnly with payload', () => {
        // WHEN
        const task = new lib_1.LambdaInvoke(stack, 'Task', {
            lambdaFunction,
            payloadResponseOnly: true,
            payload: sfn.TaskInput.fromObject({
                foo: 'bar',
            }),
        });
        // THEN
        expect(stack.resolve(task.toStateJson())).toEqual(expect.objectContaining({
            End: true,
            Type: 'Task',
            Resource: {
                'Fn::GetAtt': [
                    'Fn9270CBC0',
                    'Arn',
                ],
            },
            Parameters: {
                foo: 'bar',
            },
        }));
    });
    test('with retryOnServiceExceptions set to false', () => {
        // WHEN
        const task = new lib_1.LambdaInvoke(stack, 'Task', {
            lambdaFunction,
            retryOnServiceExceptions: false,
        });
        // THEN
        expect(stack.resolve(task.toStateJson())).toEqual({
            End: true,
            Type: 'Task',
            Resource: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':states:::lambda:invoke',
                    ],
                ],
            },
            Parameters: {
                FunctionName: {
                    'Fn::GetAtt': [
                        'Fn9270CBC0',
                        'Arn',
                    ],
                },
                'Payload.$': '$',
            },
        });
    });
    test('fails when integrationPattern used with payloadResponseOnly', () => {
        expect(() => {
            new lib_1.LambdaInvoke(stack, 'Task', {
                lambdaFunction,
                payloadResponseOnly: true,
                integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,
                payload: sfn.TaskInput.fromObject({
                    token: sfn.JsonPath.taskToken,
                }),
            });
        }).toThrow(/The 'payloadResponseOnly' property cannot be used if 'integrationPattern', 'invocationType', 'clientContext', or 'qualifier' are specified./);
    });
    test('fails when invocationType used with payloadResponseOnly', () => {
        expect(() => {
            new lib_1.LambdaInvoke(stack, 'Task', {
                lambdaFunction,
                payloadResponseOnly: true,
                payload: sfn.TaskInput.fromObject({
                    foo: 'bar',
                }),
                invocationType: lib_1.LambdaInvocationType.REQUEST_RESPONSE,
            });
        }).toThrow(/The 'payloadResponseOnly' property cannot be used if 'integrationPattern', 'invocationType', 'clientContext', or 'qualifier' are specified./);
    });
    test('fails when clientContext used with payloadResponseOnly', () => {
        expect(() => {
            new lib_1.LambdaInvoke(stack, 'Task', {
                lambdaFunction,
                payloadResponseOnly: true,
                payload: sfn.TaskInput.fromObject({
                    foo: 'bar',
                }),
                clientContext: 'eyJoZWxsbyI6IndvcmxkIn0=',
            });
        }).toThrow(/The 'payloadResponseOnly' property cannot be used if 'integrationPattern', 'invocationType', 'clientContext', or 'qualifier' are specified./);
    });
    (0, cdk_build_tools_1.testDeprecated)('fails when qualifier used with payloadResponseOnly', () => {
        expect(() => {
            new lib_1.LambdaInvoke(stack, 'Task', {
                lambdaFunction,
                payloadResponseOnly: true,
                payload: sfn.TaskInput.fromObject({
                    foo: 'bar',
                }),
                qualifier: '1',
            });
        }).toThrow(/The 'payloadResponseOnly' property cannot be used if 'integrationPattern', 'invocationType', 'clientContext', or 'qualifier' are specified./);
    });
    test('fails when WAIT_FOR_TASK_TOKEN integration pattern is used without supplying a task token in payload', () => {
        expect(() => {
            new lib_1.LambdaInvoke(stack, 'Task', {
                lambdaFunction,
                integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,
            });
        }).toThrow(/Task Token is required in `payload` for callback. Use JsonPath.taskToken to set the token./);
    });
    test('fails when RUN_JOB integration pattern is used', () => {
        expect(() => {
            new lib_1.LambdaInvoke(stack, 'Task', {
                lambdaFunction,
                integrationPattern: sfn.IntegrationPattern.RUN_JOB,
            });
        }).toThrow(/Unsupported service integration pattern. Supported Patterns: REQUEST_RESPONSE,WAIT_FOR_TASK_TOKEN. Received: RUN_JOB/);
    });
});
//# sourceMappingURL=data:application/json;base64,