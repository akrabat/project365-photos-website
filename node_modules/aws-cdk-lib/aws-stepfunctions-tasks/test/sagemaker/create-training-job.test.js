"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("../../../aws-ec2");
const iam = require("../../../aws-iam");
const kms = require("../../../aws-kms");
const s3 = require("../../../aws-s3");
const sfn = require("../../../aws-stepfunctions");
const cdk = require("../../../core");
const tasks = require("../../lib");
const create_training_job_1 = require("../../lib/sagemaker/create-training-job");
let stack;
beforeEach(() => {
    // GIVEN
    stack = new cdk.Stack();
});
test('create basic training job', () => {
    // WHEN
    const task = new create_training_job_1.SageMakerCreateTrainingJob(stack, 'TrainSagemaker', {
        trainingJobName: 'MyTrainJob',
        algorithmSpecification: {
            algorithmName: 'BlazingText',
        },
        inputDataConfig: [
            {
                channelName: 'train',
                dataSource: {
                    s3DataSource: {
                        s3Location: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(stack, 'InputBucket', 'mybucket'), 'mytrainpath'),
                    },
                },
            },
        ],
        outputDataConfig: {
            s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(stack, 'OutputBucket', 'mybucket'), 'myoutputpath'),
        },
    });
    // THEN
    expect(stack.resolve(task.toStateJson())).toEqual({
        Type: 'Task',
        Resource: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':states:::sagemaker:createTrainingJob',
                ],
            ],
        },
        End: true,
        Parameters: {
            AlgorithmSpecification: {
                AlgorithmName: 'BlazingText',
                TrainingInputMode: 'File',
            },
            InputDataConfig: [
                {
                    ChannelName: 'train',
                    DataSource: {
                        S3DataSource: {
                            S3DataType: 'S3Prefix',
                            S3Uri: {
                                'Fn::Join': ['', ['https://s3.', { Ref: 'AWS::Region' }, '.', { Ref: 'AWS::URLSuffix' }, '/mybucket/mytrainpath']],
                            },
                        },
                    },
                },
            ],
            OutputDataConfig: {
                S3OutputPath: {
                    'Fn::Join': ['', ['https://s3.', { Ref: 'AWS::Region' }, '.', { Ref: 'AWS::URLSuffix' }, '/mybucket/myoutputpath']],
                },
            },
            ResourceConfig: {
                InstanceCount: 1,
                InstanceType: 'ml.m4.xlarge',
                VolumeSizeInGB: 10,
            },
            RoleArn: { 'Fn::GetAtt': ['TrainSagemakerSagemakerRole89E8C593', 'Arn'] },
            StoppingCondition: {
                MaxRuntimeInSeconds: 3600,
            },
            TrainingJobName: 'MyTrainJob',
        },
    });
});
test('Task throws if WAIT_FOR_TASK_TOKEN is supplied as service integration pattern', () => {
    expect(() => {
        new create_training_job_1.SageMakerCreateTrainingJob(stack, 'TrainSagemaker', {
            integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,
            trainingJobName: 'MyTrainJob',
            algorithmSpecification: {
                algorithmName: 'BlazingText',
            },
            inputDataConfig: [
                {
                    channelName: 'train',
                    dataSource: {
                        s3DataSource: {
                            s3Location: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(stack, 'InputBucket', 'mybucket'), 'mytrainpath'),
                        },
                    },
                },
            ],
            outputDataConfig: {
                s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(stack, 'OutputBucket', 'mybucket'), 'myoutputpath'),
            },
        });
    }).toThrow(/Unsupported service integration pattern. Supported Patterns: REQUEST_RESPONSE,RUN_JOB. Received: WAIT_FOR_TASK_TOKEN/i);
});
test('create complex training job', () => {
    // WHEN
    const kmsKey = new kms.Key(stack, 'Key');
    const vpc = new ec2.Vpc(stack, 'VPC');
    const securityGroup = new ec2.SecurityGroup(stack, 'SecurityGroup', { vpc, description: 'My SG' });
    securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'allow ssh access from the world');
    const role = new iam.Role(stack, 'Role', {
        assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),
        managedPolicies: [
            iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonSageMakerFullAccess'),
        ],
    });
    const trainTask = new create_training_job_1.SageMakerCreateTrainingJob(stack, 'TrainSagemaker', {
        trainingJobName: 'MyTrainJob',
        integrationPattern: sfn.IntegrationPattern.RUN_JOB,
        role,
        algorithmSpecification: {
            algorithmName: 'BlazingText',
            trainingInputMode: tasks.InputMode.FILE,
            metricDefinitions: [
                {
                    name: 'mymetric', regex: 'regex_pattern',
                },
            ],
        },
        enableNetworkIsolation: true,
        hyperparameters: {
            lr: '0.1',
        },
        inputDataConfig: [
            {
                channelName: 'train',
                contentType: 'image/jpeg',
                compressionType: tasks.CompressionType.NONE,
                recordWrapperType: tasks.RecordWrapperType.RECORD_IO,
                dataSource: {
                    s3DataSource: {
                        attributeNames: ['source-ref', 'class'],
                        s3DataType: tasks.S3DataType.S3_PREFIX,
                        s3Location: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(stack, 'InputBucketA', 'mybucket'), 'mytrainpath'),
                    },
                },
            },
            {
                channelName: 'test',
                contentType: 'image/jpeg',
                compressionType: tasks.CompressionType.GZIP,
                recordWrapperType: tasks.RecordWrapperType.RECORD_IO,
                dataSource: {
                    s3DataSource: {
                        attributeNames: ['source-ref', 'class'],
                        s3DataType: tasks.S3DataType.S3_PREFIX,
                        s3Location: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(stack, 'InputBucketB', 'mybucket'), 'mytestpath'),
                    },
                },
            },
        ],
        outputDataConfig: {
            s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(stack, 'OutputBucket', 'mybucket'), 'myoutputpath'),
            encryptionKey: kmsKey,
        },
        resourceConfig: {
            instanceCount: 1,
            instanceType: ec2.InstanceType.of(ec2.InstanceClass.P3, ec2.InstanceSize.XLARGE2),
            volumeSize: cdk.Size.gibibytes(50),
            volumeEncryptionKey: kmsKey,
        },
        stoppingCondition: {
            maxRuntime: cdk.Duration.hours(1),
        },
        tags: {
            Project: 'MyProject',
        },
        vpcConfig: {
            vpc,
        },
        environment: {
            SOMEVAR: 'myvalue',
        },
    });
    trainTask.addSecurityGroup(securityGroup);
    // THEN
    expect(stack.resolve(trainTask.toStateJson())).toEqual({
        Type: 'Task',
        Resource: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':states:::sagemaker:createTrainingJob.sync',
                ],
            ],
        },
        End: true,
        Parameters: {
            TrainingJobName: 'MyTrainJob',
            RoleArn: { 'Fn::GetAtt': ['Role1ABCC5F0', 'Arn'] },
            AlgorithmSpecification: {
                TrainingInputMode: 'File',
                AlgorithmName: 'BlazingText',
                MetricDefinitions: [
                    { Name: 'mymetric', Regex: 'regex_pattern' },
                ],
            },
            EnableNetworkIsolation: true,
            HyperParameters: {
                lr: '0.1',
            },
            InputDataConfig: [
                {
                    ChannelName: 'train',
                    CompressionType: 'None',
                    RecordWrapperType: 'RecordIO',
                    ContentType: 'image/jpeg',
                    DataSource: {
                        S3DataSource: {
                            AttributeNames: ['source-ref', 'class'],
                            S3DataType: 'S3Prefix',
                            S3Uri: {
                                'Fn::Join': ['', ['https://s3.', { Ref: 'AWS::Region' }, '.', { Ref: 'AWS::URLSuffix' }, '/mybucket/mytrainpath']],
                            },
                        },
                    },
                },
                {
                    ChannelName: 'test',
                    CompressionType: 'Gzip',
                    RecordWrapperType: 'RecordIO',
                    ContentType: 'image/jpeg',
                    DataSource: {
                        S3DataSource: {
                            AttributeNames: ['source-ref', 'class'],
                            S3DataType: 'S3Prefix',
                            S3Uri: {
                                'Fn::Join': ['', ['https://s3.', { Ref: 'AWS::Region' }, '.', { Ref: 'AWS::URLSuffix' }, '/mybucket/mytestpath']],
                            },
                        },
                    },
                },
            ],
            OutputDataConfig: {
                S3OutputPath: {
                    'Fn::Join': ['', ['https://s3.', { Ref: 'AWS::Region' }, '.', { Ref: 'AWS::URLSuffix' }, '/mybucket/myoutputpath']],
                },
                KmsKeyId: { 'Fn::GetAtt': ['Key961B73FD', 'Arn'] },
            },
            ResourceConfig: {
                InstanceCount: 1,
                InstanceType: 'ml.p3.2xlarge',
                VolumeSizeInGB: 50,
                VolumeKmsKeyId: { 'Fn::GetAtt': ['Key961B73FD', 'Arn'] },
            },
            StoppingCondition: {
                MaxRuntimeInSeconds: 3600,
            },
            Tags: [
                { Key: 'Project', Value: 'MyProject' },
            ],
            VpcConfig: {
                SecurityGroupIds: [
                    { 'Fn::GetAtt': ['TrainSagemakerTrainJobSecurityGroup7C858EB9', 'GroupId'] },
                    { 'Fn::GetAtt': ['SecurityGroupDD263621', 'GroupId'] },
                ],
                Subnets: [
                    { Ref: 'VPCPrivateSubnet1Subnet8BCA10E0' },
                    { Ref: 'VPCPrivateSubnet2SubnetCFCDAA7A' },
                ],
            },
            Environment: {
                SOMEVAR: 'myvalue',
            },
        },
    });
});
test('pass param to training job', () => {
    // WHEN
    const role = new iam.Role(stack, 'Role', {
        assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),
        managedPolicies: [
            iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonSageMakerFullAccess'),
        ],
    });
    const task = new create_training_job_1.SageMakerCreateTrainingJob(stack, 'TrainSagemaker', {
        trainingJobName: sfn.JsonPath.stringAt('$.JobName'),
        role,
        algorithmSpecification: {
            algorithmName: 'BlazingText',
            trainingInputMode: tasks.InputMode.FILE,
        },
        inputDataConfig: [
            {
                channelName: 'train',
                dataSource: {
                    s3DataSource: {
                        s3DataType: tasks.S3DataType.S3_PREFIX,
                        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),
                    },
                },
            },
        ],
        outputDataConfig: {
            s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(stack, 'Bucket', 'mybucket'), 'myoutputpath'),
        },
        resourceConfig: {
            instanceCount: 1,
            instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.TrainingJob.InstanceType')),
            volumeSize: cdk.Size.gibibytes(50),
        },
        stoppingCondition: {
            maxRuntime: cdk.Duration.hours(1),
        },
    });
    // THEN
    expect(stack.resolve(task.toStateJson())).toEqual({
        Type: 'Task',
        Resource: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':states:::sagemaker:createTrainingJob',
                ],
            ],
        },
        End: true,
        Parameters: {
            'TrainingJobName.$': '$.JobName',
            'RoleArn': { 'Fn::GetAtt': ['Role1ABCC5F0', 'Arn'] },
            'AlgorithmSpecification': {
                TrainingInputMode: 'File',
                AlgorithmName: 'BlazingText',
            },
            'InputDataConfig': [
                {
                    ChannelName: 'train',
                    DataSource: {
                        S3DataSource: {
                            'S3DataType': 'S3Prefix',
                            'S3Uri.$': '$.S3Bucket',
                        },
                    },
                },
            ],
            'OutputDataConfig': {
                S3OutputPath: {
                    'Fn::Join': ['', ['https://s3.', { Ref: 'AWS::Region' }, '.', { Ref: 'AWS::URLSuffix' }, '/mybucket/myoutputpath']],
                },
            },
            'ResourceConfig': {
                'InstanceCount': 1,
                'InstanceType.$': '$.TrainingJob.InstanceType',
                'VolumeSizeInGB': 50,
            },
            'StoppingCondition': {
                MaxRuntimeInSeconds: 3600,
            },
        },
    });
});
test('Cannot create a SageMaker train task with both algorithm name and image name missing', () => {
    expect(() => new create_training_job_1.SageMakerCreateTrainingJob(stack, 'SageMakerTrainingTask', {
        trainingJobName: 'myTrainJob',
        algorithmSpecification: {},
        inputDataConfig: [
            {
                channelName: 'train',
                dataSource: {
                    s3DataSource: {
                        s3DataType: tasks.S3DataType.S3_PREFIX,
                        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),
                    },
                },
            },
        ],
        outputDataConfig: {
            s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(stack, 'Bucket', 'mybucket'), 'myoutputpath/'),
        },
    }))
        .toThrowError(/Must define either an algorithm name or training image URI in the algorithm specification/);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXRyYWluaW5nLWpvYi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlLXRyYWluaW5nLWpvYi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQXdDO0FBQ3hDLHdDQUF3QztBQUN4Qyx3Q0FBd0M7QUFDeEMsc0NBQXNDO0FBQ3RDLGtEQUFrRDtBQUNsRCxxQ0FBcUM7QUFDckMsbUNBQW1DO0FBQ25DLGlGQUFxRjtBQUVyRixJQUFJLEtBQWdCLENBQUM7QUFFckIsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNkLFFBQVE7SUFDUixLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDMUIsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsMkJBQTJCLEVBQUUsR0FBRyxFQUFFO0lBQ3JDLE9BQU87SUFDUCxNQUFNLElBQUksR0FBRyxJQUFJLGdEQUEwQixDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRTtRQUNuRSxlQUFlLEVBQUUsWUFBWTtRQUM3QixzQkFBc0IsRUFBRTtZQUN0QixhQUFhLEVBQUUsYUFBYTtTQUM3QjtRQUNELGVBQWUsRUFBRTtZQUNmO2dCQUNFLFdBQVcsRUFBRSxPQUFPO2dCQUNwQixVQUFVLEVBQUU7b0JBQ1YsWUFBWSxFQUFFO3dCQUNaLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFLFVBQVUsQ0FBQyxFQUFFLGFBQWEsQ0FBQztxQkFDbkg7aUJBQ0Y7YUFDRjtTQUNGO1FBQ0QsZ0JBQWdCLEVBQUU7WUFDaEIsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLGNBQWMsRUFBRSxVQUFVLENBQUMsRUFBRSxjQUFjLENBQUM7U0FDM0g7S0FD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RyxFQUFFLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztpQkFDcEg7YUFDRjtZQUNELGdCQUFnQixFQUFFO2dCQUNoQixlQUFlLEVBQUUsQ0FBQztnQkFDbEIsZ0JBQWdCLEVBQUUsNEJBQTRCO2dCQUM5QyxnQkFBZ0IsRUFBRSxFQUFFO2FBQ3JCO1lBQ0QsbUJBQW1CLEVBQUU7Z0JBQ25CLG1CQUFtQixFQUFFLElBQUk7YUFDMUI7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHNGQUFzRixFQUFFLEdBQUcsRUFBRTtJQUVoRyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxnREFBMEIsQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLEVBQUU7UUFDMUUsZUFBZSxFQUFFLFlBQVk7UUFDN0Isc0JBQXNCLEVBQUUsRUFBRTtRQUMxQixlQUFlLEVBQUU7WUFDZjtnQkFDRSxXQUFXLEVBQUUsT0FBTztnQkFDcEIsVUFBVSxFQUFFO29CQUNWLFlBQVksRUFBRTt3QkFDWixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxTQUFTO3dCQUN0QyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUM7cUJBQzlEO2lCQUNGO2FBQ0Y7U0FDRjtRQUNELGdCQUFnQixFQUFFO1lBQ2hCLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLEVBQUUsZUFBZSxDQUFDO1NBQ3RIO0tBQ0YsQ0FBQyxDQUFDO1NBQ0EsWUFBWSxDQUFDLDJGQUEyRixDQUFDLENBQUM7QUFDL0csQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBlYzIgZnJvbSAnLi4vLi4vLi4vYXdzLWVjMic7XG5pbXBvcnQgKiBhcyBpYW0gZnJvbSAnLi4vLi4vLi4vYXdzLWlhbSc7XG5pbXBvcnQgKiBhcyBrbXMgZnJvbSAnLi4vLi4vLi4vYXdzLWttcyc7XG5pbXBvcnQgKiBhcyBzMyBmcm9tICcuLi8uLi8uLi9hd3MtczMnO1xuaW1wb3J0ICogYXMgc2ZuIGZyb20gJy4uLy4uLy4uL2F3cy1zdGVwZnVuY3Rpb25zJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIHRhc2tzIGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgeyBTYWdlTWFrZXJDcmVhdGVUcmFpbmluZ0pvYiB9IGZyb20gJy4uLy4uL2xpYi9zYWdlbWFrZXIvY3JlYXRlLXRyYWluaW5nLWpvYic7XG5cbmxldCBzdGFjazogY2RrLlN0YWNrO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgLy8gR0lWRU5cbiAgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG59KTtcblxudGVzdCgnY3JlYXRlIGJhc2ljIHRyYWluaW5nIGpvYicsICgpID0+IHtcbiAgLy8gV0hFTlxuICBjb25zdCB0YXNrID0gbmV3IFNhZ2VNYWtlckNyZWF0ZVRyYWluaW5nSm9iKHN0YWNrLCAnVHJhaW5TYWdlbWFrZXInLCB7XG4gICAgdHJhaW5pbmdKb2JOYW1lOiAnTXlUcmFpbkpvYicsXG4gICAgYWxnb3JpdGhtU3BlY2lmaWNhdGlvbjoge1xuICAgICAgYWxnb3JpdGhtTmFtZTogJ0JsYXppbmdUZXh0JyxcbiAgICB9LFxuICAgIGlucHV0RGF0YUNvbmZpZzogW1xuICAgICAge1xuICAgICAgICBjaGFubmVsTmFtZTogJ3RyYWluJyxcbiAgICAgICAgZGF0YVNvdXJjZToge1xuICAgICAgICAgIHMzRGF0YVNvdXJjZToge1xuICAgICAgICAgICAgczNMb2NhdGlvbjogdGFza3MuUzNMb2NhdGlvbi5mcm9tQnVja2V0KHMzLkJ1Y2tldC5mcm9tQnVja2V0TmFtZShzdGFjaywgJ0lucHV0QnVja2V0JywgJ215YnVja2V0JyksICdteXRyYWlucGF0aCcpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gICAgb3V0cHV0RGF0YUNvbmZpZzoge1xuICAgICAgczNPdXRwdXRMb2NhdGlvbjogdGFza3MuUzNMb2NhdGlvbi5mcm9tQnVja2V0KHMzLkJ1Y2tldC5mcm9tQnVja2V0TmFtZShzdGFjaywgJ091dHB1dEJ1Y2tldCcsICdteWJ1Y2tldCcpLCAnbXlvdXRwdXRwYXRoJyksXG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3Qoc3RhY2sucmVzb2x2ZSh0YXNrLnRvU3RhdGVKc29uKCkpKS50b0VxdWFsKHtcbiAgICBUeXBlOiAnVGFzaycsXG4gICAgUmVzb3VyY2U6IHtcbiAgICAgICdGbjo6Sm9pbic6IFtcbiAgICAgICAgJycsXG4gICAgICAgIFtcbiAgICAgICAgICAnYXJuOicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgUmVmOiAnQVdTOjpQYXJ0aXRpb24nLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgJzpzdGF0ZXM6OjpzYWdlbWFrZXI6Y3JlYXRlVHJhaW5pbmdKb2InLFxuICAgICAgICBdLFxuICAgICAgXSxcbiAgICB9LFxuICAgIEVuZDogdHJ1ZSxcbiAgICBQYXJhbWV0ZXJzOiB7XG4gICAgICBBbGdvcml0aG1TcGVjaWZpY2F0aW9uOiB7XG4gICAgICAgIEFsZ29yaXRobU5hbWU6ICdCbGF6aW5nVGV4dCcsXG4gICAgICAgIFRyYWluaW5nSW5wdXRNb2RlOiAnRmlsZScsXG4gICAgICB9LFxuICAgICAgSW5wdXREYXRhQ29uZmlnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBDaGFubmVsTmFtZTogJ3RyYWluJyxcbiAgICAgICAgICBEYXRhU291cmNlOiB7XG4gICAgICAgICAgICBTM0RhdGFTb3VyY2U6IHtcbiAgICAgICAgICAgICAgUzNEYXRhVHlwZTogJ1MzUHJlZml4JyxcbiAgICAgICAgICAgICAgUzNVcmk6IHtcbiAgICAgICAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFsnaHR0cHM6Ly9zMy4nLCB7IFJlZjogJ0FXUzo6UmVnaW9uJyB9LCAnLicsIHsgUmVmOiAnQVdTOjpVUkxTdWZmaXgnIH0sICcvbXlidWNrZXQvbXl0cmFpbnBhdGgnXV0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgT3V0cHV0RGF0YUNvbmZpZzoge1xuICAgICAgICBTM091dHB1dFBhdGg6IHtcbiAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFsnaHR0cHM6Ly9zMy4nLCB7IFJlZjogJ0FXUzo6UmVnaW9uJyB9LCAnLicsIHsgUmVmOiAnQVdTOjpVUkxTdWZmaXgnIH0sICcvbXlidWNrZXQvbXlvdXRwdXRwYXRoJ11dLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIFJlc291cmNlQ29uZmlnOiB7XG4gICAgICAgIEluc3RhbmNlQ291bnQ6IDEsXG4gICAgICAgIEluc3RhbmNlVHlwZTogJ21sLm00LnhsYXJnZScsXG4gICAgICAgIFZvbHVtZVNpemVJbkdCOiAxMCxcbiAgICAgIH0sXG4gICAgICBSb2xlQXJuOiB7ICdGbjo6R2V0QXR0JzogWydUcmFpblNhZ2VtYWtlclNhZ2VtYWtlclJvbGU4OUU4QzU5MycsICdBcm4nXSB9LFxuICAgICAgU3RvcHBpbmdDb25kaXRpb246IHtcbiAgICAgICAgTWF4UnVudGltZUluU2Vjb25kczogMzYwMCxcbiAgICAgIH0sXG4gICAgICBUcmFpbmluZ0pvYk5hbWU6ICdNeVRyYWluSm9iJyxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCdUYXNrIHRocm93cyBpZiBXQUlUX0ZPUl9UQVNLX1RPS0VOIGlzIHN1cHBsaWVkIGFzIHNlcnZpY2UgaW50ZWdyYXRpb24gcGF0dGVybicsICgpID0+IHtcbiAgZXhwZWN0KCgpID0+IHtcbiAgICBuZXcgU2FnZU1ha2VyQ3JlYXRlVHJhaW5pbmdKb2Ioc3RhY2ssICdUcmFpblNhZ2VtYWtlcicsIHtcbiAgICAgIGludGVncmF0aW9uUGF0dGVybjogc2ZuLkludGVncmF0aW9uUGF0dGVybi5XQUlUX0ZPUl9UQVNLX1RPS0VOLFxuICAgICAgdHJhaW5pbmdKb2JOYW1lOiAnTXlUcmFpbkpvYicsXG4gICAgICBhbGdvcml0aG1TcGVjaWZpY2F0aW9uOiB7XG4gICAgICAgIGFsZ29yaXRobU5hbWU6ICdCbGF6aW5nVGV4dCcsXG4gICAgICB9LFxuICAgICAgaW5wdXREYXRhQ29uZmlnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBjaGFubmVsTmFtZTogJ3RyYWluJyxcbiAgICAgICAgICBkYXRhU291cmNlOiB7XG4gICAgICAgICAgICBzM0RhdGFTb3VyY2U6IHtcbiAgICAgICAgICAgICAgczNMb2NhdGlvbjogdGFza3MuUzNMb2NhdGlvbi5mcm9tQnVja2V0KHMzLkJ1Y2tldC5mcm9tQnVja2V0TmFtZShzdGFjaywgJ0lucHV0QnVja2V0JywgJ215YnVja2V0JyksICdteXRyYWlucGF0aCcpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIG91dHB1dERhdGFDb25maWc6IHtcbiAgICAgICAgczNPdXRwdXRMb2NhdGlvbjogdGFza3MuUzNMb2NhdGlvbi5mcm9tQnVja2V0KHMzLkJ1Y2tldC5mcm9tQnVja2V0TmFtZShzdGFjaywgJ091dHB1dEJ1Y2tldCcsICdteWJ1Y2tldCcpLCAnbXlvdXRwdXRwYXRoJyksXG4gICAgICB9LFxuICAgIH0pO1xuICB9KS50b1Rocm93KC9VbnN1cHBvcnRlZCBzZXJ2aWNlIGludGVncmF0aW9uIHBhdHRlcm4uIFN1cHBvcnRlZCBQYXR0ZXJuczogUkVRVUVTVF9SRVNQT05TRSxSVU5fSk9CLiBSZWNlaXZlZDogV0FJVF9GT1JfVEFTS19UT0tFTi9pKTtcbn0pO1xuXG50ZXN0KCdjcmVhdGUgY29tcGxleCB0cmFpbmluZyBqb2InLCAoKSA9PiB7XG4gIC8vIFdIRU5cbiAgY29uc3Qga21zS2V5ID0gbmV3IGttcy5LZXkoc3RhY2ssICdLZXknKTtcbiAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnKTtcbiAgY29uc3Qgc2VjdXJpdHlHcm91cCA9IG5ldyBlYzIuU2VjdXJpdHlHcm91cChzdGFjaywgJ1NlY3VyaXR5R3JvdXAnLCB7IHZwYywgZGVzY3JpcHRpb246ICdNeSBTRycgfSk7XG4gIHNlY3VyaXR5R3JvdXAuYWRkSW5ncmVzc1J1bGUoZWMyLlBlZXIuYW55SXB2NCgpLCBlYzIuUG9ydC50Y3AoMjIpLCAnYWxsb3cgc3NoIGFjY2VzcyBmcm9tIHRoZSB3b3JsZCcpO1xuXG4gIGNvbnN0IHJvbGUgPSBuZXcgaWFtLlJvbGUoc3RhY2ssICdSb2xlJywge1xuICAgIGFzc3VtZWRCeTogbmV3IGlhbS5TZXJ2aWNlUHJpbmNpcGFsKCdzYWdlbWFrZXIuYW1hem9uYXdzLmNvbScpLFxuICAgIG1hbmFnZWRQb2xpY2llczogW1xuICAgICAgaWFtLk1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKCdBbWF6b25TYWdlTWFrZXJGdWxsQWNjZXNzJyksXG4gICAgXSxcbiAgfSk7XG5cbiAgY29uc3QgdHJhaW5UYXNrID0gbmV3IFNhZ2VNYWtlckNyZWF0ZVRyYWluaW5nSm9iKHN0YWNrLCAnVHJhaW5TYWdlbWFrZXInLCB7XG4gICAgdHJhaW5pbmdKb2JOYW1lOiAnTXlUcmFpbkpvYicsXG4gICAgaW50ZWdyYXRpb25QYXR0ZXJuOiBzZm4uSW50ZWdyYXRpb25QYXR0ZXJuLlJVTl9KT0IsXG4gICAgcm9sZSxcbiAgICBhbGdvcml0aG1TcGVjaWZpY2F0aW9uOiB7XG4gICAgICBhbGdvcml0aG1OYW1lOiAnQmxhemluZ1RleHQnLFxuICAgICAgdHJhaW5pbmdJbnB1dE1vZGU6IHRhc2tzLklucHV0TW9kZS5GSUxFLFxuICAgICAgbWV0cmljRGVmaW5pdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdteW1ldHJpYycsIHJlZ2V4OiAncmVnZXhfcGF0dGVybicsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgZW5hYmxlTmV0d29ya0lzb2xhdGlvbjogdHJ1ZSxcbiAgICBoeXBlcnBhcmFtZXRlcnM6IHtcbiAgICAgIGxyOiAnMC4xJyxcbiAgICB9LFxuICAgIGlucHV0RGF0YUNvbmZpZzogW1xuICAgICAge1xuICAgICAgICBjaGFubmVsTmFtZTogJ3RyYWluJyxcbiAgICAgICAgY29udGVudFR5cGU6ICdpbWFnZS9qcGVnJyxcbiAgICAgICAgY29tcHJlc3Npb25UeXBlOiB0YXNrcy5Db21wcmVzc2lvblR5cGUuTk9ORSxcbiAgICAgICAgcmVjb3JkV3JhcHBlclR5cGU6IHRhc2tzLlJlY29yZFdyYXBwZXJUeXBlLlJFQ09SRF9JTyxcbiAgICAgICAgZGF0YVNvdXJjZToge1xuICAgICAgICAgIHMzRGF0YVNvdXJjZToge1xuICAgICAgICAgICAgYXR0cmlidXRlTmFtZXM6IFsnc291cmNlLXJlZicsICdjbGFzcyddLFxuICAgICAgICAgICAgczNEYXRhVHlwZTogdGFza3MuUzNEYXRhVHlwZS5TM19QUkVGSVgsXG4gICAgICAgICAgICBzM0xvY2F0aW9uOiB0YXNrcy5TM0xvY2F0aW9uLmZyb21CdWNrZXQoczMuQnVja2V0LmZyb21CdWNrZXROYW1lKHN0YWNrLCAnSW5wdXRCdWNrZXRBJywgJ215YnVja2V0JyksICdteXRyYWlucGF0aCcpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjaGFubmVsTmFtZTogJ3Rlc3QnLFxuICAgICAgICBjb250ZW50VHlwZTogJ2ltYWdlL2pwZWcnLFxuICAgICAgICBjb21wcmVzc2lvblR5cGU6IHRhc2tzLkNvbXByZXNzaW9uVHlwZS5HWklQLFxuICAgICAgICByZWNvcmRXcmFwcGVyVHlwZTogdGFza3MuUmVjb3JkV3JhcHBlclR5cGUuUkVDT1JEX0lPLFxuICAgICAgICBkYXRhU291cmNlOiB7XG4gICAgICAgICAgczNEYXRhU291cmNlOiB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lczogWydzb3VyY2UtcmVmJywgJ2NsYXNzJ10sXG4gICAgICAgICAgICBzM0RhdGFUeXBlOiB0YXNrcy5TM0RhdGFUeXBlLlMzX1BSRUZJWCxcbiAgICAgICAgICAgIHMzTG9jYXRpb246IHRhc2tzLlMzTG9jYXRpb24uZnJvbUJ1Y2tldChzMy5CdWNrZXQuZnJvbUJ1Y2tldE5hbWUoc3RhY2ssICdJbnB1dEJ1Y2tldEInLCAnbXlidWNrZXQnKSwgJ215dGVzdHBhdGgnKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICBdLFxuICAgIG91dHB1dERhdGFDb25maWc6IHtcbiAgICAgIHMzT3V0cHV0TG9jYXRpb246IHRhc2tzLlMzTG9jYXRpb24uZnJvbUJ1Y2tldChzMy5CdWNrZXQuZnJvbUJ1Y2tldE5hbWUoc3RhY2ssICdPdXRwdXRCdWNrZXQnLCAnbXlidWNrZXQnKSwgJ215b3V0cHV0cGF0aCcpLFxuICAgICAgZW5jcnlwdGlvbktleToga21zS2V5LFxuICAgIH0sXG4gICAgcmVzb3VyY2VDb25maWc6IHtcbiAgICAgIGluc3RhbmNlQ291bnQ6IDEsXG4gICAgICBpbnN0YW5jZVR5cGU6IGVjMi5JbnN0YW5jZVR5cGUub2YoZWMyLkluc3RhbmNlQ2xhc3MuUDMsIGVjMi5JbnN0YW5jZVNpemUuWExBUkdFMiksXG4gICAgICB2b2x1bWVTaXplOiBjZGsuU2l6ZS5naWJpYnl0ZXMoNTApLFxuICAgICAgdm9sdW1lRW5jcnlwdGlvbktleToga21zS2V5LFxuICAgIH0sXG4gICAgc3RvcHBpbmdDb25kaXRpb246IHtcbiAgICAgIG1heFJ1bnRpbWU6IGNkay5EdXJhdGlvbi5ob3VycygxKSxcbiAgICB9LFxuICAgIHRhZ3M6IHtcbiAgICAgIFByb2plY3Q6ICdNeVByb2plY3QnLFxuICAgIH0sXG4gICAgdnBjQ29uZmlnOiB7XG4gICAgICB2cGMsXG4gICAgfSxcbiAgICBlbnZpcm9ubWVudDoge1xuICAgICAgU09NRVZBUjogJ215dmFsdWUnLFxuICAgIH0sXG4gIH0pO1xuICB0cmFpblRhc2suYWRkU2VjdXJpdHlHcm91cChzZWN1cml0eUdyb3VwKTtcblxuICAvLyBUSEVOXG4gIGV4cGVjdChzdGFjay5yZXNvbHZlKHRyYWluVGFzay50b1N0YXRlSnNvbigpKSkudG9FcXVhbCh7XG4gICAgVHlwZTogJ1Rhc2snLFxuICAgIFJlc291cmNlOiB7XG4gICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICcnLFxuICAgICAgICBbXG4gICAgICAgICAgJ2FybjonLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFJlZjogJ0FXUzo6UGFydGl0aW9uJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgICc6c3RhdGVzOjo6c2FnZW1ha2VyOmNyZWF0ZVRyYWluaW5nSm9iLnN5bmMnLFxuICAgICAgICBdLFxuICAgICAgXSxcbiAgICB9LFxuICAgIEVuZDogdHJ1ZSxcbiAgICBQYXJhbWV0ZXJzOiB7XG4gICAgICBUcmFpbmluZ0pvYk5hbWU6ICdNeVRyYWluSm9iJyxcbiAgICAgIFJvbGVBcm46IHsgJ0ZuOjpHZXRBdHQnOiBbJ1JvbGUxQUJDQzVGMCcsICdBcm4nXSB9LFxuICAgICAgQWxnb3JpdGhtU3BlY2lmaWNhdGlvbjoge1xuICAgICAgICBUcmFpbmluZ0lucHV0TW9kZTogJ0ZpbGUnLFxuICAgICAgICBBbGdvcml0aG1OYW1lOiAnQmxhemluZ1RleHQnLFxuICAgICAgICBNZXRyaWNEZWZpbml0aW9uczogW1xuICAgICAgICAgIHsgTmFtZTogJ215bWV0cmljJywgUmVnZXg6ICdyZWdleF9wYXR0ZXJuJyB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIEVuYWJsZU5ldHdvcmtJc29sYXRpb246IHRydWUsXG4gICAgICBIeXBlclBhcmFtZXRlcnM6IHtcbiAgICAgICAgbHI6ICcwLjEnLFxuICAgICAgfSxcbiAgICAgIElucHV0RGF0YUNvbmZpZzogW1xuICAgICAgICB7XG4gICAgICAgICAgQ2hhbm5lbE5hbWU6ICd0cmFpbicsXG4gICAgICAgICAgQ29tcHJlc3Npb25UeXBlOiAnTm9uZScsXG4gICAgICAgICAgUmVjb3JkV3JhcHBlclR5cGU6ICdSZWNvcmRJTycsXG4gICAgICAgICAgQ29udGVudFR5cGU6ICdpbWFnZS9qcGVnJyxcbiAgICAgICAgICBEYXRhU291cmNlOiB7XG4gICAgICAgICAgICBTM0RhdGFTb3VyY2U6IHtcbiAgICAgICAgICAgICAgQXR0cmlidXRlTmFtZXM6IFsnc291cmNlLXJlZicsICdjbGFzcyddLFxuICAgICAgICAgICAgICBTM0RhdGFUeXBlOiAnUzNQcmVmaXgnLFxuICAgICAgICAgICAgICBTM1VyaToge1xuICAgICAgICAgICAgICAgICdGbjo6Sm9pbic6IFsnJywgWydodHRwczovL3MzLicsIHsgUmVmOiAnQVdTOjpSZWdpb24nIH0sICcuJywgeyBSZWY6ICdBV1M6OlVSTFN1ZmZpeCcgfSwgJy9teWJ1Y2tldC9teXRyYWlucGF0aCddXSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIENoYW5uZWxOYW1lOiAndGVzdCcsXG4gICAgICAgICAgQ29tcHJlc3Npb25UeXBlOiAnR3ppcCcsXG4gICAgICAgICAgUmVjb3JkV3JhcHBlclR5cGU6ICdSZWNvcmRJTycsXG4gICAgICAgICAgQ29udGVudFR5cGU6ICdpbWFnZS9qcGVnJyxcbiAgICAgICAgICBEYXRhU291cmNlOiB7XG4gICAgICAgICAgICBTM0RhdGFTb3VyY2U6IHtcbiAgICAgICAgICAgICAgQXR0cmlidXRlTmFtZXM6IFsnc291cmNlLXJlZicsICdjbGFzcyddLFxuICAgICAgICAgICAgICBTM0RhdGFUeXBlOiAnUzNQcmVmaXgnLFxuICAgICAgICAgICAgICBTM1VyaToge1xuICAgICAgICAgICAgICAgICdGbjo6Sm9pbic6IFsnJywgWydodHRwczovL3MzLicsIHsgUmVmOiAnQVdTOjpSZWdpb24nIH0sICcuJywgeyBSZWY6ICdBV1M6OlVSTFN1ZmZpeCcgfSwgJy9teWJ1Y2tldC9teXRlc3RwYXRoJ11dLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIE91dHB1dERhdGFDb25maWc6IHtcbiAgICAgICAgUzNPdXRwdXRQYXRoOiB7XG4gICAgICAgICAgJ0ZuOjpKb2luJzogWycnLCBbJ2h0dHBzOi8vczMuJywgeyBSZWY6ICdBV1M6OlJlZ2lvbicgfSwgJy4nLCB7IFJlZjogJ0FXUzo6VVJMU3VmZml4JyB9LCAnL215YnVja2V0L215b3V0cHV0cGF0aCddXSxcbiAgICAgICAgfSxcbiAgICAgICAgS21zS2V5SWQ6IHsgJ0ZuOjpHZXRBdHQnOiBbJ0tleTk2MUI3M0ZEJywgJ0FybiddIH0sXG4gICAgICB9LFxuICAgICAgUmVzb3VyY2VDb25maWc6IHtcbiAgICAgICAgSW5zdGFuY2VDb3VudDogMSxcbiAgICAgICAgSW5zdGFuY2VUeXBlOiAnbWwucDMuMnhsYXJnZScsXG4gICAgICAgIFZvbHVtZVNpemVJbkdCOiA1MCxcbiAgICAgICAgVm9sdW1lS21zS2V5SWQ6IHsgJ0ZuOjpHZXRBdHQnOiBbJ0tleTk2MUI3M0ZEJywgJ0FybiddIH0sXG4gICAgICB9LFxuICAgICAgU3RvcHBpbmdDb25kaXRpb246IHtcbiAgICAgICAgTWF4UnVudGltZUluU2Vjb25kczogMzYwMCxcbiAgICAgIH0sXG4gICAgICBUYWdzOiBbXG4gICAgICAgIHsgS2V5OiAnUHJvamVjdCcsIFZhbHVlOiAnTXlQcm9qZWN0JyB9LFxuICAgICAgXSxcbiAgICAgIFZwY0NvbmZpZzoge1xuICAgICAgICBTZWN1cml0eUdyb3VwSWRzOiBbXG4gICAgICAgICAgeyAnRm46OkdldEF0dCc6IFsnVHJhaW5TYWdlbWFrZXJUcmFpbkpvYlNlY3VyaXR5R3JvdXA3Qzg1OEVCOScsICdHcm91cElkJ10gfSxcbiAgICAgICAgICB7ICdGbjo6R2V0QXR0JzogWydTZWN1cml0eUdyb3VwREQyNjM2MjEnLCAnR3JvdXBJZCddIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFN1Ym5ldHM6IFtcbiAgICAgICAgICB7IFJlZjogJ1ZQQ1ByaXZhdGVTdWJuZXQxU3VibmV0OEJDQTEwRTAnIH0sXG4gICAgICAgICAgeyBSZWY6ICdWUENQcml2YXRlU3VibmV0MlN1Ym5ldENGQ0RBQTdBJyB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIEVudmlyb25tZW50OiB7XG4gICAgICAgIFNPTUVWQVI6ICdteXZhbHVlJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG59KTtcblxudGVzdCgncGFzcyBwYXJhbSB0byB0cmFpbmluZyBqb2InLCAoKSA9PiB7XG4gIC8vIFdIRU5cbiAgY29uc3Qgcm9sZSA9IG5ldyBpYW0uUm9sZShzdGFjaywgJ1JvbGUnLCB7XG4gICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ3NhZ2VtYWtlci5hbWF6b25hd3MuY29tJyksXG4gICAgbWFuYWdlZFBvbGljaWVzOiBbXG4gICAgICBpYW0uTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoJ0FtYXpvblNhZ2VNYWtlckZ1bGxBY2Nlc3MnKSxcbiAgICBdLFxuICB9KTtcblxuICBjb25zdCB0YXNrID0gbmV3IFNhZ2VNYWtlckNyZWF0ZVRyYWluaW5nSm9iKHN0YWNrLCAnVHJhaW5TYWdlbWFrZXInLCB7XG4gICAgdHJhaW5pbmdKb2JOYW1lOiBzZm4uSnNvblBhdGguc3RyaW5nQXQoJyQuSm9iTmFtZScpLFxuICAgIHJvbGUsXG4gICAgYWxnb3JpdGhtU3BlY2lmaWNhdGlvbjoge1xuICAgICAgYWxnb3JpdGhtTmFtZTogJ0JsYXppbmdUZXh0JyxcbiAgICAgIHRyYWluaW5nSW5wdXRNb2RlOiB0YXNrcy5JbnB1dE1vZGUuRklMRSxcbiAgICB9LFxuICAgIGlucHV0RGF0YUNvbmZpZzogW1xuICAgICAge1xuICAgICAgICBjaGFubmVsTmFtZTogJ3RyYWluJyxcbiAgICAgICAgZGF0YVNvdXJjZToge1xuICAgICAgICAgIHMzRGF0YVNvdXJjZToge1xuICAgICAgICAgICAgczNEYXRhVHlwZTogdGFza3MuUzNEYXRhVHlwZS5TM19QUkVGSVgsXG4gICAgICAgICAgICBzM0xvY2F0aW9uOiB0YXNrcy5TM0xvY2F0aW9uLmZyb21Kc29uRXhwcmVzc2lvbignJC5TM0J1Y2tldCcpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gICAgb3V0cHV0RGF0YUNvbmZpZzoge1xuICAgICAgczNPdXRwdXRMb2NhdGlvbjogdGFza3MuUzNMb2NhdGlvbi5mcm9tQnVja2V0KHMzLkJ1Y2tldC5mcm9tQnVja2V0TmFtZShzdGFjaywgJ0J1Y2tldCcsICdteWJ1Y2tldCcpLCAnbXlvdXRwdXRwYXRoJyksXG4gICAgfSxcbiAgICByZXNvdXJjZUNvbmZpZzoge1xuICAgICAgaW5zdGFuY2VDb3VudDogMSxcbiAgICAgIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGUoc2ZuLkpzb25QYXRoLnN0cmluZ0F0KCckLlRyYWluaW5nSm9iLkluc3RhbmNlVHlwZScpKSxcbiAgICAgIHZvbHVtZVNpemU6IGNkay5TaXplLmdpYmlieXRlcyg1MCksXG4gICAgfSxcbiAgICBzdG9wcGluZ0NvbmRpdGlvbjoge1xuICAgICAgbWF4UnVudGltZTogY2RrLkR1cmF0aW9uLmhvdXJzKDEpLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KHN0YWNrLnJlc29sdmUodGFzay50b1N0YXRlSnNvbigpKSkudG9FcXVhbCh7XG4gICAgVHlwZTogJ1Rhc2snLFxuICAgIFJlc291cmNlOiB7XG4gICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICcnLFxuICAgICAgICBbXG4gICAgICAgICAgJ2FybjonLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFJlZjogJ0FXUzo6UGFydGl0aW9uJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgICc6c3RhdGVzOjo6c2FnZW1ha2VyOmNyZWF0ZVRyYWluaW5nSm9iJyxcbiAgICAgICAgXSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICBFbmQ6IHRydWUsXG4gICAgUGFyYW1ldGVyczoge1xuICAgICAgJ1RyYWluaW5nSm9iTmFtZS4kJzogJyQuSm9iTmFtZScsXG4gICAgICAnUm9sZUFybic6IHsgJ0ZuOjpHZXRBdHQnOiBbJ1JvbGUxQUJDQzVGMCcsICdBcm4nXSB9LFxuICAgICAgJ0FsZ29yaXRobVNwZWNpZmljYXRpb24nOiB7XG4gICAgICAgIFRyYWluaW5nSW5wdXRNb2RlOiAnRmlsZScsXG4gICAgICAgIEFsZ29yaXRobU5hbWU6ICdCbGF6aW5nVGV4dCcsXG4gICAgICB9LFxuICAgICAgJ0lucHV0RGF0YUNvbmZpZyc6IFtcbiAgICAgICAge1xuICAgICAgICAgIENoYW5uZWxOYW1lOiAndHJhaW4nLFxuICAgICAgICAgIERhdGFTb3VyY2U6IHtcbiAgICAgICAgICAgIFMzRGF0YVNvdXJjZToge1xuICAgICAgICAgICAgICAnUzNEYXRhVHlwZSc6ICdTM1ByZWZpeCcsXG4gICAgICAgICAgICAgICdTM1VyaS4kJzogJyQuUzNCdWNrZXQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgICdPdXRwdXREYXRhQ29uZmlnJzoge1xuICAgICAgICBTM091dHB1dFBhdGg6IHtcbiAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFsnaHR0cHM6Ly9zMy4nLCB7IFJlZjogJ0FXUzo6UmVnaW9uJyB9LCAnLicsIHsgUmVmOiAnQVdTOjpVUkxTdWZmaXgnIH0sICcvbXlidWNrZXQvbXlvdXRwdXRwYXRoJ11dLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgICdSZXNvdXJjZUNvbmZpZyc6IHtcbiAgICAgICAgJ0luc3RhbmNlQ291bnQnOiAxLFxuICAgICAgICAnSW5zdGFuY2VUeXBlLiQnOiAnJC5UcmFpbmluZ0pvYi5JbnN0YW5jZVR5cGUnLFxuICAgICAgICAnVm9sdW1lU2l6ZUluR0InOiA1MCxcbiAgICAgIH0sXG4gICAgICAnU3RvcHBpbmdDb25kaXRpb24nOiB7XG4gICAgICAgIE1heFJ1bnRpbWVJblNlY29uZHM6IDM2MDAsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ0Nhbm5vdCBjcmVhdGUgYSBTYWdlTWFrZXIgdHJhaW4gdGFzayB3aXRoIGJvdGggYWxnb3JpdGhtIG5hbWUgYW5kIGltYWdlIG5hbWUgbWlzc2luZycsICgpID0+IHtcblxuICBleHBlY3QoKCkgPT4gbmV3IFNhZ2VNYWtlckNyZWF0ZVRyYWluaW5nSm9iKHN0YWNrLCAnU2FnZU1ha2VyVHJhaW5pbmdUYXNrJywge1xuICAgIHRyYWluaW5nSm9iTmFtZTogJ215VHJhaW5Kb2InLFxuICAgIGFsZ29yaXRobVNwZWNpZmljYXRpb246IHt9LFxuICAgIGlucHV0RGF0YUNvbmZpZzogW1xuICAgICAge1xuICAgICAgICBjaGFubmVsTmFtZTogJ3RyYWluJyxcbiAgICAgICAgZGF0YVNvdXJjZToge1xuICAgICAgICAgIHMzRGF0YVNvdXJjZToge1xuICAgICAgICAgICAgczNEYXRhVHlwZTogdGFza3MuUzNEYXRhVHlwZS5TM19QUkVGSVgsXG4gICAgICAgICAgICBzM0xvY2F0aW9uOiB0YXNrcy5TM0xvY2F0aW9uLmZyb21Kc29uRXhwcmVzc2lvbignJC5TM0J1Y2tldCcpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gICAgb3V0cHV0RGF0YUNvbmZpZzoge1xuICAgICAgczNPdXRwdXRMb2NhdGlvbjogdGFza3MuUzNMb2NhdGlvbi5mcm9tQnVja2V0KHMzLkJ1Y2tldC5mcm9tQnVja2V0TmFtZShzdGFjaywgJ0J1Y2tldCcsICdteWJ1Y2tldCcpLCAnbXlvdXRwdXRwYXRoLycpLFxuICAgIH0sXG4gIH0pKVxuICAgIC50b1Rocm93RXJyb3IoL011c3QgZGVmaW5lIGVpdGhlciBhbiBhbGdvcml0aG0gbmFtZSBvciB0cmFpbmluZyBpbWFnZSBVUkkgaW4gdGhlIGFsZ29yaXRobSBzcGVjaWZpY2F0aW9uLyk7XG59KTtcbiJdfQ==