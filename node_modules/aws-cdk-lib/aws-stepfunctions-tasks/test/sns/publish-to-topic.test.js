"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sns = require("../../../aws-sns");
const sfn = require("../../../aws-stepfunctions");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const cdk = require("../../../core");
const tasks = require("../../lib");
(0, cdk_build_tools_1.describeDeprecated)('PublishToTopic', () => {
    test('Publish literal message to SNS topic', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        const pub = new sfn.Task(stack, 'Publish', {
            task: new tasks.PublishToTopic(topic, {
                message: sfn.TaskInput.fromText('Publish this message'),
            }),
        });
        // THEN
        expect(stack.resolve(pub.toStateJson())).toEqual({
            Type: 'Task',
            Resource: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':states:::sns:publish',
                    ],
                ],
            },
            End: true,
            Parameters: {
                TopicArn: { Ref: 'TopicBFC7AF6E' },
                Message: 'Publish this message',
            },
        });
    });
    test('Publish JSON to SNS topic with task token', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        const pub = new sfn.Task(stack, 'Publish', {
            task: new tasks.PublishToTopic(topic, {
                integrationPattern: sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN,
                message: sfn.TaskInput.fromObject({
                    Input: 'Publish this message',
                    Token: sfn.JsonPath.taskToken,
                }),
            }),
        });
        // THEN
        expect(stack.resolve(pub.toStateJson())).toEqual({
            Type: 'Task',
            Resource: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':states:::sns:publish.waitForTaskToken',
                    ],
                ],
            },
            End: true,
            Parameters: {
                TopicArn: { Ref: 'TopicBFC7AF6E' },
                Message: {
                    'Input': 'Publish this message',
                    'Token.$': '$$.Task.Token',
                },
            },
        });
    });
    test('Task throws if WAIT_FOR_TASK_TOKEN is supplied but task token is not included in message', () => {
        expect(() => {
            // GIVEN
            const stack = new cdk.Stack();
            const topic = new sns.Topic(stack, 'Topic');
            // WHEN
            new sfn.Task(stack, 'Publish', {
                task: new tasks.PublishToTopic(topic, {
                    integrationPattern: sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN,
                    message: sfn.TaskInput.fromText('Publish this message'),
                }),
            });
            // THEN
        }).toThrow(/Task Token is missing in message/i);
    });
    test('Publish to topic with ARN from payload', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = sns.Topic.fromTopicArn(stack, 'Topic', sfn.JsonPath.stringAt('$.topicArn'));
        // WHEN
        const pub = new sfn.Task(stack, 'Publish', {
            task: new tasks.PublishToTopic(topic, {
                message: sfn.TaskInput.fromText('Publish this message'),
            }),
        });
        // THEN
        expect(stack.resolve(pub.toStateJson())).toEqual({
            Type: 'Task',
            Resource: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition',
                        },
                        ':states:::sns:publish',
                    ],
                ],
            },
            End: true,
            Parameters: {
                'TopicArn.$': '$.topicArn',
                'Message': 'Publish this message',
            },
        });
    });
    test('Task throws if SYNC is supplied as service integration pattern', () => {
        expect(() => {
            const stack = new cdk.Stack();
            const topic = new sns.Topic(stack, 'Topic');
            new sfn.Task(stack, 'Publish', {
                task: new tasks.PublishToTopic(topic, {
                    integrationPattern: sfn.ServiceIntegrationPattern.SYNC,
                    message: sfn.TaskInput.fromText('Publish this message'),
                }),
            });
        }).toThrow(/Invalid Service Integration Pattern: SYNC is not supported to call SNS./i);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGlzaC10by10b3BpYy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHVibGlzaC10by10b3BpYy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQXdDO0FBQ3hDLGtEQUFrRDtBQUNsRCw4REFBOEQ7QUFDOUQscUNBQXFDO0FBQ3JDLG1DQUFtQztBQUVuQyxJQUFBLG9DQUFrQixFQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUN4QyxJQUFJLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO1FBQ2xELFFBQVE7UUFDTixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTVDLE9BQU87UUFDUCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUN6QyxJQUFJLEVBQUUsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRTtnQkFDcEMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDO2FBQ3hELENBQUM7U0FDSCxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDL0MsSUFBSSxFQUFFLE1BQU07WUFDWixRQUFRLEVBQUU7Z0JBQ1IsVUFBVSxFQUFFO29CQUNWLEVBQUU7b0JBQ0Y7d0JBQ0UsTUFBTTt3QkFDTjs0QkFDRSxHQUFHLEVBQUUsZ0JBQWdCO3lCQUN0Qjt3QkFDRCx1QkFBdUI7cUJBQ3hCO2lCQUNGO2FBQ0Y7WUFDRCxHQUFHLEVBQUUsSUFBSTtZQUNULFVBQVUsRUFBRTtnQkFDVixRQUFR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c0JBQXNCLENBQUM7aUJBQ3hELENBQUM7YUFDSCxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsMEVBQTBFLENBQUMsQ0FBQztJQUN6RixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc25zIGZyb20gJy4uLy4uLy4uL2F3cy1zbnMnO1xuaW1wb3J0ICogYXMgc2ZuIGZyb20gJy4uLy4uLy4uL2F3cy1zdGVwZnVuY3Rpb25zJztcbmltcG9ydCB7IGRlc2NyaWJlRGVwcmVjYXRlZCB9IGZyb20gJ0Bhd3MtY2RrL2Nkay1idWlsZC10b29scyc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyB0YXNrcyBmcm9tICcuLi8uLi9saWInO1xuXG5kZXNjcmliZURlcHJlY2F0ZWQoJ1B1Ymxpc2hUb1RvcGljJywgKCkgPT4ge1xuICB0ZXN0KCdQdWJsaXNoIGxpdGVyYWwgbWVzc2FnZSB0byBTTlMgdG9waWMnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnVG9waWMnKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBwdWIgPSBuZXcgc2ZuLlRhc2soc3RhY2ssICdQdWJsaXNoJywge1xuICAgICAgdGFzazogbmV3IHRhc2tzLlB1Ymxpc2hUb1RvcGljKHRvcGljLCB7XG4gICAgICAgIG1lc3NhZ2U6IHNmbi5UYXNrSW5wdXQuZnJvbVRleHQoJ1B1Ymxpc2ggdGhpcyBtZXNzYWdlJyksXG4gICAgICB9KSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qoc3RhY2sucmVzb2x2ZShwdWIudG9TdGF0ZUpzb24oKSkpLnRvRXF1YWwoe1xuICAgICAgVHlwZTogJ1Rhc2snLFxuICAgICAgUmVzb3VyY2U6IHtcbiAgICAgICAgJ0ZuOjpKb2luJzogW1xuICAgICAgICAgICcnLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgICdhcm46JyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgUmVmOiAnQVdTOjpQYXJ0aXRpb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICc6c3RhdGVzOjo6c25zOnB1Ymxpc2gnLFxuICAgICAgICAgIF0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAgRW5kOiB0cnVlLFxuICAgICAgUGFyYW1ldGVyczoge1xuICAgICAgICBUb3BpY0FybjogeyBSZWY6ICdUb3BpY0JGQzdBRjZFJyB9LFxuICAgICAgICBNZXNzYWdlOiAnUHVibGlzaCB0aGlzIG1lc3NhZ2UnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnUHVibGlzaCBKU09OIHRvIFNOUyB0b3BpYyB3aXRoIHRhc2sgdG9rZW4nLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnVG9waWMnKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBwdWIgPSBuZXcgc2ZuLlRhc2soc3RhY2ssICdQdWJsaXNoJywge1xuICAgICAgdGFzazogbmV3IHRhc2tzLlB1Ymxpc2hUb1RvcGljKHRvcGljLCB7XG4gICAgICAgIGludGVncmF0aW9uUGF0dGVybjogc2ZuLlNlcnZpY2VJbnRlZ3JhdGlvblBhdHRlcm4uV0FJVF9GT1JfVEFTS19UT0tFTixcbiAgICAgICAgbWVzc2FnZTogc2ZuLlRhc2tJbnB1dC5mcm9tT2JqZWN0KHtcbiAgICAgICAgICBJbnB1dDogJ1B1Ymxpc2ggdGhpcyBtZXNzYWdlJyxcbiAgICAgICAgICBUb2tlbjogc2ZuLkpzb25QYXRoLnRhc2tUb2tlbixcbiAgICAgICAgfSksXG4gICAgICB9KSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qoc3RhY2sucmVzb2x2ZShwdWIudG9TdGF0ZUpzb24oKSkpLnRvRXF1YWwoe1xuICAgICAgVHlwZTogJ1Rhc2snLFxuICAgICAgUmVzb3VyY2U6IHtcbiAgICAgICAgJ0ZuOjpKb2luJzogW1xuICAgICAgICAgICcnLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgICdhcm46JyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgUmVmOiAnQVdTOjpQYXJ0aXRpb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICc6c3RhdGVzOjo6c25zOnB1Ymxpc2gud2FpdEZvclRhc2tUb2tlbicsXG4gICAgICAgICAgXSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICBFbmQ6IHRydWUsXG4gICAgICBQYXJhbWV0ZXJzOiB7XG4gICAgICAgIFRvcGljQXJuOiB7IFJlZjogJ1RvcGljQkZDN0FGNkUnIH0sXG4gICAgICAgIE1lc3NhZ2U6IHtcbiAgICAgICAgICAnSW5wdXQnOiAnUHVibGlzaCB0aGlzIG1lc3NhZ2UnLFxuICAgICAgICAgICdUb2tlbi4kJzogJyQkLlRhc2suVG9rZW4nLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnVGFzayB0aHJvd3MgaWYgV0FJVF9GT1JfVEFTS19UT0tFTiBpcyBzdXBwbGllZCBidXQgdGFzayB0b2tlbiBpcyBub3QgaW5jbHVkZWQgaW4gbWVzc2FnZScsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IHRvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ1RvcGljJyk7XG4gICAgICAvLyBXSEVOXG4gICAgICBuZXcgc2ZuLlRhc2soc3RhY2ssICdQdWJsaXNoJywge1xuICAgICAgICB0YXNrOiBuZXcgdGFza3MuUHVibGlzaFRvVG9waWModG9waWMsIHtcbiAgICAgICAgICBpbnRlZ3JhdGlvblBhdHRlcm46IHNmbi5TZXJ2aWNlSW50ZWdyYXRpb25QYXR0ZXJuLldBSVRfRk9SX1RBU0tfVE9LRU4sXG4gICAgICAgICAgbWVzc2FnZTogc2ZuLlRhc2tJbnB1dC5mcm9tVGV4dCgnUHVibGlzaCB0aGlzIG1lc3NhZ2UnKSxcbiAgICAgICAgfSksXG4gICAgICB9KTtcbiAgICAvLyBUSEVOXG4gICAgfSkudG9UaHJvdygvVGFzayBUb2tlbiBpcyBtaXNzaW5nIGluIG1lc3NhZ2UvaSk7XG4gIH0pO1xuXG4gIHRlc3QoJ1B1Ymxpc2ggdG8gdG9waWMgd2l0aCBBUk4gZnJvbSBwYXlsb2FkJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IHRvcGljID0gc25zLlRvcGljLmZyb21Ub3BpY0FybihzdGFjaywgJ1RvcGljJywgc2ZuLkpzb25QYXRoLnN0cmluZ0F0KCckLnRvcGljQXJuJykpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHB1YiA9IG5ldyBzZm4uVGFzayhzdGFjaywgJ1B1Ymxpc2gnLCB7XG4gICAgICB0YXNrOiBuZXcgdGFza3MuUHVibGlzaFRvVG9waWModG9waWMsIHtcbiAgICAgICAgbWVzc2FnZTogc2ZuLlRhc2tJbnB1dC5mcm9tVGV4dCgnUHVibGlzaCB0aGlzIG1lc3NhZ2UnKSxcbiAgICAgIH0pLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChzdGFjay5yZXNvbHZlKHB1Yi50b1N0YXRlSnNvbigpKSkudG9FcXVhbCh7XG4gICAgICBUeXBlOiAnVGFzaycsXG4gICAgICBSZXNvdXJjZToge1xuICAgICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICAgJycsXG4gICAgICAgICAgW1xuICAgICAgICAgICAgJ2FybjonLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBSZWY6ICdBV1M6OlBhcnRpdGlvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJzpzdGF0ZXM6OjpzbnM6cHVibGlzaCcsXG4gICAgICAgICAgXSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICBFbmQ6IHRydWUsXG4gICAgICBQYXJhbWV0ZXJzOiB7XG4gICAgICAgICdUb3BpY0Fybi4kJzogJyQudG9waWNBcm4nLFxuICAgICAgICAnTWVzc2FnZSc6ICdQdWJsaXNoIHRoaXMgbWVzc2FnZScsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdUYXNrIHRocm93cyBpZiBTWU5DIGlzIHN1cHBsaWVkIGFzIHNlcnZpY2UgaW50ZWdyYXRpb24gcGF0dGVybicsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBjb25zdCB0b3BpYyA9IG5ldyBzbnMuVG9waWMoc3RhY2ssICdUb3BpYycpO1xuXG4gICAgICBuZXcgc2ZuLlRhc2soc3RhY2ssICdQdWJsaXNoJywge1xuICAgICAgICB0YXNrOiBuZXcgdGFza3MuUHVibGlzaFRvVG9waWModG9waWMsIHtcbiAgICAgICAgICBpbnRlZ3JhdGlvblBhdHRlcm46IHNmbi5TZXJ2aWNlSW50ZWdyYXRpb25QYXR0ZXJuLlNZTkMsXG4gICAgICAgICAgbWVzc2FnZTogc2ZuLlRhc2tJbnB1dC5mcm9tVGV4dCgnUHVibGlzaCB0aGlzIG1lc3NhZ2UnKSxcbiAgICAgICAgfSksXG4gICAgICB9KTtcbiAgICB9KS50b1Rocm93KC9JbnZhbGlkIFNlcnZpY2UgSW50ZWdyYXRpb24gUGF0dGVybjogU1lOQyBpcyBub3Qgc3VwcG9ydGVkIHRvIGNhbGwgU05TLi9pKTtcbiAgfSk7XG59KTsiXX0=