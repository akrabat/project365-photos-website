"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const sfn = require("../../../aws-stepfunctions");
const core_1 = require("../../../core");
const invoke_activity_1 = require("../../lib/stepfunctions/invoke-activity");
test('Activity can be used in a Task', () => {
    // GIVEN
    const stack = new core_1.Stack();
    // WHEN
    const activity = new sfn.Activity(stack, 'Activity');
    const task = new invoke_activity_1.StepFunctionsInvokeActivity(stack, 'Task', { activity });
    new sfn.StateMachine(stack, 'SM', {
        definition: task,
    });
    // THEN
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::StepFunctions::StateMachine', {
        DefinitionString: {
            'Fn::Join': ['', [
                    '{"StartAt":"Task","States":{"Task":{"End":true,"Type":"Task","Resource":"',
                    { Ref: 'Activity04690B0A' },
                    '"}}}',
                ]],
        },
    });
});
test('Activity Task metrics and Activity metrics are the same', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const activity = new sfn.Activity(stack, 'Activity');
    const task = new invoke_activity_1.StepFunctionsInvokeActivity(stack, 'Invoke', { activity });
    // WHEN
    const activityMetrics = [
        activity.metricFailed(),
        activity.metricHeartbeatTimedOut(),
        activity.metricRunTime(),
        activity.metricScheduled(),
        activity.metricScheduleTime(),
        activity.metricStarted(),
        activity.metricSucceeded(),
        activity.metricTime(),
        activity.metricTimedOut(),
    ];
    const taskMetrics = [
        task.metricFailed(),
        task.metricHeartbeatTimedOut(),
        task.metricRunTime(),
        task.metricScheduled(),
        task.metricScheduleTime(),
        task.metricStarted(),
        task.metricSucceeded(),
        task.metricTime(),
        task.metricTimedOut(),
    ];
    // THEN
    for (let i = 0; i < activityMetrics.length; i++) {
        expect(activityMetrics[i]).toEqual(taskMetrics[i]);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52b2tlLWFjdGl2aXR5LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnZva2UtYWN0aXZpdHkudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9EQUErQztBQUMvQyxrREFBa0Q7QUFDbEQsd0NBQXNDO0FBQ3RDLDZFQUFzRjtBQUV0RixJQUFJLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxFQUFFO0lBQzFDLFFBQVE7SUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO0lBRTFCLE9BQU87SUFDUCxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sSUFBSSxHQUFHLElBQUksNkNBQTJCLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDMUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUU7UUFDaEMsVUFBVSxFQUFFLElBQUk7S0FDakIsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLGtDQUFrQyxFQUFFO1FBQ2xGLGdCQUFnQixFQUFFO1lBQ2hCLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDZiwyRUFBMkU7b0JBQzNFLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixFQUFFO29CQUMzQixNQUFNO2lCQUNQLENBQUM7U0FDSDtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHlEQUF5RCxFQUFFLEdBQUcsRUFBRTtJQUNuRSxRQUFRO0lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztJQUMxQixNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sSUFBSSxHQUFHLElBQUksNkNBQTJCLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFNUUsT0FBTztJQUNQLE1BQU0sZUFBZSxHQUFHO1FBQ3RCLFFBQVEsQ0FBQyxZQUFZLEVBQUU7UUFDdkIsUUFBUSxDQUFDLHVCQUF1QixFQUFFO1FBQ2xDLFFBQVEsQ0FBQyxhQUFhLEVBQUU7UUFDeEIsUUFBUSxDQUFDLGVBQWUsRUFBRTtRQUMxQixRQUFRLENBQUMsa0JBQWtCLEVBQUU7UUFDN0IsUUFBUSxDQUFDLGFBQWEsRUFBRTtRQUN4QixRQUFRLENBQUMsZUFBZSxFQUFFO1FBQzFCLFFBQVEsQ0FBQyxVQUFVLEVBQUU7UUFDckIsUUFBUSxDQUFDLGNBQWMsRUFBRTtLQUMxQixDQUFDO0lBRUYsTUFBTSxXQUFXLEdBQUc7UUFDbEIsSUFBSSxDQUFDLFlBQVksRUFBRTtRQUNuQixJQUFJLENBQUMsdUJBQXVCLEVBQUU7UUFDOUIsSUFBSSxDQUFDLGFBQWEsRUFBRTtRQUNwQixJQUFJLENBQUMsZUFBZSxFQUFFO1FBQ3RCLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtRQUN6QixJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ3BCLElBQUksQ0FBQyxlQUFlLEVBQUU7UUFDdEIsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNqQixJQUFJLENBQUMsY0FBYyxFQUFFO0tBQ3RCLENBQUM7SUFFRixPQUFPO0lBQ1AsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDL0MsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNwRDtBQUNILENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi8uLi9hc3NlcnRpb25zJztcbmltcG9ydCAqIGFzIHNmbiBmcm9tICcuLi8uLi8uLi9hd3Mtc3RlcGZ1bmN0aW9ucyc7XG5pbXBvcnQgeyBTdGFjayB9IGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgU3RlcEZ1bmN0aW9uc0ludm9rZUFjdGl2aXR5IH0gZnJvbSAnLi4vLi4vbGliL3N0ZXBmdW5jdGlvbnMvaW52b2tlLWFjdGl2aXR5JztcblxudGVzdCgnQWN0aXZpdHkgY2FuIGJlIHVzZWQgaW4gYSBUYXNrJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuXG4gIC8vIFdIRU5cbiAgY29uc3QgYWN0aXZpdHkgPSBuZXcgc2ZuLkFjdGl2aXR5KHN0YWNrLCAnQWN0aXZpdHknKTtcbiAgY29uc3QgdGFzayA9IG5ldyBTdGVwRnVuY3Rpb25zSW52b2tlQWN0aXZpdHkoc3RhY2ssICdUYXNrJywgeyBhY3Rpdml0eSB9KTtcbiAgbmV3IHNmbi5TdGF0ZU1hY2hpbmUoc3RhY2ssICdTTScsIHtcbiAgICBkZWZpbml0aW9uOiB0YXNrLFxuICB9KTtcblxuICAvLyBUSEVOXG4gIFRlbXBsYXRlLmZyb21TdGFjayhzdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlN0ZXBGdW5jdGlvbnM6OlN0YXRlTWFjaGluZScsIHtcbiAgICBEZWZpbml0aW9uU3RyaW5nOiB7XG4gICAgICAnRm46OkpvaW4nOiBbJycsIFtcbiAgICAgICAgJ3tcIlN0YXJ0QXRcIjpcIlRhc2tcIixcIlN0YXRlc1wiOntcIlRhc2tcIjp7XCJFbmRcIjp0cnVlLFwiVHlwZVwiOlwiVGFza1wiLFwiUmVzb3VyY2VcIjpcIicsXG4gICAgICAgIHsgUmVmOiAnQWN0aXZpdHkwNDY5MEIwQScgfSxcbiAgICAgICAgJ1wifX19JyxcbiAgICAgIF1dLFxuICAgIH0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ0FjdGl2aXR5IFRhc2sgbWV0cmljcyBhbmQgQWN0aXZpdHkgbWV0cmljcyBhcmUgdGhlIHNhbWUnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gIGNvbnN0IGFjdGl2aXR5ID0gbmV3IHNmbi5BY3Rpdml0eShzdGFjaywgJ0FjdGl2aXR5Jyk7XG4gIGNvbnN0IHRhc2sgPSBuZXcgU3RlcEZ1bmN0aW9uc0ludm9rZUFjdGl2aXR5KHN0YWNrLCAnSW52b2tlJywgeyBhY3Rpdml0eSB9KTtcblxuICAvLyBXSEVOXG4gIGNvbnN0IGFjdGl2aXR5TWV0cmljcyA9IFtcbiAgICBhY3Rpdml0eS5tZXRyaWNGYWlsZWQoKSxcbiAgICBhY3Rpdml0eS5tZXRyaWNIZWFydGJlYXRUaW1lZE91dCgpLFxuICAgIGFjdGl2aXR5Lm1ldHJpY1J1blRpbWUoKSxcbiAgICBhY3Rpdml0eS5tZXRyaWNTY2hlZHVsZWQoKSxcbiAgICBhY3Rpdml0eS5tZXRyaWNTY2hlZHVsZVRpbWUoKSxcbiAgICBhY3Rpdml0eS5tZXRyaWNTdGFydGVkKCksXG4gICAgYWN0aXZpdHkubWV0cmljU3VjY2VlZGVkKCksXG4gICAgYWN0aXZpdHkubWV0cmljVGltZSgpLFxuICAgIGFjdGl2aXR5Lm1ldHJpY1RpbWVkT3V0KCksXG4gIF07XG5cbiAgY29uc3QgdGFza01ldHJpY3MgPSBbXG4gICAgdGFzay5tZXRyaWNGYWlsZWQoKSxcbiAgICB0YXNrLm1ldHJpY0hlYXJ0YmVhdFRpbWVkT3V0KCksXG4gICAgdGFzay5tZXRyaWNSdW5UaW1lKCksXG4gICAgdGFzay5tZXRyaWNTY2hlZHVsZWQoKSxcbiAgICB0YXNrLm1ldHJpY1NjaGVkdWxlVGltZSgpLFxuICAgIHRhc2subWV0cmljU3RhcnRlZCgpLFxuICAgIHRhc2subWV0cmljU3VjY2VlZGVkKCksXG4gICAgdGFzay5tZXRyaWNUaW1lKCksXG4gICAgdGFzay5tZXRyaWNUaW1lZE91dCgpLFxuICBdO1xuXG4gIC8vIFRIRU5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhY3Rpdml0eU1ldHJpY3MubGVuZ3RoOyBpKyspIHtcbiAgICBleHBlY3QoYWN0aXZpdHlNZXRyaWNzW2ldKS50b0VxdWFsKHRhc2tNZXRyaWNzW2ldKTtcbiAgfVxufSk7XG4iXX0=