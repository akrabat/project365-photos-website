"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const sfn = require("../../../aws-stepfunctions");
const core_1 = require("../../../core");
const start_execution_1 = require("../../lib/stepfunctions/start-execution");
let stack;
let child;
beforeEach(() => {
    stack = new core_1.Stack();
    child = new sfn.StateMachine(stack, 'ChildStateMachine', {
        definition: sfn.Chain.start(new sfn.Pass(stack, 'PassState')),
    });
});
test('Execute State Machine - Default - Request Response', () => {
    const task = new start_execution_1.StepFunctionsStartExecution(stack, 'ChildTask', {
        stateMachine: child,
        input: sfn.TaskInput.fromObject({
            foo: 'bar',
        }),
        name: 'myExecutionName',
    });
    new sfn.StateMachine(stack, 'ParentStateMachine', {
        definition: task,
    });
    expect(stack.resolve(task.toStateJson())).toEqual({
        Type: 'Task',
        Resource: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':states:::states:startExecution',
                ],
            ],
        },
        End: true,
        Parameters: {
            Input: {
                foo: 'bar',
            },
            Name: 'myExecutionName',
            StateMachineArn: {
                Ref: 'ChildStateMachine9133117F',
            },
        },
    });
});
test('Execute State Machine - Run Job', () => {
    const task = new start_execution_1.StepFunctionsStartExecution(stack, 'ChildTask', {
        stateMachine: child,
        integrationPattern: sfn.IntegrationPattern.RUN_JOB,
    });
    new sfn.StateMachine(stack, 'ParentStateMachine', {
        definition: task,
    });
    expect(stack.resolve(task.toStateJson())).toEqual({
        Type: 'Task',
        Resource: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':states:::states:startExecution.sync:2',
                ],
            ],
        },
        End: true,
        Parameters: {
            'Input.$': '$',
            'StateMachineArn': {
                Ref: 'ChildStateMachine9133117F',
            },
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: 'states:StartExecution',
                    Effect: 'Allow',
                    Resource: {
                        Ref: 'ChildStateMachine9133117F',
                    },
                },
                {
                    Action: ['states:DescribeExecution', 'states:StopExecution'],
                    Effect: 'Allow',
                    Resource: {
                        'Fn::Join': [
                            '',
                            [
                                'arn:',
                                {
                                    Ref: 'AWS::Partition',
                                },
                                ':states:',
                                {
                                    Ref: 'AWS::Region',
                                },
                                ':',
                                {
                                    Ref: 'AWS::AccountId',
                                },
                                ':execution:',
                                {
                                    'Fn::Select': [
                                        6,
                                        {
                                            'Fn::Split': [
                                                ':',
                                                {
                                                    Ref: 'ChildStateMachine9133117F',
                                                },
                                            ],
                                        },
                                    ],
                                },
                                '*',
                            ],
                        ],
                    },
                },
                {
                    Action: ['events:PutTargets', 'events:PutRule', 'events:DescribeRule'],
                    Effect: 'Allow',
                    Resource: {
                        'Fn::Join': [
                            '',
                            [
                                'arn:',
                                {
                                    Ref: 'AWS::Partition',
                                },
                                ':events:',
                                {
                                    Ref: 'AWS::Region',
                                },
                                ':',
                                {
                                    Ref: 'AWS::AccountId',
                                },
                                ':rule/StepFunctionsGetEventsForStepFunctionsExecutionRule',
                            ],
                        ],
                    },
                },
            ],
            Version: '2012-10-17',
        },
        Roles: [
            {
                Ref: 'ParentStateMachineRoleE902D002',
            },
        ],
    });
});
test('Execute State Machine - Wait For Task Token', () => {
    const task = new start_execution_1.StepFunctionsStartExecution(stack, 'ChildTask', {
        stateMachine: child,
        integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,
        input: sfn.TaskInput.fromObject({
            token: sfn.JsonPath.taskToken,
        }),
    });
    new sfn.StateMachine(stack, 'ParentStateMachine', {
        definition: task,
    });
    expect(stack.resolve(task.toStateJson())).toEqual({
        Type: 'Task',
        Resource: {
            'Fn::Join': [
                '',
                [
                    'arn:',
                    {
                        Ref: 'AWS::Partition',
                    },
                    ':states:::states:startExecution.waitForTaskToken',
                ],
            ],
        },
        End: true,
        Parameters: {
            Input: {
                'token.$': '$$.Task.Token',
            },
            StateMachineArn: {
                Ref: 'ChildStateMachine9133117F',
            },
        },
    });
});
test('Execute State Machine - Wait For Task Token - Missing Task Token', () => {
    expect(() => {
        new start_execution_1.StepFunctionsStartExecution(stack, 'ChildTask', {
            stateMachine: child,
            integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,
        });
    }).toThrow('Task Token is required in `input` for callback. Use JsonPath.taskToken to set the token.');
});
test('Execute State Machine - Associate With Parent - Input Provided', () => {
    const task = new start_execution_1.StepFunctionsStartExecution(stack, 'ChildTask', {
        stateMachine: child,
        input: sfn.TaskInput.fromObject({
            token: sfn.JsonPath.taskToken,
        }),
        associateWithParent: true,
    });
    new sfn.StateMachine(stack, 'ParentStateMachine', {
        definition: task,
    });
    expect(stack.resolve(task.toStateJson())).toMatchObject({
        Parameters: {
            Input: {
                'token.$': '$$.Task.Token',
                'AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$': '$$.Execution.Id',
            },
        },
    });
});
test('Execute State Machine - Associate With Parent - Input Not Provided', () => {
    const task = new start_execution_1.StepFunctionsStartExecution(stack, 'ChildTask', {
        stateMachine: child,
        associateWithParent: true,
    });
    new sfn.StateMachine(stack, 'ParentStateMachine', {
        definition: task,
    });
    expect(stack.resolve(task.toStateJson())).toMatchObject({
        Parameters: {
            Input: {
                'AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$': '$$.Execution.Id',
            },
        },
    });
});
test('Execute State Machine - Associate With Parent - Incorrect Input Type', () => {
    expect(() => {
        new start_execution_1.StepFunctionsStartExecution(stack, 'ChildTask', {
            stateMachine: child,
            associateWithParent: true,
            input: sfn.TaskInput.fromText('{ "token.$": "$$.Task.Token" }'),
        });
    }).toThrow('Could not enable `associateWithParent` because `input` is taken directly from a JSON path. Use `sfn.TaskInput.fromObject` instead.');
});
//# sourceMappingURL=data:application/json;base64,