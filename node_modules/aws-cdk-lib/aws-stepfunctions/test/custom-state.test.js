"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("../../core");
const render_util_1 = require("./private/render-util");
const sfn = require("../lib");
describe('Custom State', () => {
    let stack;
    let stateJson;
    beforeEach(() => {
        // GIVEN
        stack = new cdk.Stack();
        stateJson = {
            Type: 'Task',
            Resource: 'arn:aws:states:::dynamodb:putItem',
            Parameters: {
                TableName: 'MyTable',
                Item: {
                    id: {
                        S: 'MyEntry',
                    },
                },
            },
            ResultPath: null,
        };
    });
    test('maintains the state Json provided during construction', () => {
        // WHEN
        const customState = new sfn.CustomState(stack, 'Custom', {
            stateJson,
        });
        // THEN
        expect(customState.toStateJson()).toStrictEqual({
            ...stateJson,
            End: true,
        });
    });
    test('can add a next state to the chain', () => {
        // WHEN
        const definition = new sfn.CustomState(stack, 'Custom', {
            stateJson,
        }).next(new sfn.Pass(stack, 'MyPass'));
        // THEN
        expect((0, render_util_1.render)(stack, definition)).toStrictEqual({
            StartAt: 'Custom',
            States: {
                Custom: {
                    Next: 'MyPass',
                    Type: 'Task',
                    Resource: 'arn:aws:states:::dynamodb:putItem',
                    Parameters: {
                        TableName: 'MyTable',
                        Item: {
                            id: {
                                S: 'MyEntry',
                            },
                        },
                    },
                    ResultPath: null,
                },
                MyPass: {
                    Type: 'Pass',
                    End: true,
                },
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXN0YXRlLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjdXN0b20tc3RhdGUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtDQUFrQztBQUNsQyx1REFBK0M7QUFDL0MsOEJBQThCO0FBRTlCLFFBQVEsQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO0lBQzVCLElBQUksS0FBZ0IsQ0FBQztJQUNyQixJQUFJLFNBQWMsQ0FBQztJQUVuQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsUUFBUTtRQUNSLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN4QixTQUFTLEdBQUc7WUFDVixJQUFJLEVBQUUsTUFBTTtZQUNaLFFBQVEsRUFBRSxtQ0FBbUM7WUFDN0MsVUFBVSxFQUFFO2dCQUNWLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixJQUFJLEVBQUU7b0JBQ0osRUFBRSxFQUFFO3dCQUNGLENBQUMsRUFBRSxTQUFTO3FCQUNiO2lCQUNGO2FBQ0Y7WUFDRCxVQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsdURBQXVELEVBQUUsR0FBRyxFQUFFO1FBQ2pFLE9BQU87UUFDUCxNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtZQUN2RCxTQUFTO1NBQ1YsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUM7WUFDOUMsR0FBRyxTQUFTO1lBQ1osR0FBRyxFQUFFLElBQUk7U0FDVixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7UUFDN0MsT0FBTztRQUNQLE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO1lBQ3RELFNBQVM7U0FDVixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUV2QyxPQUFPO1FBQ1AsTUFBTSxDQUFDLElBQUEsb0JBQU0sRUFBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQzdDO1lBQ0UsT0FBTyxFQUFFLFFBQVE7WUFDakIsTUFBTSxFQUFFO2dCQUNOLE1BQU0sRUFBRTtvQkFDTixJQUFJLEVBQUUsUUFBUTtvQkFDZCxJQUFJLEVBQUUsTUFBTTtvQkFDWixRQUFRLEVBQUUsbUNBQW1DO29CQUM3QyxVQUFVLEVBQUU7d0JBQ1YsU0FBUyxFQUFFLFNBQVM7d0JBQ3BCLElBQUksRUFBRTs0QkFDSixFQUFFLEVBQUU7Z0NBQ0YsQ0FBQyxFQUFFLFNBQVM7NkJBQ2I7eUJBQ0Y7cUJBQ0Y7b0JBQ0QsVUFBVSxFQUFFLElBQUk7aUJBQ2pCO2dCQUNELE1BQU0sRUFBRTtvQkFDTixJQUFJLEVBQUUsTUFBTTtvQkFDWixHQUFHLEVBQUUsSUFBSTtpQkFDVjthQUNGO1NBQ0YsQ0FDRixDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJy4vcHJpdmF0ZS9yZW5kZXItdXRpbCc7XG5pbXBvcnQgKiBhcyBzZm4gZnJvbSAnLi4vbGliJztcblxuZGVzY3JpYmUoJ0N1c3RvbSBTdGF0ZScsICgpID0+IHtcbiAgbGV0IHN0YWNrOiBjZGsuU3RhY2s7XG4gIGxldCBzdGF0ZUpzb246IGFueTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIHN0YXRlSnNvbiA9IHtcbiAgICAgIFR5cGU6ICdUYXNrJyxcbiAgICAgIFJlc291cmNlOiAnYXJuOmF3czpzdGF0ZXM6OjpkeW5hbW9kYjpwdXRJdGVtJyxcbiAgICAgIFBhcmFtZXRlcnM6IHtcbiAgICAgICAgVGFibGVOYW1lOiAnTXlUYWJsZScsXG4gICAgICAgIEl0ZW06IHtcbiAgICAgICAgICBpZDoge1xuICAgICAgICAgICAgUzogJ015RW50cnknLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgUmVzdWx0UGF0aDogbnVsbCxcbiAgICB9O1xuICB9KTtcblxuICB0ZXN0KCdtYWludGFpbnMgdGhlIHN0YXRlIEpzb24gcHJvdmlkZWQgZHVyaW5nIGNvbnN0cnVjdGlvbicsICgpID0+IHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgY3VzdG9tU3RhdGUgPSBuZXcgc2ZuLkN1c3RvbVN0YXRlKHN0YWNrLCAnQ3VzdG9tJywge1xuICAgICAgc3RhdGVKc29uLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChjdXN0b21TdGF0ZS50b1N0YXRlSnNvbigpKS50b1N0cmljdEVxdWFsKHtcbiAgICAgIC4uLnN0YXRlSnNvbixcbiAgICAgIEVuZDogdHJ1ZSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnY2FuIGFkZCBhIG5leHQgc3RhdGUgdG8gdGhlIGNoYWluJywgKCkgPT4ge1xuICAgIC8vIFdIRU5cbiAgICBjb25zdCBkZWZpbml0aW9uID0gbmV3IHNmbi5DdXN0b21TdGF0ZShzdGFjaywgJ0N1c3RvbScsIHtcbiAgICAgIHN0YXRlSnNvbixcbiAgICB9KS5uZXh0KG5ldyBzZm4uUGFzcyhzdGFjaywgJ015UGFzcycpKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QocmVuZGVyKHN0YWNrLCBkZWZpbml0aW9uKSkudG9TdHJpY3RFcXVhbChcbiAgICAgIHtcbiAgICAgICAgU3RhcnRBdDogJ0N1c3RvbScsXG4gICAgICAgIFN0YXRlczoge1xuICAgICAgICAgIEN1c3RvbToge1xuICAgICAgICAgICAgTmV4dDogJ015UGFzcycsXG4gICAgICAgICAgICBUeXBlOiAnVGFzaycsXG4gICAgICAgICAgICBSZXNvdXJjZTogJ2Fybjphd3M6c3RhdGVzOjo6ZHluYW1vZGI6cHV0SXRlbScsXG4gICAgICAgICAgICBQYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgICAgIFRhYmxlTmFtZTogJ015VGFibGUnLFxuICAgICAgICAgICAgICBJdGVtOiB7XG4gICAgICAgICAgICAgICAgaWQ6IHtcbiAgICAgICAgICAgICAgICAgIFM6ICdNeUVudHJ5JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFJlc3VsdFBhdGg6IG51bGwsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBNeVBhc3M6IHtcbiAgICAgICAgICAgIFR5cGU6ICdQYXNzJyxcbiAgICAgICAgICAgIEVuZDogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICApO1xuICB9KTtcbn0pOyJdfQ==