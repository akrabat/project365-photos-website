"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("../../core");
const stepfunctions = require("../lib");
describe('Parallel State', () => {
    test('State Machine With Parallel State', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const parallel = new stepfunctions.Parallel(stack, 'Parallel State');
        parallel.branch(new stepfunctions.Pass(stack, 'Branch 1'));
        parallel.branch(new stepfunctions.Pass(stack, 'Branch 2'));
        // THEN
        expect(render(parallel)).toStrictEqual({
            StartAt: 'Parallel State',
            States: {
                'Parallel State': {
                    Type: 'Parallel',
                    End: true,
                    Branches: [
                        { StartAt: 'Branch 1', States: { 'Branch 1': { Type: 'Pass', End: true } } },
                        { StartAt: 'Branch 2', States: { 'Branch 2': { Type: 'Pass', End: true } } },
                    ],
                },
            },
        });
    });
    test('State Machine With Parallel State and ResultSelector', () => {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const parallel = new stepfunctions.Parallel(stack, 'Parallel State', {
            resultSelector: {
                buz: 'buz',
                baz: stepfunctions.JsonPath.stringAt('$.baz'),
            },
        });
        parallel.branch(new stepfunctions.Pass(stack, 'Branch 1'));
        // THEN
        expect(render(parallel)).toStrictEqual({
            StartAt: 'Parallel State',
            States: {
                'Parallel State': {
                    Type: 'Parallel',
                    End: true,
                    Branches: [
                        { StartAt: 'Branch 1', States: { 'Branch 1': { Type: 'Pass', End: true } } },
                    ],
                    ResultSelector: {
                        'buz': 'buz',
                        'baz.$': '$.baz',
                    },
                },
            },
        });
    });
});
function render(sm) {
    return new cdk.Stack().resolve(new stepfunctions.StateGraph(sm.startState, 'Test Graph').toGraphJson());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYWxsZWwudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBhcmFsbGVsLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrQ0FBa0M7QUFDbEMsd0NBQXdDO0FBRXhDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDOUIsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtRQUM3QyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsT0FBTztRQUNQLE1BQU0sUUFBUSxHQUFHLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUNyRSxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUMzRCxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUUzRCxPQUFPO1FBQ1AsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUNyQyxPQUFPLEVBQUUsZ0JBQWdCO1lBQ3pCLE1BQU0sRUFBRTtnQkFDTixnQkFBZ0IsRUFBRTtvQkFDaEIsSUFBSSxFQUFFLFVBQVU7b0JBQ2hCLEdBQUcsRUFBRSxJQUFJO29CQUNULFFBQVEsRUFBRTt3QkFDUixFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTt3QkFDNUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7cUJBQzdFO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxzREFBc0QsRUFBRSxHQUFHLEVBQUU7UUFDaEUsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTlCLE9BQU87UUFDUCxNQUFNLFFBQVEsR0FBRyxJQUFJLGFBQWEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFO1lBQ25FLGNBQWMsRUFBRTtnQkFDZCxHQUFHLEVBQUUsS0FBSztnQkFDVixHQUFHLEVBQUUsYUFBYSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO2FBQzlDO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFM0QsT0FBTztRQUNQLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7WUFDckMsT0FBTyxFQUFFLGdCQUFnQjtZQUN6QixNQUFNLEVBQUU7Z0JBQ04sZ0JBQWdCLEVBQUU7b0JBQ2hCLElBQUksRUFBRSxVQUFVO29CQUNoQixHQUFHLEVBQUUsSUFBSTtvQkFDVCxRQUFRLEVBQUU7d0JBQ1IsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7cUJBQzdFO29CQUNELGNBQWMsRUFBRTt3QkFDZCxLQUFLLEVBQUUsS0FBSzt3QkFDWixPQUFPLEVBQUUsT0FBTztxQkFDakI7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLE1BQU0sQ0FBQyxFQUE0QjtJQUMxQyxPQUFPLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLGFBQWEsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQzFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBzdGVwZnVuY3Rpb25zIGZyb20gJy4uL2xpYic7XG5cbmRlc2NyaWJlKCdQYXJhbGxlbCBTdGF0ZScsICgpID0+IHtcbiAgdGVzdCgnU3RhdGUgTWFjaGluZSBXaXRoIFBhcmFsbGVsIFN0YXRlJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgcGFyYWxsZWwgPSBuZXcgc3RlcGZ1bmN0aW9ucy5QYXJhbGxlbChzdGFjaywgJ1BhcmFsbGVsIFN0YXRlJyk7XG4gICAgcGFyYWxsZWwuYnJhbmNoKG5ldyBzdGVwZnVuY3Rpb25zLlBhc3Moc3RhY2ssICdCcmFuY2ggMScpKTtcbiAgICBwYXJhbGxlbC5icmFuY2gobmV3IHN0ZXBmdW5jdGlvbnMuUGFzcyhzdGFjaywgJ0JyYW5jaCAyJykpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChyZW5kZXIocGFyYWxsZWwpKS50b1N0cmljdEVxdWFsKHtcbiAgICAgIFN0YXJ0QXQ6ICdQYXJhbGxlbCBTdGF0ZScsXG4gICAgICBTdGF0ZXM6IHtcbiAgICAgICAgJ1BhcmFsbGVsIFN0YXRlJzoge1xuICAgICAgICAgIFR5cGU6ICdQYXJhbGxlbCcsXG4gICAgICAgICAgRW5kOiB0cnVlLFxuICAgICAgICAgIEJyYW5jaGVzOiBbXG4gICAgICAgICAgICB7IFN0YXJ0QXQ6ICdCcmFuY2ggMScsIFN0YXRlczogeyAnQnJhbmNoIDEnOiB7IFR5cGU6ICdQYXNzJywgRW5kOiB0cnVlIH0gfSB9LFxuICAgICAgICAgICAgeyBTdGFydEF0OiAnQnJhbmNoIDInLCBTdGF0ZXM6IHsgJ0JyYW5jaCAyJzogeyBUeXBlOiAnUGFzcycsIEVuZDogdHJ1ZSB9IH0gfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnU3RhdGUgTWFjaGluZSBXaXRoIFBhcmFsbGVsIFN0YXRlIGFuZCBSZXN1bHRTZWxlY3RvcicsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHBhcmFsbGVsID0gbmV3IHN0ZXBmdW5jdGlvbnMuUGFyYWxsZWwoc3RhY2ssICdQYXJhbGxlbCBTdGF0ZScsIHtcbiAgICAgIHJlc3VsdFNlbGVjdG9yOiB7XG4gICAgICAgIGJ1ejogJ2J1eicsXG4gICAgICAgIGJhejogc3RlcGZ1bmN0aW9ucy5Kc29uUGF0aC5zdHJpbmdBdCgnJC5iYXonKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgcGFyYWxsZWwuYnJhbmNoKG5ldyBzdGVwZnVuY3Rpb25zLlBhc3Moc3RhY2ssICdCcmFuY2ggMScpKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QocmVuZGVyKHBhcmFsbGVsKSkudG9TdHJpY3RFcXVhbCh7XG4gICAgICBTdGFydEF0OiAnUGFyYWxsZWwgU3RhdGUnLFxuICAgICAgU3RhdGVzOiB7XG4gICAgICAgICdQYXJhbGxlbCBTdGF0ZSc6IHtcbiAgICAgICAgICBUeXBlOiAnUGFyYWxsZWwnLFxuICAgICAgICAgIEVuZDogdHJ1ZSxcbiAgICAgICAgICBCcmFuY2hlczogW1xuICAgICAgICAgICAgeyBTdGFydEF0OiAnQnJhbmNoIDEnLCBTdGF0ZXM6IHsgJ0JyYW5jaCAxJzogeyBUeXBlOiAnUGFzcycsIEVuZDogdHJ1ZSB9IH0gfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIFJlc3VsdFNlbGVjdG9yOiB7XG4gICAgICAgICAgICAnYnV6JzogJ2J1eicsXG4gICAgICAgICAgICAnYmF6LiQnOiAnJC5iYXonLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5mdW5jdGlvbiByZW5kZXIoc206IHN0ZXBmdW5jdGlvbnMuSUNoYWluYWJsZSkge1xuICByZXR1cm4gbmV3IGNkay5TdGFjaygpLnJlc29sdmUobmV3IHN0ZXBmdW5jdGlvbnMuU3RhdGVHcmFwaChzbS5zdGFydFN0YXRlLCAnVGVzdCBHcmFwaCcpLnRvR3JhcGhKc29uKCkpO1xufVxuIl19