"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("../../assertions");
const cdk = require("../../core");
const fake_task_1 = require("./fake-task");
const lib_1 = require("../lib");
test('JsonPath.DISCARD can be used to discard a state\'s output', () => {
    // GIVEN
    const app = new cdk.App();
    const stack = new cdk.Stack(app, 'TestStack');
    const task = new fake_task_1.FakeTask(stack, 'my-state', {
        inputPath: lib_1.JsonPath.DISCARD,
        outputPath: lib_1.JsonPath.DISCARD,
        resultPath: lib_1.JsonPath.DISCARD,
    });
    new lib_1.StateMachine(stack, 'state-machine', {
        definition: task,
    });
    // WHEN
    const definitionString = new assert.Capture();
    assert.Template.fromStack(stack).hasResourceProperties('AWS::StepFunctions::StateMachine', {
        DefinitionString: definitionString,
    });
    // THEN
    const definition = JSON.parse(definitionString.asString());
    expect(definition).toMatchObject({
        States: {
            'my-state': {
                InputPath: null,
                OutputPath: null,
                ResultPath: null,
            },
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0YXRlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBMkM7QUFDM0Msa0NBQWtDO0FBQ2xDLDJDQUF1QztBQUN2QyxnQ0FBZ0Q7QUFFaEQsSUFBSSxDQUFDLDJEQUEyRCxFQUFFLEdBQUcsRUFBRTtJQUNyRSxRQUFRO0lBQ1IsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM5QyxNQUFNLElBQUksR0FBRyxJQUFJLG9CQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtRQUMzQyxTQUFTLEVBQUUsY0FBUSxDQUFDLE9BQU87UUFDM0IsVUFBVSxFQUFFLGNBQVEsQ0FBQyxPQUFPO1FBQzVCLFVBQVUsRUFBRSxjQUFRLENBQUMsT0FBTztLQUM3QixDQUFDLENBQUM7SUFDSCxJQUFJLGtCQUFZLENBQUMsS0FBSyxFQUFFLGVBQWUsRUFBRTtRQUN2QyxVQUFVLEVBQUUsSUFBSTtLQUNqQixDQUFDLENBQUM7SUFFSCxPQUFPO0lBQ1AsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM5QyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxrQ0FBa0MsRUFBRTtRQUN6RixnQkFBZ0IsRUFBRSxnQkFBZ0I7S0FDbkMsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUUzRCxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQy9CLE1BQU0sRUFBRTtZQUNOLFVBQVUsRUFBRTtnQkFDVixTQUFTLEVBQUUsSUFBSTtnQkFDZixVQUFVLEVBQUUsSUFBSTtnQkFDaEIsVUFBVSxFQUFFLElBQUk7YUFDakI7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgRmFrZVRhc2sgfSBmcm9tICcuL2Zha2UtdGFzayc7XG5pbXBvcnQgeyBKc29uUGF0aCwgU3RhdGVNYWNoaW5lIH0gZnJvbSAnLi4vbGliJztcblxudGVzdCgnSnNvblBhdGguRElTQ0FSRCBjYW4gYmUgdXNlZCB0byBkaXNjYXJkIGEgc3RhdGVcXCdzIG91dHB1dCcsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ1Rlc3RTdGFjaycpO1xuICBjb25zdCB0YXNrID0gbmV3IEZha2VUYXNrKHN0YWNrLCAnbXktc3RhdGUnLCB7XG4gICAgaW5wdXRQYXRoOiBKc29uUGF0aC5ESVNDQVJELFxuICAgIG91dHB1dFBhdGg6IEpzb25QYXRoLkRJU0NBUkQsXG4gICAgcmVzdWx0UGF0aDogSnNvblBhdGguRElTQ0FSRCxcbiAgfSk7XG4gIG5ldyBTdGF0ZU1hY2hpbmUoc3RhY2ssICdzdGF0ZS1tYWNoaW5lJywge1xuICAgIGRlZmluaXRpb246IHRhc2ssXG4gIH0pO1xuXG4gIC8vIFdIRU5cbiAgY29uc3QgZGVmaW5pdGlvblN0cmluZyA9IG5ldyBhc3NlcnQuQ2FwdHVyZSgpO1xuICBhc3NlcnQuVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6U3RlcEZ1bmN0aW9uczo6U3RhdGVNYWNoaW5lJywge1xuICAgIERlZmluaXRpb25TdHJpbmc6IGRlZmluaXRpb25TdHJpbmcsXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgY29uc3QgZGVmaW5pdGlvbiA9IEpTT04ucGFyc2UoZGVmaW5pdGlvblN0cmluZy5hc1N0cmluZygpKTtcblxuICBleHBlY3QoZGVmaW5pdGlvbikudG9NYXRjaE9iamVjdCh7XG4gICAgU3RhdGVzOiB7XG4gICAgICAnbXktc3RhdGUnOiB7XG4gICAgICAgIElucHV0UGF0aDogbnVsbCxcbiAgICAgICAgT3V0cHV0UGF0aDogbnVsbCxcbiAgICAgICAgUmVzdWx0UGF0aDogbnVsbCxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG59KTtcbiJdfQ==