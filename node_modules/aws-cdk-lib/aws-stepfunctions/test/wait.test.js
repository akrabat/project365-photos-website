"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("../../core");
const render_util_1 = require("./private/render-util");
const lib_1 = require("../lib");
describe('Wait State', () => {
    test('wait time from ISO8601 timestamp', () => {
        // GIVEN
        const timestamp = '2025-01-01T00:00:00Z';
        // WHEN
        const waitTime = lib_1.WaitTime.timestamp(timestamp);
        // THEN
        expect(waitTime).toEqual({
            json: {
                Timestamp: '2025-01-01T00:00:00Z',
            },
        });
    });
    test('wait time from seconds path in state object', () => {
        // GIVEN
        const secondsPath = '$.waitSeconds';
        // WHEN
        const waitTime = lib_1.WaitTime.secondsPath(secondsPath);
        // THEN
        expect(waitTime).toEqual({
            json: {
                SecondsPath: '$.waitSeconds',
            },
        });
    });
    test('wait time from timestamp path in state object', () => {
        // GIVEN
        const path = '$.timestampPath';
        // WHEN
        const waitTime = lib_1.WaitTime.timestampPath(path);
        // THEN
        expect(waitTime).toEqual({
            json: {
                TimestampPath: '$.timestampPath',
            },
        });
    });
    test('supports adding a next state', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const chain = new lib_1.Wait(stack, 'myWaitState', {
            time: lib_1.WaitTime.duration(cdk.Duration.seconds(30)),
        });
        // WHEN
        chain.next(new lib_1.Pass(stack, 'final pass', {}));
        // THEN
        expect((0, render_util_1.render)(stack, chain)).toEqual({
            StartAt: 'myWaitState',
            States: {
                'final pass': {
                    End: true,
                    Type: 'Pass',
                },
                'myWaitState': {
                    Next: 'final pass',
                    Seconds: 30,
                    Type: 'Wait',
                },
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FpdC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2FpdC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0NBQWtDO0FBQ2xDLHVEQUErQztBQUMvQyxnQ0FBOEM7QUFFOUMsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFDMUIsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtRQUM1QyxRQUFRO1FBQ1IsTUFBTSxTQUFTLEdBQUcsc0JBQXNCLENBQUM7UUFFekMsT0FBTztRQUNQLE1BQU0sUUFBUSxHQUFHLGNBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFL0MsT0FBTztRQUNQLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDdkIsSUFBSSxFQUFFO2dCQUNKLFNBQVMsRUFBRSxzQkFBc0I7YUFDbEM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxHQUFHLEVBQUU7UUFDdkQsUUFBUTtRQUNSLE1BQU0sV0FBVyxHQUFHLGVBQWUsQ0FBQztRQUVwQyxPQUFPO1FBQ1AsTUFBTSxRQUFRLEdBQUcsY0FBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVuRCxPQUFPO1FBQ1AsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUN2QixJQUFJLEVBQUU7Z0JBQ0osV0FBVyxFQUFFLGVBQWU7YUFDN0I7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywrQ0FBK0MsRUFBRSxHQUFHLEVBQUU7UUFDekQsUUFBUTtRQUNSLE1BQU0sSUFBSSxHQUFHLGlCQUFpQixDQUFDO1FBRS9CLE9BQU87UUFDUCxNQUFNLFFBQVEsR0FBRyxjQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTlDLE9BQU87UUFDUCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ3ZCLElBQUksRUFBRTtnQkFDSixhQUFhLEVBQUUsaUJBQWlCO2FBQ2pDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1FBQ3hDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLEtBQUssR0FBRyxJQUFJLFVBQUksQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO1lBQzNDLElBQUksRUFBRSxjQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2xELENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksVUFBSSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUU5QyxPQUFPO1FBQ1AsTUFBTSxDQUFDLElBQUEsb0JBQU0sRUFBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDbkMsT0FBTyxFQUFFLGFBQWE7WUFDdEIsTUFBTSxFQUFFO2dCQUNOLFlBQVksRUFBRTtvQkFDWixHQUFHLEVBQUUsSUFBSTtvQkFDVCxJQUFJLEVBQUUsTUFBTTtpQkFDYjtnQkFDRCxhQUFhLEVBQUU7b0JBQ2IsSUFBSSxFQUFFLFlBQVk7b0JBQ2xCLE9BQU8sRUFBRSxFQUFFO29CQUNYLElBQUksRUFBRSxNQUFNO2lCQUNiO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUVMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnLi9wcml2YXRlL3JlbmRlci11dGlsJztcbmltcG9ydCB7IFBhc3MsIFdhaXQsIFdhaXRUaW1lIH0gZnJvbSAnLi4vbGliJztcblxuZGVzY3JpYmUoJ1dhaXQgU3RhdGUnLCAoKSA9PiB7XG4gIHRlc3QoJ3dhaXQgdGltZSBmcm9tIElTTzg2MDEgdGltZXN0YW1wJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgdGltZXN0YW1wID0gJzIwMjUtMDEtMDFUMDA6MDA6MDBaJztcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCB3YWl0VGltZSA9IFdhaXRUaW1lLnRpbWVzdGFtcCh0aW1lc3RhbXApO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCh3YWl0VGltZSkudG9FcXVhbCh7XG4gICAgICBqc29uOiB7XG4gICAgICAgIFRpbWVzdGFtcDogJzIwMjUtMDEtMDFUMDA6MDA6MDBaJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3dhaXQgdGltZSBmcm9tIHNlY29uZHMgcGF0aCBpbiBzdGF0ZSBvYmplY3QnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzZWNvbmRzUGF0aCA9ICckLndhaXRTZWNvbmRzJztcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCB3YWl0VGltZSA9IFdhaXRUaW1lLnNlY29uZHNQYXRoKHNlY29uZHNQYXRoKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qod2FpdFRpbWUpLnRvRXF1YWwoe1xuICAgICAganNvbjoge1xuICAgICAgICBTZWNvbmRzUGF0aDogJyQud2FpdFNlY29uZHMnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnd2FpdCB0aW1lIGZyb20gdGltZXN0YW1wIHBhdGggaW4gc3RhdGUgb2JqZWN0JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgcGF0aCA9ICckLnRpbWVzdGFtcFBhdGgnO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHdhaXRUaW1lID0gV2FpdFRpbWUudGltZXN0YW1wUGF0aChwYXRoKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qod2FpdFRpbWUpLnRvRXF1YWwoe1xuICAgICAganNvbjoge1xuICAgICAgICBUaW1lc3RhbXBQYXRoOiAnJC50aW1lc3RhbXBQYXRoJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3N1cHBvcnRzIGFkZGluZyBhIG5leHQgc3RhdGUnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBjaGFpbiA9IG5ldyBXYWl0KHN0YWNrLCAnbXlXYWl0U3RhdGUnLCB7XG4gICAgICB0aW1lOiBXYWl0VGltZS5kdXJhdGlvbihjZGsuRHVyYXRpb24uc2Vjb25kcygzMCkpLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNoYWluLm5leHQobmV3IFBhc3Moc3RhY2ssICdmaW5hbCBwYXNzJywge30pKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QocmVuZGVyKHN0YWNrLCBjaGFpbikpLnRvRXF1YWwoe1xuICAgICAgU3RhcnRBdDogJ215V2FpdFN0YXRlJyxcbiAgICAgIFN0YXRlczoge1xuICAgICAgICAnZmluYWwgcGFzcyc6IHtcbiAgICAgICAgICBFbmQ6IHRydWUsXG4gICAgICAgICAgVHlwZTogJ1Bhc3MnLFxuICAgICAgICB9LFxuICAgICAgICAnbXlXYWl0U3RhdGUnOiB7XG4gICAgICAgICAgTmV4dDogJ2ZpbmFsIHBhc3MnLFxuICAgICAgICAgIFNlY29uZHM6IDMwLFxuICAgICAgICAgIFR5cGU6ICdXYWl0JyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG59KTsiXX0=