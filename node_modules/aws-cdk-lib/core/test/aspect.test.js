"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxschema = require("../../cloud-assembly-schema");
const constructs_1 = require("constructs");
const lib_1 = require("../lib");
const aspect_1 = require("../lib/aspect");
class MyConstruct extends constructs_1.Construct {
    constructor() {
        super(...arguments);
        this.visitCounter = 0;
    }
    static IsMyConstruct(x) {
        return x.visitCounter !== undefined;
    }
}
class VisitOnce {
    visit(node) {
        if (MyConstruct.IsMyConstruct(node)) {
            node.visitCounter += 1;
        }
    }
}
class MyAspect {
    visit(node) {
        node.node.addMetadata('foo', 'bar');
    }
}
describe('aspect', () => {
    test('Aspects are invoked only once', () => {
        const app = new lib_1.App();
        const root = new MyConstruct(app, 'MyConstruct');
        aspect_1.Aspects.of(root).add(new VisitOnce());
        app.synth();
        expect(root.visitCounter).toEqual(1);
        app.synth();
        expect(root.visitCounter).toEqual(1);
    });
    test('Warn if an Aspect is added via another Aspect', () => {
        const app = new lib_1.App();
        const root = new MyConstruct(app, 'MyConstruct');
        const child = new MyConstruct(root, 'ChildConstruct');
        aspect_1.Aspects.of(root).add({
            visit(construct) {
                aspect_1.Aspects.of(construct).add({
                    visit(inner) {
                        inner.node.addMetadata('test', 'would-be-ignored');
                    },
                });
            },
        });
        app.synth();
        expect(root.node.metadata[0].type).toEqual(cxschema.ArtifactMetadataEntryType.WARN);
        expect(root.node.metadata[0].data).toEqual('We detected an Aspect was added via another Aspect, and will not be applied');
        // warning is not added to child construct
        expect(child.node.metadata.length).toEqual(0);
    });
    test('Do not warn if an Aspect is added directly (not by another aspect)', () => {
        const app = new lib_1.App();
        const root = new MyConstruct(app, 'Construct');
        const child = new MyConstruct(root, 'ChildConstruct');
        aspect_1.Aspects.of(root).add(new MyAspect());
        app.synth();
        expect(root.node.metadata[0].type).toEqual('foo');
        expect(root.node.metadata[0].data).toEqual('bar');
        expect(child.node.metadata[0].type).toEqual('foo');
        expect(child.node.metadata[0].data).toEqual('bar');
        // no warning is added
        expect(root.node.metadata.length).toEqual(1);
        expect(child.node.metadata.length).toEqual(1);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNwZWN0LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhc3BlY3QudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdEQUF3RDtBQUN4RCwyQ0FBbUQ7QUFDbkQsZ0NBQTZCO0FBQzdCLDBDQUFpRDtBQUVqRCxNQUFNLFdBQVksU0FBUSxzQkFBUztJQUFuQzs7UUFJUyxpQkFBWSxHQUFXLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBSlEsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFNO1FBQ2hDLE9BQU8sQ0FBQyxDQUFDLFlBQVksS0FBSyxTQUFTLENBQUM7S0FDckM7Q0FFRjtBQUVELE1BQU0sU0FBUztJQUNOLEtBQUssQ0FBQyxJQUFnQjtRQUMzQixJQUFJLFdBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbkMsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUM7U0FDeEI7S0FDRjtDQUNGO0FBRUQsTUFBTSxRQUFRO0lBQ0wsS0FBSyxDQUFDLElBQWdCO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNyQztDQUNGO0FBRUQsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7SUFDdEIsSUFBSSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtRQUN6QyxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sSUFBSSxHQUFHLElBQUksV0FBVyxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNqRCxnQkFBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFD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Q0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjeHNjaGVtYSBmcm9tICcuLi8uLi9jbG91ZC1hc3NlbWJseS1zY2hlbWEnO1xuaW1wb3J0IHsgQ29uc3RydWN0LCBJQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBBcHAgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHsgSUFzcGVjdCwgQXNwZWN0cyB9IGZyb20gJy4uL2xpYi9hc3BlY3QnO1xuXG5jbGFzcyBNeUNvbnN0cnVjdCBleHRlbmRzIENvbnN0cnVjdCB7XG4gIHB1YmxpYyBzdGF0aWMgSXNNeUNvbnN0cnVjdCh4OiBhbnkpOiB4IGlzIE15Q29uc3RydWN0IHtcbiAgICByZXR1cm4geC52aXNpdENvdW50ZXIgIT09IHVuZGVmaW5lZDtcbiAgfVxuICBwdWJsaWMgdmlzaXRDb3VudGVyOiBudW1iZXIgPSAwO1xufVxuXG5jbGFzcyBWaXNpdE9uY2UgaW1wbGVtZW50cyBJQXNwZWN0IHtcbiAgcHVibGljIHZpc2l0KG5vZGU6IElDb25zdHJ1Y3QpOiB2b2lkIHtcbiAgICBpZiAoTXlDb25zdHJ1Y3QuSXNNeUNvbnN0cnVjdChub2RlKSkge1xuICAgICAgbm9kZS52aXNpdENvdW50ZXIgKz0gMTtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgTXlBc3BlY3QgaW1wbGVtZW50cyBJQXNwZWN0IHtcbiAgcHVibGljIHZpc2l0KG5vZGU6IElDb25zdHJ1Y3QpOiB2b2lkIHtcbiAgICBub2RlLm5vZGUuYWRkTWV0YWRhdGEoJ2ZvbycsICdiYXInKTtcbiAgfVxufVxuXG5kZXNjcmliZSgnYXNwZWN0JywgKCkgPT4ge1xuICB0ZXN0KCdBc3BlY3RzIGFyZSBpbnZva2VkIG9ubHkgb25jZScsICgpID0+IHtcbiAgICBjb25zdCBhcHAgPSBuZXcgQXBwKCk7XG4gICAgY29uc3Qgcm9vdCA9IG5ldyBNeUNvbnN0cnVjdChhcHAsICdNeUNvbnN0cnVjdCcpO1xuICAgIEFzcGVjdHMub2Yocm9vdCkuYWRkKG5ldyBWaXNpdE9uY2UoKSk7XG4gICAgYXBwLnN5bnRoKCk7XG4gICAgZXhwZWN0KHJvb3QudmlzaXRDb3VudGVyKS50b0VxdWFsKDEpO1xuICAgIGFwcC5zeW50aCgpO1xuICAgIGV4cGVjdChyb290LnZpc2l0Q291bnRlcikudG9FcXVhbCgxKTtcbiAgfSk7XG5cbiAgdGVzdCgnV2FybiBpZiBhbiBBc3BlY3QgaXMgYWRkZWQgdmlhIGFub3RoZXIgQXNwZWN0JywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiAgICBjb25zdCByb290ID0gbmV3IE15Q29uc3RydWN0KGFwcCwgJ015Q29uc3RydWN0Jyk7XG4gICAgY29uc3QgY2hpbGQgPSBuZXcgTXlDb25zdHJ1Y3Qocm9vdCwgJ0NoaWxkQ29uc3RydWN0Jyk7XG4gICAgQXNwZWN0cy5vZihyb290KS5hZGQoe1xuICAgICAgdmlzaXQoY29uc3RydWN0OiBJQ29uc3RydWN0KSB7XG4gICAgICAgIEFzcGVjdHMub2YoY29uc3RydWN0KS5hZGQoe1xuICAgICAgICAgIHZpc2l0KGlubmVyOiBJQ29uc3RydWN0KSB7XG4gICAgICAgICAgICBpbm5lci5ub2RlLmFkZE1ldGFkYXRhKCd0ZXN0JywgJ3dvdWxkLWJlLWlnbm9yZWQnKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgYXBwLnN5bnRoKCk7XG4gICAgZXhwZWN0KHJvb3Qubm9kZS5tZXRhZGF0YVswXS50eXBlKS50b0VxdWFsKGN4c2NoZW1hLkFydGlmYWN0TWV0YWRhdGFFbnRyeVR5cGUuV0FSTik7XG4gICAgZXhwZWN0KHJvb3Qubm9kZS5tZXRhZGF0YVswXS5kYXRhKS50b0VxdWFsKCdXZSBkZXRlY3RlZCBhbiBBc3BlY3Qgd2FzIGFkZGVkIHZpYSBhbm90aGVyIEFzcGVjdCwgYW5kIHdpbGwgbm90IGJlIGFwcGxpZWQnKTtcbiAgICAvLyB3YXJuaW5nIGlzIG5vdCBhZGRlZCB0byBjaGlsZCBjb25zdHJ1Y3RcbiAgICBleHBlY3QoY2hpbGQubm9kZS5tZXRhZGF0YS5sZW5ndGgpLnRvRXF1YWwoMCk7XG4gIH0pO1xuXG4gIHRlc3QoJ0RvIG5vdCB3YXJuIGlmIGFuIEFzcGVjdCBpcyBhZGRlZCBkaXJlY3RseSAobm90IGJ5IGFub3RoZXIgYXNwZWN0KScsICgpID0+IHtcbiAgICBjb25zdCBhcHAgPSBuZXcgQXBwKCk7XG4gICAgY29uc3Qgcm9vdCA9IG5ldyBNeUNvbnN0cnVjdChhcHAsICdDb25zdHJ1Y3QnKTtcbiAgICBjb25zdCBjaGlsZCA9IG5ldyBNeUNvbnN0cnVjdChyb290LCAnQ2hpbGRDb25zdHJ1Y3QnKTtcbiAgICBBc3BlY3RzLm9mKHJvb3QpLmFkZChuZXcgTXlBc3BlY3QoKSk7XG4gICAgYXBwLnN5bnRoKCk7XG4gICAgZXhwZWN0KHJvb3Qubm9kZS5tZXRhZGF0YVswXS50eXBlKS50b0VxdWFsKCdmb28nKTtcbiAgICBleHBlY3Qocm9vdC5ub2RlLm1ldGFkYXRhWzBdLmRhdGEpLnRvRXF1YWwoJ2JhcicpO1xuICAgIGV4cGVjdChjaGlsZC5ub2RlLm1ldGFkYXRhWzBdLnR5cGUpLnRvRXF1YWwoJ2ZvbycpO1xuICAgIGV4cGVjdChjaGlsZC5ub2RlLm1ldGFkYXRhWzBdLmRhdGEpLnRvRXF1YWwoJ2JhcicpO1xuICAgIC8vIG5vIHdhcm5pbmcgaXMgYWRkZWRcbiAgICBleHBlY3Qocm9vdC5ub2RlLm1ldGFkYXRhLmxlbmd0aCkudG9FcXVhbCgxKTtcbiAgICBleHBlY3QoY2hpbGQubm9kZS5tZXRhZGF0YS5sZW5ndGgpLnRvRXF1YWwoMSk7XG4gIH0pO1xufSk7XG4iXX0=