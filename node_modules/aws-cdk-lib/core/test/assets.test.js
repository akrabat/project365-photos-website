"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxschema = require("../../cloud-assembly-schema");
const cxapi = require("../../cx-api");
const util_1 = require("./util");
const lib_1 = require("../lib");
describe('assets', () => {
    let app;
    let stack;
    beforeEach(() => {
        app = new lib_1.App({ context: { [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false } });
        stack = new lib_1.Stack(app);
    });
    test('addFileAsset correctly sets metadata and creates S3 parameters', () => {
        // WHEN
        stack.synthesizer.addFileAsset({
            fileName: 'file-name',
            packaging: lib_1.FileAssetPackaging.ZIP_DIRECTORY,
            sourceHash: 'source-hash',
        });
        // THEN
        const assetMetadata = stack.node.metadata.find(({ type }) => type === cxschema.ArtifactMetadataEntryType.ASSET);
        expect(assetMetadata && assetMetadata.data).toBeDefined();
        if (assetMetadata && assetMetadata.data) {
            const data = assetMetadata.data;
            expect(data.path).toEqual('file-name');
            expect(data.id).toEqual('source-hash');
            expect(data.packaging).toEqual(lib_1.FileAssetPackaging.ZIP_DIRECTORY);
            expect(data.sourceHash).toEqual('source-hash');
        }
        expect((0, util_1.toCloudFormation)(stack)).toEqual({
            Parameters: {
                AssetParameterssourcehashS3BucketE6E91E3E: {
                    Type: 'String',
                    Description: 'S3 bucket for asset "source-hash"',
                },
                AssetParameterssourcehashS3VersionKeyAC4157C3: {
                    Type: 'String',
                    Description: 'S3 key for asset version "source-hash"',
                },
                AssetParameterssourcehashArtifactHashADBAE418: {
                    Type: 'String',
                    Description: 'Artifact hash for asset "source-hash"',
                },
            },
        });
    });
    test('addFileAsset correctly sets object urls', () => {
        // WHEN
        const assetLocation = stack.synthesizer.addFileAsset({
            fileName: 'file-name',
            packaging: lib_1.FileAssetPackaging.ZIP_DIRECTORY,
            sourceHash: 'source-hash',
        });
        // THEN
        const expectedS3UrlPrefix = 's3://';
        const expectedHttpUrlPrefix = `https://s3.${stack.region}.${stack.urlSuffix}/`;
        expect(assetLocation.s3ObjectUrl.replace(expectedS3UrlPrefix, '')).toEqual(assetLocation.httpUrl.replace(expectedHttpUrlPrefix, ''));
    });
    test('addDockerImageAsset correctly sets metadata', () => {
        // WHEN
        stack.synthesizer.addDockerImageAsset({
            sourceHash: 'source-hash',
            directoryName: 'directory-name',
        });
        // THEN
        const assetMetadata = stack.node.metadata.find(({ type }) => type === cxschema.ArtifactMetadataEntryType.ASSET);
        expect(assetMetadata && assetMetadata.data).toBeDefined();
        if (assetMetadata && assetMetadata.data) {
            const data = assetMetadata.data;
            expect(data.packaging).toEqual('container-image');
            expect(data.path).toEqual('directory-name');
            expect(data.sourceHash).toEqual('source-hash');
            expect(data.imageTag).toEqual('source-hash');
        }
        expect((0, util_1.toCloudFormation)(stack)).toEqual({});
    });
    test('addDockerImageAsset uses the default repository name', () => {
        // WHEN
        stack.synthesizer.addDockerImageAsset({
            sourceHash: 'source-hash',
            directoryName: 'directory-name',
        });
        // THEN
        const assetMetadata = stack.node.metadata.find(({ type }) => type === cxschema.ArtifactMetadataEntryType.ASSET);
        expect(assetMetadata && assetMetadata.data).toBeDefined();
        if (assetMetadata && assetMetadata.data) {
            const data = assetMetadata.data;
            expect(data.packaging).toEqual('container-image');
            expect(data.path).toEqual('directory-name');
            expect(data.sourceHash).toEqual('source-hash');
            expect(data.imageTag).toEqual('source-hash');
        }
        expect((0, util_1.toCloudFormation)(stack)).toEqual({});
    });
    test('addDockerImageAsset supports overriding repository name through a context key as a workaround until we have API for that', () => {
        stack.node.setContext('assets-ecr-repository-name', 'my-custom-repo-name');
        // WHEN
        stack.synthesizer.addDockerImageAsset({
            sourceHash: 'source-hash',
            directoryName: 'directory-name',
        });
        // THEN
        const assetMetadata = stack.node.metadata.find(({ type }) => type === cxschema.ArtifactMetadataEntryType.ASSET);
        expect(assetMetadata && assetMetadata.data).toBeDefined();
        if (assetMetadata && assetMetadata.data) {
            const data = assetMetadata.data;
            expect(data.packaging).toEqual('container-image');
            expect(data.path).toEqual('directory-name');
            expect(data.sourceHash).toEqual('source-hash');
            expect(data.repositoryName).toEqual('my-custom-repo-name');
            expect(data.imageTag).toEqual('source-hash');
        }
        expect((0, util_1.toCloudFormation)(stack)).toEqual({});
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhc3NldHMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdEQUF3RDtBQUN4RCxzQ0FBc0M7QUFDdEMsaUNBQTBDO0FBQzFDLGdDQUF3RDtBQUV4RCxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtJQUN0QixJQUFJLEdBQVEsQ0FBQztJQUNiLElBQUksS0FBWSxDQUFDO0lBRWpCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxHQUFHLEdBQUcsSUFBSSxTQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqRixLQUFLLEdBQUcsSUFBSSxXQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsZ0VBQWdFLEVBQUUsR0FBRyxFQUFFO1FBQzFFLE9BQU87UUFDUCxLQUFLLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQztZQUM3QixRQUFRLEVBQUUsV0FBVztZQUNyQixTQUFTLEVBQUUsd0JBQWtCLENBQUMsYUFBYTtZQUMzQyxVQUFVLEVBQUUsYUFBYTtTQUMxQixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVoSCxNQUFNLENBQUMsYUFBYSxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUUxRCxJQUFJLGFBQWEsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFO1lBQ3ZDLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxJQUFtQyxDQUFDO1lBQy9ELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLHdCQUFrQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsTUFBTSxDQUFDLElBQUEsdUJBQWdCLEVBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDdEMsVUFBVSxFQUFFO2dCQUNWLHlDQUF5QyxFQUFFO29CQUN6QyxJQUFJLEVBQUUsUUFBUTtvQkFDZCxXQUFXLEVBQUUsbUNBQW1DO2lCQUNqRDtnQkFDRCw2Q0FBNkMsRUFBRTtvQkFDN0MsSUFBSSxFQUFFLFFBQVE7b0JBQ2QsV0FBVyxFQUFFLHdDQUF3QztpQkFDdEQ7Z0JBQ0QsNkNBQTZDLEVBQUU7b0JBQzdDLElBQUksRUFBRSxRQUFRO29CQUNkLFdBQVcsRUFBRSx1Q0FBdUM7aUJBQ3JEO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7UUFDbkQsT0FBTztRQUNQLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDO1lBQ25ELFFBQVEsRUFBRSxXQUFXO1lBQ3JCLFNBQVMsRUFBRSx3QkFBa0IsQ0FBQyxhQUFhO1lBQzNDLFVBQVUsRUFBRSxhQUFhO1NBQzFCLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxNQUFNLG1CQUFtQixHQUFHLE9BQU8sQ0FBQztRQUNwQyxNQUFNLHFCQUFxQixHQUFHLGNBQWMsS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUM7UUFFL0UsTUFBTSxDQUNKLGFBQWEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUNuRSxhQUFhLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLENBQUMsQ0FDekQsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDZDQUE2QyxFQUFFLEdBQUcsRUFBRTtRQUN2RCxPQUFPO1FBQ1AsS0FBSyxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQztZQUNwQyxVQUFVLEVBQUUsYUFBYTtZQUN6QixhQUFhLEVBQUUsZ0JBQWdCO1NBQ2hDLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLHlCQUF5QixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWhILE1BQU0sQ0FBQyxhQUFhLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRTFELElBQUksYUFBYSxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUU7WUFDdkMsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLElBQWlELENBQUM7WUFDN0UsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsTUFBTSxDQUFDLElBQUEsdUJBQWdCLEVBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRyxDQUFDLENBQUM7SUFFL0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsc0RBQXNELEVBQUUsR0FBRyxFQUFFO1FBQ2hFLE9BQU87UUFDUCxLQUFLLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDO1lBQ3BDLFVBQVUsRUFBRSxhQUFhO1lBQ3pCLGFBQWEsRUFBRSxnQkFBZ0I7U0FDaEMsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxRQUFRLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFaEgsTUFBTSxDQUFDLGFBQWEsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFMUQsSUFBSSxhQUFhLElBQUksYUFBYSxDQUFDLElBQUksRUFBRTtZQUN2QyxNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsSUFBaUQsQ0FBQztZQUM3RSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDNUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDOUM7UUFFRCxNQUFNLENBQUMsSUFBQSx1QkFBZ0IsRUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFHLENBQUMsQ0FBQztJQUUvQyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywwSEFBMEgsRUFBRSxHQUFHLEVBQUU7UUFDcEksS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsNEJBQTRCLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQUUzRSxPQUFPO1FBQ1AsS0FBSyxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQztZQUNwQyxVQUFVLEVBQUUsYUFBYTtZQUN6QixhQUFhLEVBQUUsZ0JBQWdCO1NBQ2hDLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLHlCQUF5QixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWhILE1BQU0sQ0FBQyxhQUFhLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRTFELElBQUksYUFBYSxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUU7WUFDdkMsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLElBQWlELENBQUM7WUFDN0UsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDM0QsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDOUM7UUFFRCxNQUFNLENBQUMsSUFBQSx1QkFBZ0IsRUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFHLENBQUMsQ0FBQztJQUUvQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY3hzY2hlbWEgZnJvbSAnLi4vLi4vY2xvdWQtYXNzZW1ibHktc2NoZW1hJztcbmltcG9ydCAqIGFzIGN4YXBpIGZyb20gJy4uLy4uL2N4LWFwaSc7XG5pbXBvcnQgeyB0b0Nsb3VkRm9ybWF0aW9uIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IEFwcCwgRmlsZUFzc2V0UGFja2FnaW5nLCBTdGFjayB9IGZyb20gJy4uL2xpYic7XG5cbmRlc2NyaWJlKCdhc3NldHMnLCAoKSA9PiB7XG4gIGxldCBhcHA6IEFwcDtcbiAgbGV0IHN0YWNrOiBTdGFjaztcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBhcHAgPSBuZXcgQXBwKHsgY29udGV4dDogeyBbY3hhcGkuTkVXX1NUWUxFX1NUQUNLX1NZTlRIRVNJU19DT05URVhUXTogZmFsc2UgfSB9KTtcbiAgICBzdGFjayA9IG5ldyBTdGFjayhhcHApO1xuICB9KTtcblxuICB0ZXN0KCdhZGRGaWxlQXNzZXQgY29ycmVjdGx5IHNldHMgbWV0YWRhdGEgYW5kIGNyZWF0ZXMgUzMgcGFyYW1ldGVycycsICgpID0+IHtcbiAgICAvLyBXSEVOXG4gICAgc3RhY2suc3ludGhlc2l6ZXIuYWRkRmlsZUFzc2V0KHtcbiAgICAgIGZpbGVOYW1lOiAnZmlsZS1uYW1lJyxcbiAgICAgIHBhY2thZ2luZzogRmlsZUFzc2V0UGFja2FnaW5nLlpJUF9ESVJFQ1RPUlksXG4gICAgICBzb3VyY2VIYXNoOiAnc291cmNlLWhhc2gnLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGNvbnN0IGFzc2V0TWV0YWRhdGEgPSBzdGFjay5ub2RlLm1ldGFkYXRhLmZpbmQoKHsgdHlwZSB9KSA9PiB0eXBlID09PSBjeHNjaGVtYS5BcnRpZmFjdE1ldGFkYXRhRW50cnlUeXBlLkFTU0VUKTtcblxuICAgIGV4cGVjdChhc3NldE1ldGFkYXRhICYmIGFzc2V0TWV0YWRhdGEuZGF0YSkudG9CZURlZmluZWQoKTtcblxuICAgIGlmIChhc3NldE1ldGFkYXRhICYmIGFzc2V0TWV0YWRhdGEuZGF0YSkge1xuICAgICAgY29uc3QgZGF0YSA9IGFzc2V0TWV0YWRhdGEuZGF0YSBhcyBjeHNjaGVtYS5Bc3NldE1ldGFkYXRhRW50cnk7XG4gICAgICBleHBlY3QoZGF0YS5wYXRoKS50b0VxdWFsKCdmaWxlLW5hbWUnKTtcbiAgICAgIGV4cGVjdChkYXRhLmlkKS50b0VxdWFsKCdzb3VyY2UtaGFzaCcpO1xuICAgICAgZXhwZWN0KGRhdGEucGFja2FnaW5nKS50b0VxdWFsKEZpbGVBc3NldFBhY2thZ2luZy5aSVBfRElSRUNUT1JZKTtcbiAgICAgIGV4cGVjdChkYXRhLnNvdXJjZUhhc2gpLnRvRXF1YWwoJ3NvdXJjZS1oYXNoJyk7XG4gICAgfVxuXG4gICAgZXhwZWN0KHRvQ2xvdWRGb3JtYXRpb24oc3RhY2spKS50b0VxdWFsKHtcbiAgICAgIFBhcmFtZXRlcnM6IHtcbiAgICAgICAgQXNzZXRQYXJhbWV0ZXJzc291cmNlaGFzaFMzQnVja2V0RTZFOTFFM0U6IHtcbiAgICAgICAgICBUeXBlOiAnU3RyaW5nJyxcbiAgICAgICAgICBEZXNjcmlwdGlvbjogJ1MzIGJ1Y2tldCBmb3IgYXNzZXQgXCJzb3VyY2UtaGFzaFwiJyxcbiAgICAgICAgfSxcbiAgICAgICAgQXNzZXRQYXJhbWV0ZXJzc291cmNlaGFzaFMzVmVyc2lvbktleUFDNDE1N0MzOiB7XG4gICAgICAgICAgVHlwZTogJ1N0cmluZycsXG4gICAgICAgICAgRGVzY3JpcHRpb246ICdTMyBrZXkgZm9yIGFzc2V0IHZlcnNpb24gXCJzb3VyY2UtaGFzaFwiJyxcbiAgICAgICAgfSxcbiAgICAgICAgQXNzZXRQYXJhbWV0ZXJzc291cmNlaGFzaEFydGlmYWN0SGFzaEFEQkFFNDE4OiB7XG4gICAgICAgICAgVHlwZTogJ1N0cmluZycsXG4gICAgICAgICAgRGVzY3JpcHRpb246ICdBcnRpZmFjdCBoYXNoIGZvciBhc3NldCBcInNvdXJjZS1oYXNoXCInLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnYWRkRmlsZUFzc2V0IGNvcnJlY3RseSBzZXRzIG9iamVjdCB1cmxzJywgKCkgPT4ge1xuICAgIC8vIFdIRU5cbiAgICBjb25zdCBhc3NldExvY2F0aW9uID0gc3RhY2suc3ludGhlc2l6ZXIuYWRkRmlsZUFzc2V0KHtcbiAgICAgIGZpbGVOYW1lOiAnZmlsZS1uYW1lJyxcbiAgICAgIHBhY2thZ2luZzogRmlsZUFzc2V0UGFja2FnaW5nLlpJUF9ESVJFQ1RPUlksXG4gICAgICBzb3VyY2VIYXNoOiAnc291cmNlLWhhc2gnLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGNvbnN0IGV4cGVjdGVkUzNVcmxQcmVmaXggPSAnczM6Ly8nO1xuICAgIGNvbnN0IGV4cGVjdGVkSHR0cFVybFByZWZpeCA9IGBodHRwczovL3MzLiR7c3RhY2sucmVnaW9ufS4ke3N0YWNrLnVybFN1ZmZpeH0vYDtcblxuICAgIGV4cGVjdChcbiAgICAgIGFzc2V0TG9jYXRpb24uczNPYmplY3RVcmwucmVwbGFjZShleHBlY3RlZFMzVXJsUHJlZml4LCAnJykpLnRvRXF1YWwoXG4gICAgICBhc3NldExvY2F0aW9uLmh0dHBVcmwucmVwbGFjZShleHBlY3RlZEh0dHBVcmxQcmVmaXgsICcnKSxcbiAgICApO1xuICB9KTtcblxuICB0ZXN0KCdhZGREb2NrZXJJbWFnZUFzc2V0IGNvcnJlY3RseSBzZXRzIG1ldGFkYXRhJywgKCkgPT4ge1xuICAgIC8vIFdIRU5cbiAgICBzdGFjay5zeW50aGVzaXplci5hZGREb2NrZXJJbWFnZUFzc2V0KHtcbiAgICAgIHNvdXJjZUhhc2g6ICdzb3VyY2UtaGFzaCcsXG4gICAgICBkaXJlY3RvcnlOYW1lOiAnZGlyZWN0b3J5LW5hbWUnLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGNvbnN0IGFzc2V0TWV0YWRhdGEgPSBzdGFjay5ub2RlLm1ldGFkYXRhLmZpbmQoKHsgdHlwZSB9KSA9PiB0eXBlID09PSBjeHNjaGVtYS5BcnRpZmFjdE1ldGFkYXRhRW50cnlUeXBlLkFTU0VUKTtcblxuICAgIGV4cGVjdChhc3NldE1ldGFkYXRhICYmIGFzc2V0TWV0YWRhdGEuZGF0YSkudG9CZURlZmluZWQoKTtcblxuICAgIGlmIChhc3NldE1ldGFkYXRhICYmIGFzc2V0TWV0YWRhdGEuZGF0YSkge1xuICAgICAgY29uc3QgZGF0YSA9IGFzc2V0TWV0YWRhdGEuZGF0YSBhcyBjeHNjaGVtYS5Db250YWluZXJJbWFnZUFzc2V0TWV0YWRhdGFFbnRyeTtcbiAgICAgIGV4cGVjdChkYXRhLnBhY2thZ2luZykudG9FcXVhbCgnY29udGFpbmVyLWltYWdlJyk7XG4gICAgICBleHBlY3QoZGF0YS5wYXRoKS50b0VxdWFsKCdkaXJlY3RvcnktbmFtZScpO1xuICAgICAgZXhwZWN0KGRhdGEuc291cmNlSGFzaCkudG9FcXVhbCgnc291cmNlLWhhc2gnKTtcbiAgICAgIGV4cGVjdChkYXRhLmltYWdlVGFnKS50b0VxdWFsKCdzb3VyY2UtaGFzaCcpO1xuICAgIH1cblxuICAgIGV4cGVjdCh0b0Nsb3VkRm9ybWF0aW9uKHN0YWNrKSkudG9FcXVhbCh7IH0pO1xuXG4gIH0pO1xuXG4gIHRlc3QoJ2FkZERvY2tlckltYWdlQXNzZXQgdXNlcyB0aGUgZGVmYXVsdCByZXBvc2l0b3J5IG5hbWUnLCAoKSA9PiB7XG4gICAgLy8gV0hFTlxuICAgIHN0YWNrLnN5bnRoZXNpemVyLmFkZERvY2tlckltYWdlQXNzZXQoe1xuICAgICAgc291cmNlSGFzaDogJ3NvdXJjZS1oYXNoJyxcbiAgICAgIGRpcmVjdG9yeU5hbWU6ICdkaXJlY3RvcnktbmFtZScsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgY29uc3QgYXNzZXRNZXRhZGF0YSA9IHN0YWNrLm5vZGUubWV0YWRhdGEuZmluZCgoeyB0eXBlIH0pID0+IHR5cGUgPT09IGN4c2NoZW1hLkFydGlmYWN0TWV0YWRhdGFFbnRyeVR5cGUuQVNTRVQpO1xuXG4gICAgZXhwZWN0KGFzc2V0TWV0YWRhdGEgJiYgYXNzZXRNZXRhZGF0YS5kYXRhKS50b0JlRGVmaW5lZCgpO1xuXG4gICAgaWYgKGFzc2V0TWV0YWRhdGEgJiYgYXNzZXRNZXRhZGF0YS5kYXRhKSB7XG4gICAgICBjb25zdCBkYXRhID0gYXNzZXRNZXRhZGF0YS5kYXRhIGFzIGN4c2NoZW1hLkNvbnRhaW5lckltYWdlQXNzZXRNZXRhZGF0YUVudHJ5O1xuICAgICAgZXhwZWN0KGRhdGEucGFja2FnaW5nKS50b0VxdWFsKCdjb250YWluZXItaW1hZ2UnKTtcbiAgICAgIGV4cGVjdChkYXRhLnBhdGgpLnRvRXF1YWwoJ2RpcmVjdG9yeS1uYW1lJyk7XG4gICAgICBleHBlY3QoZGF0YS5zb3VyY2VIYXNoKS50b0VxdWFsKCdzb3VyY2UtaGFzaCcpO1xuICAgICAgZXhwZWN0KGRhdGEuaW1hZ2VUYWcpLnRvRXF1YWwoJ3NvdXJjZS1oYXNoJyk7XG4gICAgfVxuXG4gICAgZXhwZWN0KHRvQ2xvdWRGb3JtYXRpb24oc3RhY2spKS50b0VxdWFsKHsgfSk7XG5cbiAgfSk7XG5cbiAgdGVzdCgnYWRkRG9ja2VySW1hZ2VBc3NldCBzdXBwb3J0cyBvdmVycmlkaW5nIHJlcG9zaXRvcnkgbmFtZSB0aHJvdWdoIGEgY29udGV4dCBrZXkgYXMgYSB3b3JrYXJvdW5kIHVudGlsIHdlIGhhdmUgQVBJIGZvciB0aGF0JywgKCkgPT4ge1xuICAgIHN0YWNrLm5vZGUuc2V0Q29udGV4dCgnYXNzZXRzLWVjci1yZXBvc2l0b3J5LW5hbWUnLCAnbXktY3VzdG9tLXJlcG8tbmFtZScpO1xuXG4gICAgLy8gV0hFTlxuICAgIHN0YWNrLnN5bnRoZXNpemVyLmFkZERvY2tlckltYWdlQXNzZXQoe1xuICAgICAgc291cmNlSGFzaDogJ3NvdXJjZS1oYXNoJyxcbiAgICAgIGRpcmVjdG9yeU5hbWU6ICdkaXJlY3RvcnktbmFtZScsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgY29uc3QgYXNzZXRNZXRhZGF0YSA9IHN0YWNrLm5vZGUubWV0YWRhdGEuZmluZCgoeyB0eXBlIH0pID0+IHR5cGUgPT09IGN4c2NoZW1hLkFydGlmYWN0TWV0YWRhdGFFbnRyeVR5cGUuQVNTRVQpO1xuXG4gICAgZXhwZWN0KGFzc2V0TWV0YWRhdGEgJiYgYXNzZXRNZXRhZGF0YS5kYXRhKS50b0JlRGVmaW5lZCgpO1xuXG4gICAgaWYgKGFzc2V0TWV0YWRhdGEgJiYgYXNzZXRNZXRhZGF0YS5kYXRhKSB7XG4gICAgICBjb25zdCBkYXRhID0gYXNzZXRNZXRhZGF0YS5kYXRhIGFzIGN4c2NoZW1hLkNvbnRhaW5lckltYWdlQXNzZXRNZXRhZGF0YUVudHJ5O1xuICAgICAgZXhwZWN0KGRhdGEucGFja2FnaW5nKS50b0VxdWFsKCdjb250YWluZXItaW1hZ2UnKTtcbiAgICAgIGV4cGVjdChkYXRhLnBhdGgpLnRvRXF1YWwoJ2RpcmVjdG9yeS1uYW1lJyk7XG4gICAgICBleHBlY3QoZGF0YS5zb3VyY2VIYXNoKS50b0VxdWFsKCdzb3VyY2UtaGFzaCcpO1xuICAgICAgZXhwZWN0KGRhdGEucmVwb3NpdG9yeU5hbWUpLnRvRXF1YWwoJ215LWN1c3RvbS1yZXBvLW5hbWUnKTtcbiAgICAgIGV4cGVjdChkYXRhLmltYWdlVGFnKS50b0VxdWFsKCdzb3VyY2UtaGFzaCcpO1xuICAgIH1cblxuICAgIGV4cGVjdCh0b0Nsb3VkRm9ybWF0aW9uKHN0YWNrKSkudG9FcXVhbCh7IH0pO1xuXG4gIH0pO1xufSk7XG4iXX0=