"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const lib_1 = require("../lib");
describe('duration', () => {
    test('negative amount', () => {
        expect(() => lib_1.Duration.seconds(-1)).toThrow(/negative/);
    });
    test('can stringify', () => {
        expect(`${lib_1.Duration.hours(1)}`).toEqual('Duration.hours(1)');
    });
    test('unresolved amount', () => {
        const stack = new lib_1.Stack();
        const lazyDuration = lib_1.Duration.seconds(lib_1.Token.asNumber({ resolve: () => 1337 }));
        expect(stack.resolve(lazyDuration.toSeconds())).toEqual(1337);
        expect(() => stack.resolve(lazyDuration.toMinutes())).toThrow(/Duration must be specified as 'Duration.minutes\(\)' here/);
    });
    test('Duration in seconds', () => {
        const duration = lib_1.Duration.seconds(300);
        expect(duration.toSeconds()).toEqual(300);
        expect(duration.toMinutes()).toEqual(5);
        expect(() => duration.toDays()).toThrow(/'300 seconds' cannot be converted into a whole number of days/);
        floatEqual(duration.toDays({ integral: false }), 300 / 86400);
        expect(lib_1.Duration.seconds(60 * 60 * 24).toDays()).toEqual(1);
    });
    test('Duration in minutes', () => {
        const duration = lib_1.Duration.minutes(5);
        expect(duration.toSeconds()).toEqual(300);
        expect(duration.toMinutes()).toEqual(5);
        expect(() => duration.toDays()).toThrow(/'5 minutes' cannot be converted into a whole number of days/);
        floatEqual(duration.toDays({ integral: false }), 300 / 86400);
        expect(lib_1.Duration.minutes(60 * 24).toDays()).toEqual(1);
    });
    test('Duration in hours', () => {
        const duration = lib_1.Duration.hours(5);
        expect(duration.toSeconds()).toEqual(18000);
        expect(duration.toMinutes()).toEqual(300);
        expect(() => duration.toDays()).toThrow(/'5 hours' cannot be converted into a whole number of days/);
        floatEqual(duration.toDays({ integral: false }), 5 / 24);
        expect(lib_1.Duration.hours(24).toDays()).toEqual(1);
    });
    test('seconds to milliseconds', () => {
        const duration = lib_1.Duration.seconds(5);
        expect(duration.toMilliseconds()).toEqual(5000);
    });
    test('Duration in days', () => {
        const duration = lib_1.Duration.days(1);
        expect(duration.toSeconds()).toEqual(86400);
        expect(duration.toMinutes()).toEqual(1440);
        expect(duration.toDays()).toEqual(1);
    });
    (0, cdk_build_tools_1.testDeprecated)('toISOString', () => {
        expect(lib_1.Duration.millis(0).toISOString()).toEqual('PT0S');
        expect(lib_1.Duration.seconds(0).toISOString()).toEqual('PT0S');
        expect(lib_1.Duration.minutes(0).toISOString()).toEqual('PT0S');
        expect(lib_1.Duration.hours(0).toISOString()).toEqual('PT0S');
        expect(lib_1.Duration.days(0).toISOString()).toEqual('PT0S');
        expect(lib_1.Duration.millis(5).toISOString()).toEqual('PT0.005S');
        expect(lib_1.Duration.seconds(5).toISOString()).toEqual('PT5S');
        expect(lib_1.Duration.minutes(5).toISOString()).toEqual('PT5M');
        expect(lib_1.Duration.hours(5).toISOString()).toEqual('PT5H');
        expect(lib_1.Duration.days(5).toISOString()).toEqual('P5D');
        expect(lib_1.Duration.seconds(1 + 60 * (1 + 60 * (1 + 24))).toISOString()).toEqual('P1DT1H1M1S');
    });
    test('toIsoString', () => {
        expect(lib_1.Duration.millis(0).toIsoString()).toEqual('PT0S');
        expect(lib_1.Duration.seconds(0).toIsoString()).toEqual('PT0S');
        expect(lib_1.Duration.minutes(0).toIsoString()).toEqual('PT0S');
        expect(lib_1.Duration.hours(0).toIsoString()).toEqual('PT0S');
        expect(lib_1.Duration.days(0).toIsoString()).toEqual('PT0S');
        expect(lib_1.Duration.millis(5).toIsoString()).toEqual('PT0.005S');
        expect(lib_1.Duration.seconds(5).toIsoString()).toEqual('PT5S');
        expect(lib_1.Duration.minutes(5).toIsoString()).toEqual('PT5M');
        expect(lib_1.Duration.hours(5).toIsoString()).toEqual('PT5H');
        expect(lib_1.Duration.days(5).toIsoString()).toEqual('P5D');
        expect(lib_1.Duration.seconds(65).toIsoString()).toEqual('PT1M5S');
        expect(lib_1.Duration.seconds(1 + 60 * (1 + 60 * (1 + 24))).toIsoString()).toEqual('P1DT1H1M1S');
    });
    test('parse', () => {
        expect(lib_1.Duration.parse('PT0S').toSeconds()).toEqual(0);
        expect(lib_1.Duration.parse('PT0M').toSeconds()).toEqual(0);
        expect(lib_1.Duration.parse('PT0H').toSeconds()).toEqual(0);
        expect(lib_1.Duration.parse('P0D').toSeconds()).toEqual(0);
        expect(lib_1.Duration.parse('PT5S').toSeconds()).toEqual(5);
        expect(lib_1.Duration.parse('PT5M').toSeconds()).toEqual(300);
        expect(lib_1.Duration.parse('PT5H').toSeconds()).toEqual(18000);
        expect(lib_1.Duration.parse('P5D').toSeconds()).toEqual(432000);
        expect(lib_1.Duration.parse('P1DT1H1M1S').toSeconds()).toEqual(1 + 60 * (1 + 60 * (1 + 24)));
    });
    test('reject illegal parses', () => {
        const err = 'Not a valid ISO duration';
        expect(() => {
            lib_1.Duration.parse('PT1D');
        }).toThrow(err);
        expect(() => {
            lib_1.Duration.parse('P5S');
        }).toThrow(err);
    });
    test('to human string', () => {
        expect(lib_1.Duration.minutes(0).toHumanString()).toEqual('0 minutes');
        expect(lib_1.Duration.minutes(lib_1.Lazy.number({ produce: () => 5 })).toHumanString()).toEqual('<token> minutes');
        expect(lib_1.Duration.days(1).toHumanString()).toEqual('1 day');
        expect(lib_1.Duration.hours(1).toHumanString()).toEqual('1 hour');
        expect(lib_1.Duration.minutes(1).toHumanString()).toEqual('1 minute');
        expect(lib_1.Duration.seconds(1).toHumanString()).toEqual('1 second');
        expect(lib_1.Duration.millis(1).toHumanString()).toEqual('1 milli');
        expect(lib_1.Duration.minutes(10).toHumanString()).toEqual('10 minutes');
        expect(lib_1.Duration.minutes(62).toHumanString()).toEqual('1 hour 2 minutes');
        expect(lib_1.Duration.seconds(3666).toHumanString()).toEqual('1 hour 1 minute');
        expect(lib_1.Duration.millis(3000).toHumanString()).toEqual('3 seconds');
        expect(lib_1.Duration.millis(3666).toHumanString()).toEqual('3 seconds 666 millis');
        expect(lib_1.Duration.millis(3.6).toHumanString()).toEqual('3.6 millis');
    });
    test('add two durations', () => {
        expect(lib_1.Duration.minutes(1).plus(lib_1.Duration.seconds(30)).toSeconds()).toEqual(lib_1.Duration.seconds(90).toSeconds());
        expect(lib_1.Duration.minutes(1).plus(lib_1.Duration.seconds(30)).toMinutes({ integral: false }))
            .toEqual(lib_1.Duration.seconds(90).toMinutes({ integral: false }));
    });
    test('subtract two durations', () => {
        expect(lib_1.Duration.minutes(1).minus(lib_1.Duration.seconds(30)).toSeconds()).toEqual(lib_1.Duration.seconds(30).toSeconds());
        expect(lib_1.Duration.minutes(1).minus(lib_1.Duration.seconds(30)).toMinutes({ integral: false }))
            .toEqual(lib_1.Duration.seconds(30).toMinutes({ integral: false }));
    });
    test('get unit label from duration', () => {
        expect(lib_1.Duration.minutes(lib_1.Lazy.number({ produce: () => 10 })).unitLabel()).toEqual('minutes');
        expect(lib_1.Duration.minutes(62).unitLabel()).toEqual('minutes');
        expect(lib_1.Duration.seconds(10).unitLabel()).toEqual('seconds');
        expect(lib_1.Duration.millis(1).unitLabel()).toEqual('millis');
        expect(lib_1.Duration.hours(1000).unitLabel()).toEqual('hours');
        expect(lib_1.Duration.days(2).unitLabel()).toEqual('days');
    });
    test('format number token to number', () => {
        const stack = new lib_1.Stack();
        const lazyDuration = lib_1.Duration.minutes(lib_1.Lazy.number({ produce: () => 10 }));
        expect(stack.resolve(lazyDuration.formatTokenToNumber())).toEqual('10 minutes');
        expect(lib_1.Duration.hours(10).formatTokenToNumber()).toEqual('10 hours');
        expect(lib_1.Duration.days(5).formatTokenToNumber()).toEqual('5 days');
    });
    test('duration is unresolved', () => {
        const lazyDuration = lib_1.Duration.minutes(lib_1.Lazy.number({ produce: () => 10 }));
        expect(lazyDuration.isUnresolved()).toEqual(true);
        expect(lib_1.Duration.hours(10).isUnresolved()).toEqual(false);
    });
});
describe('integral flag checks', () => {
    test('convert fractional minutes to minutes', () => {
        expect(() => {
            lib_1.Duration.minutes(0.5).toMinutes();
        }).toThrow(/must be a whole number of/);
    });
    test('convert fractional minutes to minutes - integral: false', () => {
        expect(lib_1.Duration.minutes(5.5).toMinutes({ integral: false })).toEqual(5.5);
    });
    test('convert whole minutes to minutes', () => {
        expect(lib_1.Duration.minutes(5).toMinutes()).toEqual(5);
    });
    test('convert fractional minutes to fractional seconds', () => {
        expect(() => {
            lib_1.Duration.minutes(9 / 8).toSeconds();
        }).toThrow(/cannot be converted into a whole number of/);
    });
    test('convert fractional minutes to fractional seconds - integral: false', () => {
        expect(lib_1.Duration.minutes(9 / 8).toSeconds({ integral: false })).toEqual(67.5);
    });
    test('convert fractional minutes to whole seconds', () => {
        expect(lib_1.Duration.minutes(5 / 4).toSeconds({ integral: false })).toEqual(75);
    });
    test('convert whole minutes to whole seconds', () => {
        expect(lib_1.Duration.minutes(10).toSeconds({ integral: false })).toEqual(600);
    });
    test('convert seconds to fractional minutes', () => {
        expect(() => {
            lib_1.Duration.seconds(45).toMinutes();
        }).toThrow(/cannot be converted into a whole number of/);
    });
    test('convert seconds to fractional minutes - integral: false', () => {
        expect(lib_1.Duration.seconds(45).toMinutes({ integral: false })).toEqual(0.75);
    });
    test('convert seconds to whole minutes', () => {
        expect(lib_1.Duration.seconds(120).toMinutes()).toEqual(2);
    });
});
function floatEqual(actual, expected) {
    expect(
    // Floats are subject to rounding errors up to Number.ESPILON
    actual >= expected - Number.EPSILON && actual <= expected + Number.EPSILON).toEqual(true);
}
//# sourceMappingURL=data:application/json;base64,