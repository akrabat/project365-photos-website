"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
describe('expiration', () => {
    test('from string', () => {
        const date = new Date('Sun, 26 Jan 2020 00:53:20 GMT');
        expect(lib_1.Expiration.fromString('Sun, 26 Jan 2020 00:53:20 GMT').date.getDate()).toEqual(date.getDate());
    });
    test('at specified date', () => {
        const date = new Date('Sun, 26 Jan 2020 00:53:20 GMT');
        expect(lib_1.Expiration.atDate(new Date('Sun, 26 Jan 2020 00:53:20 GMT')).date.toUTCString()).toEqual('Sun, 26 Jan 2020 00:53:20 GMT');
        expect(lib_1.Expiration.atDate(new Date(1580000000000)).date.toUTCString()).toEqual('Sun, 26 Jan 2020 00:53:20 GMT');
        expect(lib_1.Expiration.atDate(new Date(date)).date.toUTCString()).toEqual('Sun, 26 Jan 2020 00:53:20 GMT');
    });
    test('at time stamp', () => {
        expect(lib_1.Expiration.atDate(new Date(1580000000000)).date.toUTCString()).toEqual('Sun, 26 Jan 2020 00:53:20 GMT');
    });
    test('after', () => {
        expect(Math.abs(new Date(lib_1.Expiration.after(lib_1.Duration.minutes(10)).date.toUTCString()).getTime() - (Date.now() + 600000)) < 15000).toBeDefined();
    });
    test('toEpoch returns correct value', () => {
        const date = new Date('Sun, 26 Jan 2020 00:53:20 GMT');
        expect(lib_1.Expiration.atDate(date).toEpoch()).toEqual(1580000000);
    });
    test('isBefore', () => {
        const expire = lib_1.Expiration.after(lib_1.Duration.days(2));
        expect(expire.isBefore(lib_1.Duration.days(1))).toEqual(false);
        expect(expire.isBefore(lib_1.Duration.days(3))).toEqual(true);
    });
    test('isAfter', () => {
        const expire = lib_1.Expiration.after(lib_1.Duration.days(2));
        expect(expire.isAfter(lib_1.Duration.days(1))).toEqual(true);
        expect(expire.isAfter(lib_1.Duration.days(3))).toEqual(false);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwaXJhdGlvbi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXhwaXJhdGlvbi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0NBQThDO0FBRTlDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO0lBQzFCLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO1FBQ3ZCLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDdkQsTUFBTSxDQUFDLGdCQUFVLENBQUMsVUFBVSxDQUFDLCtCQUErQixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ3hHLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUM3QixNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sQ0FBQyxnQkFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDakksTUFBTSxDQUFDLGdCQUFVLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDL0csTUFBTSxDQUFDLGdCQUFVLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUM7SUFDeEcsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtRQUN6QixNQUFNLENBQUMsZ0JBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQztJQUNqSCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1FBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLGdCQUFVLENBQUMsS0FBSyxDQUFDLGNBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2hKLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtRQUN6QyxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sQ0FBQyxnQkFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLGdCQUFVLENBQUMsS0FBSyxDQUFDLGNBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7UUFDbkIsTUFBTSxNQUFNLEdBQUcsZ0JBQVUsQ0FBQyxLQUFLLENBQUMsY0FBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGNBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER1cmF0aW9uLCBFeHBpcmF0aW9uIH0gZnJvbSAnLi4vbGliJztcblxuZGVzY3JpYmUoJ2V4cGlyYXRpb24nLCAoKSA9PiB7XG4gIHRlc3QoJ2Zyb20gc3RyaW5nJywgKCkgPT4ge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgnU3VuLCAyNiBKYW4gMjAyMCAwMDo1MzoyMCBHTVQnKTtcbiAgICBleHBlY3QoRXhwaXJhdGlvbi5mcm9tU3RyaW5nKCdTdW4sIDI2IEphbiAyMDIwIDAwOjUzOjIwIEdNVCcpLmRhdGUuZ2V0RGF0ZSgpKS50b0VxdWFsKGRhdGUuZ2V0RGF0ZSgpKTtcbiAgfSk7XG5cbiAgdGVzdCgnYXQgc3BlY2lmaWVkIGRhdGUnLCAoKSA9PiB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCdTdW4sIDI2IEphbiAyMDIwIDAwOjUzOjIwIEdNVCcpO1xuICAgIGV4cGVjdChFeHBpcmF0aW9uLmF0RGF0ZShuZXcgRGF0ZSgnU3VuLCAyNiBKYW4gMjAyMCAwMDo1MzoyMCBHTVQnKSkuZGF0ZS50b1VUQ1N0cmluZygpKS50b0VxdWFsKCdTdW4sIDI2IEphbiAyMDIwIDAwOjUzOjIwIEdNVCcpO1xuICAgIGV4cGVjdChFeHBpcmF0aW9uLmF0RGF0ZShuZXcgRGF0ZSgxNTgwMDAwMDAwMDAwKSkuZGF0ZS50b1VUQ1N0cmluZygpKS50b0VxdWFsKCdTdW4sIDI2IEphbiAyMDIwIDAwOjUzOjIwIEdNVCcpO1xuICAgIGV4cGVjdChFeHBpcmF0aW9uLmF0RGF0ZShuZXcgRGF0ZShkYXRlKSkuZGF0ZS50b1VUQ1N0cmluZygpKS50b0VxdWFsKCdTdW4sIDI2IEphbiAyMDIwIDAwOjUzOjIwIEdNVCcpO1xuICB9KTtcblxuICB0ZXN0KCdhdCB0aW1lIHN0YW1wJywgKCkgPT4ge1xuICAgIGV4cGVjdChFeHBpcmF0aW9uLmF0RGF0ZShuZXcgRGF0ZSgxNTgwMDAwMDAwMDAwKSkuZGF0ZS50b1VUQ1N0cmluZygpKS50b0VxdWFsKCdTdW4sIDI2IEphbiAyMDIwIDAwOjUzOjIwIEdNVCcpO1xuICB9KTtcblxuICB0ZXN0KCdhZnRlcicsICgpID0+IHtcbiAgICBleHBlY3QoTWF0aC5hYnMobmV3IERhdGUoRXhwaXJhdGlvbi5hZnRlcihEdXJhdGlvbi5taW51dGVzKDEwKSkuZGF0ZS50b1VUQ1N0cmluZygpKS5nZXRUaW1lKCkgLSAoRGF0ZS5ub3coKSArIDYwMDAwMCkpIDwgMTUwMDApLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3RvRXBvY2ggcmV0dXJucyBjb3JyZWN0IHZhbHVlJywgKCkgPT4ge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgnU3VuLCAyNiBKYW4gMjAyMCAwMDo1MzoyMCBHTVQnKTtcbiAgICBleHBlY3QoRXhwaXJhdGlvbi5hdERhdGUoZGF0ZSkudG9FcG9jaCgpKS50b0VxdWFsKDE1ODAwMDAwMDApO1xuICB9KTtcblxuICB0ZXN0KCdpc0JlZm9yZScsICgpID0+IHtcbiAgICBjb25zdCBleHBpcmUgPSBFeHBpcmF0aW9uLmFmdGVyKER1cmF0aW9uLmRheXMoMikpO1xuICAgIGV4cGVjdChleHBpcmUuaXNCZWZvcmUoRHVyYXRpb24uZGF5cygxKSkpLnRvRXF1YWwoZmFsc2UpO1xuICAgIGV4cGVjdChleHBpcmUuaXNCZWZvcmUoRHVyYXRpb24uZGF5cygzKSkpLnRvRXF1YWwodHJ1ZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2lzQWZ0ZXInLCAoKSA9PiB7XG4gICAgY29uc3QgZXhwaXJlID0gRXhwaXJhdGlvbi5hZnRlcihEdXJhdGlvbi5kYXlzKDIpKTtcbiAgICBleHBlY3QoZXhwaXJlLmlzQWZ0ZXIoRHVyYXRpb24uZGF5cygxKSkpLnRvRXF1YWwodHJ1ZSk7XG4gICAgZXhwZWN0KGV4cGlyZS5pc0FmdGVyKER1cmF0aW9uLmRheXMoMykpKS50b0VxdWFsKGZhbHNlKTtcbiAgfSk7XG59KTtcbiJdfQ==