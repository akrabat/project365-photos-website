"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fc = require("fast-check");
const _ = require("lodash");
const lib_1 = require("../lib");
const intrinsic_1 = require("../lib/private/intrinsic");
function asyncTest(cb) {
    return async () => {
        let error;
        try {
            await cb();
        }
        catch (e) {
            error = e;
        }
        finally {
            expect(() => {
                if (error) {
                    throw error;
                }
            }).not.toThrow();
        }
    };
}
const nonEmptyString = fc.string(1, 16);
const tokenish = fc.array(nonEmptyString, 2, 2).map(arr => ({ [arr[0]]: arr[1] }));
const anyValue = fc.oneof(nonEmptyString, tokenish);
describe('fn', () => {
    describe('eager resolution for non-tokens', () => {
        test('Fn.select', () => {
            expect(lib_1.Fn.select(2, ['hello', 'you', 'dude'])).toEqual('dude');
        });
        test('Fn.select does not short-circuit if there are tokens in the array', () => {
            const stack = new lib_1.Stack();
            expect(stack.resolve(lib_1.Fn.select(2, [
                lib_1.Fn.conditionIf('xyz', 'yep', lib_1.Aws.NO_VALUE).toString(),
                'you',
                'dude',
            ]))).toEqual({
                'Fn::Select': [2, [
                        { 'Fn::If': ['xyz', 'yep', { Ref: 'AWS::NoValue' }] },
                        'you',
                        'dude',
                    ]],
            });
        });
        test('Fn.split', () => {
            expect(lib_1.Fn.split(':', 'hello:world:yeah')).toEqual(['hello', 'world', 'yeah']);
        });
    });
    describe('FnParseDomainName', () => {
        test('parse domain name from resolved url', () => {
            expect(lib_1.Fn.parseDomainName('https://test.com/')).toEqual('test.com');
        });
        test('parse domain name on token', () => {
            const stack = new lib_1.Stack();
            const url = lib_1.Fn.join('//', [
                'https:',
                lib_1.Fn.join('/', [
                    'test.com',
                    'graphql',
                ]),
            ]);
            expect(lib_1.Fn.parseDomainName(stack.resolve(url))).toEqual('test.com');
        });
    });
    describe('FnJoin', () => {
        test('rejects empty list of arguments to join', () => {
            expect(() => lib_1.Fn.join('.', [])).toThrow();
        });
        test('collapse nested FnJoins even if they contain tokens', () => {
            const stack = new lib_1.Stack();
            const obj = lib_1.Fn.join('', [
                'a',
                lib_1.Fn.join('', [lib_1.Fn.getAtt('a', 'bc').toString(), 'c']),
                'd',
            ]);
            expect(stack.resolve(obj)).toEqual({
                'Fn::Join': ['',
                    [
                        'a',
                        { 'Fn::GetAtt': ['a', 'bc'] },
                        'cd',
                    ]],
            });
        });
        test('resolves to the value if only one value is joined', asyncTest(async () => {
            const stack = new lib_1.Stack();
            fc.assert(fc.property(fc.string(), anyValue, (delimiter, value) => _.isEqual(stack.resolve(lib_1.Fn.join(delimiter, [value])), value)), { verbose: true });
        }));
        test('pre-concatenates string literals', asyncTest(async () => {
            const stack = new lib_1.Stack();
            fc.assert(fc.property(fc.string(), fc.array(nonEmptyString, 1, 15), (delimiter, values) => stack.resolve(lib_1.Fn.join(delimiter, values)) === values.join(delimiter)), { verbose: true });
        }));
        test('pre-concatenates around tokens', asyncTest(async () => {
            const stack = new lib_1.Stack();
            fc.assert(fc.property(fc.string(), fc.array(nonEmptyString, 1, 3), tokenish, fc.array(nonEmptyString, 1, 3), (delimiter, prefix, obj, suffix) => _.isEqual(stack.resolve(lib_1.Fn.join(delimiter, [...prefix, stringToken(obj), ...suffix])), { 'Fn::Join': [delimiter, [prefix.join(delimiter), obj, suffix.join(delimiter)]] })), { verbose: true, seed: 1539874645005, path: '0:0:0:0:0:0:0:0:0' });
        }));
        test('flattens joins nested under joins with same delimiter', asyncTest(async () => {
            const stack = new lib_1.Stack();
            fc.assert(fc.property(fc.string(), fc.array(anyValue), fc.array(anyValue, 1, 3), fc.array(anyValue), (delimiter, prefix, nested, suffix) => 
            // Gonna test
            _.isEqual(stack.resolve(lib_1.Fn.join(delimiter, [...prefix, lib_1.Fn.join(delimiter, nested), ...suffix])), stack.resolve(lib_1.Fn.join(delimiter, [...prefix, ...nested, ...suffix])))), { verbose: true });
        }));
        test('does not flatten joins nested under joins with different delimiter', asyncTest(async () => {
            const stack = new lib_1.Stack();
            fc.assert(fc.property(fc.string(), fc.string(), fc.array(anyValue, 1, 3), fc.array(tokenish, 2, 3), fc.array(anyValue, 3), (delimiter1, delimiter2, prefix, nested, suffix) => {
                fc.pre(delimiter1 !== delimiter2);
                const join = lib_1.Fn.join(delimiter1, [...prefix, lib_1.Fn.join(delimiter2, stringListToken(nested)), ...suffix]);
                const resolved = stack.resolve(join);
                return resolved['Fn::Join'][1].find((e) => typeof e === 'object'
                    && ('Fn::Join' in e)
                    && e['Fn::Join'][0] === delimiter2) != null;
            }), { verbose: true });
        }));
        test('Fn::EachMemberIn', asyncTest(async () => {
            const stack = new lib_1.Stack();
            const eachMemberIn = lib_1.Fn.conditionEachMemberIn(lib_1.Fn.valueOfAll('AWS::EC2::Subnet::Id', 'VpcId'), lib_1.Fn.refAll('AWS::EC2::VPC::Id'));
            expect(stack.resolve(eachMemberIn)).toEqual({
                'Fn::EachMemberIn': [
                    { 'Fn::ValueOfAll': ['AWS::EC2::Subnet::Id', 'VpcId'] },
                    { 'Fn::RefAll': 'AWS::EC2::VPC::Id' },
                ],
            });
        }));
        test('cross-stack FnJoin elements are properly resolved', asyncTest(async () => {
            // GIVEN
            const app = new lib_1.App();
            const stack1 = new lib_1.Stack(app, 'Stack1');
            const stack2 = new lib_1.Stack(app, 'Stack2');
            // WHEN
            new lib_1.CfnOutput(stack2, 'Stack1Id', {
                value: lib_1.Fn.join(' = ', ['Stack1Id', stack1.stackId]),
            });
            // THEN
            const template = app.synth().getStackByName('Stack2').template;
            expect(template?.Outputs).toEqual({
                Stack1Id: {
                    Value: {
                        'Fn::Join': [' = ', [
                                'Stack1Id',
                                { 'Fn::ImportValue': 'Stack1:ExportsOutputRefAWSStackIdB2DD5BAA' },
                            ]],
                    },
                },
            });
        }));
    });
    describe('Ref', () => {
        test('returns a reference given a logical name', () => {
            const stack = new lib_1.Stack();
            expect(stack.resolve(lib_1.Fn.ref('hello'))).toEqual({
                Ref: 'hello',
            });
        });
    });
    test('nested Fn::Join with list token', () => {
        const stack = new lib_1.Stack();
        const inner = lib_1.Fn.join(',', lib_1.Token.asList({ NotReallyList: true }));
        const outer = lib_1.Fn.join(',', [inner, 'Foo']);
        expect(stack.resolve(outer)).toEqual({
            'Fn::Join': [
                ',',
                [
                    { 'Fn::Join': [',', { NotReallyList: true }] },
                    'Foo',
                ],
            ],
        });
    });
});
test('Fn.split with an unknown length resolves to simple {Fn::Split}', () => {
    const stack = new lib_1.Stack();
    const splittableToken = lib_1.Token.asString({ ThisIsASplittable: 'list' });
    const splitToken = lib_1.Fn.split(',', splittableToken);
    expect(stack.resolve(splitToken)).toEqual({ 'Fn::Split': [',', { ThisIsASplittable: 'list' }] });
});
test('Fn.split with an assumed length resolves to a list of {Fn::Select}s', () => {
    const stack = new lib_1.Stack();
    const splittableToken = lib_1.Token.asString({ ThisIsASplittable: 'list' });
    const splitToken = lib_1.Fn.split(',', splittableToken, 3);
    const splitValue = { 'Fn::Split': [',', { ThisIsASplittable: 'list' }] };
    expect(stack.resolve(splitToken)).toEqual([
        { 'Fn::Select': [0, splitValue] },
        { 'Fn::Select': [1, splitValue] },
        { 'Fn::Select': [2, splitValue] },
    ]);
});
test('Fn.importListValue produces lists of known length', () => {
    const stack = new lib_1.Stack();
    const splitToken = lib_1.Fn.importListValue('ExportName', 3);
    const splitValue = { 'Fn::Split': [',', { 'Fn::ImportValue': 'ExportName' }] };
    expect(stack.resolve(splitToken)).toEqual([
        { 'Fn::Select': [0, splitValue] },
        { 'Fn::Select': [1, splitValue] },
        { 'Fn::Select': [2, splitValue] },
    ]);
});
test('Fn.toJsonString', () => {
    const stack = new lib_1.Stack();
    const token = lib_1.Token.asAny({ key: 'value' });
    expect(stack.resolve(lib_1.Fn.toJsonString(token))).toEqual({ 'Fn::ToJsonString': { key: 'value' } });
    expect(stack.templateOptions.transforms).toEqual(expect.arrayContaining([
        'AWS::LanguageExtensions',
    ]));
});
test('Fn.toJsonString with resolved value', () => {
    expect(lib_1.Fn.toJsonString({ key: 'value' })).toEqual('{\"key\":\"value\"}');
});
test('Fn.len', () => {
    const stack = new lib_1.Stack();
    const token = lib_1.Fn.split('|', lib_1.Token.asString({ ThisIsASplittable: 'list' }));
    expect(stack.resolve(lib_1.Fn.len(token))).toEqual({
        'Fn::Length': {
            'Fn::Split': [
                '|',
                {
                    ThisIsASplittable: 'list',
                },
            ],
        },
    });
    expect(stack.templateOptions.transforms).toEqual(expect.arrayContaining([
        'AWS::LanguageExtensions',
    ]));
});
test('Fn.len with resolved value', () => {
    expect(lib_1.Fn.len(lib_1.Fn.split('|', 'a|b|c'))).toBe(3);
});
function stringListToken(o) {
    return lib_1.Token.asList(new intrinsic_1.Intrinsic(o));
}
function stringToken(o) {
    return lib_1.Token.asString(new intrinsic_1.Intrinsic(o));
}
//# sourceMappingURL=data:application/json;base64,