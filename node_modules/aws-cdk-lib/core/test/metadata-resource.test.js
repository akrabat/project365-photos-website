"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
const zlib = require("zlib");
const constructs_1 = require("constructs");
const lib_1 = require("../lib");
const metadata_resource_1 = require("../lib/private/metadata-resource");
describe('MetadataResource', () => {
    let app;
    let stack;
    beforeEach(() => {
        jest.spyOn(console, 'log').mockImplementation(() => { return true; });
        jest.spyOn(console, 'error').mockImplementation(() => { return true; });
        app = new lib_1.App({
            analyticsReporting: true,
        });
        stack = new lib_1.Stack(app, 'Stack');
    });
    afterEach(() => {
        jest.resetAllMocks();
    });
    test('is not included if the region is known and metadata is not available', () => {
        new lib_1.Stack(app, 'StackUnavailable', {
            env: { region: 'definitely-no-metadata-resource-available-here' },
        });
        const stackTemplate = app.synth().getStackByName('StackUnavailable').template;
        expect(stackTemplate.Resources?.CDKMetadata).toBeUndefined();
    });
    test('is included if the region is known and metadata is available', () => {
        new lib_1.Stack(app, 'StackPresent', {
            env: { region: 'us-east-1' },
        });
        const stackTemplate = app.synth().getStackByName('StackPresent').template;
        expect(stackTemplate.Resources?.CDKMetadata).toBeDefined();
    });
    test('is included if the region is unknown with conditions', () => {
        new lib_1.Stack(app, 'StackUnknown');
        const stackTemplate = app.synth().getStackByName('StackUnknown').template;
        expect(stackTemplate.Resources?.CDKMetadata).toBeDefined();
        expect(stackTemplate.Resources?.CDKMetadata?.Condition).toBeDefined();
    });
    test('includes the formatted Analytics property', () => {
        // A very simple check that the jsii runtime psuedo-construct is present.
        // This check works whether we're running locally or on CodeBuild, on v1 or v2.
        // Other tests(in app.test.ts) will test version-specific results.
        expect(stackAnalytics()).toMatch(/jsii-runtime.Runtime/);
    });
    test('includes the current jsii runtime version', () => {
        process.env.JSII_AGENT = 'Java/1.2.3.4';
        expect(stackAnalytics()).toContain('Java/1.2.3.4!jsii-runtime.Runtime');
        delete process.env.JSII_AGENT;
    });
    test('includes constructs added to the stack', () => {
        new TestConstruct(stack, 'Test');
        expect(stackAnalytics()).toContain('FakeVersion.2.3!@amzn/core.TestConstruct');
    });
    test('only includes constructs in the allow list', () => {
        new TestThirdPartyConstruct(stack, 'Test');
        expect(stackAnalytics()).not.toContain('TestConstruct');
    });
    test('validation plugins included', () => {
        const newApp = new lib_1.App({
            analyticsReporting: true,
            policyValidationBeta1: [
                new ValidationPlugin('plugin1'),
            ],
        });
        const stage1 = new lib_1.Stage(newApp, 'Stage1', {
            policyValidationBeta1: [
                new ValidationPlugin('plugin11'),
            ],
        });
        const stack1 = new lib_1.Stack(stage1, 'Stack1', { stackName: 'stack1' });
        const stage2 = new lib_1.Stage(newApp, 'Stage2', {
            policyValidationBeta1: [
                new ValidationPlugin('plugin12'),
            ],
        });
        const stack2 = new lib_1.Stack(stage2, 'Stack2', { stackName: 'stack1' });
        expect(stackAnalytics(stage1, stack1.stackName)).toMatch(/policyValidation.{plugin11,plugin1}/);
        expect(stackAnalytics(stage2, stack2.stackName)).toMatch(/policyValidation.{plugin12,plugin1}/);
    });
    function stackAnalytics(stage = app, stackName = 'Stack') {
        let stackArtifact;
        if (lib_1.App.isApp(stage)) {
            stackArtifact = stage.synth().getStackByName(stackName);
        }
        else {
            const a = lib_1.App.of(stage);
            stackArtifact = a.synth().getNestedAssembly(stage.artifactId).getStackByName(stackName);
        }
        let encodedAnalytics = stackArtifact.template.Resources?.CDKMetadata?.Properties?.Analytics;
        ;
        return plaintextConstructsFromAnalytics(encodedAnalytics);
    }
});
describe('formatAnalytics', () => {
    test('analytics are formatted with a prefix of v2:deflate64:', () => {
        const constructInfo = [{ fqn: 'aws-cdk-lib.Construct', version: '1.2.3' }];
        expect((0, metadata_resource_1.formatAnalytics)(constructInfo)).toMatch(/v2:deflate64:.*/);
    });
    test('single construct', () => {
        const constructInfo = [{ fqn: 'aws-cdk-lib.Construct', version: '1.2.3' }];
        expectAnalytics(constructInfo, '1.2.3!aws-cdk-lib.Construct');
    });
    test('common prefixes with same versions are combined', () => {
        const constructInfo = [
            { fqn: 'aws-cdk-lib.Construct', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.CfnResource', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.Stack', version: '1.2.3' },
        ];
        expectAnalytics(constructInfo, '1.2.3!aws-cdk-lib.{Construct,CfnResource,Stack}');
    });
    test('nested modules with common prefixes and same versions are combined', () => {
        const constructInfo = [
            { fqn: 'aws-cdk-lib.Construct', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.CfnResource', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.Stack', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.aws_servicefoo.CoolResource', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.aws_servicefoo.OtherResource', version: '1.2.3' },
        ];
        expectAnalytics(constructInfo, '1.2.3!aws-cdk-lib.{Construct,CfnResource,Stack,aws_servicefoo.{CoolResource,OtherResource}}');
    });
    test('constructs are grouped by version', () => {
        const constructInfo = [
            { fqn: 'aws-cdk-lib.Construct', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.CfnResource', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.Stack', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.CoolResource', version: '0.1.2' },
            { fqn: 'aws-cdk-lib.OtherResource', version: '0.1.2' },
        ];
        expectAnalytics(constructInfo, '1.2.3!aws-cdk-lib.{Construct,CfnResource,Stack},0.1.2!aws-cdk-lib.{CoolResource,OtherResource}');
    });
    test('ensure gzip is encoded with "unknown" operating system to maintain consistent output across systems', () => {
        const constructInfo = [{ fqn: 'aws-cdk-lib.Construct', version: '1.2.3' }];
        const analytics = (0, metadata_resource_1.formatAnalytics)(constructInfo);
        const gzip = Buffer.from(analytics.split(':')[2], 'base64');
        expect(gzip[9]).toBe(255);
    });
    // Compares the output of formatAnalytics with an expected (plaintext) output.
    // For ease of testing, the plaintext versions are compared rather than the encoded versions.
    function expectAnalytics(constructs, expectedPlaintext) {
        expect(plaintextConstructsFromAnalytics((0, metadata_resource_1.formatAnalytics)(constructs))).toEqual(expectedPlaintext);
    }
});
function plaintextConstructsFromAnalytics(analytics) {
    return zlib.gunzipSync(Buffer.from(analytics.split(':')[2], 'base64')).toString('utf-8');
}
const JSII_RUNTIME_SYMBOL = Symbol.for('jsii.rtti');
class TestConstruct extends constructs_1.Construct {
}
_a = JSII_RUNTIME_SYMBOL;
// @ts-ignore
TestConstruct[_a] = { fqn: '@amzn/core.TestConstruct', version: 'FakeVersion.2.3' };
class TestThirdPartyConstruct extends constructs_1.Construct {
}
_b = JSII_RUNTIME_SYMBOL;
// @ts-ignore
TestThirdPartyConstruct[_b] = { fqn: 'mycoolthing.TestConstruct', version: '1.2.3' };
class ValidationPlugin {
    constructor(name) {
        this.name = name;
    }
    validate(_context) {
        return {
            success: true,
            violations: [],
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEtcmVzb3VyY2UudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1ldGFkYXRhLXJlc291cmNlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQTZCO0FBQzdCLDJDQUF1QztBQUN2QyxnQ0FBMkk7QUFDM0ksd0VBQW1FO0FBR25FLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFDaEMsSUFBSSxHQUFRLENBQUM7SUFDYixJQUFJLEtBQVksQ0FBQztJQUVqQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUcsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLEdBQUcsR0FBRyxJQUFJLFNBQUcsQ0FBQztZQUNaLGtCQUFrQixFQUFFLElBQUk7U0FDekIsQ0FBQyxDQUFDO1FBQ0gsS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNILFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsc0VBQXNFLEVBQUUsR0FBRyxFQUFFO1FBQ2hGLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxrQkFBa0IsRUFBRTtZQUNqQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsZ0RBQWdELEVBQUU7U0FDbEUsQ0FBQyxDQUFDO1FBRUgsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFD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QUFnQjtJQUNwQixZQUE0QixJQUFZO1FBQVosU0FBSSxHQUFKLElBQUksQ0FBUTtLQUFJO0lBRTVDLFFBQVEsQ0FBQyxRQUF1QztRQUM5QyxPQUFPO1lBQ0wsT0FBTyxFQUFFLElBQUk7WUFDYixVQUFVLEVBQUUsRUFBRTtTQUNmLENBQUM7S0FDSDtDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgemxpYiBmcm9tICd6bGliJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQXBwLCBTdGFjaywgSVBvbGljeVZhbGlkYXRpb25QbHVnaW5CZXRhMSwgSVBvbGljeVZhbGlkYXRpb25Db250ZXh0QmV0YTEsIFN0YWdlLCBQb2xpY3lWYWxpZGF0aW9uUGx1Z2luUmVwb3J0QmV0YTEgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHsgZm9ybWF0QW5hbHl0aWNzIH0gZnJvbSAnLi4vbGliL3ByaXZhdGUvbWV0YWRhdGEtcmVzb3VyY2UnO1xuaW1wb3J0IHsgQ29uc3RydWN0SW5mbyB9IGZyb20gJy4uL2xpYi9wcml2YXRlL3J1bnRpbWUtaW5mbyc7XG5cbmRlc2NyaWJlKCdNZXRhZGF0YVJlc291cmNlJywgKCkgPT4ge1xuICBsZXQgYXBwOiBBcHA7XG4gIGxldCBzdGFjazogU3RhY2s7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5zcHlPbihjb25zb2xlLCAnbG9nJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHsgcmV0dXJuIHRydWU7IH0pO1xuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHsgcmV0dXJuIHRydWU7IH0pO1xuICAgIGFwcCA9IG5ldyBBcHAoe1xuICAgICAgYW5hbHl0aWNzUmVwb3J0aW5nOiB0cnVlLFxuICAgIH0pO1xuICAgIHN0YWNrID0gbmV3IFN0YWNrKGFwcCwgJ1N0YWNrJyk7XG4gIH0pO1xuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xuICB9KTtcblxuICB0ZXN0KCdpcyBub3QgaW5jbHVkZWQgaWYgdGhlIHJlZ2lvbiBpcyBrbm93biBhbmQgbWV0YWRhdGEgaXMgbm90IGF2YWlsYWJsZScsICgpID0+IHtcbiAgICBuZXcgU3RhY2soYXBwLCAnU3RhY2tVbmF2YWlsYWJsZScsIHtcbiAgICAgIGVudjogeyByZWdpb246ICdkZWZpbml0ZWx5LW5vLW1ldGFkYXRhLXJlc291cmNlLWF2YWlsYWJsZS1oZXJlJyB9LFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3RhY2tUZW1wbGF0ZSA9IGFwcC5zeW50aCgpLmdldFN0YWNrQnlOYW1lKCdTdGFja1VuYXZhaWxhYmxlJykudGVtcGxhdGU7XG5cbiAgICBleHBlY3Qoc3RhY2tUZW1wbGF0ZS5SZXNvdXJjZXM/LkNES01ldGFkYXRhKS50b0JlVW5kZWZpbmVkKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2lzIGluY2x1ZGVkIGlmIHRoZSByZWdpb24gaXMga25vd24gYW5kIG1ldGFkYXRhIGlzIGF2YWlsYWJsZScsICgpID0+IHtcbiAgICBuZXcgU3RhY2soYXBwLCAnU3RhY2tQcmVzZW50Jywge1xuICAgICAgZW52OiB7IHJlZ2lvbjogJ3VzLWVhc3QtMScgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHN0YWNrVGVtcGxhdGUgPSBhcHAuc3ludGgoKS5nZXRTdGFja0J5TmFtZSgnU3RhY2tQcmVzZW50JykudGVtcGxhdGU7XG5cbiAgICBleHBlY3Qoc3RhY2tUZW1wbGF0ZS5SZXNvdXJjZXM/LkNES01ldGFkYXRhKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICB0ZXN0KCdpcyBpbmNsdWRlZCBpZiB0aGUgcmVnaW9uIGlzIHVua25vd24gd2l0aCBjb25kaXRpb25zJywgKCkgPT4ge1xuICAgIG5ldyBTdGFjayhhcHAsICdTdGFja1Vua25vd24nKTtcblxuICAgIGNvbnN0IHN0YWNrVGVtcGxhdGUgPSBhcHAuc3ludGgoKS5nZXRTdGFja0J5TmFtZSgnU3RhY2tVbmtub3duJykudGVtcGxhdGU7XG5cbiAgICBleHBlY3Qoc3RhY2tUZW1wbGF0ZS5SZXNvdXJjZXM/LkNES01ldGFkYXRhKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChzdGFja1RlbXBsYXRlLlJlc291cmNlcz8uQ0RLTWV0YWRhdGE/LkNvbmRpdGlvbikudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgdGVzdCgnaW5jbHVkZXMgdGhlIGZvcm1hdHRlZCBBbmFseXRpY3MgcHJvcGVydHknLCAoKSA9PiB7XG4gICAgLy8gQSB2ZXJ5IHNpbXBsZSBjaGVjayB0aGF0IHRoZSBqc2lpIHJ1bnRpbWUgcHN1ZWRvLWNvbnN0cnVjdCBpcyBwcmVzZW50LlxuICAgIC8vIFRoaXMgY2hlY2sgd29ya3Mgd2hldGhlciB3ZSdyZSBydW5uaW5nIGxvY2FsbHkgb3Igb24gQ29kZUJ1aWxkLCBvbiB2MSBvciB2Mi5cbiAgICAvLyBPdGhlciB0ZXN0cyhpbiBhcHAudGVzdC50cykgd2lsbCB0ZXN0IHZlcnNpb24tc3BlY2lmaWMgcmVzdWx0cy5cbiAgICBleHBlY3Qoc3RhY2tBbmFseXRpY3MoKSkudG9NYXRjaCgvanNpaS1ydW50aW1lLlJ1bnRpbWUvKTtcbiAgfSk7XG5cbiAgdGVzdCgnaW5jbHVkZXMgdGhlIGN1cnJlbnQganNpaSBydW50aW1lIHZlcnNpb24nLCAoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuSlNJSV9BR0VOVCA9ICdKYXZhLzEuMi4zLjQnO1xuXG4gICAgZXhwZWN0KHN0YWNrQW5hbHl0aWNzKCkpLnRvQ29udGFpbignSmF2YS8xLjIuMy40IWpzaWktcnVudGltZS5SdW50aW1lJyk7XG4gICAgZGVsZXRlIHByb2Nlc3MuZW52LkpTSUlfQUdFTlQ7XG4gIH0pO1xuXG4gIHRlc3QoJ2luY2x1ZGVzIGNvbnN0cnVjdHMgYWRkZWQgdG8gdGhlIHN0YWNrJywgKCkgPT4ge1xuICAgIG5ldyBUZXN0Q29uc3RydWN0KHN0YWNrLCAnVGVzdCcpO1xuXG4gICAgZXhwZWN0KHN0YWNrQW5hbHl0aWNzKCkpLnRvQ29udGFpbignRmFrZVZlcnNpb24uMi4zIUBhbXpuL2NvcmUuVGVzdENvbnN0cnVjdCcpO1xuICB9KTtcblxuICB0ZXN0KCdvbmx5IGluY2x1ZGVzIGNvbnN0cnVjdHMgaW4gdGhlIGFsbG93IGxpc3QnLCAoKSA9PiB7XG4gICAgbmV3IFRlc3RUaGlyZFBhcnR5Q29uc3RydWN0KHN0YWNrLCAnVGVzdCcpO1xuXG4gICAgZXhwZWN0KHN0YWNrQW5hbHl0aWNzKCkpLm5vdC50b0NvbnRhaW4oJ1Rlc3RDb25zdHJ1Y3QnKTtcbiAgfSk7XG5cbiAgdGVzdCgndmFsaWRhdGlvbiBwbHVnaW5zIGluY2x1ZGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IG5ld0FwcCA9IG5ldyBBcHAoe1xuICAgICAgYW5hbHl0aWNzUmVwb3J0aW5nOiB0cnVlLFxuICAgICAgcG9saWN5VmFsaWRhdGlvbkJldGExOiBbXG4gICAgICAgIG5ldyBWYWxpZGF0aW9uUGx1Z2luKCdwbHVnaW4xJyksXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3RhZ2UxID0gbmV3IFN0YWdlKG5ld0FwcCwgJ1N0YWdlMScsIHtcbiAgICAgIHBvbGljeVZhbGlkYXRpb25CZXRhMTogW1xuICAgICAgICBuZXcgVmFsaWRhdGlvblBsdWdpbigncGx1Z2luMTEnKSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBjb25zdCBzdGFjazEgPSBuZXcgU3RhY2soc3RhZ2UxLCAnU3RhY2sxJywgeyBzdGFja05hbWU6ICdzdGFjazEnIH0pO1xuXG4gICAgY29uc3Qgc3RhZ2UyID0gbmV3IFN0YWdlKG5ld0FwcCwgJ1N0YWdlMicsIHtcbiAgICAgIHBvbGljeVZhbGlkYXRpb25CZXRhMTogW1xuICAgICAgICBuZXcgVmFsaWRhdGlvblBsdWdpbigncGx1Z2luMTInKSxcbiAgICAgIF0sXG4gICAgfSk7XG4gICAgY29uc3Qgc3RhY2syID0gbmV3IFN0YWNrKHN0YWdlMiwgJ1N0YWNrMicsIHsgc3RhY2tOYW1lOiAnc3RhY2sxJyB9KTtcblxuICAgIGV4cGVjdChzdGFja0FuYWx5dGljcyhzdGFnZTEsIHN0YWNrMS5zdGFja05hbWUpKS50b01hdGNoKC9wb2xpY3lWYWxpZGF0aW9uLntwbHVnaW4xMSxwbHVnaW4xfS8pO1xuICAgIGV4cGVjdChzdGFja0FuYWx5dGljcyhzdGFnZTIsIHN0YWNrMi5zdGFja05hbWUpKS50b01hdGNoKC9wb2xpY3lWYWxpZGF0aW9uLntwbHVnaW4xMixwbHVnaW4xfS8pO1xuICB9KTtcblxuICBmdW5jdGlvbiBzdGFja0FuYWx5dGljcyhzdGFnZTogU3RhZ2UgPSBhcHAsIHN0YWNrTmFtZTogc3RyaW5nID0gJ1N0YWNrJykge1xuICAgIGxldCBzdGFja0FydGlmYWN0O1xuICAgIGlmIChBcHAuaXNBcHAoc3RhZ2UpKSB7XG4gICAgICBzdGFja0FydGlmYWN0ID0gc3RhZ2Uuc3ludGgoKS5nZXRTdGFja0J5TmFtZShzdGFja05hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBhID0gQXBwLm9mKHN0YWdlKSE7XG4gICAgICBzdGFja0FydGlmYWN0ID0gYS5zeW50aCgpLmdldE5lc3RlZEFzc2VtYmx5KHN0YWdlLmFydGlmYWN0SWQpLmdldFN0YWNrQnlOYW1lKHN0YWNrTmFtZSk7XG4gICAgfVxuICAgIGxldCBlbmNvZGVkQW5hbHl0aWNzID0gc3RhY2tBcnRpZmFjdC50ZW1wbGF0ZS5SZXNvdXJjZXM/LkNES01ldGFkYXRhPy5Qcm9wZXJ0aWVzPy5BbmFseXRpY3MgYXMgc3RyaW5nOztcbiAgICByZXR1cm4gcGxhaW50ZXh0Q29uc3RydWN0c0Zyb21BbmFseXRpY3MoZW5jb2RlZEFuYWx5dGljcyk7XG4gIH1cbn0pO1xuXG5kZXNjcmliZSgnZm9ybWF0QW5hbHl0aWNzJywgKCkgPT4ge1xuICB0ZXN0KCdhbmFseXRpY3MgYXJlIGZvcm1hdHRlZCB3aXRoIGEgcHJlZml4IG9mIHYyOmRlZmxhdGU2NDonLCAoKSA9PiB7XG4gICAgY29uc3QgY29uc3RydWN0SW5mbyA9IFt7IGZxbjogJ2F3cy1jZGstbGliLkNvbnN0cnVjdCcsIHZlcnNpb246ICcxLjIuMycgfV07XG5cbiAgICBleHBlY3QoZm9ybWF0QW5hbHl0aWNzKGNvbnN0cnVjdEluZm8pKS50b01hdGNoKC92MjpkZWZsYXRlNjQ6LiovKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2luZ2xlIGNvbnN0cnVjdCcsICgpID0+IHtcbiAgICBjb25zdCBjb25zdHJ1Y3RJbmZvID0gW3sgZnFuOiAnYXdzLWNkay1saWIuQ29uc3RydWN0JywgdmVyc2lvbjogJzEuMi4zJyB9XTtcblxuICAgIGV4cGVjdEFuYWx5dGljcyhjb25zdHJ1Y3RJbmZvLCAnMS4yLjMhYXdzLWNkay1saWIuQ29uc3RydWN0Jyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NvbW1vbiBwcmVmaXhlcyB3aXRoIHNhbWUgdmVyc2lvbnMgYXJlIGNvbWJpbmVkJywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbnN0cnVjdEluZm8gPSBbXG4gICAgICB7IGZxbjogJ2F3cy1jZGstbGliLkNvbnN0cnVjdCcsIHZlcnNpb246ICcxLjIuMycgfSxcbiAgICAgIHsgZnFuOiAnYXdzLWNkay1saWIuQ2ZuUmVzb3VyY2UnLCB2ZXJzaW9uOiAnMS4yLjMnIH0sXG4gICAgICB7IGZxbjogJ2F3cy1jZGstbGliLlN0YWNrJywgdmVyc2lvbjogJzEuMi4zJyB9LFxuICAgIF07XG5cbiAgICBleHBlY3RBbmFseXRpY3MoY29uc3RydWN0SW5mbywgJzEuMi4zIWF3cy1jZGstbGliLntDb25zdHJ1Y3QsQ2ZuUmVzb3VyY2UsU3RhY2t9Jyk7XG4gIH0pO1xuXG4gIHRlc3QoJ25lc3RlZCBtb2R1bGVzIHdpdGggY29tbW9uIHByZWZpeGVzIGFuZCBzYW1lIHZlcnNpb25zIGFyZSBjb21iaW5lZCcsICgpID0+IHtcbiAgICBjb25zdCBjb25zdHJ1Y3RJbmZvID0gW1xuICAgICAgeyBmcW46ICdhd3MtY2RrLWxpYi5Db25zdHJ1Y3QnLCB2ZXJzaW9uOiAnMS4yLjMnIH0sXG4gICAgICB7IGZxbjogJ2F3cy1jZGstbGliLkNmblJlc291cmNlJywgdmVyc2lvbjogJzEuMi4zJyB9LFxuICAgICAgeyBmcW46ICdhd3MtY2RrLWxpYi5TdGFjaycsIHZlcnNpb246ICcxLjIuMycgfSxcbiAgICAgIHsgZnFuOiAnYXdzLWNkay1saWIuYXdzX3NlcnZpY2Vmb28uQ29vbFJlc291cmNlJywgdmVyc2lvbjogJzEuMi4zJyB9LFxuICAgICAgeyBmcW46ICdhd3MtY2RrLWxpYi5hd3Nfc2VydmljZWZvby5PdGhlclJlc291cmNlJywgdmVyc2lvbjogJzEuMi4zJyB9LFxuICAgIF07XG5cbiAgICBleHBlY3RBbmFseXRpY3MoY29uc3RydWN0SW5mbywgJzEuMi4zIWF3cy1jZGstbGliLntDb25zdHJ1Y3QsQ2ZuUmVzb3VyY2UsU3RhY2ssYXdzX3NlcnZpY2Vmb28ue0Nvb2xSZXNvdXJjZSxPdGhlclJlc291cmNlfX0nKTtcbiAgfSk7XG5cbiAgdGVzdCgnY29uc3RydWN0cyBhcmUgZ3JvdXBlZCBieSB2ZXJzaW9uJywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbnN0cnVjdEluZm8gPSBbXG4gICAgICB7IGZxbjogJ2F3cy1jZGstbGliLkNvbnN0cnVjdCcsIHZlcnNpb246ICcxLjIuMycgfSxcbiAgICAgIHsgZnFuOiAnYXdzLWNkay1saWIuQ2ZuUmVzb3VyY2UnLCB2ZXJzaW9uOiAnMS4yLjMnIH0sXG4gICAgICB7IGZxbjogJ2F3cy1jZGstbGliLlN0YWNrJywgdmVyc2lvbjogJzEuMi4zJyB9LFxuICAgICAgeyBmcW46ICdhd3MtY2RrLWxpYi5Db29sUmVzb3VyY2UnLCB2ZXJzaW9uOiAnMC4xLjInIH0sXG4gICAgICB7IGZxbjogJ2F3cy1jZGstbGliLk90aGVyUmVzb3VyY2UnLCB2ZXJzaW9uOiAnMC4xLjInIH0sXG4gICAgXTtcblxuICAgIGV4cGVjdEFuYWx5dGljcyhjb25zdHJ1Y3RJbmZvLCAnMS4yLjMhYXdzLWNkay1saWIue0NvbnN0cnVjdCxDZm5SZXNvdXJjZSxTdGFja30sMC4xLjIhYXdzLWNkay1saWIue0Nvb2xSZXNvdXJjZSxPdGhlclJlc291cmNlfScpO1xuICB9KTtcblxuICB0ZXN0KCdlbnN1cmUgZ3ppcCBpcyBlbmNvZGVkIHdpdGggXCJ1bmtub3duXCIgb3BlcmF0aW5nIHN5c3RlbSB0byBtYWludGFpbiBjb25zaXN0ZW50IG91dHB1dCBhY3Jvc3Mgc3lzdGVtcycsICgpID0+IHtcbiAgICBjb25zdCBjb25zdHJ1Y3RJbmZvID0gW3sgZnFuOiAnYXdzLWNkay1saWIuQ29uc3RydWN0JywgdmVyc2lvbjogJzEuMi4zJyB9XTtcbiAgICBjb25zdCBhbmFseXRpY3MgPSBmb3JtYXRBbmFseXRpY3MoY29uc3RydWN0SW5mbyk7XG4gICAgY29uc3QgZ3ppcCA9IEJ1ZmZlci5mcm9tKGFuYWx5dGljcy5zcGxpdCgnOicpWzJdLCAnYmFzZTY0Jyk7XG4gICAgZXhwZWN0KGd6aXBbOV0pLnRvQmUoMjU1KTtcbiAgfSk7XG5cbiAgLy8gQ29tcGFyZXMgdGhlIG91dHB1dCBvZiBmb3JtYXRBbmFseXRpY3Mgd2l0aCBhbiBleHBlY3RlZCAocGxhaW50ZXh0KSBvdXRwdXQuXG4gIC8vIEZvciBlYXNlIG9mIHRlc3RpbmcsIHRoZSBwbGFpbnRleHQgdmVyc2lvbnMgYXJlIGNvbXBhcmVkIHJhdGhlciB0aGFuIHRoZSBlbmNvZGVkIHZlcnNpb25zLlxuICBmdW5jdGlvbiBleHBlY3RBbmFseXRpY3MoY29uc3RydWN0czogQ29uc3RydWN0SW5mb1tdLCBleHBlY3RlZFBsYWludGV4dDogc3RyaW5nKSB7XG4gICAgZXhwZWN0KHBsYWludGV4dENvbnN0cnVjdHNGcm9tQW5hbHl0aWNzKGZvcm1hdEFuYWx5dGljcyhjb25zdHJ1Y3RzKSkpLnRvRXF1YWwoZXhwZWN0ZWRQbGFpbnRleHQpO1xuICB9XG5cbn0pO1xuXG5mdW5jdGlvbiBwbGFpbnRleHRDb25zdHJ1Y3RzRnJvbUFuYWx5dGljcyhhbmFseXRpY3M6IHN0cmluZykge1xuICByZXR1cm4gemxpYi5ndW56aXBTeW5jKEJ1ZmZlci5mcm9tKGFuYWx5dGljcy5zcGxpdCgnOicpWzJdLCAnYmFzZTY0JykpLnRvU3RyaW5nKCd1dGYtOCcpO1xufVxuXG5jb25zdCBKU0lJX1JVTlRJTUVfU1lNQk9MID0gU3ltYm9sLmZvcignanNpaS5ydHRpJyk7XG5cbmNsYXNzIFRlc3RDb25zdHJ1Y3QgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAvLyBAdHMtaWdub3JlXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFtKU0lJX1JVTlRJTUVfU1lNQk9MXSA9IHsgZnFuOiAnQGFtem4vY29yZS5UZXN0Q29uc3RydWN0JywgdmVyc2lvbjogJ0Zha2VWZXJzaW9uLjIuMycgfVxufVxuXG5jbGFzcyBUZXN0VGhpcmRQYXJ0eUNvbnN0cnVjdCBleHRlbmRzIENvbnN0cnVjdCB7XG4gIC8vIEB0cy1pZ25vcmVcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgW0pTSUlfUlVOVElNRV9TWU1CT0xdID0geyBmcW46ICdteWNvb2x0aGluZy5UZXN0Q29uc3RydWN0JywgdmVyc2lvbjogJzEuMi4zJyB9XG59XG5cbmNsYXNzIFZhbGlkYXRpb25QbHVnaW4gaW1wbGVtZW50cyBJUG9saWN5VmFsaWRhdGlvblBsdWdpbkJldGExIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZykge31cblxuICB2YWxpZGF0ZShfY29udGV4dDogSVBvbGljeVZhbGlkYXRpb25Db250ZXh0QmV0YTEpOiBQb2xpY3lWYWxpZGF0aW9uUGx1Z2luUmVwb3J0QmV0YTEge1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgdmlvbGF0aW9uczogW10sXG4gICAgfTtcbiAgfVxufVxuIl19