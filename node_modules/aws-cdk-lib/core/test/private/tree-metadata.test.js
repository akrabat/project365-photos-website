"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const cxschema = require("../../../cloud-assembly-schema");
const constructs_1 = require("constructs");
const index_1 = require("../../lib/index");
class AbstractCfnResource extends index_1.CfnResource {
    constructor(scope, id) {
        super(scope, id, {
            type: 'CDK::UnitTest::MyCfnResource',
        });
    }
    inspect(inspector) {
        inspector.addAttribute('aws:cdk:cloudformation:type', 'CDK::UnitTest::MyCfnResource');
        inspector.addAttribute('aws:cdk:cloudformation:props', this.cfnProperties);
    }
}
describe('tree metadata', () => {
    test('tree metadata is generated as expected', () => {
        const app = new index_1.App();
        const stack = new index_1.Stack(app, 'mystack');
        new constructs_1.Construct(stack, 'myconstruct');
        const assembly = app.synth();
        const treeArtifact = assembly.tree();
        expect(treeArtifact).toBeDefined();
        expect(readJson(assembly.directory, treeArtifact.file)).toEqual({
            version: 'tree-0.1',
            tree: expect.objectContaining({
                id: 'App',
                path: '',
                children: {
                    Tree: expect.objectContaining({
                        id: 'Tree',
                        path: 'Tree',
                    }),
                    mystack: expect.objectContaining({
                        id: 'mystack',
                        path: 'mystack',
                        children: {
                            BootstrapVersion: {
                                constructInfo: {
                                    fqn: 'aws-cdk-lib.CfnParameter',
                                    version: expect.any(String),
                                },
                                id: 'BootstrapVersion',
                                path: 'mystack/BootstrapVersion',
                            },
                            CheckBootstrapVersion: {
                                constructInfo: {
                                    fqn: 'aws-cdk-lib.CfnRule',
                                    version: expect.any(String),
                                },
                                id: 'CheckBootstrapVersion',
                                path: 'mystack/CheckBootstrapVersion',
                            },
                            myconstruct: expect.objectContaining({
                                id: 'myconstruct',
                                path: 'mystack/myconstruct',
                            }),
                        },
                    }),
                },
            }),
        });
    });
    test('tree metadata for a Cfn resource', () => {
        class MyCfnResource extends AbstractCfnResource {
            get cfnProperties() {
                return {
                    mystringpropkey: 'mystringpropval',
                    mylistpropkey: ['listitem1'],
                    mystructpropkey: {
                        myboolpropkey: true,
                        mynumpropkey: 50,
                    },
                };
            }
        }
        const app = new index_1.App();
        const stack = new index_1.Stack(app, 'mystack');
        new MyCfnResource(stack, 'mycfnresource');
        const assembly = app.synth();
        const treeArtifact = assembly.tree();
        expect(treeArtifact).toBeDefined();
        expect(readJson(assembly.directory, treeArtifact.file)).toEqual({
            version: 'tree-0.1',
            tree: expect.objectContaining({
                id: 'App',
                path: '',
                children: {
                    Tree: expect.objectContaining({
                        id: 'Tree',
                        path: 'Tree',
                    }),
                    mystack: expect.objectContaining({
                        id: 'mystack',
                        path: 'mystack',
                        children: expect.objectContaining({
                            mycfnresource: expect.objectContaining({
                                id: 'mycfnresource',
                                path: 'mystack/mycfnresource',
                                attributes: {
                                    'aws:cdk:cloudformation:type': 'CDK::UnitTest::MyCfnResource',
                                    'aws:cdk:cloudformation:props': {
                                        mystringpropkey: 'mystringpropval',
                                        mylistpropkey: ['listitem1'],
                                        mystructpropkey: {
                                            myboolpropkey: true,
                                            mynumpropkey: 50,
                                        },
                                    },
                                },
                            }),
                        }),
                    }),
                },
            }),
        });
    });
    test('tree metadata has construct class & version in there', () => {
        // The runtime metadata this test relies on is only available if the most
        // recent compile has happened using 'jsii', as the jsii compiler injects
        // this metadata.
        //
        // If the most recent compile was using 'tsc', the metadata will not have
        // been injected, and the test will fail.
        //
        // People may choose to run `tsc` directly (instead of `yarn build` for
        // example) to escape the additional TSC compilation time that is necessary
        // to run 'eslint', or the additional time that 'jsii' needs to analyze the
        // type system), this test is allowed to fail if we're not running on CI.
        //
        // If the compile of this library has been done using `tsc`, the runtime
        // information will always find `constructs.Construct` as the construct
        // identifier, since `constructs` will have had a release build done using `jsii`.
        //
        // If this test is running on CodeBuild, we will require that the more specific
        // class names are found. If this test is NOT running on CodeBuild, we will
        // allow the specific class name (for a 'jsii' build) or the generic
        // 'constructs.Construct' class name (for a 'tsc' build).
        const app = new index_1.App();
        const stack = new index_1.Stack(app, 'mystack');
        new index_1.CfnResource(stack, 'myconstruct', { type: 'Aws::Some::Resource' });
        const assembly = app.synth();
        const treeArtifact = assembly.tree();
        expect(treeArtifact).toBeDefined();
        const codeBuild = !!process.env.CODEBUILD_BUILD_ID;
        expect(readJson(assembly.directory, treeArtifact.file)).toEqual({
            version: 'tree-0.1',
            tree: expect.objectContaining({
                children: expect.objectContaining({
                    mystack: expect.objectContaining({
                        constructInfo: {
                            fqn: expect.stringMatching(codeBuild ? /\bStack$/ : /\bStack$|^constructs.Construct$/),
                            version: expect.any(String),
                        },
                        children: expect.objectContaining({
                            myconstruct: expect.objectContaining({
                                constructInfo: {
                                    fqn: expect.stringMatching(codeBuild ? /\bCfnResource$/ : /\bCfnResource$|^constructs.Construct$/),
                                    version: expect.any(String),
                                },
                            }),
                        }),
                    }),
                }),
            }),
        });
    });
    test('token resolution & cfn parameter', () => {
        const app = new index_1.App();
        const stack = new index_1.Stack(app, 'mystack');
        const cfnparam = new index_1.CfnParameter(stack, 'mycfnparam');
        class MyCfnResource extends AbstractCfnResource {
            get cfnProperties() {
                return {
                    lazykey: index_1.Lazy.string({ produce: () => 'LazyResolved!' }),
                    cfnparamkey: cfnparam,
                };
            }
        }
        new MyCfnResource(stack, 'mycfnresource');
        const assembly = app.synth();
        const treeArtifact = assembly.tree();
        expect(treeArtifact).toBeDefined();
        expect(readJson(assembly.directory, treeArtifact.file)).toEqual({
            version: 'tree-0.1',
            tree: expect.objectContaining({
                id: 'App',
                path: '',
                children: {
                    Tree: expect.objectContaining({
                        id: 'Tree',
                        path: 'Tree',
                    }),
                    mystack: expect.objectContaining({
                        id: 'mystack',
                        path: 'mystack',
                        children: expect.objectContaining({
                            mycfnparam: expect.objectContaining({
                                id: 'mycfnparam',
                                path: 'mystack/mycfnparam',
                            }),
                            mycfnresource: expect.objectContaining({
                                id: 'mycfnresource',
                                path: 'mystack/mycfnresource',
                                attributes: {
                                    'aws:cdk:cloudformation:type': 'CDK::UnitTest::MyCfnResource',
                                    'aws:cdk:cloudformation:props': {
                                        lazykey: 'LazyResolved!',
                                        cfnparamkey: { Ref: 'mycfnparam' },
                                    },
                                },
                            }),
                        }),
                    }),
                },
            }),
        });
    });
    test('cross-stack tokens', () => {
        class MyFirstResource extends AbstractCfnResource {
            constructor(scope, id) {
                super(scope, id);
                this.lazykey = index_1.Lazy.string({ produce: () => 'LazyResolved!' });
            }
            get cfnProperties() {
                return {
                    lazykey: this.lazykey,
                };
            }
        }
        class MySecondResource extends AbstractCfnResource {
            constructor(scope, id, myprop) {
                super(scope, id);
                this.myprop = myprop;
            }
            get cfnProperties() {
                return {
                    myprop: this.myprop,
                };
            }
        }
        const app = new index_1.App();
        const firststack = new index_1.Stack(app, 'myfirststack');
        const firstres = new MyFirstResource(firststack, 'myfirstresource');
        const secondstack = new index_1.Stack(app, 'mysecondstack');
        new MySecondResource(secondstack, 'mysecondresource', firstres.lazykey);
        const assembly = app.synth();
        const treeArtifact = assembly.tree();
        expect(treeArtifact).toBeDefined();
        expect(readJson(assembly.directory, treeArtifact.file)).toEqual({
            version: 'tree-0.1',
            tree: expect.objectContaining({
                id: 'App',
                path: '',
                children: {
                    Tree: expect.objectContaining({
                        id: 'Tree',
                        path: 'Tree',
                    }),
                    myfirststack: expect.objectContaining({
                        id: 'myfirststack',
                        path: 'myfirststack',
                        children: expect.objectContaining({
                            myfirstresource: expect.objectContaining({
                                id: 'myfirstresource',
                                path: 'myfirststack/myfirstresource',
                                attributes: {
                                    'aws:cdk:cloudformation:type': 'CDK::UnitTest::MyCfnResource',
                                    'aws:cdk:cloudformation:props': {
                                        lazykey: 'LazyResolved!',
                                    },
                                },
                            }),
                        }),
                    }),
                    mysecondstack: expect.objectContaining({
                        id: 'mysecondstack',
                        path: 'mysecondstack',
                        children: expect.objectContaining({
                            mysecondresource: expect.objectContaining({
                                id: 'mysecondresource',
                                path: 'mysecondstack/mysecondresource',
                                attributes: {
                                    'aws:cdk:cloudformation:type': 'CDK::UnitTest::MyCfnResource',
                                    'aws:cdk:cloudformation:props': {
                                        myprop: 'LazyResolved!',
                                    },
                                },
                            }),
                        }),
                    }),
                },
            }),
        });
    });
    test('tree metadata can be disabled', () => {
        // GIVEN
        const app = new index_1.App({
            treeMetadata: false,
        });
        // WHEN
        const stack = new index_1.Stack(app, 'mystack');
        new constructs_1.Construct(stack, 'myconstruct');
        const assembly = app.synth();
        const treeArtifact = assembly.tree();
        // THEN
        expect(treeArtifact).not.toBeDefined();
    });
    test('failing nodes', () => {
        class MyCfnResource extends index_1.CfnResource {
            inspect(_) {
                throw new Error('Forcing an inspect error');
            }
        }
        const app = new index_1.App();
        const stack = new index_1.Stack(app, 'mystack');
        new MyCfnResource(stack, 'mycfnresource', {
            type: 'CDK::UnitTest::MyCfnResource',
        });
        const assembly = app.synth();
        const treeArtifact = assembly.tree();
        expect(treeArtifact).toBeDefined();
        const treenode = app.node.findChild('Tree');
        const warn = treenode.node.metadata.find((md) => {
            return md.type === cxschema.ArtifactMetadataEntryType.WARN
                && /Forcing an inspect error/.test(md.data)
                && /mycfnresource/.test(md.data);
        });
        expect(warn).toBeDefined();
        // assert that the rest of the construct tree is rendered
        expect(readJson(assembly.directory, treeArtifact.file)).toEqual({
            version: 'tree-0.1',
            tree: expect.objectContaining({
                id: 'App',
                path: '',
                children: {
                    Tree: expect.objectContaining({
                        id: 'Tree',
                        path: 'Tree',
                    }),
                    mystack: expect.objectContaining({
                        id: 'mystack',
                        path: 'mystack',
                    }),
                },
            }),
        });
    });
});
function readJson(outdir, file) {
    return JSON.parse(fs.readFileSync(path.join(outdir, file), 'utf-8'));
}
//# sourceMappingURL=data:application/json;base64,