"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
describe('size', () => {
    test('negative amount', () => {
        expect(() => lib_1.Size.kibibytes(-1)).toThrow(/negative/);
    });
    test('unresolved amount', () => {
        const stack = new lib_1.Stack();
        const lazySize = lib_1.Size.kibibytes(lib_1.Token.asNumber({ resolve: () => 1337 }));
        expect(stack.resolve(lazySize.toKibibytes())).toEqual(1337);
        expect(() => stack.resolve(lazySize.toMebibytes())).toThrow(/Size must be specified as 'Size.mebibytes\(\)' here/);
    });
    test('Size in bytes', () => {
        const size = lib_1.Size.bytes(1099511627776);
        expect(size.toBytes()).toEqual(1099511627776);
        expect(size.toKibibytes()).toEqual(1073741824);
        expect(size.toMebibytes()).toEqual(1048576);
        expect(size.toGibibytes()).toEqual(1024);
        expect(size.toTebibytes()).toEqual(1);
        expect(() => size.toPebibytes()).toThrow(/'1099511627776 bytes' cannot be converted into a whole number/);
        floatEqual(size.toPebibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 1099511627776 / (1024 * 1024 * 1024 * 1024 * 1024));
        expect(lib_1.Size.bytes(4 * 1024 * 1024 * 1024).toGibibytes()).toEqual(4);
    });
    test('Size in kibibytes', () => {
        const size = lib_1.Size.kibibytes(4294967296);
        expect(size.toKibibytes()).toEqual(4294967296);
        expect(size.toMebibytes()).toEqual(4194304);
        expect(size.toGibibytes()).toEqual(4096);
        expect(size.toTebibytes()).toEqual(4);
        expect(() => size.toPebibytes()).toThrow(/'4294967296 kibibytes' cannot be converted into a whole number/);
        floatEqual(size.toPebibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 4294967296 / (1024 * 1024 * 1024 * 1024));
        expect(lib_1.Size.kibibytes(4 * 1024 * 1024).toGibibytes()).toEqual(4);
    });
    test('Size in mebibytes', () => {
        const size = lib_1.Size.mebibytes(4194304);
        expect(size.toKibibytes()).toEqual(4294967296);
        expect(size.toMebibytes()).toEqual(4194304);
        expect(size.toGibibytes()).toEqual(4096);
        expect(size.toTebibytes()).toEqual(4);
        expect(() => size.toPebibytes()).toThrow(/'4194304 mebibytes' cannot be converted into a whole number/);
        floatEqual(size.toPebibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 4194304 / (1024 * 1024 * 1024));
        expect(lib_1.Size.mebibytes(4 * 1024).toGibibytes()).toEqual(4);
    });
    test('Size in gibibyte', () => {
        const size = lib_1.Size.gibibytes(5);
        expect(size.toKibibytes()).toEqual(5242880);
        expect(size.toMebibytes()).toEqual(5120);
        expect(size.toGibibytes()).toEqual(5);
        expect(() => size.toTebibytes()).toThrow(/'5 gibibytes' cannot be converted into a whole number/);
        floatEqual(size.toTebibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 5 / 1024);
        expect(() => size.toPebibytes()).toThrow(/'5 gibibytes' cannot be converted into a whole number/);
        floatEqual(size.toPebibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 5 / (1024 * 1024));
        expect(lib_1.Size.gibibytes(4096).toTebibytes()).toEqual(4);
    });
    test('Size in tebibyte', () => {
        const size = lib_1.Size.tebibytes(5);
        expect(size.toKibibytes()).toEqual(5368709120);
        expect(size.toMebibytes()).toEqual(5242880);
        expect(size.toGibibytes()).toEqual(5120);
        expect(size.toTebibytes()).toEqual(5);
        expect(() => size.toPebibytes()).toThrow(/'5 tebibytes' cannot be converted into a whole number/);
        floatEqual(size.toPebibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 5 / 1024);
        expect(lib_1.Size.tebibytes(4096).toPebibytes()).toEqual(4);
    });
    test('Size in pebibytes', () => {
        const size = lib_1.Size.pebibytes(5);
        expect(size.toKibibytes()).toEqual(5497558138880);
        expect(size.toMebibytes()).toEqual(5368709120);
        expect(size.toGibibytes()).toEqual(5242880);
        expect(size.toTebibytes()).toEqual(5120);
        expect(size.toPebibytes()).toEqual(5);
    });
    test('rounding behavior', () => {
        const size = lib_1.Size.mebibytes(5200);
        expect(() => size.toGibibytes()).toThrow(/cannot be converted into a whole number/);
        expect(() => size.toGibibytes({ rounding: lib_1.SizeRoundingBehavior.FAIL })).toThrow(/cannot be converted into a whole number/);
        expect(size.toGibibytes({ rounding: lib_1.SizeRoundingBehavior.FLOOR })).toEqual(5);
        expect(size.toTebibytes({ rounding: lib_1.SizeRoundingBehavior.FLOOR })).toEqual(0);
        floatEqual(size.toKibibytes({ rounding: lib_1.SizeRoundingBehavior.FLOOR }), 5324800);
        expect(size.toGibibytes({ rounding: lib_1.SizeRoundingBehavior.NONE })).toEqual(5.078125);
        expect(size.toTebibytes({ rounding: lib_1.SizeRoundingBehavior.NONE })).toEqual(5200 / (1024 * 1024));
        expect(size.toKibibytes({ rounding: lib_1.SizeRoundingBehavior.NONE })).toEqual(5324800);
    });
    test('size is unresolved', () => {
        const lazySize = lib_1.Size.pebibytes(lib_1.Lazy.number({ produce: () => 10 }));
        expect(lazySize.isUnresolved()).toEqual(true);
        expect(lib_1.Size.mebibytes(10).isUnresolved()).toEqual(false);
    });
});
function floatEqual(actual, expected) {
    expect(
    // Floats are subject to rounding errors up to Number.ESPILON
    actual >= expected - Number.EPSILON && actual <= expected + Number.EPSILON).toEqual(true);
}
//# sourceMappingURL=data:application/json;base64,