"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const cxschema = require("../../cloud-assembly-schema");
const cxapi = require("../../cx-api");
const constructs_1 = require("constructs");
const cdk = require("../lib");
const synthesis_1 = require("../lib/private/synthesis");
function createModernApp() {
    return new cdk.App();
}
describe('synthesis', () => {
    test('synthesis with an empty app', () => {
        // GIVEN
        const app = createModernApp();
        // WHEN
        const session = app.synth();
        // THEN
        expect(app.synth()).toEqual(session); // same session if we synth() again
        expect(list(session.directory)).toEqual(['cdk.out', 'manifest.json', 'tree.json']);
        expect(readJson(session.directory, 'manifest.json').artifacts).toEqual({
            Tree: {
                type: 'cdk:tree',
                properties: { file: 'tree.json' },
            },
        });
        expect(readJson(session.directory, 'tree.json')).toEqual({
            version: 'tree-0.1',
            tree: expect.objectContaining({
                id: 'App',
                path: '',
                children: {
                    Tree: expect.objectContaining({ id: 'Tree', path: 'Tree' }),
                },
            }),
        });
    });
    test('synthesis respects disabling tree metadata', () => {
        const app = new cdk.App({
            treeMetadata: false,
        });
        const assembly = app.synth();
        expect(list(assembly.directory)).toEqual(['cdk.out', 'manifest.json']);
    });
    test('synthesis respects disabling logicalId metadata', () => {
        const app = new cdk.App({
            context: {
                [cxapi.DISABLE_LOGICAL_ID_METADATA]: true,
            },
        });
        const stack = new cdk.Stack(app, 'one-stack');
        new cdk.CfnResource(stack, 'MagicResource', { type: 'Resource::Type' });
        // WHEN
        const session = app.synth();
        // THEN
        expect(Object.keys((session.manifest.artifacts ?? {})['one-stack'])).not.toContain('metadata');
    });
    test('synthesis respects disabling logicalId metadata, and does not disable other metadata', () => {
        const app = new cdk.App({
            context: {
                [cxapi.DISABLE_LOGICAL_ID_METADATA]: true,
            },
            stackTraces: false,
        });
        const stack = new cdk.Stack(app, 'one-stack', { tags: { boomTag: 'BOOM' } });
        new cdk.CfnResource(stack, 'MagicResource', { type: 'Resource::Type' });
        // WHEN
        const session = app.synth();
        // THEN
        expect(session.manifest.artifacts?.['one-stack'].metadata).toEqual({
            '/one-stack': [
                {
                    type: 'aws:cdk:stack-tags',
                    data: [
                        {
                            key: 'boomTag',
                            value: 'BOOM',
                        },
                    ],
                },
            ],
            // no logicalId entry
        });
    });
    test('single empty stack', () => {
        // GIVEN
        const app = createModernApp();
        new cdk.Stack(app, 'one-stack');
        // WHEN
        const session = app.synth();
        // THEN
        expect(list(session.directory).includes('one-stack.template.json')).toEqual(true);
    });
    test('some random construct implements "synthesize"', () => {
        // GIVEN
        const app = createModernApp();
        const stack = new cdk.Stack(app, 'one-stack');
        class MyConstruct extends constructs_1.Construct {
            constructor(scope, id) {
                super(scope, id);
                cdk.attachCustomSynthesis(this, {
                    onSynthesize(s) {
                        writeJson(s.assembly.outdir, 'foo.json', { bar: 123 });
                        s.assembly.addArtifact('my-random-construct', {
                            type: cxschema.ArtifactType.AWS_CLOUDFORMATION_STACK,
                            environment: 'aws://12345/bar',
                            properties: {
                                templateFile: 'foo.json',
                            },
                        });
                    },
                });
            }
        }
        new MyConstruct(stack, 'MyConstruct');
        // WHEN
        const session = app.synth();
        // THEN
        expect(list(session.directory).includes('one-stack.template.json')).toEqual(true);
        expect(list(session.directory).includes('foo.json')).toEqual(true);
        expect(readJson(session.directory, 'foo.json')).toEqual({ bar: 123 });
        expect(session.manifest).toEqual({
            version: cxschema.Manifest.version(),
            artifacts: expect.objectContaining({
                'Tree': {
                    type: 'cdk:tree',
                    properties: { file: 'tree.json' },
                },
                'my-random-construct': {
                    type: 'aws:cloudformation:stack',
                    environment: 'aws://12345/bar',
                    properties: { templateFile: 'foo.json' },
                },
                'one-stack': expect.objectContaining({
                    type: 'aws:cloudformation:stack',
                    environment: 'aws://unknown-account/unknown-region',
                    properties: expect.objectContaining({
                        templateFile: 'one-stack.template.json',
                        validateOnSynth: false,
                    }),
                    displayName: 'one-stack',
                }),
            }),
        });
    });
    test('random construct uses addCustomSynthesis', () => {
        // GIVEN
        const app = createModernApp();
        const stack = new cdk.Stack(app, 'one-stack');
        class MyConstruct extends constructs_1.Construct {
            constructor(scope, id) {
                super(scope, id);
                cdk.attachCustomSynthesis(this, {
                    onSynthesize(s) {
                        writeJson(s.assembly.outdir, 'foo.json', { bar: 123 });
                        s.assembly.addArtifact('my-random-construct', {
                            type: cxschema.ArtifactType.AWS_CLOUDFORMATION_STACK,
                            environment: 'aws://12345/bar',
                            properties: {
                                templateFile: 'foo.json',
                            },
                        });
                    },
                });
            }
        }
        new MyConstruct(stack, 'MyConstruct');
        // WHEN
        const session = app.synth();
        // THEN
        expect(list(session.directory).includes('one-stack.template.json')).toEqual(true);
        expect(list(session.directory).includes('foo.json')).toEqual(true);
        expect(readJson(session.directory, 'foo.json')).toEqual({ bar: 123 });
        expect(session.manifest).toEqual({
            version: cxschema.Manifest.version(),
            artifacts: expect.objectContaining({
                'Tree': {
                    type: 'cdk:tree',
                    properties: { file: 'tree.json' },
                },
                'my-random-construct': {
                    type: 'aws:cloudformation:stack',
                    environment: 'aws://12345/bar',
                    properties: { templateFile: 'foo.json' },
                },
                'one-stack': expect.objectContaining({
                    type: 'aws:cloudformation:stack',
                    environment: 'aws://unknown-account/unknown-region',
                    properties: expect.objectContaining({
                        templateFile: 'one-stack.template.json',
                        validateOnSynth: false,
                    }),
                    displayName: 'one-stack',
                }),
            }),
        });
    });
    (0, cdk_build_tools_1.testDeprecated)('it should be possible to synthesize without an app', () => {
        const calls = new Array();
        class SynthesizeMe extends cdk.Stack {
            constructor() {
                super(undefined, 'hey', {
                    synthesizer: new cdk.LegacyStackSynthesizer(),
                });
                this.templateFile = 'hey.json';
                this.node.addValidation({
                    validate: () => {
                        calls.push('validate');
                        return [];
                    },
                });
            }
            _synthesizeTemplate(session) {
                calls.push('synthesize');
                session.assembly.addArtifact('art', {
                    type: cxschema.ArtifactType.AWS_CLOUDFORMATION_STACK,
                    properties: {
                        templateFile: 'hey.json',
                        parameters: {
                            paramId: 'paramValue',
                            paramId2: 'paramValue2',
                        },
                    },
                    environment: 'aws://unknown-account/us-east-1',
                });
                writeJson(session.assembly.outdir, 'hey.json', { hello: 123 });
            }
        }
        const root = new SynthesizeMe();
        const assembly = (0, synthesis_1.synthesize)(root, { outdir: fs.mkdtempSync(path.join(os.tmpdir(), 'outdir')) });
        expect(calls).toEqual(['validate', 'synthesize']);
        const stack = assembly.getStackByName('art');
        expect(stack.template).toEqual({ hello: 123 });
        expect(stack.templateFile).toEqual('hey.json');
        expect(stack.parameters).toEqual({ paramId: 'paramValue', paramId2: 'paramValue2' });
        expect(stack.environment).toEqual({ region: 'us-east-1', account: 'unknown-account', name: 'aws://unknown-account/us-east-1' });
    });
});
function list(outdir) {
    return fs.readdirSync(outdir).sort();
}
function readJson(outdir, file) {
    return JSON.parse(fs.readFileSync(path.join(outdir, file), 'utf-8'));
}
function writeJson(outdir, file, data) {
    fs.writeFileSync(path.join(outdir, file), JSON.stringify(data, undefined, 2));
}
//# sourceMappingURL=data:application/json;base64,