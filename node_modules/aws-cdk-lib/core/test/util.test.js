"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const util_1 = require("../lib/util");
describe('util', () => {
    test('capitalizeResourceProperties capitalizes all keys of an object (recursively) from camelCase to PascalCase', () => {
        const c = new lib_1.Stack();
        expect((0, util_1.capitalizePropertyNames)(c, undefined)).toEqual(undefined);
        expect((0, util_1.capitalizePropertyNames)(c, 12)).toEqual(12);
        expect((0, util_1.capitalizePropertyNames)(c, 'hello')).toEqual('hello');
        expect((0, util_1.capitalizePropertyNames)(c, ['hello', 88])).toEqual(['hello', 88]);
        expect((0, util_1.capitalizePropertyNames)(c, { Hello: 'world', hey: 'dude' })).toEqual({ Hello: 'world', Hey: 'dude' });
        expect((0, util_1.capitalizePropertyNames)(c, [1, 2, { three: 3 }])).toEqual([1, 2, { Three: 3 }]);
        expect((0, util_1.capitalizePropertyNames)(c, { Hello: 'world', recursive: { foo: 123, there: { another: ['hello', { world: 123 }] } } })).toEqual({ Hello: 'world', Recursive: { Foo: 123, There: { Another: ['hello', { World: 123 }] } } });
        // make sure tokens are resolved and result is also capitalized
        expect((0, util_1.capitalizePropertyNames)(c, { hello: { resolve: () => ({ foo: 'bar' }) }, world: new SomeToken() })).toEqual({ Hello: { Foo: 'bar' }, World: 100 });
    });
    describe('ignoreEmpty', () => {
        test('[]', () => {
            const stack = new lib_1.Stack();
            expect(stack.resolve((0, util_1.ignoreEmpty)([]))).toEqual(undefined);
        });
        test('{}', () => {
            const stack = new lib_1.Stack();
            expect(stack.resolve((0, util_1.ignoreEmpty)({}))).toEqual(undefined);
        });
        test('undefined/null', () => {
            const stack = new lib_1.Stack();
            expect(stack.resolve((0, util_1.ignoreEmpty)(undefined))).toEqual(undefined);
            expect(stack.resolve((0, util_1.ignoreEmpty)(null))).toEqual(null);
        });
        test('primitives', () => {
            const stack = new lib_1.Stack();
            expect(stack.resolve((0, util_1.ignoreEmpty)(12))).toEqual(12);
            expect(stack.resolve((0, util_1.ignoreEmpty)('12'))).toEqual('12');
        });
        test('non-empty arrays/objects', () => {
            const stack = new lib_1.Stack();
            expect(stack.resolve((0, util_1.ignoreEmpty)([1, 2, 3, undefined]))).toEqual([1, 2, 3]); // undefined array values is cleaned up by "resolve"
            expect(stack.resolve((0, util_1.ignoreEmpty)({ o: 1, b: 2, j: 3 }))).toEqual({ o: 1, b: 2, j: 3 });
        });
        test('resolve first', () => {
            const stack = new lib_1.Stack();
            expect(stack.resolve((0, util_1.ignoreEmpty)({ xoo: { resolve: () => 123 } }))).toEqual({ xoo: 123 });
            expect(stack.resolve((0, util_1.ignoreEmpty)({ xoo: { resolve: () => undefined } }))).toEqual(undefined);
            expect(stack.resolve((0, util_1.ignoreEmpty)({ xoo: { resolve: () => [] } }))).toEqual({ xoo: [] });
            expect(stack.resolve((0, util_1.ignoreEmpty)({ xoo: { resolve: () => [undefined, undefined] } }))).toEqual({ xoo: [] });
        });
    });
    describe('filterUnderined', () => {
        test('is null-safe (aka treats null and undefined the same)', () => {
            expect((0, util_1.filterUndefined)({ 'a null': null, 'a not null': true })).toEqual({ 'a not null': true });
        });
        test('removes undefined, but leaves the rest', () => {
            expect((0, util_1.filterUndefined)({ 'an undefined': undefined, 'yes': true })).toEqual({ yes: true });
        });
    });
    test('pathToTopLevelStack returns the array of stacks that lead to a stack', () => {
        const a = new lib_1.Stack(undefined, 'a');
        const aa = new Nested(a, 'aa');
        const aaa = new Nested(aa, 'aaa');
        expect(path(aaa)).toEqual(['a', 'aa', 'aaa']);
        expect(path(aa)).toEqual(['a', 'aa']);
        expect(path(a)).toEqual(['a']);
        function path(s) {
            return (0, util_1.pathToTopLevelStack)(s).map(x => x.node.id);
        }
    });
    test('findCommonStack returns the lowest common stack between two stacks or undefined', () => {
        const a = new lib_1.Stack(undefined, 'a');
        const aa = new Nested(a, 'aa');
        const ab = new Nested(a, 'ab');
        const aaa = new Nested(aa, 'aaa');
        const aab = new Nested(aa, 'aab');
        const aba = new Nested(ab, 'aba');
        const b = new lib_1.Stack(undefined, 'b');
        const ba = new Nested(b, 'ba');
        const baa = new Nested(ba, 'baa');
        expect(lca(a, b)).toEqual(undefined);
        expect(lca(aa, ab)).toEqual('a');
        expect(lca(ab, aa)).toEqual('a');
        expect(lca(aa, aba)).toEqual('a');
        expect(lca(aba, aa)).toEqual('a');
        expect(lca(ab, aba)).toEqual('ab');
        expect(lca(aba, ab)).toEqual('ab');
        expect(lca(aba, aba)).toEqual('aba');
        expect(lca(aa, aa)).toEqual('aa');
        expect(lca(a, aaa)).toEqual('a');
        expect(lca(aaa, aab)).toEqual('aa');
        expect(lca(aaa, b)).toEqual(undefined);
        expect(lca(aaa, ba)).toEqual(undefined);
        expect(lca(baa, ba)).toEqual('ba');
        function lca(s1, s2) {
            const res = (0, util_1.findLastCommonElement)((0, util_1.pathToTopLevelStack)(s1), (0, util_1.pathToTopLevelStack)(s2));
            if (!res) {
                return undefined;
            }
            return res.node.id;
        }
    });
});
class SomeToken {
    constructor() {
        this.foo = 60;
        this.goo = 40;
    }
    resolve() {
        return this.foo + this.goo;
    }
}
class Nested extends lib_1.Stack {
    constructor(scope, id) {
        const resource = new lib_1.CfnResource(scope, `${id}+NestedStackResource`, { type: 'AWS::CloudFormation::Stack' });
        super(scope, id);
        this.nestedStackResource = resource;
    }
}
//# sourceMappingURL=data:application/json;base64,