"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constructs_1 = require("constructs");
const core = require("../../lib");
const lib_1 = require("../../lib");
const construct_tree_1 = require("../../lib/validation/private/construct-tree");
const trace_1 = require("../../lib/validation/private/trace");
beforeEach(() => {
    jest.spyOn(console, 'log').mockImplementation(() => { return true; });
});
afterEach(() => {
    jest.resetAllMocks();
});
describe('ReportTrace', () => {
    test('trace includes location when CDK_DEBUG=true', () => {
        // GIVEN
        try {
            process.env.CDK_DEBUG = 'true';
            const app = new core.App({
                treeMetadata: true,
            });
            const stack = new MyStack(app, 'MyStack');
            app.synth();
            const tree = new construct_tree_1.ConstructTree(app);
            // WHEN
            const trace = new trace_1.ReportTrace(tree);
            const formatted = trace.formatJson(stack.constructPath);
            // THEN
            expect(formatted).toEqual({
                id: 'MyStack',
                construct: expect.stringMatching(/.*Stack/),
                libraryVersion: expect.any(String),
                location: expect.stringMatching(/Object.<anonymous> \(.*\/trace.test.ts:[0-9]+:[0-9]+\)/),
                path: 'MyStack',
                child: {
                    id: 'MyConstruct',
                    construct: 'constructs.Construct',
                    libraryVersion: expect.any(String),
                    location: expect.stringMatching(/new MyStack \(.*\/trace.test.ts:[0-9]+:[0-9]+\)/),
                    path: 'MyStack/MyConstruct',
                    child: {
                        id: 'MyL2Resource',
                        construct: expect.stringMatching(/Resource/),
                        libraryVersion: expect.any(String),
                        location: expect.stringMatching(/new MyConstruct \(.*\/trace.test.ts:[0-9]+:[0-9]+\)/),
                        path: 'MyStack/MyConstruct/MyL2Resource',
                        child: {
                            id: 'Resource',
                            construct: expect.stringMatching(/CfnResource/),
                            libraryVersion: expect.any(String),
                            location: expect.stringMatching(/new MyL2Resource \(.*\/trace.test.ts:[0-9]+:[0-9]+\)/),
                            path: 'MyStack/MyConstruct/MyL2Resource/Resource',
                        },
                    },
                },
            });
        }
        finally {
            process.env.CDK_DEBUG = '';
        }
    });
    test('trace does not include location when CDK_DEBUG=false', () => {
        // GIVEN
        const app = new core.App({
            treeMetadata: true,
        });
        const stack = new MyStack(app, 'MyStack');
        app.synth();
        const tree = new construct_tree_1.ConstructTree(app);
        // WHEN
        const trace = new trace_1.ReportTrace(tree);
        const formatted = trace.formatJson(stack.constructPath);
        // THEN
        expect(formatted).toEqual({
            id: 'MyStack',
            construct: expect.stringMatching(/.*Stack/),
            libraryVersion: expect.any(String),
            location: "Run with '--debug' to include location info",
            path: 'MyStack',
            child: {
                id: 'MyConstruct',
                construct: 'constructs.Construct',
                libraryVersion: expect.any(String),
                location: "Run with '--debug' to include location info",
                path: 'MyStack/MyConstruct',
                child: {
                    id: 'MyL2Resource',
                    construct: expect.stringMatching(/Resource/),
                    libraryVersion: expect.any(String),
                    location: "Run with '--debug' to include location info",
                    path: 'MyStack/MyConstruct/MyL2Resource',
                    child: {
                        id: 'Resource',
                        construct: expect.stringMatching(/CfnResource/),
                        libraryVersion: expect.any(String),
                        location: "Run with '--debug' to include location info",
                        path: 'MyStack/MyConstruct/MyL2Resource/Resource',
                    },
                },
            },
        });
    });
});
class MyL2Resource extends lib_1.Resource {
    constructor(scope, id) {
        super(scope, id);
        const resource = new core.CfnResource(this, 'Resource', {
            type: 'AWS::CDK::TestResource',
            properties: {
                testProp1: 'testValue',
            },
        });
        this.constructPath = resource.node.path;
    }
}
class MyConstruct extends constructs_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        const myResource = new MyL2Resource(this, 'MyL2Resource');
        this.constructPath = myResource.constructPath;
    }
}
class MyStack extends core.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const myConstruct = new MyConstruct(this, 'MyConstruct');
        this.constructPath = myConstruct.constructPath;
    }
}
//# sourceMappingURL=data:application/json;base64,