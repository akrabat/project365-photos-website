"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const outbound_1 = require("../../lib/provider-framework/runtime/outbound");
jest.mock('aws-sdk', () => {
    return {
        Lambda: class {
            invoke() {
                return { promise: () => mockInvoke() };
            }
            waitFor() {
                return { promise: () => mockWaitFor() };
            }
        },
    };
});
let mockInvoke;
const req = {
    FunctionName: 'Whatever',
    Payload: {
        IsThisATest: 'Yes, this is a test',
        AreYouSure: 'Yes, I am sure',
    },
};
let invokeCount = 0;
let expectedFunctionStates = [];
let receivedFunctionStates = [];
const mockWaitFor = async () => {
    let state = expectedFunctionStates.pop();
    while (state !== 'Active') {
        receivedFunctionStates.push(state);
        // If it goes back to inactive it's failed
        if (state === 'Inactive')
            throw new Error('Not today');
        // If failed... it's failed
        if (state === 'Failed')
            throw new Error('Broken');
        // If pending, continue the loop, no other valid options
        if (state !== 'Pending')
            throw new Error('State is confused');
        state = expectedFunctionStates.pop();
    }
    receivedFunctionStates.push(state);
    return {
        Configuration: {
            State: 'Active',
        },
    };
};
describe('invokeFunction tests', () => {
    afterEach(() => {
        invokeCount = 0;
        expectedFunctionStates = [];
        receivedFunctionStates = [];
    });
    // Success cases
    test('Inactive function that reactivates does not throw error', async () => {
        mockInvoke = async () => {
            if (invokeCount == 0) {
                invokeCount++;
                throw new Error('Better luck next time');
            }
            invokeCount++;
            return { Payload: req.Payload };
        };
        expectedFunctionStates.push('Active');
        expectedFunctionStates.push('Pending');
        expect(await (0, outbound_1.invokeFunction)(req)).toEqual({ Payload: req.Payload });
        expect(invokeCount).toEqual(2);
        expect(receivedFunctionStates).toEqual(['Pending', 'Active']);
    });
    test('Active function does not run waitFor or retry invoke', async () => {
        mockInvoke = async () => {
            if (invokeCount == 1) {
                invokeCount++;
                throw new Error('This should not happen in this test');
            }
            invokeCount++;
            return { Payload: req.Payload };
        };
        expectedFunctionStates.push('Active');
        expect(await (0, outbound_1.invokeFunction)(req)).toEqual({ Payload: req.Payload });
        expect(invokeCount).toEqual(1);
        expect(receivedFunctionStates).toEqual([]);
    });
    // Failure cases
    test('Inactive function that goes back to inactive throws error', async () => {
        mockInvoke = async () => {
            if (invokeCount == 0) {
                invokeCount++;
                throw new Error('Better luck next time');
            }
            invokeCount++;
            return { Payload: req.Payload };
        };
        expectedFunctionStates.push('Inactive');
        expectedFunctionStates.push('Pending');
        expectedFunctionStates.push('Pending');
        await expect((0, outbound_1.invokeFunction)(req)).rejects.toThrowError(new Error('Not today'));
        expect(invokeCount).toEqual(1);
        expect(receivedFunctionStates).toEqual(['Pending', 'Pending', 'Inactive']);
    });
    test('Inactive function that goes to failed throws error', async () => {
        mockInvoke = async () => {
            if (invokeCount == 0) {
                invokeCount++;
                throw new Error('Better luck next time');
            }
            invokeCount++;
            return { Payload: req.Payload };
        };
        expectedFunctionStates.push('Failed');
        expectedFunctionStates.push('Pending');
        expectedFunctionStates.push('Pending');
        await expect((0, outbound_1.invokeFunction)(req)).rejects.toThrowError(new Error('Broken'));
        expect(invokeCount).toEqual(1);
        expect(receivedFunctionStates).toEqual(['Pending', 'Pending', 'Failed']);
    });
    test('Inactive function that returns other value throws error', async () => {
        mockInvoke = async () => {
            if (invokeCount == 0) {
                invokeCount++;
                throw new Error('Better luck next time');
            }
            invokeCount++;
            return { Payload: req.Payload };
        };
        expectedFunctionStates.push('NewFunctionWhoDis');
        expectedFunctionStates.push('Pending');
        expectedFunctionStates.push('Pending');
        await expect((0, outbound_1.invokeFunction)(req)).rejects.toThrowError(new Error('State is confused'));
        expect(invokeCount).toEqual(1);
        expect(receivedFunctionStates).toEqual(['Pending', 'Pending', 'NewFunctionWhoDis']);
    });
    test('Wait for stops on terminal responses', async () => {
        mockInvoke = async () => {
            if (invokeCount == 0) {
                invokeCount++;
                throw new Error('Better luck next time');
            }
            invokeCount++;
            return { Payload: req.Payload };
        };
        expectedFunctionStates.push('SomethingElse');
        expectedFunctionStates.push('Pending');
        expectedFunctionStates.push('Inactive');
        expectedFunctionStates.push('Pending');
        expectedFunctionStates.push('Pending');
        await expect((0, outbound_1.invokeFunction)(req)).rejects.toThrowError(new Error('Not today'));
        expect(invokeCount).toEqual(1);
        expect(receivedFunctionStates).toEqual(['Pending', 'Pending', 'Inactive']);
    });
});
//# sourceMappingURL=data:application/json;base64,