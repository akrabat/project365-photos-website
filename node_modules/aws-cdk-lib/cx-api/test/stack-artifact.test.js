"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const cxschema = require("../../cloud-assembly-schema");
const util_1 = require("./util");
const cxapi = require("../lib");
const stackBase = {
    type: cxschema.ArtifactType.AWS_CLOUDFORMATION_STACK,
    environment: 'aws://1222344/us-east-1',
    properties: {
        templateFile: 'bla.json',
    },
};
let builder;
beforeEach(() => {
    builder = new cxapi.CloudAssemblyBuilder();
});
afterEach(() => {
    (0, util_1.rimraf)(builder.outdir);
});
test('read tags from artifact properties', () => {
    // GIVEN
    builder.addArtifact('Stack', {
        ...stackBase,
        properties: {
            ...stackBase.properties,
            tags: {
                foo: 'bar',
            },
        },
    });
    // WHEN
    const assembly = builder.buildAssembly();
    // THEN
    expect(assembly.getStackByName('Stack').tags).toEqual({ foo: 'bar' });
});
test('stack tags get uppercased when written to Cloud Assembly', () => {
    // Backwards compatibility test
    // GIVEN
    builder.addArtifact('Stack', {
        ...stackBase,
        metadata: {
            '/Stack': [
                {
                    type: 'aws:cdk:stack-tags',
                    data: [{ key: 'foo', value: 'bar' }],
                },
            ],
        },
    });
    // WHEN
    const assembly = builder.buildAssembly();
    // THEN
    const manifestStructure = JSON.parse(fs.readFileSync(path.join(assembly.directory, 'manifest.json'), { encoding: 'utf-8' }));
    expect(manifestStructure.artifacts.Stack.metadata['/Stack']).toEqual([
        {
            type: 'aws:cdk:stack-tags',
            data: [
                {
                    // Note: uppercase due to historical accident
                    Key: 'foo',
                    Value: 'bar',
                },
            ],
        },
    ]);
});
test('already uppercased stack tags get left alone', () => {
    // Backwards compatibility test
    // GIVEN
    builder.addArtifact('Stack', {
        ...stackBase,
        metadata: {
            '/Stack': [
                {
                    type: 'aws:cdk:stack-tags',
                    data: [{ Key: 'foo', Value: 'bar' }],
                },
            ],
        },
    });
    // WHEN
    const assembly = builder.buildAssembly();
    // THEN
    const manifestStructure = JSON.parse(fs.readFileSync(path.join(assembly.directory, 'manifest.json'), { encoding: 'utf-8' }));
    expect(manifestStructure.artifacts.Stack.metadata['/Stack']).toEqual([
        {
            type: 'aws:cdk:stack-tags',
            data: [
                {
                    // Note: uppercase due to historical accident
                    Key: 'foo',
                    Value: 'bar',
                },
            ],
        },
    ]);
});
test('read tags from stack metadata', () => {
    // Backwards compatibility test
    // GIVEN
    builder.addArtifact('Stack', {
        ...stackBase,
        metadata: {
            '/Stack': [
                {
                    type: 'aws:cdk:stack-tags',
                    data: [{ key: 'foo', value: 'bar' }],
                },
            ],
        },
    });
    // WHEN
    const assembly = builder.buildAssembly();
    // THEN
    expect(assembly.getStackByName('Stack').tags).toEqual({ foo: 'bar' });
});
test('user friendly id is the assembly display name', () => {
    // GIVEN
    builder.addArtifact('Stack', {
        ...stackBase,
        displayName: 'some/path/to/the/stack',
    });
    // WHEN
    const assembly = builder.buildAssembly();
    // THEN
    expect(assembly.getStackByName('Stack').hierarchicalId).toEqual('some/path/to/the/stack');
});
test('user friendly id is the id itself if no display name is given', () => {
    // GIVEN
    builder.addArtifact('Stack', {
        ...stackBase,
    });
    // WHEN
    const assembly = builder.buildAssembly();
    // THEN
    expect(assembly.getStackByName('Stack').hierarchicalId).toEqual('Stack');
});
//# sourceMappingURL=data:application/json;base64,