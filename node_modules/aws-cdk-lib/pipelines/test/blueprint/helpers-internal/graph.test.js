"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
const javascript_1 = require("../../../lib/private/javascript");
test('"uniqueId" renders a graph-wide unique id for each node', () => {
    const g = (0, util_1.mkGraph)('MyGraph', G => {
        G.graph('g1', [], G1 => {
            G1.node('n1');
            G1.node('n2');
            G1.graph('g2', [], G2 => {
                G2.node('n3');
            });
        });
        G.node('n4');
    });
    expect(Array.from((0, javascript_1.flatten)(g.sortedLeaves())).map(n => n.uniqueId)).toStrictEqual([
        'g1-n1',
        'g1-n2',
        'g1-g2-n3',
        'n4',
    ]);
});
test('"allDeps" combines node deps and parent deps', () => {
    let n4;
    (0, util_1.mkGraph)('MyGraph', G => {
        G.graph('g1', [], G1 => {
            G1.node('n1');
            const n2 = G1.node('n2');
            G1.graph('g2', [n2], G2 => {
                const n3 = G2.node('n3');
                n4 = G2.node('n4', [n3]);
            });
        });
    });
    expect(n4.allDeps.map(x => x.uniqueId)).toStrictEqual(['g1-g2-n3', 'g1-n2']);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGgudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdyYXBoLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBaUM7QUFFakMsZ0VBQTBEO0FBRzFELElBQUksQ0FBQyx5REFBeUQsRUFBRSxHQUFHLEVBQUU7SUFDbkUsTUFBTSxDQUFDLEdBQUcsSUFBQSxjQUFPLEVBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFO1FBQy9CLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUNyQixFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2QsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDdEIsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNmLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBQSxvQkFBTyxFQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQy9FLE9BQU87UUFDUCxPQUFPO1FBQ1AsVUFBVTtRQUNWLElBQUk7S0FDTCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyw4Q0FBOEMsRUFBRSxHQUFHLEVBQUU7SUFDeEQsSUFBSSxFQUFPLENBQUM7SUFDWixJQUFBLGNBQU8sRUFBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUU7UUFDckIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3JCLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDZCxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ3hCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3pCLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFFLEVBQXFCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ25HLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWtHcmFwaCB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBHcmFwaE5vZGUgfSBmcm9tICcuLi8uLi8uLi9saWIvaGVscGVycy1pbnRlcm5hbCc7XG5pbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnLi4vLi4vLi4vbGliL3ByaXZhdGUvamF2YXNjcmlwdCc7XG5cblxudGVzdCgnXCJ1bmlxdWVJZFwiIHJlbmRlcnMgYSBncmFwaC13aWRlIHVuaXF1ZSBpZCBmb3IgZWFjaCBub2RlJywgKCkgPT4ge1xuICBjb25zdCBnID0gbWtHcmFwaCgnTXlHcmFwaCcsIEcgPT4ge1xuICAgIEcuZ3JhcGgoJ2cxJywgW10sIEcxID0+IHtcbiAgICAgIEcxLm5vZGUoJ24xJyk7XG4gICAgICBHMS5ub2RlKCduMicpO1xuICAgICAgRzEuZ3JhcGgoJ2cyJywgW10sIEcyID0+IHtcbiAgICAgICAgRzIubm9kZSgnbjMnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIEcubm9kZSgnbjQnKTtcbiAgfSk7XG5cbiAgZXhwZWN0KEFycmF5LmZyb20oZmxhdHRlbihnLnNvcnRlZExlYXZlcygpKSkubWFwKG4gPT4gbi51bmlxdWVJZCkpLnRvU3RyaWN0RXF1YWwoW1xuICAgICdnMS1uMScsXG4gICAgJ2cxLW4yJyxcbiAgICAnZzEtZzItbjMnLFxuICAgICduNCcsXG4gIF0pO1xufSk7XG5cbnRlc3QoJ1wiYWxsRGVwc1wiIGNvbWJpbmVzIG5vZGUgZGVwcyBhbmQgcGFyZW50IGRlcHMnLCAoKSA9PiB7XG4gIGxldCBuNDogYW55O1xuICBta0dyYXBoKCdNeUdyYXBoJywgRyA9PiB7XG4gICAgRy5ncmFwaCgnZzEnLCBbXSwgRzEgPT4ge1xuICAgICAgRzEubm9kZSgnbjEnKTtcbiAgICAgIGNvbnN0IG4yID0gRzEubm9kZSgnbjInKTtcbiAgICAgIEcxLmdyYXBoKCdnMicsIFtuMl0sIEcyID0+IHtcbiAgICAgICAgY29uc3QgbjMgPSBHMi5ub2RlKCduMycpO1xuICAgICAgICBuNCA9IEcyLm5vZGUoJ240JywgW24zXSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZXhwZWN0KChuNCBhcyBHcmFwaE5vZGU8YW55PikuYWxsRGVwcy5tYXAoeCA9PiB4LnVuaXF1ZUlkKSkudG9TdHJpY3RFcXVhbChbJ2cxLWcyLW4zJywgJ2cxLW4yJ10pO1xufSk7Il19