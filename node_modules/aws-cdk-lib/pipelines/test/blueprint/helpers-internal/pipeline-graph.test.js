"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/no-extraneous-dependencies */
const cdkp = require("../../../lib");
const lib_1 = require("../../../lib");
const helpers_internal_1 = require("../../../lib/helpers-internal");
const javascript_1 = require("../../../lib/private/javascript");
const test_app_1 = require("../../testhelpers/test-app");
let app;
beforeEach(() => {
    app = new test_app_1.TestApp();
});
afterEach(() => {
    app.cleanup();
});
describe('blueprint with one stage', () => {
    let blueprint;
    beforeEach(() => {
        blueprint = new Blueprint(app, 'Bp', {
            synth: new cdkp.ShellStep('Synth', {
                input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                commands: ['build'],
            }),
        });
        blueprint.addStage(new test_app_1.OneStackApp(app, 'CrossAccount', { env: { account: 'you' } }));
    });
    test('simple app gets graphed correctly', () => {
        // WHEN
        const graph = new helpers_internal_1.PipelineGraph(blueprint).graph;
        // THEN
        expect(childrenAt(graph)).toEqual([
            'Source',
            'Build',
            'CrossAccount',
        ]);
        expect(childrenAt(graph, 'CrossAccount')).toEqual([
            'Stack',
        ]);
        expect(childrenAt(graph, 'CrossAccount', 'Stack')).toEqual([
            'Prepare',
            'Deploy',
        ]);
    });
    test('self mutation gets inserted at the right place', () => {
        // WHEN
        const graph = new helpers_internal_1.PipelineGraph(blueprint, { selfMutation: true }).graph;
        // THEN
        expect(childrenAt(graph)).toEqual([
            'Source',
            'Build',
            'UpdatePipeline',
            'CrossAccount',
        ]);
        expect(childrenAt(graph, 'UpdatePipeline')).toEqual([
            'SelfMutate',
        ]);
    });
});
describe('blueprint with wave and stage', () => {
    let blueprint;
    beforeEach(() => {
        blueprint = new Blueprint(app, 'Bp', {
            synth: new cdkp.ShellStep('Synth', {
                input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                commands: ['build'],
            }),
        });
        const wave = blueprint.addWave('Wave');
        wave.addStage(new test_app_1.OneStackApp(app, 'Alpha'));
        wave.addStage(new test_app_1.OneStackApp(app, 'Beta'));
    });
    test('post-action gets added inside stage graph', () => {
        // GIVEN
        blueprint.waves[0].stages[0].addPost(new cdkp.ManualApprovalStep('Approve'));
        // WHEN
        const graph = new helpers_internal_1.PipelineGraph(blueprint).graph;
        // THEN
        expect(childrenAt(graph, 'Wave')).toEqual([
            'Alpha',
            'Beta',
        ]);
        expect(childrenAt(graph, 'Wave', 'Alpha')).toEqual([
            'Stack',
            'Approve',
        ]);
    });
    test('pre-action gets added inside stage graph', () => {
        // GIVEN
        blueprint.waves[0].stages[0].addPre(new cdkp.ManualApprovalStep('Gogogo'));
        // WHEN
        const graph = new helpers_internal_1.PipelineGraph(blueprint).graph;
        // THEN
        expect(childrenAt(graph, 'Wave', 'Alpha')).toEqual([
            'Gogogo',
            'Stack',
        ]);
    });
    test('pre, changeSet, and post are added correctly inside stack graph', () => {
        // GIVEN
        const appWithExposedStacks = new test_app_1.AppWithExposedStacks(app, 'Gamma');
        const stack = appWithExposedStacks.stacks[0];
        blueprint.waves[0].addStage(appWithExposedStacks, {
            stackSteps: [{
                    stack,
                    pre: [new cdkp.ManualApprovalStep('Step1'), new cdkp.ManualApprovalStep('Step2'), new cdkp.ManualApprovalStep('Step3')],
                    changeSet: [new cdkp.ManualApprovalStep('Manual Approval')],
                    post: [new cdkp.ManualApprovalStep('Post Approval')],
                }],
        });
        // WHEN
        const graph = new helpers_internal_1.PipelineGraph(blueprint).graph;
        // THEN
        expect(childrenAt(graph, 'Wave', 'Gamma', 'Stack1')).toEqual([
            'Step1',
            'Step2',
            'Step3',
            'Prepare',
            'Manual Approval',
            'Deploy',
            'Post Approval',
        ]);
    });
    test('steps that do not depend on each other are ordered lexicographically', () => {
        // GIVEN
        const goStep = new cdkp.ManualApprovalStep('Gogogo');
        const checkStep = new cdkp.ManualApprovalStep('Check');
        blueprint.waves[0].stages[0].addPre(checkStep, goStep);
        // WHEN
        const graph = new helpers_internal_1.PipelineGraph(blueprint).graph;
        // THEN
        expect(childrenAt(graph, 'Wave', 'Alpha')).toEqual([
            'Check',
            'Gogogo',
            'Stack',
        ]);
    });
    test('steps can depend on each other', () => {
        // GIVEN
        const goStep = new cdkp.ManualApprovalStep('Gogogo');
        const checkStep = new cdkp.ManualApprovalStep('Check');
        checkStep.addStepDependency(goStep);
        blueprint.waves[0].stages[0].addPre(checkStep, goStep);
        // WHEN
        const graph = new helpers_internal_1.PipelineGraph(blueprint).graph;
        // THEN
        expect(childrenAt(graph, 'Wave', 'Alpha')).toEqual([
            'Gogogo',
            'Check',
            'Stack',
        ]);
    });
    test('Steps.sequence adds correct dependencies', () => {
        // GIVEN
        blueprint.waves[0].stages[0].addPre(...lib_1.Step.sequence([
            new cdkp.ManualApprovalStep('Gogogo'),
            new cdkp.ManualApprovalStep('Check'),
            new cdkp.ManualApprovalStep('DoubleCheck'),
        ]));
        // WHEN
        const graph = new helpers_internal_1.PipelineGraph(blueprint).graph;
        // THEN
        expect(childrenAt(graph, 'Wave', 'Alpha')).toEqual([
            'Gogogo',
            'Check',
            'DoubleCheck',
            'Stack',
        ]);
    });
});
describe('options for other engines', () => {
    test('"publishTemplate" will add steps to publish CFN templates as assets', () => {
        // GIVEN
        const blueprint = new Blueprint(app, 'Bp', {
            synth: new cdkp.ShellStep('Synth', {
                commands: ['build'],
            }),
        });
        blueprint.addStage(new test_app_1.OneStackApp(app, 'Alpha'));
        // WHEN
        const graph = new helpers_internal_1.PipelineGraph(blueprint, {
            publishTemplate: true,
        });
        // THEN
        expect(childrenAt(graph.graph, 'Assets')).toStrictEqual(['FileAsset1']);
    });
    test('"prepareStep: false" can be used to disable the "prepare" step for stack deployments', () => {
        // GIVEN
        const blueprint = new Blueprint(app, 'Bp', {
            synth: new cdkp.ShellStep('Synth', {
                commands: ['build'],
            }),
        });
        blueprint.addStage(new test_app_1.OneStackApp(app, 'Alpha'));
        // WHEN
        const graph = new helpers_internal_1.PipelineGraph(blueprint, {
            prepareStep: false,
        });
        // THEN
        // if "prepareStep" was true (default), the "Stack" node would have "Prepare" and "Deploy"
        // since "prepareStep" is false, it only has "Deploy".
        expect(childrenAt(graph.graph, 'Alpha', 'Stack')).toStrictEqual(['Deploy']);
    });
    test('"prepareStep: false" will not impact "pre" stack steps', () => {
        // GIVEN
        const blueprint = new Blueprint(app, 'Bp', {
            synth: new cdkp.ShellStep('Synth', {
                commands: ['build'],
            }),
        });
        const appWithExposedStacks = new test_app_1.AppWithExposedStacks(app, 'Alpha');
        blueprint.addStage(appWithExposedStacks, {
            stackSteps: [{
                    stack: appWithExposedStacks.stacks[0],
                    pre: [new lib_1.ManualApprovalStep('PreCheck')],
                }],
        });
        // WHEN
        const graph = new helpers_internal_1.PipelineGraph(blueprint, {
            prepareStep: false,
        });
        // THEN
        expect(childrenAt(graph.graph, 'Alpha', 'Stack1')).toEqual([
            'PreCheck',
            'Deploy',
        ]);
    });
    test('specifying changeSet step with "prepareStep: false" will throw', () => {
        // GIVEN
        const blueprint = new Blueprint(app, 'Bp', {
            synth: new cdkp.ShellStep('Synth', {
                commands: ['build'],
            }),
        });
        const appWithExposedStacks = new test_app_1.AppWithExposedStacks(app, 'Alpha');
        blueprint.addStage(appWithExposedStacks, {
            stackSteps: [{
                    stack: appWithExposedStacks.stacks[0],
                    changeSet: [new lib_1.ManualApprovalStep('ChangeSetApproval')],
                }],
        });
        // THEN
        expect(() => new helpers_internal_1.PipelineGraph(blueprint, {
            prepareStep: false,
        })).toThrow(/Cannot use 'changeSet' steps/);
    });
});
describe('with app with output', () => {
    let blueprint;
    let myApp;
    let scriptStep;
    beforeEach(() => {
        blueprint = new Blueprint(app, 'Bp', {
            synth: new cdkp.ShellStep('Synth', {
                input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                commands: ['build'],
            }),
        });
        myApp = new test_app_1.AppWithOutput(app, 'Alpha');
        scriptStep = new cdkp.ShellStep('PrintBucketName', {
            envFromCfnOutputs: {
                BUCKET_NAME: myApp.theOutput,
            },
            commands: ['echo $BUCKET_NAME'],
        });
    });
    test('post-action using stack output has dependency on execute node', () => {
        // GIVEN
        blueprint.addStage(myApp, {
            post: [scriptStep],
        });
        // WHEN
        const graph = new helpers_internal_1.PipelineGraph(blueprint).graph;
        // THEN
        expect(childrenAt(graph, 'Alpha')).toEqual([
            'Stack',
            'PrintBucketName',
        ]);
        expect(nodeAt(graph, 'Alpha', 'PrintBucketName').dependencies).toContain(nodeAt(graph, 'Alpha', 'Stack', 'Deploy'));
    });
    test('pre-action cannot use stack output', () => {
        // GIVEN
        blueprint.addStage(myApp, {
            pre: [scriptStep],
        });
        // WHEN
        expect(() => {
            const graph = new helpers_internal_1.PipelineGraph(blueprint).graph;
            assertGraph(nodeAt(graph, 'Alpha')).sortedLeaves();
        }).toThrow(/Dependency cycle/);
    });
    test('cannot use output from stack not in the pipeline', () => {
        // GIVEN
        blueprint.addStage(new test_app_1.AppWithOutput(app, 'OtherApp'), {
            pre: [scriptStep],
        });
        // WHEN
        expect(() => {
            new helpers_internal_1.PipelineGraph(blueprint).graph;
        }).toThrow(/is not in the pipeline/);
    });
});
function childrenAt(g, ...descend) {
    for (const d of descend) {
        const child = g.tryGetChild(d);
        if (!child) {
            throw new Error(`No node named '${d}' in ${g}`);
        }
        g = assertGraph(child);
    }
    return childNames(g);
}
function nodeAt(g, ...descend) {
    for (const d of descend.slice(0, descend.length - 1)) {
        const child = g.tryGetChild(d);
        if (!child) {
            throw new Error(`No node named '${d}' in ${g}`);
        }
        g = assertGraph(child);
    }
    const child = g.tryGetChild(descend[descend.length - 1]);
    if (!child) {
        throw new Error(`No node named '${descend[descend.length - 1]}' in ${g}`);
    }
    return child;
}
function childNames(g) {
    return Array.from((0, javascript_1.flatten)(g.sortedChildren())).map(n => n.id);
}
function assertGraph(g) {
    if (!g) {
        throw new Error('Expected a graph node, got undefined');
    }
    if (!(g instanceof helpers_internal_1.Graph)) {
        throw new Error(`Expected a Graph, got: ${g}`);
    }
    return g;
}
class Blueprint extends cdkp.PipelineBase {
    doBuildPipeline() {
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUtZ3JhcGgudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBpcGVsaW5lLWdyYXBoLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzREFBc0Q7QUFDdEQscUNBQXFDO0FBQ3JDLHNDQUF3RDtBQUN4RCxvRUFBZ0Y7QUFDaEYsZ0VBQTBEO0FBQzFELHlEQUF1RztBQUV2RyxJQUFJLEdBQVksQ0FBQztBQUVqQixVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsR0FBRyxHQUFHLElBQUksa0JBQU8sRUFBRSxDQUFDO0FBQ3RCLENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtJQUNiLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNoQixDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7SUFDeEMsSUFBSSxTQUFvQixDQUFDO0lBQ3pCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRTtZQUNuQyxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRTtnQkFDakMsS0FBSyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQztnQkFDMUQsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDO2FBQ3BCLENBQUM7U0FDSCxDQUFDLENBQUM7UUFDSCxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksc0JBQVcsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtRQUM3QyxPQUFPO1FBQ1AsTUFBTSxLQUFLLEdB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QUFTLFdBQVcsQ0FBSSxDQUEyQjtJQUNqRCxJQUFJLENBQUMsQ0FBQyxFQUFFO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0tBQUU7SUFDcEUsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLHdCQUFLLENBQUMsRUFBRTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsRUFBRSxDQUFDLENBQUM7S0FBRTtJQUM5RSxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFFRCxNQUFNLFNBQVUsU0FBUSxJQUFJLENBQUMsWUFBWTtJQUM3QixlQUFlO0tBQ3hCO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMgKi9cbmltcG9ydCAqIGFzIGNka3AgZnJvbSAnLi4vLi4vLi4vbGliJztcbmltcG9ydCB7IE1hbnVhbEFwcHJvdmFsU3RlcCwgU3RlcCB9IGZyb20gJy4uLy4uLy4uL2xpYic7XG5pbXBvcnQgeyBHcmFwaCwgR3JhcGhOb2RlLCBQaXBlbGluZUdyYXBoIH0gZnJvbSAnLi4vLi4vLi4vbGliL2hlbHBlcnMtaW50ZXJuYWwnO1xuaW1wb3J0IHsgZmxhdHRlbiB9IGZyb20gJy4uLy4uLy4uL2xpYi9wcml2YXRlL2phdmFzY3JpcHQnO1xuaW1wb3J0IHsgQXBwV2l0aE91dHB1dCwgQXBwV2l0aEV4cG9zZWRTdGFja3MsIE9uZVN0YWNrQXBwLCBUZXN0QXBwIH0gZnJvbSAnLi4vLi4vdGVzdGhlbHBlcnMvdGVzdC1hcHAnO1xuXG5sZXQgYXBwOiBUZXN0QXBwO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgYXBwID0gbmV3IFRlc3RBcHAoKTtcbn0pO1xuXG5hZnRlckVhY2goKCkgPT4ge1xuICBhcHAuY2xlYW51cCgpO1xufSk7XG5cbmRlc2NyaWJlKCdibHVlcHJpbnQgd2l0aCBvbmUgc3RhZ2UnLCAoKSA9PiB7XG4gIGxldCBibHVlcHJpbnQ6IEJsdWVwcmludDtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgYmx1ZXByaW50ID0gbmV3IEJsdWVwcmludChhcHAsICdCcCcsIHtcbiAgICAgIHN5bnRoOiBuZXcgY2RrcC5TaGVsbFN0ZXAoJ1N5bnRoJywge1xuICAgICAgICBpbnB1dDogY2RrcC5Db2RlUGlwZWxpbmVTb3VyY2UuZ2l0SHViKCd0ZXN0L3Rlc3QnLCAnbWFpbicpLFxuICAgICAgICBjb21tYW5kczogWydidWlsZCddLFxuICAgICAgfSksXG4gICAgfSk7XG4gICAgYmx1ZXByaW50LmFkZFN0YWdlKG5ldyBPbmVTdGFja0FwcChhcHAsICdDcm9zc0FjY291bnQnLCB7IGVudjogeyBhY2NvdW50OiAneW91JyB9IH0pKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2ltcGxlIGFwcCBnZXRzIGdyYXBoZWQgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIC8vIFdIRU5cbiAgICBjb25zdCBncmFwaCA9IG5ldyBQaXBlbGluZUdyYXBoKGJsdWVwcmludCkuZ3JhcGg7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGNoaWxkcmVuQXQoZ3JhcGgpKS50b0VxdWFsKFtcbiAgICAgICdTb3VyY2UnLFxuICAgICAgJ0J1aWxkJyxcbiAgICAgICdDcm9zc0FjY291bnQnLFxuICAgIF0pO1xuXG4gICAgZXhwZWN0KGNoaWxkcmVuQXQoZ3JhcGgsICdDcm9zc0FjY291bnQnKSkudG9FcXVhbChbXG4gICAgICAnU3RhY2snLFxuICAgIF0pO1xuXG4gICAgZXhwZWN0KGNoaWxkcmVuQXQoZ3JhcGgsICdDcm9zc0FjY291bnQnLCAnU3RhY2snKSkudG9FcXVhbChbXG4gICAgICAnUHJlcGFyZScsXG4gICAgICAnRGVwbG95JyxcbiAgICBdKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2VsZiBtdXRhdGlvbiBnZXRzIGluc2VydGVkIGF0IHRoZSByaWdodCBwbGFjZScsICgpID0+IHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgZ3JhcGggPSBuZXcgUGlwZWxpbmVHcmFwaChibHVlcHJpbnQsIHsgc2VsZk11dGF0aW9uOiB0cnVlIH0pLmdyYXBoO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChjaGlsZHJlbkF0KGdyYXBoKSkudG9FcXVhbChbXG4gICAgICAnU291cmNlJyxcbiAgICAgICdCdWlsZCcsXG4gICAgICAnVXBkYXRlUGlwZWxpbmUnLFxuICAgICAgJ0Nyb3NzQWNjb3VudCcsXG4gICAgXSk7XG5cbiAgICBleHBlY3QoY2hpbGRyZW5BdChncmFwaCwgJ1VwZGF0ZVBpcGVsaW5lJykpLnRvRXF1YWwoW1xuICAgICAgJ1NlbGZNdXRhdGUnLFxuICAgIF0pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnYmx1ZXByaW50IHdpdGggd2F2ZSBhbmQgc3RhZ2UnLCAoKSA9PiB7XG4gIGxldCBibHVlcHJpbnQ6IEJsdWVwcmludDtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgYmx1ZXByaW50ID0gbmV3IEJsdWVwcmludChhcHAsICdCcCcsIHtcbiAgICAgIHN5bnRoOiBuZXcgY2RrcC5TaGVsbFN0ZXAoJ1N5bnRoJywge1xuICAgICAgICBpbnB1dDogY2RrcC5Db2RlUGlwZWxpbmVTb3VyY2UuZ2l0SHViKCd0ZXN0L3Rlc3QnLCAnbWFpbicpLFxuICAgICAgICBjb21tYW5kczogWydidWlsZCddLFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBjb25zdCB3YXZlID0gYmx1ZXByaW50LmFkZFdhdmUoJ1dhdmUnKTtcbiAgICB3YXZlLmFkZFN0YWdlKG5ldyBPbmVTdGFja0FwcChhcHAsICdBbHBoYScpKTtcbiAgICB3YXZlLmFkZFN0YWdlKG5ldyBPbmVTdGFja0FwcChhcHAsICdCZXRhJykpO1xuICB9KTtcblxuICB0ZXN0KCdwb3N0LWFjdGlvbiBnZXRzIGFkZGVkIGluc2lkZSBzdGFnZSBncmFwaCcsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGJsdWVwcmludC53YXZlc1swXS5zdGFnZXNbMF0uYWRkUG9zdChuZXcgY2RrcC5NYW51YWxBcHByb3ZhbFN0ZXAoJ0FwcHJvdmUnKSk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgZ3JhcGggPSBuZXcgUGlwZWxpbmVHcmFwaChibHVlcHJpbnQpLmdyYXBoO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChjaGlsZHJlbkF0KGdyYXBoLCAnV2F2ZScpKS50b0VxdWFsKFtcbiAgICAgICdBbHBoYScsXG4gICAgICAnQmV0YScsXG4gICAgXSk7XG5cbiAgICBleHBlY3QoY2hpbGRyZW5BdChncmFwaCwgJ1dhdmUnLCAnQWxwaGEnKSkudG9FcXVhbChbXG4gICAgICAnU3RhY2snLFxuICAgICAgJ0FwcHJvdmUnLFxuICAgIF0pO1xuICB9KTtcblxuICB0ZXN0KCdwcmUtYWN0aW9uIGdldHMgYWRkZWQgaW5zaWRlIHN0YWdlIGdyYXBoJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgYmx1ZXByaW50LndhdmVzWzBdLnN0YWdlc1swXS5hZGRQcmUobmV3IGNka3AuTWFudWFsQXBwcm92YWxTdGVwKCdHb2dvZ28nKSk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgZ3JhcGggPSBuZXcgUGlwZWxpbmVHcmFwaChibHVlcHJpbnQpLmdyYXBoO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChjaGlsZHJlbkF0KGdyYXBoLCAnV2F2ZScsICdBbHBoYScpKS50b0VxdWFsKFtcbiAgICAgICdHb2dvZ28nLFxuICAgICAgJ1N0YWNrJyxcbiAgICBdKTtcbiAgfSk7XG5cbiAgdGVzdCgncHJlLCBjaGFuZ2VTZXQsIGFuZCBwb3N0IGFyZSBhZGRlZCBjb3JyZWN0bHkgaW5zaWRlIHN0YWNrIGdyYXBoJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgYXBwV2l0aEV4cG9zZWRTdGFja3MgPSBuZXcgQXBwV2l0aEV4cG9zZWRTdGFja3MoYXBwLCAnR2FtbWEnKTtcbiAgICBjb25zdCBzdGFjayA9IGFwcFdpdGhFeHBvc2VkU3RhY2tzLnN0YWNrc1swXTtcbiAgICBibHVlcHJpbnQud2F2ZXNbMF0uYWRkU3RhZ2UoYXBwV2l0aEV4cG9zZWRTdGFja3MsIHtcbiAgICAgIHN0YWNrU3RlcHM6IFt7XG4gICAgICAgIHN0YWNrLFxuICAgICAgICBwcmU6IFtuZXcgY2RrcC5NYW51YWxBcHByb3ZhbFN0ZXAoJ1N0ZXAxJyksIG5ldyBjZGtwLk1hbnVhbEFwcHJvdmFsU3RlcCgnU3RlcDInKSwgbmV3IGNka3AuTWFudWFsQXBwcm92YWxTdGVwKCdTdGVwMycpXSxcbiAgICAgICAgY2hhbmdlU2V0OiBbbmV3IGNka3AuTWFudWFsQXBwcm92YWxTdGVwKCdNYW51YWwgQXBwcm92YWwnKV0sXG4gICAgICAgIHBvc3Q6IFtuZXcgY2RrcC5NYW51YWxBcHByb3ZhbFN0ZXAoJ1Bvc3QgQXBwcm92YWwnKV0sXG4gICAgICB9XSxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBncmFwaCA9IG5ldyBQaXBlbGluZUdyYXBoKGJsdWVwcmludCkuZ3JhcGg7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGNoaWxkcmVuQXQoZ3JhcGgsICdXYXZlJywgJ0dhbW1hJywgJ1N0YWNrMScpKS50b0VxdWFsKFtcbiAgICAgICdTdGVwMScsXG4gICAgICAnU3RlcDInLFxuICAgICAgJ1N0ZXAzJyxcbiAgICAgICdQcmVwYXJlJyxcbiAgICAgICdNYW51YWwgQXBwcm92YWwnLFxuICAgICAgJ0RlcGxveScsXG4gICAgICAnUG9zdCBBcHByb3ZhbCcsXG4gICAgXSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3N0ZXBzIHRoYXQgZG8gbm90IGRlcGVuZCBvbiBlYWNoIG90aGVyIGFyZSBvcmRlcmVkIGxleGljb2dyYXBoaWNhbGx5JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgZ29TdGVwID0gbmV3IGNka3AuTWFudWFsQXBwcm92YWxTdGVwKCdHb2dvZ28nKTtcbiAgICBjb25zdCBjaGVja1N0ZXAgPSBuZXcgY2RrcC5NYW51YWxBcHByb3ZhbFN0ZXAoJ0NoZWNrJyk7XG4gICAgYmx1ZXByaW50LndhdmVzWzBdLnN0YWdlc1swXS5hZGRQcmUoXG4gICAgICBjaGVja1N0ZXAsXG4gICAgICBnb1N0ZXAsXG4gICAgKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBncmFwaCA9IG5ldyBQaXBlbGluZUdyYXBoKGJsdWVwcmludCkuZ3JhcGg7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGNoaWxkcmVuQXQoZ3JhcGgsICdXYXZlJywgJ0FscGhhJykpLnRvRXF1YWwoW1xuICAgICAgJ0NoZWNrJyxcbiAgICAgICdHb2dvZ28nLFxuICAgICAgJ1N0YWNrJyxcbiAgICBdKTtcbiAgfSk7XG5cbiAgdGVzdCgnc3RlcHMgY2FuIGRlcGVuZCBvbiBlYWNoIG90aGVyJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgZ29TdGVwID0gbmV3IGNka3AuTWFudWFsQXBwcm92YWxTdGVwKCdHb2dvZ28nKTtcbiAgICBjb25zdCBjaGVja1N0ZXAgPSBuZXcgY2RrcC5NYW51YWxBcHByb3ZhbFN0ZXAoJ0NoZWNrJyk7XG4gICAgY2hlY2tTdGVwLmFkZFN0ZXBEZXBlbmRlbmN5KGdvU3RlcCk7XG4gICAgYmx1ZXByaW50LndhdmVzWzBdLnN0YWdlc1swXS5hZGRQcmUoXG4gICAgICBjaGVja1N0ZXAsXG4gICAgICBnb1N0ZXAsXG4gICAgKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBncmFwaCA9IG5ldyBQaXBlbGluZUdyYXBoKGJsdWVwcmludCkuZ3JhcGg7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGNoaWxkcmVuQXQoZ3JhcGgsICdXYXZlJywgJ0FscGhhJykpLnRvRXF1YWwoW1xuICAgICAgJ0dvZ29nbycsXG4gICAgICAnQ2hlY2snLFxuICAgICAgJ1N0YWNrJyxcbiAgICBdKTtcbiAgfSk7XG5cbiAgdGVzdCgnU3RlcHMuc2VxdWVuY2UgYWRkcyBjb3JyZWN0IGRlcGVuZGVuY2llcycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGJsdWVwcmludC53YXZlc1swXS5zdGFnZXNbMF0uYWRkUHJlKC4uLlN0ZXAuc2VxdWVuY2UoW1xuICAgICAgbmV3IGNka3AuTWFudWFsQXBwcm92YWxTdGVwKCdHb2dvZ28nKSxcbiAgICAgIG5ldyBjZGtwLk1hbnVhbEFwcHJvdmFsU3RlcCgnQ2hlY2snKSxcbiAgICAgIG5ldyBjZGtwLk1hbnVhbEFwcHJvdmFsU3RlcCgnRG91YmxlQ2hlY2snKSxcbiAgICBdKSk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgZ3JhcGggPSBuZXcgUGlwZWxpbmVHcmFwaChibHVlcHJpbnQpLmdyYXBoO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChjaGlsZHJlbkF0KGdyYXBoLCAnV2F2ZScsICdBbHBoYScpKS50b0VxdWFsKFtcbiAgICAgICdHb2dvZ28nLFxuICAgICAgJ0NoZWNrJyxcbiAgICAgICdEb3VibGVDaGVjaycsXG4gICAgICAnU3RhY2snLFxuICAgIF0pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnb3B0aW9ucyBmb3Igb3RoZXIgZW5naW5lcycsICgpID0+IHtcbiAgdGVzdCgnXCJwdWJsaXNoVGVtcGxhdGVcIiB3aWxsIGFkZCBzdGVwcyB0byBwdWJsaXNoIENGTiB0ZW1wbGF0ZXMgYXMgYXNzZXRzJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgYmx1ZXByaW50ID0gbmV3IEJsdWVwcmludChhcHAsICdCcCcsIHtcbiAgICAgIHN5bnRoOiBuZXcgY2RrcC5TaGVsbFN0ZXAoJ1N5bnRoJywge1xuICAgICAgICBjb21tYW5kczogWydidWlsZCddLFxuICAgICAgfSksXG4gICAgfSk7XG4gICAgYmx1ZXByaW50LmFkZFN0YWdlKG5ldyBPbmVTdGFja0FwcChhcHAsICdBbHBoYScpKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBncmFwaCA9IG5ldyBQaXBlbGluZUdyYXBoKGJsdWVwcmludCwge1xuICAgICAgcHVibGlzaFRlbXBsYXRlOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChjaGlsZHJlbkF0KGdyYXBoLmdyYXBoLCAnQXNzZXRzJykpLnRvU3RyaWN0RXF1YWwoWydGaWxlQXNzZXQxJ10pO1xuICB9KTtcblxuICB0ZXN0KCdcInByZXBhcmVTdGVwOiBmYWxzZVwiIGNhbiBiZSB1c2VkIHRvIGRpc2FibGUgdGhlIFwicHJlcGFyZVwiIHN0ZXAgZm9yIHN0YWNrIGRlcGxveW1lbnRzJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgYmx1ZXByaW50ID0gbmV3IEJsdWVwcmludChhcHAsICdCcCcsIHtcbiAgICAgIHN5bnRoOiBuZXcgY2RrcC5TaGVsbFN0ZXAoJ1N5bnRoJywge1xuICAgICAgICBjb21tYW5kczogWydidWlsZCddLFxuICAgICAgfSksXG4gICAgfSk7XG4gICAgYmx1ZXByaW50LmFkZFN0YWdlKG5ldyBPbmVTdGFja0FwcChhcHAsICdBbHBoYScpKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBncmFwaCA9IG5ldyBQaXBlbGluZUdyYXBoKGJsdWVwcmludCwge1xuICAgICAgcHJlcGFyZVN0ZXA6IGZhbHNlLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIC8vIGlmIFwicHJlcGFyZVN0ZXBcIiB3YXMgdHJ1ZSAoZGVmYXVsdCksIHRoZSBcIlN0YWNrXCIgbm9kZSB3b3VsZCBoYXZlIFwiUHJlcGFyZVwiIGFuZCBcIkRlcGxveVwiXG4gICAgLy8gc2luY2UgXCJwcmVwYXJlU3RlcFwiIGlzIGZhbHNlLCBpdCBvbmx5IGhhcyBcIkRlcGxveVwiLlxuICAgIGV4cGVjdChjaGlsZHJlbkF0KGdyYXBoLmdyYXBoLCAnQWxwaGEnLCAnU3RhY2snKSkudG9TdHJpY3RFcXVhbChbJ0RlcGxveSddKTtcbiAgfSk7XG5cbiAgdGVzdCgnXCJwcmVwYXJlU3RlcDogZmFsc2VcIiB3aWxsIG5vdCBpbXBhY3QgXCJwcmVcIiBzdGFjayBzdGVwcycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGJsdWVwcmludCA9IG5ldyBCbHVlcHJpbnQoYXBwLCAnQnAnLCB7XG4gICAgICBzeW50aDogbmV3IGNka3AuU2hlbGxTdGVwKCdTeW50aCcsIHtcbiAgICAgICAgY29tbWFuZHM6IFsnYnVpbGQnXSxcbiAgICAgIH0pLFxuICAgIH0pO1xuICAgIGNvbnN0IGFwcFdpdGhFeHBvc2VkU3RhY2tzID0gbmV3IEFwcFdpdGhFeHBvc2VkU3RhY2tzKGFwcCwgJ0FscGhhJyk7XG4gICAgYmx1ZXByaW50LmFkZFN0YWdlKGFwcFdpdGhFeHBvc2VkU3RhY2tzLCB7XG4gICAgICBzdGFja1N0ZXBzOiBbe1xuICAgICAgICBzdGFjazogYXBwV2l0aEV4cG9zZWRTdGFja3Muc3RhY2tzWzBdLFxuICAgICAgICBwcmU6IFtuZXcgTWFudWFsQXBwcm92YWxTdGVwKCdQcmVDaGVjaycpXSxcbiAgICAgIH1dLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGdyYXBoID0gbmV3IFBpcGVsaW5lR3JhcGgoYmx1ZXByaW50LCB7XG4gICAgICBwcmVwYXJlU3RlcDogZmFsc2UsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGNoaWxkcmVuQXQoZ3JhcGguZ3JhcGgsICdBbHBoYScsICdTdGFjazEnKSkudG9FcXVhbChbXG4gICAgICAnUHJlQ2hlY2snLFxuICAgICAgJ0RlcGxveScsXG4gICAgXSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3NwZWNpZnlpbmcgY2hhbmdlU2V0IHN0ZXAgd2l0aCBcInByZXBhcmVTdGVwOiBmYWxzZVwiIHdpbGwgdGhyb3cnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBibHVlcHJpbnQgPSBuZXcgQmx1ZXByaW50KGFwcCwgJ0JwJywge1xuICAgICAgc3ludGg6IG5ldyBjZGtwLlNoZWxsU3RlcCgnU3ludGgnLCB7XG4gICAgICAgIGNvbW1hbmRzOiBbJ2J1aWxkJ10sXG4gICAgICB9KSxcbiAgICB9KTtcbiAgICBjb25zdCBhcHBXaXRoRXhwb3NlZFN0YWNrcyA9IG5ldyBBcHBXaXRoRXhwb3NlZFN0YWNrcyhhcHAsICdBbHBoYScpO1xuICAgIGJsdWVwcmludC5hZGRTdGFnZShhcHBXaXRoRXhwb3NlZFN0YWNrcywge1xuICAgICAgc3RhY2tTdGVwczogW3tcbiAgICAgICAgc3RhY2s6IGFwcFdpdGhFeHBvc2VkU3RhY2tzLnN0YWNrc1swXSxcbiAgICAgICAgY2hhbmdlU2V0OiBbbmV3IE1hbnVhbEFwcHJvdmFsU3RlcCgnQ2hhbmdlU2V0QXBwcm92YWwnKV0sXG4gICAgICB9XSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4gbmV3IFBpcGVsaW5lR3JhcGgoYmx1ZXByaW50LCB7XG4gICAgICBwcmVwYXJlU3RlcDogZmFsc2UsXG4gICAgfSkpLnRvVGhyb3coL0Nhbm5vdCB1c2UgJ2NoYW5nZVNldCcgc3RlcHMvKTtcbiAgfSk7XG59KTtcblxuXG5kZXNjcmliZSgnd2l0aCBhcHAgd2l0aCBvdXRwdXQnLCAoKSA9PiB7XG4gIGxldCBibHVlcHJpbnQ6IEJsdWVwcmludDtcbiAgbGV0IG15QXBwOiBBcHBXaXRoT3V0cHV0O1xuICBsZXQgc2NyaXB0U3RlcDogY2RrcC5TaGVsbFN0ZXA7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGJsdWVwcmludCA9IG5ldyBCbHVlcHJpbnQoYXBwLCAnQnAnLCB7XG4gICAgICBzeW50aDogbmV3IGNka3AuU2hlbGxTdGVwKCdTeW50aCcsIHtcbiAgICAgICAgaW5wdXQ6IGNka3AuQ29kZVBpcGVsaW5lU291cmNlLmdpdEh1YigndGVzdC90ZXN0JywgJ21haW4nKSxcbiAgICAgICAgY29tbWFuZHM6IFsnYnVpbGQnXSxcbiAgICAgIH0pLFxuICAgIH0pO1xuXG4gICAgbXlBcHAgPSBuZXcgQXBwV2l0aE91dHB1dChhcHAsICdBbHBoYScpO1xuICAgIHNjcmlwdFN0ZXAgPSBuZXcgY2RrcC5TaGVsbFN0ZXAoJ1ByaW50QnVja2V0TmFtZScsIHtcbiAgICAgIGVudkZyb21DZm5PdXRwdXRzOiB7XG4gICAgICAgIEJVQ0tFVF9OQU1FOiBteUFwcC50aGVPdXRwdXQsXG4gICAgICB9LFxuICAgICAgY29tbWFuZHM6IFsnZWNobyAkQlVDS0VUX05BTUUnXSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgncG9zdC1hY3Rpb24gdXNpbmcgc3RhY2sgb3V0cHV0IGhhcyBkZXBlbmRlbmN5IG9uIGV4ZWN1dGUgbm9kZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGJsdWVwcmludC5hZGRTdGFnZShteUFwcCwge1xuICAgICAgcG9zdDogW3NjcmlwdFN0ZXBdLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGdyYXBoID0gbmV3IFBpcGVsaW5lR3JhcGgoYmx1ZXByaW50KS5ncmFwaDtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoY2hpbGRyZW5BdChncmFwaCwgJ0FscGhhJykpLnRvRXF1YWwoW1xuICAgICAgJ1N0YWNrJyxcbiAgICAgICdQcmludEJ1Y2tldE5hbWUnLFxuICAgIF0pO1xuXG4gICAgZXhwZWN0KG5vZGVBdChncmFwaCwgJ0FscGhhJywgJ1ByaW50QnVja2V0TmFtZScpLmRlcGVuZGVuY2llcykudG9Db250YWluKFxuICAgICAgbm9kZUF0KGdyYXBoLCAnQWxwaGEnLCAnU3RhY2snLCAnRGVwbG95JykpO1xuICB9KTtcblxuICB0ZXN0KCdwcmUtYWN0aW9uIGNhbm5vdCB1c2Ugc3RhY2sgb3V0cHV0JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgYmx1ZXByaW50LmFkZFN0YWdlKG15QXBwLCB7XG4gICAgICBwcmU6IFtzY3JpcHRTdGVwXSxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgY29uc3QgZ3JhcGggPSBuZXcgUGlwZWxpbmVHcmFwaChibHVlcHJpbnQpLmdyYXBoO1xuICAgICAgYXNzZXJ0R3JhcGgobm9kZUF0KGdyYXBoLCAnQWxwaGEnKSkuc29ydGVkTGVhdmVzKCk7XG4gICAgfSkudG9UaHJvdygvRGVwZW5kZW5jeSBjeWNsZS8pO1xuICB9KTtcblxuICB0ZXN0KCdjYW5ub3QgdXNlIG91dHB1dCBmcm9tIHN0YWNrIG5vdCBpbiB0aGUgcGlwZWxpbmUnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBibHVlcHJpbnQuYWRkU3RhZ2UobmV3IEFwcFdpdGhPdXRwdXQoYXBwLCAnT3RoZXJBcHAnKSwge1xuICAgICAgcHJlOiBbc2NyaXB0U3RlcF0sXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIG5ldyBQaXBlbGluZUdyYXBoKGJsdWVwcmludCkuZ3JhcGg7XG4gICAgfSkudG9UaHJvdygvaXMgbm90IGluIHRoZSBwaXBlbGluZS8pO1xuICB9KTtcbn0pO1xuXG5mdW5jdGlvbiBjaGlsZHJlbkF0KGc6IEdyYXBoPGFueT4sIC4uLmRlc2NlbmQ6IHN0cmluZ1tdKSB7XG4gIGZvciAoY29uc3QgZCBvZiBkZXNjZW5kKSB7XG4gICAgY29uc3QgY2hpbGQgPSBnLnRyeUdldENoaWxkKGQpO1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gbm9kZSBuYW1lZCAnJHtkfScgaW4gJHtnfWApO1xuICAgIH1cbiAgICBnID0gYXNzZXJ0R3JhcGgoY2hpbGQpO1xuICB9XG4gIHJldHVybiBjaGlsZE5hbWVzKGcpO1xufVxuXG5mdW5jdGlvbiBub2RlQXQoZzogR3JhcGg8YW55PiwgLi4uZGVzY2VuZDogc3RyaW5nW10pIHtcbiAgZm9yIChjb25zdCBkIG9mIGRlc2NlbmQuc2xpY2UoMCwgZGVzY2VuZC5sZW5ndGggLSAxKSkge1xuICAgIGNvbnN0IGNoaWxkID0gZy50cnlHZXRDaGlsZChkKTtcbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIG5vZGUgbmFtZWQgJyR7ZH0nIGluICR7Z31gKTtcbiAgICB9XG4gICAgZyA9IGFzc2VydEdyYXBoKGNoaWxkKTtcbiAgfVxuICBjb25zdCBjaGlsZCA9IGcudHJ5R2V0Q2hpbGQoZGVzY2VuZFtkZXNjZW5kLmxlbmd0aCAtIDFdKTtcbiAgaWYgKCFjaGlsZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm8gbm9kZSBuYW1lZCAnJHtkZXNjZW5kW2Rlc2NlbmQubGVuZ3RoIC0gMV19JyBpbiAke2d9YCk7XG4gIH1cbiAgcmV0dXJuIGNoaWxkO1xufVxuXG5mdW5jdGlvbiBjaGlsZE5hbWVzKGc6IEdyYXBoPGFueT4pIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oZmxhdHRlbihnLnNvcnRlZENoaWxkcmVuKCkpKS5tYXAobiA9PiBuLmlkKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0R3JhcGg8QT4oZzogR3JhcGhOb2RlPEE+IHwgdW5kZWZpbmVkKTogR3JhcGg8QT4ge1xuICBpZiAoIWcpIHsgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhIGdyYXBoIG5vZGUsIGdvdCB1bmRlZmluZWQnKTsgfVxuICBpZiAoIShnIGluc3RhbmNlb2YgR3JhcGgpKSB7IHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYSBHcmFwaCwgZ290OiAke2d9YCk7IH1cbiAgcmV0dXJuIGc7XG59XG5cbmNsYXNzIEJsdWVwcmludCBleHRlbmRzIGNka3AuUGlwZWxpbmVCYXNlIHtcbiAgcHJvdGVjdGVkIGRvQnVpbGRQaXBlbGluZSgpOiB2b2lkIHtcbiAgfVxufVxuIl19