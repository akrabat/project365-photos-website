"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/no-extraneous-dependencies */
const cdkp = require("../../../lib");
const pipeline_queries_1 = require("../../../lib/helpers-internal/pipeline-queries");
const test_app_1 = require("../../testhelpers/test-app");
let app;
beforeEach(() => {
    app = new test_app_1.TestApp();
});
afterEach(() => {
    app.cleanup();
});
describe('pipeline-queries', () => {
    describe('stackOutputsReferenced', () => {
        let blueprint;
        let stageDeployment;
        let step;
        let queries;
        let stackDeployment;
        let outputName;
        beforeEach(() => {
            blueprint = new Blueprint(app, 'Bp', {
                synth: new cdkp.ShellStep('Synth', {
                    input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                    commands: ['build'],
                }),
            });
            const stage = new test_app_1.AppWithOutput(app, 'CrossAccount');
            outputName = 'MyOutput';
            stageDeployment = blueprint.addStage(stage);
            stackDeployment = stageDeployment.stacks[0];
            expect(stackDeployment).not.toBeUndefined();
            step = new cdkp.ShellStep('test', {
                input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                commands: ['build'],
                envFromCfnOutputs: {
                    INPUT: stage.theOutput,
                },
            });
            queries = new pipeline_queries_1.PipelineQueries(blueprint);
        });
        const cases = [
            {
                description: 'output referenced in stage pre step',
                additionalSetup: () => stageDeployment.addPre(step),
                expectedResultGetter: () => [outputName],
            },
            {
                description: 'output referenced in stage post step',
                additionalSetup: () => stageDeployment.addPost(step),
                expectedResultGetter: () => [outputName],
            },
            {
                description: 'output referenced in stack pre step',
                additionalSetup: () => stackDeployment.addStackSteps([step], [], []),
                expectedResultGetter: () => [outputName],
            },
            {
                description: 'output referenced in stack changeSet step',
                additionalSetup: () => stackDeployment.addStackSteps([], [step], []),
                expectedResultGetter: () => [outputName],
            },
            {
                description: 'output referenced in stack post step',
                additionalSetup: () => stackDeployment.addStackSteps([], [], [step]),
                expectedResultGetter: () => [outputName],
            },
            {
                description: 'output not referenced',
                additionalSetup: () => { },
                expectedResultGetter: () => [],
            },
        ];
        cases.forEach(testCase => {
            test(testCase.description, () => {
                //WHEN
                testCase.additionalSetup();
                //THEN
                expect(queries.stackOutputsReferenced(stackDeployment)).toEqual(testCase.expectedResultGetter());
            });
        });
    });
});
class Blueprint extends cdkp.PipelineBase {
    doBuildPipeline() {
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUtcXVlcmllcy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGlwZWxpbmUtcXVlcmllcy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0RBQXNEO0FBQ3RELHFDQUFxQztBQUNyQyxxRkFBaUY7QUFDakYseURBQW9FO0FBRXBFLElBQUksR0FBWSxDQUFDO0FBRWpCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDZCxHQUFHLEdBQUcsSUFBSSxrQkFBTyxFQUFFLENBQUM7QUFDdEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO0lBQ2IsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2hCLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtJQUVoQyxRQUFRLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO1FBQ3RDLElBQUksU0FBb0IsQ0FBQztRQUN6QixJQUFJLGVBQXFDLENBQUM7UUFDMUMsSUFBSSxJQUFvQixDQUFDO1FBQ3pCLElBQUksT0FBd0IsQ0FBQztRQUM3QixJQUFJLGVBQXFDLENBQUM7UUFDMUMsSUFBSSxVQUE4QixDQUFDO1FBQ25DLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRTtnQkFDbkMsS0FBSyxFQUFFLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7b0JBQ2pDLEtBQUssRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUM7b0JBQzFELFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQztpQkFDcEIsQ0FBQzthQUNILENBQUMsQ0FBQztZQUNILE1BQU0sS0FBSyxHQUFHLElBQUksd0JBQWEsQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFDckQsVUFBVSxHQUFHLFVB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c0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzICovXG5pbXBvcnQgKiBhcyBjZGtwIGZyb20gJy4uLy4uLy4uL2xpYic7XG5pbXBvcnQgeyBQaXBlbGluZVF1ZXJpZXMgfSBmcm9tICcuLi8uLi8uLi9saWIvaGVscGVycy1pbnRlcm5hbC9waXBlbGluZS1xdWVyaWVzJztcbmltcG9ydCB7IEFwcFdpdGhPdXRwdXQsIFRlc3RBcHAgfSBmcm9tICcuLi8uLi90ZXN0aGVscGVycy90ZXN0LWFwcCc7XG5cbmxldCBhcHA6IFRlc3RBcHA7XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBhcHAgPSBuZXcgVGVzdEFwcCgpO1xufSk7XG5cbmFmdGVyRWFjaCgoKSA9PiB7XG4gIGFwcC5jbGVhbnVwKCk7XG59KTtcblxuZGVzY3JpYmUoJ3BpcGVsaW5lLXF1ZXJpZXMnLCAoKSA9PiB7XG5cbiAgZGVzY3JpYmUoJ3N0YWNrT3V0cHV0c1JlZmVyZW5jZWQnLCAoKSA9PiB7XG4gICAgbGV0IGJsdWVwcmludDogQmx1ZXByaW50O1xuICAgIGxldCBzdGFnZURlcGxveW1lbnQ6IGNka3AuU3RhZ2VEZXBsb3ltZW50O1xuICAgIGxldCBzdGVwOiBjZGtwLlNoZWxsU3RlcDtcbiAgICBsZXQgcXVlcmllczogUGlwZWxpbmVRdWVyaWVzO1xuICAgIGxldCBzdGFja0RlcGxveW1lbnQ6IGNka3AuU3RhY2tEZXBsb3ltZW50O1xuICAgIGxldCBvdXRwdXROYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBibHVlcHJpbnQgPSBuZXcgQmx1ZXByaW50KGFwcCwgJ0JwJywge1xuICAgICAgICBzeW50aDogbmV3IGNka3AuU2hlbGxTdGVwKCdTeW50aCcsIHtcbiAgICAgICAgICBpbnB1dDogY2RrcC5Db2RlUGlwZWxpbmVTb3VyY2UuZ2l0SHViKCd0ZXN0L3Rlc3QnLCAnbWFpbicpLFxuICAgICAgICAgIGNvbW1hbmRzOiBbJ2J1aWxkJ10sXG4gICAgICAgIH0pLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBzdGFnZSA9IG5ldyBBcHBXaXRoT3V0cHV0KGFwcCwgJ0Nyb3NzQWNjb3VudCcpO1xuICAgICAgb3V0cHV0TmFtZSA9ICdNeU91dHB1dCc7XG4gICAgICBzdGFnZURlcGxveW1lbnQgPSBibHVlcHJpbnQuYWRkU3RhZ2Uoc3RhZ2UpO1xuICAgICAgc3RhY2tEZXBsb3ltZW50ID0gc3RhZ2VEZXBsb3ltZW50LnN0YWNrc1swXTtcbiAgICAgIGV4cGVjdChzdGFja0RlcGxveW1lbnQpLm5vdC50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBzdGVwID0gbmV3IGNka3AuU2hlbGxTdGVwKCd0ZXN0Jywge1xuICAgICAgICBpbnB1dDogY2RrcC5Db2RlUGlwZWxpbmVTb3VyY2UuZ2l0SHViKCd0ZXN0L3Rlc3QnLCAnbWFpbicpLFxuICAgICAgICBjb21tYW5kczogWydidWlsZCddLFxuICAgICAgICBlbnZGcm9tQ2ZuT3V0cHV0czoge1xuICAgICAgICAgIElOUFVUOiBzdGFnZS50aGVPdXRwdXQsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIHF1ZXJpZXMgPSBuZXcgUGlwZWxpbmVRdWVyaWVzKGJsdWVwcmludCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBjYXNlcyA9IFtcbiAgICAgIHtcbiAgICAgICAgZGVzY3JpcHRpb246ICdvdXRwdXQgcmVmZXJlbmNlZCBpbiBzdGFnZSBwcmUgc3RlcCcsXG4gICAgICAgIGFkZGl0aW9uYWxTZXR1cDogKCkgPT4gc3RhZ2VEZXBsb3ltZW50LmFkZFByZShzdGVwKSxcbiAgICAgICAgZXhwZWN0ZWRSZXN1bHRHZXR0ZXI6ICgpID0+IFtvdXRwdXROYW1lXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiAnb3V0cHV0IHJlZmVyZW5jZWQgaW4gc3RhZ2UgcG9zdCBzdGVwJyxcbiAgICAgICAgYWRkaXRpb25hbFNldHVwOiAoKSA9PiBzdGFnZURlcGxveW1lbnQuYWRkUG9zdChzdGVwKSxcbiAgICAgICAgZXhwZWN0ZWRSZXN1bHRHZXR0ZXI6ICgpID0+IFtvdXRwdXROYW1lXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiAnb3V0cHV0IHJlZmVyZW5jZWQgaW4gc3RhY2sgcHJlIHN0ZXAnLFxuICAgICAgICBhZGRpdGlvbmFsU2V0dXA6ICgpID0+IHN0YWNrRGVwbG95bWVudC5hZGRTdGFja1N0ZXBzKFtzdGVwXSwgW10sIFtdKSxcbiAgICAgICAgZXhwZWN0ZWRSZXN1bHRHZXR0ZXI6ICgpID0+IFtvdXRwdXROYW1lXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiAnb3V0cHV0IHJlZmVyZW5jZWQgaW4gc3RhY2sgY2hhbmdlU2V0IHN0ZXAnLFxuICAgICAgICBhZGRpdGlvbmFsU2V0dXA6ICgpID0+IHN0YWNrRGVwbG95bWVudC5hZGRTdGFja1N0ZXBzKFtdLCBbc3RlcF0sIFtdKSxcbiAgICAgICAgZXhwZWN0ZWRSZXN1bHRHZXR0ZXI6ICgpID0+IFtvdXRwdXROYW1lXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiAnb3V0cHV0IHJlZmVyZW5jZWQgaW4gc3RhY2sgcG9zdCBzdGVwJyxcbiAgICAgICAgYWRkaXRpb25hbFNldHVwOiAoKSA9PiBzdGFja0RlcGxveW1lbnQuYWRkU3RhY2tTdGVwcyhbXSwgW10sIFtzdGVwXSksXG4gICAgICAgIGV4cGVjdGVkUmVzdWx0R2V0dGVyOiAoKSA9PiBbb3V0cHV0TmFtZV0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBkZXNjcmlwdGlvbjogJ291dHB1dCBub3QgcmVmZXJlbmNlZCcsXG4gICAgICAgIGFkZGl0aW9uYWxTZXR1cDogKCkgPT4geyB9LFxuICAgICAgICBleHBlY3RlZFJlc3VsdEdldHRlcjogKCkgPT4gW10sXG4gICAgICB9LFxuXG4gICAgXTtcblxuICAgIGNhc2VzLmZvckVhY2godGVzdENhc2UgPT4ge1xuICAgICAgdGVzdCh0ZXN0Q2FzZS5kZXNjcmlwdGlvbiwgKCkgPT4ge1xuICAgICAgICAvL1dIRU5cbiAgICAgICAgdGVzdENhc2UuYWRkaXRpb25hbFNldHVwKCk7XG5cbiAgICAgICAgLy9USEVOXG4gICAgICAgIGV4cGVjdChxdWVyaWVzLnN0YWNrT3V0cHV0c1JlZmVyZW5jZWQoc3RhY2tEZXBsb3ltZW50KSkudG9FcXVhbCh0ZXN0Q2FzZS5leHBlY3RlZFJlc3VsdEdldHRlcigpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gIH0pO1xufSk7XG5cblxuY2xhc3MgQmx1ZXByaW50IGV4dGVuZHMgY2RrcC5QaXBlbGluZUJhc2Uge1xuICBwcm90ZWN0ZWQgZG9CdWlsZFBpcGVsaW5lKCk6IHZvaWQge1xuICB9XG59XG4iXX0=