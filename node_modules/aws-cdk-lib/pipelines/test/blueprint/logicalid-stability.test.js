"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../../core");
const javascript_1 = require("../../lib/private/javascript");
const testhelpers_1 = require("../testhelpers");
let legacyApp;
let modernApp;
let legacyPipelineStack;
let modernPipelineStack;
(0, cdk_build_tools_1.describeDeprecated)('logical id stability', () => {
    // this test suite verifies logical id between the new and old (deprecated) APIs.
    // so it must be in a 'describeDeprecated' block
    beforeEach(() => {
        legacyApp = new testhelpers_1.TestApp({
            context: {
                '@aws-cdk/core:newStyleStackSynthesis': '1',
                'aws:cdk:enable-path-metadata': true,
            },
        });
        modernApp = new testhelpers_1.TestApp({
            context: {
                '@aws-cdk/core:newStyleStackSynthesis': '1',
                'aws:cdk:enable-path-metadata': true,
            },
        });
        legacyPipelineStack = new core_1.Stack(legacyApp, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
        modernPipelineStack = new core_1.Stack(modernApp, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
    });
    afterEach(() => {
        legacyApp.cleanup();
        modernApp.cleanup();
    });
    test('stateful or nameable resources have the same logicalID between old and new API', () => {
        const legacyPipe = new testhelpers_1.LegacyTestGitHubNpmPipeline(legacyPipelineStack, 'Cdk');
        legacyPipe.addApplicationStage(new testhelpers_1.MegaAssetsApp(legacyPipelineStack, 'MyApp', {
            numAssets: 2,
        }));
        const modernPipe = new testhelpers_1.ModernTestGitHubNpmPipeline(modernPipelineStack, 'Cdk', {
            crossAccountKeys: true,
        });
        modernPipe.addStage(new testhelpers_1.MegaAssetsApp(modernPipelineStack, 'MyApp', {
            numAssets: 2,
        }));
        const legacyTemplate = (0, testhelpers_1.stackTemplate)(legacyPipelineStack).template;
        const modernTemplate = (0, testhelpers_1.stackTemplate)(modernPipelineStack).template;
        const legacyStateful = filterR(legacyTemplate.Resources, isStateful);
        const modernStateful = filterR(modernTemplate.Resources, isStateful);
        expect(mapR(modernStateful, typeOfRes)).toEqual(mapR(legacyStateful, typeOfRes));
    });
    test('nameable resources have the same names between old and new API', () => {
        const legacyPipe = new testhelpers_1.LegacyTestGitHubNpmPipeline(legacyPipelineStack, 'Cdk', {
            pipelineName: 'asdf',
        });
        legacyPipe.addApplicationStage(new testhelpers_1.MegaAssetsApp(legacyPipelineStack, 'MyApp', {
            numAssets: 2,
        }));
        const modernPipe = new testhelpers_1.ModernTestGitHubNpmPipeline(modernPipelineStack, 'Cdk', {
            pipelineName: 'asdf',
            crossAccountKeys: true,
        });
        modernPipe.addStage(new testhelpers_1.MegaAssetsApp(modernPipelineStack, 'MyApp', {
            numAssets: 2,
        }));
        const legacyTemplate = (0, testhelpers_1.stackTemplate)(legacyPipelineStack).template;
        const modernTemplate = (0, testhelpers_1.stackTemplate)(modernPipelineStack).template;
        const legacyNamed = filterR(legacyTemplate.Resources, hasName);
        const modernNamed = filterR(modernTemplate.Resources, hasName);
        expect(mapR(modernNamed, nameProps)).toEqual(mapR(legacyNamed, nameProps));
    });
});
const STATEFUL_TYPES = [
    // Holds state
    'AWS::S3::Bucket',
    'AWS::KMS::Key',
    'AWS::KMS::Alias',
    // Can be physical-named so will be impossible to replace
    'AWS::CodePipeline::Pipeline',
    'AWS::CodeBuild::Project',
];
function filterR(resources, fn) {
    return (0, javascript_1.mkdict)(Object.entries(resources).filter(([, resource]) => fn(resource)));
}
function mapR(resources, fn) {
    return (0, javascript_1.mkdict)(Object.entries(resources).map(([lid, resource]) => [lid, fn(resource)]));
}
function typeOfRes(r) {
    return r.Type;
}
function isStateful(r) {
    return STATEFUL_TYPES.includes(r.Type);
}
function nameProps(r) {
    return Object.entries(r.Properties).filter(([prop, _]) => 
    // Don't care about policy names
    prop.endsWith('Name') && prop !== 'PolicyName');
}
function hasName(r) {
    return nameProps(r).length > 0;
}
//# sourceMappingURL=data:application/json;base64,