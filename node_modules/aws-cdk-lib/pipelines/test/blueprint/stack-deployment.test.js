"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const assets = require("../../../aws-s3-assets");
const core_1 = require("../../../core");
const lib_1 = require("../../lib");
const test_app_1 = require("../testhelpers/test-app");
test('"templateAsset" represents the CFN template of the stack', () => {
    // GIVEN
    const stage = new core_1.Stage(new test_app_1.TestApp(), 'MyStage');
    new core_1.Stack(stage, 'MyStack');
    // WHEN
    const sd = lib_1.StageDeployment.fromStage(stage);
    // THEN
    expect(sd.stacks[0].templateAsset).not.toBeUndefined();
    expect(sd.stacks[0].templateAsset?.assetId).not.toBeUndefined();
    expect(sd.stacks[0].templateAsset?.assetManifestPath).not.toBeUndefined();
    expect(sd.stacks[0].templateAsset?.assetSelector).not.toBeUndefined();
    expect(sd.stacks[0].templateAsset?.assetType).toBe('file');
    expect(sd.stacks[0].templateAsset?.isTemplate).toBeTruthy();
});
describe('templateUrl', () => {
    test('includes the https:// s3 URL of the template file', () => {
        // GIVEN
        const stage = new core_1.Stage(new test_app_1.TestApp(), 'MyStage', { env: { account: '111', region: 'us-east-1' } });
        new core_1.Stack(stage, 'MyStack');
        // WHEN
        const sd = lib_1.StageDeployment.fromStage(stage);
        // THEN
        expect(sd.stacks[0].templateUrl).toBe('https://cdk-hnb659fds-assets-111-us-east-1.s3.us-east-1.amazonaws.com/21fbb51d7b23f6a6c262b46a9caee79d744a3ac019fd45422d988b96d44b2a22.json');
    });
    test('without region', () => {
        // GIVEN
        const stage = new core_1.Stage(new test_app_1.TestApp(), 'MyStage', { env: { account: '111' } });
        new core_1.Stack(stage, 'MyStack');
        // WHEN
        const sd = lib_1.StageDeployment.fromStage(stage);
        // THEN
        expect(sd.stacks[0].templateUrl).toBe('https://cdk-hnb659fds-assets-111-.s3.amazonaws.com/$%7BAWS::Region%7D/21fbb51d7b23f6a6c262b46a9caee79d744a3ac019fd45422d988b96d44b2a22.json');
    });
});
test('"requiredAssets" contain only assets that are not the template', () => {
    // GIVEN
    const stage = new core_1.Stage(new test_app_1.TestApp(), 'MyStage');
    const stack = new core_1.Stack(stage, 'MyStack');
    new assets.Asset(stack, 'Asset', { path: path.join(__dirname, 'fixtures') });
    // WHEN
    const sd = lib_1.StageDeployment.fromStage(stage);
    // THEN
    expect(sd.stacks[0].assets.length).toBe(1);
    expect(sd.stacks[0].assets[0].assetType).toBe('file');
    expect(sd.stacks[0].assets[0].isTemplate).toBeFalsy();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2stZGVwbG95bWVudC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhY2stZGVwbG95bWVudC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQTZCO0FBQzdCLGlEQUFpRDtBQUNqRCx3Q0FBNkM7QUFDN0MsbUNBQTRDO0FBQzVDLHNEQUFrRDtBQUVsRCxJQUFJLENBQUMsMERBQTBELEVBQUUsR0FBRyxFQUFFO0lBQ3BFLFFBQVE7SUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssQ0FBQyxJQUFJLGtCQUFPLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNsRCxJQUFJLFlBQUssQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFNUIsT0FBTztJQUNQLE1BQU0sRUFBRSxHQUFHLHFCQUFlLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTVDLE9BQU87SUFDUCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNoRSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDMUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN0RSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFD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JztcbmltcG9ydCAqIGFzIGFzc2V0cyBmcm9tICcuLi8uLi8uLi9hd3MtczMtYXNzZXRzJztcbmltcG9ydCB7IFN0YWNrLCBTdGFnZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgU3RhZ2VEZXBsb3ltZW50IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCB7IFRlc3RBcHAgfSBmcm9tICcuLi90ZXN0aGVscGVycy90ZXN0LWFwcCc7XG5cbnRlc3QoJ1widGVtcGxhdGVBc3NldFwiIHJlcHJlc2VudHMgdGhlIENGTiB0ZW1wbGF0ZSBvZiB0aGUgc3RhY2snLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWdlID0gbmV3IFN0YWdlKG5ldyBUZXN0QXBwKCksICdNeVN0YWdlJyk7XG4gIG5ldyBTdGFjayhzdGFnZSwgJ015U3RhY2snKTtcblxuICAvLyBXSEVOXG4gIGNvbnN0IHNkID0gU3RhZ2VEZXBsb3ltZW50LmZyb21TdGFnZShzdGFnZSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3Qoc2Quc3RhY2tzWzBdLnRlbXBsYXRlQXNzZXQpLm5vdC50b0JlVW5kZWZpbmVkKCk7XG4gIGV4cGVjdChzZC5zdGFja3NbMF0udGVtcGxhdGVBc3NldD8uYXNzZXRJZCkubm90LnRvQmVVbmRlZmluZWQoKTtcbiAgZXhwZWN0KHNkLnN0YWNrc1swXS50ZW1wbGF0ZUFzc2V0Py5hc3NldE1hbmlmZXN0UGF0aCkubm90LnRvQmVVbmRlZmluZWQoKTtcbiAgZXhwZWN0KHNkLnN0YWNrc1swXS50ZW1wbGF0ZUFzc2V0Py5hc3NldFNlbGVjdG9yKS5ub3QudG9CZVVuZGVmaW5lZCgpO1xuICBleHBlY3Qoc2Quc3RhY2tzWzBdLnRlbXBsYXRlQXNzZXQ/LmFzc2V0VHlwZSkudG9CZSgnZmlsZScpO1xuICBleHBlY3Qoc2Quc3RhY2tzWzBdLnRlbXBsYXRlQXNzZXQ/LmlzVGVtcGxhdGUpLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG5kZXNjcmliZSgndGVtcGxhdGVVcmwnLCAoKSA9PiB7XG4gIHRlc3QoJ2luY2x1ZGVzIHRoZSBodHRwczovLyBzMyBVUkwgb2YgdGhlIHRlbXBsYXRlIGZpbGUnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFnZSA9IG5ldyBTdGFnZShuZXcgVGVzdEFwcCgpLCAnTXlTdGFnZScsIHsgZW52OiB7IGFjY291bnQ6ICcxMTEnLCByZWdpb246ICd1cy1lYXN0LTEnIH0gfSk7XG4gICAgbmV3IFN0YWNrKHN0YWdlLCAnTXlTdGFjaycpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHNkID0gU3RhZ2VEZXBsb3ltZW50LmZyb21TdGFnZShzdGFnZSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHNkLnN0YWNrc1swXS50ZW1wbGF0ZVVybCkudG9CZSgnaHR0cHM6Ly9jZGstaG5iNjU5ZmRzLWFzc2V0cy0xMTEtdXMtZWFzdC0xLnMzLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tLzIxZmJiNTFkN2IyM2Y2YTZjMjYyYjQ2YTljYWVlNzlkNzQ0YTNhYzAxOWZkNDU0MjJkOTg4Yjk2ZDQ0YjJhMjIuanNvbicpO1xuICB9KTtcblxuICB0ZXN0KCd3aXRob3V0IHJlZ2lvbicsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWdlID0gbmV3IFN0YWdlKG5ldyBUZXN0QXBwKCksICdNeVN0YWdlJywgeyBlbnY6IHsgYWNjb3VudDogJzExMScgfSB9KTtcbiAgICBuZXcgU3RhY2soc3RhZ2UsICdNeVN0YWNrJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3Qgc2QgPSBTdGFnZURlcGxveW1lbnQuZnJvbVN0YWdlKHN0YWdlKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qoc2Quc3RhY2tzWzBdLnRlbXBsYXRlVXJsKS50b0JlKCdodHRwczovL2Nkay1obmI2NTlmZHMtYXNzZXRzLTExMS0uczMuYW1hem9uYXdzLmNvbS8kJTdCQVdTOjpSZWdpb24lN0QvMjFmYmI1MWQ3YjIzZjZhNmMyNjJiNDZhOWNhZWU3OWQ3NDRhM2FjMDE5ZmQ0NTQyMmQ5ODhiOTZkNDRiMmEyMi5qc29uJyk7XG4gIH0pO1xuXG59KTtcblxuXG50ZXN0KCdcInJlcXVpcmVkQXNzZXRzXCIgY29udGFpbiBvbmx5IGFzc2V0cyB0aGF0IGFyZSBub3QgdGhlIHRlbXBsYXRlJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBzdGFnZSA9IG5ldyBTdGFnZShuZXcgVGVzdEFwcCgpLCAnTXlTdGFnZScpO1xuICBjb25zdCBzdGFjayA9IG5ldyBTdGFjayhzdGFnZSwgJ015U3RhY2snKTtcbiAgbmV3IGFzc2V0cy5Bc3NldChzdGFjaywgJ0Fzc2V0JywgeyBwYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnZml4dHVyZXMnKSB9KTtcblxuICAvLyBXSEVOXG4gIGNvbnN0IHNkID0gU3RhZ2VEZXBsb3ltZW50LmZyb21TdGFnZShzdGFnZSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3Qoc2Quc3RhY2tzWzBdLmFzc2V0cy5sZW5ndGgpLnRvQmUoMSk7XG4gIGV4cGVjdChzZC5zdGFja3NbMF0uYXNzZXRzWzBdLmFzc2V0VHlwZSkudG9CZSgnZmlsZScpO1xuICBleHBlY3Qoc2Quc3RhY2tzWzBdLmFzc2V0c1swXS5pc1RlbXBsYXRlKS50b0JlRmFsc3koKTtcbn0pO1xuXG4iXX0=