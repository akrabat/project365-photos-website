"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const codebuild = require("../../../aws-codebuild");
const iam = require("../../../aws-iam");
const s3 = require("../../../aws-s3");
const ec2 = require("../../../aws-ec2");
const core_1 = require("../../../core");
const cdkp = require("../../lib");
const lib_1 = require("../../lib");
const testhelpers_1 = require("../testhelpers");
let app;
let pipelineStack;
beforeEach(() => {
    app = new testhelpers_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
});
afterEach(() => {
    app.cleanup();
});
test('additionalinputs creates the right commands', () => {
    // WHEN
    new cdkp.CodePipeline(pipelineStack, 'Pipeline', {
        synth: new cdkp.CodeBuildStep('Synth', {
            commands: ['/bin/true'],
            input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
            additionalInputs: {
                'some/deep/directory': cdkp.CodePipelineSource.gitHub('test2/test2', 'main'),
            },
        }),
    });
    // THEN
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
        Source: {
            BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                phases: {
                    install: {
                        commands: [
                            '[ ! -d "some/deep/directory" ] || { echo \'additionalInputs: "some/deep/directory" must not exist yet. If you want to merge multiple artifacts, use a "cp" command.\'; exit 1; } && mkdir -p -- "some/deep" && ln -s -- "$CODEBUILD_SRC_DIR_test2_test2_Source" "some/deep/directory"',
                        ],
                    },
                },
            })),
        },
    });
});
test('CodeBuild projects have a description', () => {
    new cdkp.CodePipeline(pipelineStack, 'Pipeline', {
        synth: new cdkp.CodeBuildStep('Synth', {
            commands: ['/bin/true'],
            input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
        }),
    });
    // THEN
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
        Description: 'Pipeline step PipelineStack/Pipeline/Build/Synth',
    });
});
test('long duration steps are supported', () => {
    // WHEN
    new cdkp.CodePipeline(pipelineStack, 'Pipeline', {
        synth: new cdkp.CodeBuildStep('Synth', {
            commands: ['/bin/true'],
            input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
            additionalInputs: {
                'some/deep/directory': cdkp.CodePipelineSource.gitHub('test2/test2', 'main'),
            },
            timeout: core_1.Duration.minutes(180),
        }),
    });
    // THEN
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
        TimeoutInMinutes: 180,
    });
});
test('timeout can be configured as part of defaults', () => {
    // WHEN
    new cdkp.CodePipeline(pipelineStack, 'Pipeline', {
        synth: new cdkp.CodeBuildStep('Synth', {
            commands: ['/bin/true'],
            input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
            additionalInputs: {
                'some/deep/directory': cdkp.CodePipelineSource.gitHub('test2/test2', 'main'),
            },
        }),
        codeBuildDefaults: {
            timeout: core_1.Duration.minutes(180),
        },
    });
    // THEN
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
        TimeoutInMinutes: 180,
    });
});
test('timeout from defaults can be overridden', () => {
    // WHEN
    new cdkp.CodePipeline(pipelineStack, 'Pipeline', {
        synth: new cdkp.CodeBuildStep('Synth', {
            commands: ['/bin/true'],
            input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
            additionalInputs: {
                'some/deep/directory': cdkp.CodePipelineSource.gitHub('test2/test2', 'main'),
            },
            timeout: core_1.Duration.minutes(888),
        }),
        codeBuildDefaults: {
            timeout: core_1.Duration.minutes(180),
        },
    });
    // THEN
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
        TimeoutInMinutes: 888,
    });
});
test('fileSystemLocations can be configured as part of defaults', () => {
    // WHEN
    new cdkp.CodePipeline(pipelineStack, 'Pipeline', {
        synth: new cdkp.CodeBuildStep('Synth', {
            commands: ['/bin/true'],
            input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
            additionalInputs: {
                'some/deep/directory': cdkp.CodePipelineSource.gitHub('test2/test2', 'main'),
            },
        }),
        codeBuildDefaults: {
            fileSystemLocations: [codebuild.FileSystemLocation.efs({
                    identifier: 'myidentifier2',
                    location: 'myclodation.mydnsroot.com:/loc',
                    mountPoint: '/media',
                    mountOptions: 'opts',
                })],
            vpc: new ec2.Vpc(pipelineStack, 'MyVpc'),
            buildEnvironment: {
                privileged: true,
            },
        },
    });
    // THEN
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
        FileSystemLocations: [
            {
                Identifier: 'myidentifier2',
                MountPoint: '/media',
                MountOptions: 'opts',
                Location: 'myclodation.mydnsroot.com:/loc',
                Type: 'EFS',
            },
        ],
    });
});
test('envFromOutputs works even with very long stage and stack names', () => {
    const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
    const myApp = new testhelpers_1.AppWithOutput(app, 'Alpha'.repeat(10), {
        stackId: 'Stack'.repeat(10),
    });
    pipeline.addStage(myApp, {
        post: [
            new cdkp.ShellStep('Approve', {
                commands: ['/bin/true'],
                envFromCfnOutputs: {
                    THE_OUTPUT: myApp.theOutput,
                },
            }),
        ],
    });
    // THEN - did not throw an error about identifier lengths
});
test('role passed it used for project and code build action', () => {
    const projectRole = new iam.Role(pipelineStack, 'ProjectRole', {
        roleName: 'ProjectRole',
        assumedBy: new iam.ServicePrincipal('codebuild.amazon.com'),
    });
    const buildRole = new iam.Role(pipelineStack, 'BuildRole', {
        roleName: 'BuildRole',
        assumedBy: new iam.ServicePrincipal('codebuild.amazon.com'),
    });
    // WHEN
    new cdkp.CodePipeline(pipelineStack, 'Pipeline', {
        synth: new cdkp.CodeBuildStep('Synth', {
            commands: ['/bin/true'],
            input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
            role: projectRole,
            actionRole: buildRole,
        }),
    });
    // THEN
    const tpl = assertions_1.Template.fromStack(pipelineStack);
    tpl.hasResourceProperties('AWS::CodeBuild::Project', {
        ServiceRole: {
            'Fn::GetAtt': [
                'ProjectRole5B707505',
                'Arn',
            ],
        },
    });
    tpl.hasResourceProperties('AWS::CodePipeline::Pipeline', {
        Stages: [
            // source stage
            {},
            // build stage,
            {
                Actions: [
                    {
                        ActionTypeId: {
                            Category: 'Build',
                            Owner: 'AWS',
                            Provider: 'CodeBuild',
                        },
                        RoleArn: {
                            'Fn::GetAtt': [
                                'BuildRole41B77417',
                                'Arn',
                            ],
                        },
                    },
                ],
            },
            // Self-update
            {},
        ],
    });
});
test('exportedVariables', () => {
    const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
    // GIVEN
    const producer = new cdkp.CodeBuildStep('Produce', {
        commands: ['export MY_VAR=hello'],
    });
    const consumer = new cdkp.CodeBuildStep('Consume', {
        env: {
            THE_VAR: producer.exportedVariable('MY_VAR'),
        },
        commands: [
            'echo "The variable was: $THE_VAR"',
        ],
    });
    // WHEN
    pipeline.addWave('MyWave', {
        post: [consumer, producer],
    });
    // THEN
    const template = assertions_1.Template.fromStack(pipelineStack);
    template.hasResourceProperties('AWS::CodePipeline::Pipeline', {
        Stages: [
            { Name: 'Source' },
            { Name: 'Build' },
            { Name: 'UpdatePipeline' },
            {
                Name: 'MyWave',
                Actions: [
                    assertions_1.Match.objectLike({
                        Name: 'Produce',
                        Namespace: 'MyWave@Produce',
                        RunOrder: 1,
                    }),
                    assertions_1.Match.objectLike({
                        Name: 'Consume',
                        RunOrder: 2,
                        Configuration: assertions_1.Match.objectLike({
                            EnvironmentVariables: assertions_1.Match.serializedJson(assertions_1.Match.arrayWith([
                                {
                                    name: 'THE_VAR',
                                    type: 'PLAINTEXT',
                                    value: '#{MyWave@Produce.MY_VAR}',
                                },
                            ])),
                        }),
                    }),
                ],
            },
        ],
    });
    template.hasResourceProperties('AWS::CodeBuild::Project', {
        Source: {
            BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                env: {
                    'exported-variables': ['MY_VAR'],
                },
            })),
        },
    });
});
test('step has caching set', () => {
    // WHEN
    const myCachingBucket = new s3.Bucket(pipelineStack, 'MyCachingBucket');
    new cdkp.CodePipeline(pipelineStack, 'Pipeline', {
        synth: new cdkp.CodeBuildStep('Synth', {
            cache: codebuild.Cache.bucket(myCachingBucket),
            commands: ['/bin/true'],
            input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
        }),
    });
    // THEN
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
        Cache: {
            Location: {
                'Fn::Join': ['/', [{ Ref: 'MyCachingBucket8C98C553' }, { Ref: 'AWS::NoValue' }]],
            },
        },
    });
});
test('step exposes consumed stack output reference', () => {
    // WHEN
    const myApp = new testhelpers_1.AppWithOutput(app, 'AppWithOutput', {
        stackId: 'Stack',
    });
    const step = new cdkp.ShellStep('AStep', {
        commands: ['/bin/true'],
        envFromCfnOutputs: {
            THE_OUTPUT: myApp.theOutput,
        },
    });
    // THEN
    expect(step.consumedStackOutputs).toContainEqual(lib_1.StackOutputReference.fromCfnOutput(myApp.theOutput));
});
//# sourceMappingURL=data:application/json;base64,