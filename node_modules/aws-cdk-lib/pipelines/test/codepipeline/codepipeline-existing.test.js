"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codePipeline = require("../../../aws-codepipeline");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const cdk = require("../../../core");
const cdkp = require("../../lib");
(0, cdk_build_tools_1.describeDeprecated)('codepipeline existing', () => {
    test('Does not allow setting a pipelineName if an existing CodePipeline is given', () => {
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'PipelineStack');
        const existingCodePipeline = new codePipeline.Pipeline(stack, 'CustomCodePipeline');
        expect(() => {
            new cdkp.CdkPipeline(stack, 'CDKPipeline', {
                pipelineName: 'CustomPipelineName',
                codePipeline: existingCodePipeline,
                cloudAssemblyArtifact: new codePipeline.Artifact(),
            });
        }).toThrow("Cannot set 'pipelineName' if an existing CodePipeline is given using 'codePipeline'");
    });
    test('Does not allow enabling crossAccountKeys if an existing CodePipeline is given', () => {
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'PipelineStack');
        const existingCodePipeline = new codePipeline.Pipeline(stack, 'CustomCodePipeline');
        expect(() => {
            new cdkp.CdkPipeline(stack, 'CDKPipeline', {
                crossAccountKeys: true,
                codePipeline: existingCodePipeline,
                cloudAssemblyArtifact: new codePipeline.Artifact(),
            });
        }).toThrow("Cannot set 'crossAccountKeys' if an existing CodePipeline is given using 'codePipeline'");
    });
    test('Does not allow enabling key rotation if an existing CodePipeline is given', () => {
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'PipelineStack');
        const existingCodePipeline = new codePipeline.Pipeline(stack, 'CustomCodePipeline');
        expect(() => {
            new cdkp.CdkPipeline(stack, 'CDKPipeline', {
                enableKeyRotation: true,
                codePipeline: existingCodePipeline,
                cloudAssemblyArtifact: new codePipeline.Artifact(),
            });
        }).toThrow("Cannot set 'enableKeyRotation' if an existing CodePipeline is given using 'codePipeline'");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZXBpcGVsaW5lLWV4aXN0aW5nLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb2RlcGlwZWxpbmUtZXhpc3RpbmcudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBEQUEwRDtBQUMxRCw4REFBOEQ7QUFDOUQscUNBQXFDO0FBQ3JDLGtDQUFrQztBQUVsQyxJQUFBLG9DQUFrQixFQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtJQUUvQyxJQUFJLENBQUMsNEVBQTRFLEVBQUUsR0FBRyxFQUFFO1FBQ3RGLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDbEQsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFFcEYsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO2dCQUN6QyxZQUFZLEVBQUUsb0JBQW9CO2dCQUNsQyxZQUFZLEVBQUUsb0JBQW9CO2dCQUNsQyxxQkFBcUIsRUFBRSxJQUFJLFlBQVksQ0FBQyxRQUFRLEVBQUU7YUFDbkQsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHFGQUFxRixDQUFDLENBQUM7SUFDcEcsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsK0VBQStFLEVBQUUsR0FBRyxFQUFFO1FBQ3pGLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDbEQsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFFcEYsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO2dCQUN6QyxnQkFBZ0IsRUFBRSxJQUFJO2dCQUN0QixZQUFZLEVBQUUsb0JBQW9CO2dCQUNsQyxxQkFBcUIsRUFBRSxJQUFJLFlBQVksQ0FBQyxRQUFRLEVBQUU7YUFDbkQsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHlGQUF5RixDQUFDLENBQUM7SUFDeEcsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsMkVBQTJFLEVBQUUsR0FBRyxFQUFFO1FBQ3JGLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDbEQsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFFcEYsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO2dCQUN6QyxpQkFBaUIsRUFBRSxJQUFJO2dCQUN2QixZQUFZLEVBQUUsb0JBQW9CO2dCQUNsQyxxQkFBcUIsRUFBRSxJQUFJLFlBQVksQ0FBQyxRQUFRLEVBQUU7YUFDbkQsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLDBGQUEwRixDQUFDLENBQUM7SUFDekcsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvZGVQaXBlbGluZSBmcm9tICcuLi8uLi8uLi9hd3MtY29kZXBpcGVsaW5lJztcbmltcG9ydCB7IGRlc2NyaWJlRGVwcmVjYXRlZCB9IGZyb20gJ0Bhd3MtY2RrL2Nkay1idWlsZC10b29scyc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBjZGtwIGZyb20gJy4uLy4uL2xpYic7XG5cbmRlc2NyaWJlRGVwcmVjYXRlZCgnY29kZXBpcGVsaW5lIGV4aXN0aW5nJywgKCkgPT4ge1xuXG4gIHRlc3QoJ0RvZXMgbm90IGFsbG93IHNldHRpbmcgYSBwaXBlbGluZU5hbWUgaWYgYW4gZXhpc3RpbmcgQ29kZVBpcGVsaW5lIGlzIGdpdmVuJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ1BpcGVsaW5lU3RhY2snKTtcbiAgICBjb25zdCBleGlzdGluZ0NvZGVQaXBlbGluZSA9IG5ldyBjb2RlUGlwZWxpbmUuUGlwZWxpbmUoc3RhY2ssICdDdXN0b21Db2RlUGlwZWxpbmUnKTtcblxuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBuZXcgY2RrcC5DZGtQaXBlbGluZShzdGFjaywgJ0NES1BpcGVsaW5lJywge1xuICAgICAgICBwaXBlbGluZU5hbWU6ICdDdXN0b21QaXBlbGluZU5hbWUnLFxuICAgICAgICBjb2RlUGlwZWxpbmU6IGV4aXN0aW5nQ29kZVBpcGVsaW5lLFxuICAgICAgICBjbG91ZEFzc2VtYmx5QXJ0aWZhY3Q6IG5ldyBjb2RlUGlwZWxpbmUuQXJ0aWZhY3QoKSxcbiAgICAgIH0pO1xuICAgIH0pLnRvVGhyb3coXCJDYW5ub3Qgc2V0ICdwaXBlbGluZU5hbWUnIGlmIGFuIGV4aXN0aW5nIENvZGVQaXBlbGluZSBpcyBnaXZlbiB1c2luZyAnY29kZVBpcGVsaW5lJ1wiKTtcbiAgfSk7XG5cbiAgdGVzdCgnRG9lcyBub3QgYWxsb3cgZW5hYmxpbmcgY3Jvc3NBY2NvdW50S2V5cyBpZiBhbiBleGlzdGluZyBDb2RlUGlwZWxpbmUgaXMgZ2l2ZW4nLCAoKSA9PiB7XG4gICAgY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnUGlwZWxpbmVTdGFjaycpO1xuICAgIGNvbnN0IGV4aXN0aW5nQ29kZVBpcGVsaW5lID0gbmV3IGNvZGVQaXBlbGluZS5QaXBlbGluZShzdGFjaywgJ0N1c3RvbUNvZGVQaXBlbGluZScpO1xuXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIG5ldyBjZGtwLkNka1BpcGVsaW5lKHN0YWNrLCAnQ0RLUGlwZWxpbmUnLCB7XG4gICAgICAgIGNyb3NzQWNjb3VudEtleXM6IHRydWUsXG4gICAgICAgIGNvZGVQaXBlbGluZTogZXhpc3RpbmdDb2RlUGlwZWxpbmUsXG4gICAgICAgIGNsb3VkQXNzZW1ibHlBcnRpZmFjdDogbmV3IGNvZGVQaXBlbGluZS5BcnRpZmFjdCgpLFxuICAgICAgfSk7XG4gICAgfSkudG9UaHJvdyhcIkNhbm5vdCBzZXQgJ2Nyb3NzQWNjb3VudEtleXMnIGlmIGFuIGV4aXN0aW5nIENvZGVQaXBlbGluZSBpcyBnaXZlbiB1c2luZyAnY29kZVBpcGVsaW5lJ1wiKTtcbiAgfSk7XG5cbiAgdGVzdCgnRG9lcyBub3QgYWxsb3cgZW5hYmxpbmcga2V5IHJvdGF0aW9uIGlmIGFuIGV4aXN0aW5nIENvZGVQaXBlbGluZSBpcyBnaXZlbicsICgpID0+IHtcbiAgICBjb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdQaXBlbGluZVN0YWNrJyk7XG4gICAgY29uc3QgZXhpc3RpbmdDb2RlUGlwZWxpbmUgPSBuZXcgY29kZVBpcGVsaW5lLlBpcGVsaW5lKHN0YWNrLCAnQ3VzdG9tQ29kZVBpcGVsaW5lJyk7XG5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgbmV3IGNka3AuQ2RrUGlwZWxpbmUoc3RhY2ssICdDREtQaXBlbGluZScsIHtcbiAgICAgICAgZW5hYmxlS2V5Um90YXRpb246IHRydWUsXG4gICAgICAgIGNvZGVQaXBlbGluZTogZXhpc3RpbmdDb2RlUGlwZWxpbmUsXG4gICAgICAgIGNsb3VkQXNzZW1ibHlBcnRpZmFjdDogbmV3IGNvZGVQaXBlbGluZS5BcnRpZmFjdCgpLFxuICAgICAgfSk7XG4gICAgfSkudG9UaHJvdyhcIkNhbm5vdCBzZXQgJ2VuYWJsZUtleVJvdGF0aW9uJyBpZiBhbiBleGlzdGluZyBDb2RlUGlwZWxpbmUgaXMgZ2l2ZW4gdXNpbmcgJ2NvZGVQaXBlbGluZSdcIik7XG4gIH0pO1xufSk7Il19