"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const ccommit = require("../../../aws-codecommit");
const aws_codepipeline_actions_1 = require("../../../aws-codepipeline-actions");
const ecr = require("../../../aws-ecr");
const aws_iam_1 = require("../../../aws-iam");
const s3 = require("../../../aws-s3");
const core_1 = require("../../../core");
const cdkp = require("../../lib");
const testhelpers_1 = require("../testhelpers");
let app;
let pipelineStack;
beforeEach(() => {
    app = new testhelpers_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
});
afterEach(() => {
    app.cleanup();
});
test('CodeCommit source handles tokenized names correctly', () => {
    const repo = new ccommit.Repository(pipelineStack, 'Repo', {
        repositoryName: 'MyRepo',
    });
    new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
        input: cdkp.CodePipelineSource.codeCommit(repo, 'main'),
    });
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
        Stages: assertions_1.Match.arrayWith([{
                Name: 'Source',
                Actions: [
                    assertions_1.Match.objectLike({
                        Configuration: assertions_1.Match.objectLike({
                            RepositoryName: { 'Fn::GetAtt': [assertions_1.Match.anyValue(), 'Name'] },
                        }),
                        Name: { 'Fn::GetAtt': [assertions_1.Match.anyValue(), 'Name'] },
                    }),
                ],
            }]),
    });
});
test('CodeCommit source honors all valid properties', () => {
    const repo = new ccommit.Repository(pipelineStack, 'Repo', {
        repositoryName: 'MyRepo',
    });
    new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
        input: cdkp.CodePipelineSource.codeCommit(repo, 'main', {
            codeBuildCloneOutput: true,
            trigger: aws_codepipeline_actions_1.CodeCommitTrigger.POLL,
            eventRole: new aws_iam_1.Role(pipelineStack, 'role', {
                assumedBy: new aws_iam_1.AnyPrincipal(),
                roleName: 'some-role',
            }),
        }),
    });
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
        Stages: assertions_1.Match.arrayWith([{
                Name: 'Source',
                Actions: [
                    assertions_1.Match.objectLike({
                        Configuration: assertions_1.Match.objectLike({
                            BranchName: 'main',
                            PollForSourceChanges: true,
                            OutputArtifactFormat: 'CODEBUILD_CLONE_REF',
                        }),
                        RoleArn: { 'Fn::GetAtt': [assertions_1.Match.anyValue(), 'Arn'] },
                    }),
                ],
            }]),
    });
});
test('S3 source handles tokenized names correctly', () => {
    const bucket = new s3.Bucket(pipelineStack, 'Bucket');
    new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
        input: cdkp.CodePipelineSource.s3(bucket, 'thefile.zip'),
    });
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
        Stages: assertions_1.Match.arrayWith([{
                Name: 'Source',
                Actions: [
                    assertions_1.Match.objectLike({
                        Configuration: assertions_1.Match.objectLike({
                            S3Bucket: { Ref: assertions_1.Match.anyValue() },
                            S3ObjectKey: 'thefile.zip',
                        }),
                        Name: { Ref: assertions_1.Match.anyValue() },
                    }),
                ],
            }]),
    });
});
test('ECR source handles tokenized and namespaced names correctly', () => {
    const repository = new ecr.Repository(pipelineStack, 'Repository', { repositoryName: 'namespace/repo' });
    new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
        input: cdkp.CodePipelineSource.ecr(repository),
    });
    const template = assertions_1.Template.fromStack(pipelineStack);
    template.hasResourceProperties('AWS::CodePipeline::Pipeline', {
        Stages: assertions_1.Match.arrayWith([{
                Name: 'Source',
                Actions: [
                    assertions_1.Match.objectLike({
                        Configuration: assertions_1.Match.objectLike({
                            RepositoryName: { Ref: assertions_1.Match.anyValue() },
                        }),
                        Name: assertions_1.Match.objectLike({
                            'Fn::Join': [
                                '_',
                                {
                                    'Fn::Split': [
                                        '/',
                                        {
                                            Ref: assertions_1.Match.anyValue(),
                                        },
                                    ],
                                },
                            ],
                        }),
                    }),
                ],
            }]),
    });
});
test('GitHub source honors all valid properties', () => {
    new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
        input: cdkp.CodePipelineSource.gitHub('owner/repo', 'main', {
            trigger: aws_codepipeline_actions_1.GitHubTrigger.POLL,
            authentication: core_1.SecretValue.unsafePlainText('super-secret'),
        }),
    });
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
        Stages: assertions_1.Match.arrayWith([{
                Name: 'Source',
                Actions: [
                    assertions_1.Match.objectLike({
                        Configuration: assertions_1.Match.objectLike({
                            Owner: 'owner',
                            Repo: 'repo',
                            Branch: 'main',
                            PollForSourceChanges: true,
                            OAuthToken: 'super-secret',
                        }),
                        Name: 'owner_repo',
                    }),
                ],
            }]),
    });
});
test('GitHub source does not accept ill-formatted identifiers', () => {
    expect(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
            input: cdkp.CodePipelineSource.gitHub('repo-only', 'main'),
        });
    }).toThrow('GitHub repository name should be a resolved string like \'<owner>/<repo>\', got \'repo-only\'');
});
test('GitHub source does not accept unresolved identifiers', () => {
    expect(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
            input: cdkp.CodePipelineSource.gitHub(core_1.Token.asString({}), 'main'),
        });
    }).toThrow(/Step id cannot be unresolved/);
});
test('Dashes in repo names are removed from artifact names', () => {
    new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
        input: cdkp.CodePipelineSource.gitHub('owner/my-repo', 'main'),
    });
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
        Stages: assertions_1.Match.arrayWith([{
                Name: 'Source',
                Actions: [
                    assertions_1.Match.objectLike({
                        OutputArtifacts: [
                            { Name: 'owner_my_repo_Source' },
                        ],
                    }),
                ],
            }]),
    });
});
test('artifact names are never longer than 128 characters', () => {
    new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
        input: cdkp.CodePipelineSource.gitHub('owner/' + 'my-repo'.repeat(100), 'main'),
    });
    const artifactId = new assertions_1.Capture();
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
        Stages: assertions_1.Match.arrayWith([{
                Name: 'Source',
                Actions: [
                    assertions_1.Match.objectLike({
                        OutputArtifacts: [
                            { Name: artifactId },
                        ],
                    }),
                ],
            }]),
    });
    expect(artifactId.asString().length).toBeLessThanOrEqual(128);
});
test('can use source attributes in pipeline', () => {
    const gitHub = cdkp.CodePipelineSource.gitHub('owner/my-repo', 'main');
    // WHEN
    new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
        input: gitHub,
        synth: new cdkp.ShellStep('Synth', {
            env: {
                GITHUB_URL: gitHub.sourceAttribute('CommitUrl'),
            },
            commands: [
                'echo "Click here: $GITHUB_URL"',
            ],
        }),
        selfMutation: false,
    });
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
        Stages: [
            { Name: 'Source' },
            {
                Name: 'Build',
                Actions: [
                    {
                        Name: 'Synth',
                        Configuration: assertions_1.Match.objectLike({
                            EnvironmentVariables: assertions_1.Match.serializedJson([
                                {
                                    name: 'GITHUB_URL',
                                    type: 'PLAINTEXT',
                                    value: '#{Source@owner_my-repo.CommitUrl}',
                                },
                            ]),
                        }),
                    },
                ],
            },
        ],
    });
});
test('pass role to s3 codepipeline source', () => {
    const bucket = new s3.Bucket(pipelineStack, 'Bucket');
    const role = new aws_iam_1.Role(pipelineStack, 'TestRole', {
        assumedBy: new aws_iam_1.AnyPrincipal(),
    });
    new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
        input: cdkp.CodePipelineSource.s3(bucket, 'thefile.zip', {
            role,
        }),
    });
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
        Stages: assertions_1.Match.arrayWith([{
                Name: 'Source',
                Actions: [
                    assertions_1.Match.objectLike({
                        Configuration: assertions_1.Match.objectLike({
                            S3Bucket: { Ref: assertions_1.Match.anyValue() },
                            S3ObjectKey: 'thefile.zip',
                        }),
                        Name: { Ref: assertions_1.Match.anyValue() },
                        RoleArn: {
                            'Fn::GetAtt': [
                                assertions_1.Match.stringLikeRegexp('TestRole.*'),
                                'Arn',
                            ],
                        },
                    }),
                ],
            }]),
    });
});
test.each([
    ['CodeCommit', (stack) => {
            const repo = new ccommit.Repository(stack, 'Repo', {
                repositoryName: 'MyRepo',
            });
            return cdkp.CodePipelineSource.codeCommit(repo, 'main', {
                actionName: 'ConfiguredName',
            });
        }],
    ['S3', (stack) => {
            const bucket = new s3.Bucket(stack, 'Bucket');
            return cdkp.CodePipelineSource.s3(bucket, 'thefile.zip', {
                actionName: 'ConfiguredName',
            });
        }],
    ['ECR', (stack) => {
            const repository = new ecr.Repository(stack, 'Repository', { repositoryName: 'namespace/repo' });
            return cdkp.CodePipelineSource.ecr(repository, {
                actionName: 'ConfiguredName',
            });
        }],
    ['GitHub', () => {
            return cdkp.CodePipelineSource.gitHub('owner/repo', 'main', {
                actionName: 'ConfiguredName',
            });
        }],
    ['CodeStar', () => {
            return cdkp.CodePipelineSource.connection('owner/repo', 'main', {
                connectionArn: 'arn:aws:codestar-connections:us-west-2:123456789012:connection/39e4c34d-e13a-4e94-a886',
                actionName: 'ConfiguredName',
            });
        }],
])('can configure actionName for %s', (_name, fac) => {
    new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
        input: fac(pipelineStack),
    });
    assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
        Stages: assertions_1.Match.arrayWith([{
                Name: 'Source',
                Actions: [
                    assertions_1.Match.objectLike({
                        Name: 'ConfiguredName',
                    }),
                ],
            }]),
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZXBpcGVsaW5lLXNvdXJjZXMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvZGVwaXBlbGluZS1zb3VyY2VzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvREFBK0Q7QUFDL0QsbURBQW1EO0FBQ25ELGdGQUFxRjtBQUNyRix3Q0FBd0M7QUFDeEMsOENBQXNEO0FBQ3RELHNDQUFzQztBQUN0Qyx3Q0FBMEQ7QUFDMUQsa0NBQWtDO0FBQ2xDLGdEQUFvRjtBQUVwRixJQUFJLEdBQVksQ0FBQztBQUNqQixJQUFJLGFBQW9CLENBQUM7QUFFekIsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNkLEdBQUcsR0FBRyxJQUFJLHFCQUFPLEVBQUUsQ0FBQztJQUNwQixhQUFhLEdBQUcsSUFBSSxZQUFLLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxFQUFFLEdBQUcsRUFBRSwwQkFBWSxFQUFFLENBQUMsQ0FBQztBQUN6RSxDQUFDLENBQUMsQ0FBQztBQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYixHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDaEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMscURBQXFELEVBQUUsR0FBRyxFQUFFO0lBQy9ELE1BQU0sSUFBSSxHQUFHLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFO1FBQ3pELGNBQWMsRUFBRSxRQUFRO0tBQ3pCLENBQUMsQ0FBQztJQUNILElBQUkseUNBQTJCLENBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRTtRQUN6RCxLQUFLLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO0tBQ3hELENBQUMsQ0FBQztJQUVILHFCQUFRLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLDZCQUE2QixFQUFFO1FBQ3JGLE1BQU0sRUFBRSxrQkFBSyxDQUFDLFNB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RUFBRSxnQkFBZ0I7cUJBQ3ZCLENBQUM7aUJBQ0g7YUFDRixDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhcHR1cmUsIE1hdGNoLCBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uLy4uL2Fzc2VydGlvbnMnO1xuaW1wb3J0ICogYXMgY2NvbW1pdCBmcm9tICcuLi8uLi8uLi9hd3MtY29kZWNvbW1pdCc7XG5pbXBvcnQgeyBDb2RlQ29tbWl0VHJpZ2dlciwgR2l0SHViVHJpZ2dlciB9IGZyb20gJy4uLy4uLy4uL2F3cy1jb2RlcGlwZWxpbmUtYWN0aW9ucyc7XG5pbXBvcnQgKiBhcyBlY3IgZnJvbSAnLi4vLi4vLi4vYXdzLWVjcic7XG5pbXBvcnQgeyBBbnlQcmluY2lwYWwsIFJvbGUgfSBmcm9tICcuLi8uLi8uLi9hd3MtaWFtJztcbmltcG9ydCAqIGFzIHMzIGZyb20gJy4uLy4uLy4uL2F3cy1zMyc7XG5pbXBvcnQgeyBTZWNyZXRWYWx1ZSwgU3RhY2ssIFRva2VuIH0gZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBjZGtwIGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgeyBQSVBFTElORV9FTlYsIFRlc3RBcHAsIE1vZGVyblRlc3RHaXRIdWJOcG1QaXBlbGluZSB9IGZyb20gJy4uL3Rlc3RoZWxwZXJzJztcblxubGV0IGFwcDogVGVzdEFwcDtcbmxldCBwaXBlbGluZVN0YWNrOiBTdGFjaztcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIGFwcCA9IG5ldyBUZXN0QXBwKCk7XG4gIHBpcGVsaW5lU3RhY2sgPSBuZXcgU3RhY2soYXBwLCAnUGlwZWxpbmVTdGFjaycsIHsgZW52OiBQSVBFTElORV9FTlYgfSk7XG59KTtcblxuYWZ0ZXJFYWNoKCgpID0+IHtcbiAgYXBwLmNsZWFudXAoKTtcbn0pO1xuXG50ZXN0KCdDb2RlQ29tbWl0IHNvdXJjZSBoYW5kbGVzIHRva2VuaXplZCBuYW1lcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gIGNvbnN0IHJlcG8gPSBuZXcgY2NvbW1pdC5SZXBvc2l0b3J5KHBpcGVsaW5lU3RhY2ssICdSZXBvJywge1xuICAgIHJlcG9zaXRvcnlOYW1lOiAnTXlSZXBvJyxcbiAgfSk7XG4gIG5ldyBNb2Rlcm5UZXN0R2l0SHViTnBtUGlwZWxpbmUocGlwZWxpbmVTdGFjaywgJ1BpcGVsaW5lJywge1xuICAgIGlucHV0OiBjZGtwLkNvZGVQaXBlbGluZVNvdXJjZS5jb2RlQ29tbWl0KHJlcG8sICdtYWluJyksXG4gIH0pO1xuXG4gIFRlbXBsYXRlLmZyb21TdGFjayhwaXBlbGluZVN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q29kZVBpcGVsaW5lOjpQaXBlbGluZScsIHtcbiAgICBTdGFnZXM6IE1hdGNoLmFycmF5V2l0aChbe1xuICAgICAgTmFtZTogJ1NvdXJjZScsXG4gICAgICBBY3Rpb25zOiBbXG4gICAgICAgIE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICAgIENvbmZpZ3VyYXRpb246IE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICAgICAgUmVwb3NpdG9yeU5hbWU6IHsgJ0ZuOjpHZXRBdHQnOiBbTWF0Y2guYW55VmFsdWUoKSwgJ05hbWUnXSB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIE5hbWU6IHsgJ0ZuOjpHZXRBdHQnOiBbTWF0Y2guYW55VmFsdWUoKSwgJ05hbWUnXSB9LFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfV0pLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdDb2RlQ29tbWl0IHNvdXJjZSBob25vcnMgYWxsIHZhbGlkIHByb3BlcnRpZXMnLCAoKSA9PiB7XG4gIGNvbnN0IHJlcG8gPSBuZXcgY2NvbW1pdC5SZXBvc2l0b3J5KHBpcGVsaW5lU3RhY2ssICdSZXBvJywge1xuICAgIHJlcG9zaXRvcnlOYW1lOiAnTXlSZXBvJyxcbiAgfSk7XG4gIG5ldyBNb2Rlcm5UZXN0R2l0SHViTnBtUGlwZWxpbmUocGlwZWxpbmVTdGFjaywgJ1BpcGVsaW5lJywge1xuICAgIGlucHV0OiBjZGtwLkNvZGVQaXBlbGluZVNvdXJjZS5jb2RlQ29tbWl0KHJlcG8sICdtYWluJywge1xuICAgICAgY29kZUJ1aWxkQ2xvbmVPdXRwdXQ6IHRydWUsXG4gICAgICB0cmlnZ2VyOiBDb2RlQ29tbWl0VHJpZ2dlci5QT0xMLFxuICAgICAgZXZlbnRSb2xlOiBuZXcgUm9sZShwaXBlbGluZVN0YWNrLCAncm9sZScsIHtcbiAgICAgICAgYXNzdW1lZEJ5OiBuZXcgQW55UHJpbmNpcGFsKCksXG4gICAgICAgIHJvbGVOYW1lOiAnc29tZS1yb2xlJyxcbiAgICAgIH0pLFxuICAgIH0pLFxuICB9KTtcblxuICBUZW1wbGF0ZS5mcm9tU3RhY2socGlwZWxpbmVTdGFjaykuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkNvZGVQaXBlbGluZTo6UGlwZWxpbmUnLCB7XG4gICAgU3RhZ2VzOiBNYXRjaC5hcnJheVdpdGgoW3tcbiAgICAgIE5hbWU6ICdTb3VyY2UnLFxuICAgICAgQWN0aW9uczogW1xuICAgICAgICBNYXRjaC5vYmplY3RMaWtlKHtcbiAgICAgICAgICBDb25maWd1cmF0aW9uOiBNYXRjaC5vYmplY3RMaWtlKHtcbiAgICAgICAgICAgIEJyYW5jaE5hbWU6ICdtYWluJyxcbiAgICAgICAgICAgIFBvbGxGb3JTb3VyY2VDaGFuZ2VzOiB0cnVlLFxuICAgICAgICAgICAgT3V0cHV0QXJ0aWZhY3RGb3JtYXQ6ICdDT0RFQlVJTERfQ0xPTkVfUkVGJyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBSb2xlQXJuOiB7ICdGbjo6R2V0QXR0JzogW01hdGNoLmFueVZhbHVlKCksICdBcm4nXSB9LFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfV0pLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdTMyBzb3VyY2UgaGFuZGxlcyB0b2tlbml6ZWQgbmFtZXMgY29ycmVjdGx5JywgKCkgPT4ge1xuICBjb25zdCBidWNrZXQgPSBuZXcgczMuQnVja2V0KHBpcGVsaW5lU3RhY2ssICdCdWNrZXQnKTtcbiAgbmV3IE1vZGVyblRlc3RHaXRIdWJOcG1QaXBlbGluZShwaXBlbGluZVN0YWNrLCAnUGlwZWxpbmUnLCB7XG4gICAgaW5wdXQ6IGNka3AuQ29kZVBpcGVsaW5lU291cmNlLnMzKGJ1Y2tldCwgJ3RoZWZpbGUuemlwJyksXG4gIH0pO1xuXG4gIFRlbXBsYXRlLmZyb21TdGFjayhwaXBlbGluZVN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q29kZVBpcGVsaW5lOjpQaXBlbGluZScsIHtcbiAgICBTdGFnZXM6IE1hdGNoLmFycmF5V2l0aChbe1xuICAgICAgTmFtZTogJ1NvdXJjZScsXG4gICAgICBBY3Rpb25zOiBbXG4gICAgICAgIE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICAgIENvbmZpZ3VyYXRpb246IE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICAgICAgUzNCdWNrZXQ6IHsgUmVmOiBNYXRjaC5hbnlWYWx1ZSgpIH0sXG4gICAgICAgICAgICBTM09iamVjdEtleTogJ3RoZWZpbGUuemlwJyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBOYW1lOiB7IFJlZjogTWF0Y2guYW55VmFsdWUoKSB9LFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfV0pLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdFQ1Igc291cmNlIGhhbmRsZXMgdG9rZW5pemVkIGFuZCBuYW1lc3BhY2VkIG5hbWVzIGNvcnJlY3RseScsICgpID0+IHtcbiAgY29uc3QgcmVwb3NpdG9yeSA9IG5ldyBlY3IuUmVwb3NpdG9yeShwaXBlbGluZVN0YWNrLCAnUmVwb3NpdG9yeScsIHsgcmVwb3NpdG9yeU5hbWU6ICduYW1lc3BhY2UvcmVwbycgfSk7XG4gIG5ldyBNb2Rlcm5UZXN0R2l0SHViTnBtUGlwZWxpbmUocGlwZWxpbmVTdGFjaywgJ1BpcGVsaW5lJywge1xuICAgIGlucHV0OiBjZGtwLkNvZGVQaXBlbGluZVNvdXJjZS5lY3IocmVwb3NpdG9yeSksXG4gIH0pO1xuXG4gIGNvbnN0IHRlbXBsYXRlID0gVGVtcGxhdGUuZnJvbVN0YWNrKHBpcGVsaW5lU3RhY2spO1xuICB0ZW1wbGF0ZS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q29kZVBpcGVsaW5lOjpQaXBlbGluZScsIHtcbiAgICBTdGFnZXM6IE1hdGNoLmFycmF5V2l0aChbe1xuICAgICAgTmFtZTogJ1NvdXJjZScsXG4gICAgICBBY3Rpb25zOiBbXG4gICAgICAgIE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICAgIENvbmZpZ3VyYXRpb246IE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICAgICAgUmVwb3NpdG9yeU5hbWU6IHsgUmVmOiBNYXRjaC5hbnlWYWx1ZSgpIH0sXG4gICAgICAgICAgfSksXG4gICAgICAgICAgTmFtZTogTWF0Y2gub2JqZWN0TGlrZSh7XG4gICAgICAgICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICAgICAgICdfJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICdGbjo6U3BsaXQnOiBbXG4gICAgICAgICAgICAgICAgICAnLycsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFJlZjogTWF0Y2guYW55VmFsdWUoKSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9XSksXG4gIH0pO1xufSk7XG5cbnRlc3QoJ0dpdEh1YiBzb3VyY2UgaG9ub3JzIGFsbCB2YWxpZCBwcm9wZXJ0aWVzJywgKCkgPT4ge1xuICBuZXcgTW9kZXJuVGVzdEdpdEh1Yk5wbVBpcGVsaW5lKHBpcGVsaW5lU3RhY2ssICdQaXBlbGluZScsIHtcbiAgICBpbnB1dDogY2RrcC5Db2RlUGlwZWxpbmVTb3VyY2UuZ2l0SHViKCdvd25lci9yZXBvJywgJ21haW4nLCB7XG4gICAgICB0cmlnZ2VyOiBHaXRIdWJUcmlnZ2VyLlBPTEwsXG4gICAgICBhdXRoZW50aWNhdGlvbjogU2VjcmV0VmFsdWUudW5zYWZlUGxhaW5UZXh0KCdzdXBlci1zZWNyZXQnKSxcbiAgICB9KSxcbiAgfSk7XG5cbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHBpcGVsaW5lU3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpDb2RlUGlwZWxpbmU6OlBpcGVsaW5lJywge1xuICAgIFN0YWdlczogTWF0Y2guYXJyYXlXaXRoKFt7XG4gICAgICBOYW1lOiAnU291cmNlJyxcbiAgICAgIEFjdGlvbnM6IFtcbiAgICAgICAgTWF0Y2gub2JqZWN0TGlrZSh7XG4gICAgICAgICAgQ29uZmlndXJhdGlvbjogTWF0Y2gub2JqZWN0TGlrZSh7XG4gICAgICAgICAgICBPd25lcjogJ293bmVyJyxcbiAgICAgICAgICAgIFJlcG86ICdyZXBvJyxcbiAgICAgICAgICAgIEJyYW5jaDogJ21haW4nLFxuICAgICAgICAgICAgUG9sbEZvclNvdXJjZUNoYW5nZXM6IHRydWUsXG4gICAgICAgICAgICBPQXV0aFRva2VuOiAnc3VwZXItc2VjcmV0JyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBOYW1lOiAnb3duZXJfcmVwbycsXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9XSksXG4gIH0pO1xufSk7XG5cbnRlc3QoJ0dpdEh1YiBzb3VyY2UgZG9lcyBub3QgYWNjZXB0IGlsbC1mb3JtYXR0ZWQgaWRlbnRpZmllcnMnLCAoKSA9PiB7XG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgbmV3IE1vZGVyblRlc3RHaXRIdWJOcG1QaXBlbGluZShwaXBlbGluZVN0YWNrLCAnUGlwZWxpbmUnLCB7XG4gICAgICBpbnB1dDogY2RrcC5Db2RlUGlwZWxpbmVTb3VyY2UuZ2l0SHViKCdyZXBvLW9ubHknLCAnbWFpbicpLFxuICAgIH0pO1xuICB9KS50b1Rocm93KCdHaXRIdWIgcmVwb3NpdG9yeSBuYW1lIHNob3VsZCBiZSBhIHJlc29sdmVkIHN0cmluZyBsaWtlIFxcJzxvd25lcj4vPHJlcG8+XFwnLCBnb3QgXFwncmVwby1vbmx5XFwnJyk7XG59KTtcblxudGVzdCgnR2l0SHViIHNvdXJjZSBkb2VzIG5vdCBhY2NlcHQgdW5yZXNvbHZlZCBpZGVudGlmaWVycycsICgpID0+IHtcbiAgZXhwZWN0KCgpID0+IHtcbiAgICBuZXcgTW9kZXJuVGVzdEdpdEh1Yk5wbVBpcGVsaW5lKHBpcGVsaW5lU3RhY2ssICdQaXBlbGluZScsIHtcbiAgICAgIGlucHV0OiBjZGtwLkNvZGVQaXBlbGluZVNvdXJjZS5naXRIdWIoVG9rZW4uYXNTdHJpbmcoe30pLCAnbWFpbicpLFxuICAgIH0pO1xuICB9KS50b1Rocm93KC9TdGVwIGlkIGNhbm5vdCBiZSB1bnJlc29sdmVkLyk7XG59KTtcblxudGVzdCgnRGFzaGVzIGluIHJlcG8gbmFtZXMgYXJlIHJlbW92ZWQgZnJvbSBhcnRpZmFjdCBuYW1lcycsICgpID0+IHtcbiAgbmV3IE1vZGVyblRlc3RHaXRIdWJOcG1QaXBlbGluZShwaXBlbGluZVN0YWNrLCAnUGlwZWxpbmUnLCB7XG4gICAgaW5wdXQ6IGNka3AuQ29kZVBpcGVsaW5lU291cmNlLmdpdEh1Yignb3duZXIvbXktcmVwbycsICdtYWluJyksXG4gIH0pO1xuXG4gIFRlbXBsYXRlLmZyb21TdGFjayhwaXBlbGluZVN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q29kZVBpcGVsaW5lOjpQaXBlbGluZScsIHtcbiAgICBTdGFnZXM6IE1hdGNoLmFycmF5V2l0aChbe1xuICAgICAgTmFtZTogJ1NvdXJjZScsXG4gICAgICBBY3Rpb25zOiBbXG4gICAgICAgIE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICAgIE91dHB1dEFydGlmYWN0czogW1xuICAgICAgICAgICAgeyBOYW1lOiAnb3duZXJfbXlfcmVwb19Tb3VyY2UnIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgIH1dKSxcbiAgfSk7XG59KTtcblxudGVzdCgnYXJ0aWZhY3QgbmFtZXMgYXJlIG5ldmVyIGxvbmdlciB0aGFuIDEyOCBjaGFyYWN0ZXJzJywgKCkgPT4ge1xuICBuZXcgTW9kZXJuVGVzdEdpdEh1Yk5wbVBpcGVsaW5lKHBpcGVsaW5lU3RhY2ssICdQaXBlbGluZScsIHtcbiAgICBpbnB1dDogY2RrcC5Db2RlUGlwZWxpbmVTb3VyY2UuZ2l0SHViKCdvd25lci8nICsgJ215LXJlcG8nLnJlcGVhdCgxMDApLCAnbWFpbicpLFxuICB9KTtcblxuICBjb25zdCBhcnRpZmFjdElkID0gbmV3IENhcHR1cmUoKTtcbiAgVGVtcGxhdGUuZnJvbVN0YWNrKHBpcGVsaW5lU3RhY2spLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpDb2RlUGlwZWxpbmU6OlBpcGVsaW5lJywge1xuICAgIFN0YWdlczogTWF0Y2guYXJyYXlXaXRoKFt7XG4gICAgICBOYW1lOiAnU291cmNlJyxcbiAgICAgIEFjdGlvbnM6IFtcbiAgICAgICAgTWF0Y2gub2JqZWN0TGlrZSh7XG4gICAgICAgICAgT3V0cHV0QXJ0aWZhY3RzOiBbXG4gICAgICAgICAgICB7IE5hbWU6IGFydGlmYWN0SWQgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfV0pLFxuICB9KTtcblxuICBleHBlY3QoYXJ0aWZhY3RJZC5hc1N0cmluZygpLmxlbmd0aCkudG9CZUxlc3NUaGFuT3JFcXVhbCgxMjgpO1xufSk7XG5cbnRlc3QoJ2NhbiB1c2Ugc291cmNlIGF0dHJpYnV0ZXMgaW4gcGlwZWxpbmUnLCAoKSA9PiB7XG4gIGNvbnN0IGdpdEh1YiA9IGNka3AuQ29kZVBpcGVsaW5lU291cmNlLmdpdEh1Yignb3duZXIvbXktcmVwbycsICdtYWluJyk7XG5cbiAgLy8gV0hFTlxuICBuZXcgTW9kZXJuVGVzdEdpdEh1Yk5wbVBpcGVsaW5lKHBpcGVsaW5lU3RhY2ssICdQaXBlbGluZScsIHtcbiAgICBpbnB1dDogZ2l0SHViLFxuICAgIHN5bnRoOiBuZXcgY2RrcC5TaGVsbFN0ZXAoJ1N5bnRoJywge1xuICAgICAgZW52OiB7XG4gICAgICAgIEdJVEhVQl9VUkw6IGdpdEh1Yi5zb3VyY2VBdHRyaWJ1dGUoJ0NvbW1pdFVybCcpLFxuICAgICAgfSxcbiAgICAgIGNvbW1hbmRzOiBbXG4gICAgICAgICdlY2hvIFwiQ2xpY2sgaGVyZTogJEdJVEhVQl9VUkxcIicsXG4gICAgICBdLFxuICAgIH0pLFxuICAgIHNlbGZNdXRhdGlvbjogZmFsc2UsXG4gIH0pO1xuXG4gIFRlbXBsYXRlLmZyb21TdGFjayhwaXBlbGluZVN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q29kZVBpcGVsaW5lOjpQaXBlbGluZScsIHtcbiAgICBTdGFnZXM6IFtcbiAgICAgIHsgTmFtZTogJ1NvdXJjZScgfSxcbiAgICAgIHtcbiAgICAgICAgTmFtZTogJ0J1aWxkJyxcbiAgICAgICAgQWN0aW9uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIE5hbWU6ICdTeW50aCcsXG4gICAgICAgICAgICBDb25maWd1cmF0aW9uOiBNYXRjaC5vYmplY3RMaWtlKHtcbiAgICAgICAgICAgICAgRW52aXJvbm1lbnRWYXJpYWJsZXM6IE1hdGNoLnNlcmlhbGl6ZWRKc29uKFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiAnR0lUSFVCX1VSTCcsXG4gICAgICAgICAgICAgICAgICB0eXBlOiAnUExBSU5URVhUJyxcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiAnI3tTb3VyY2VAb3duZXJfbXktcmVwby5Db21taXRVcmx9JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3Bhc3Mgcm9sZSB0byBzMyBjb2RlcGlwZWxpbmUgc291cmNlJywgKCkgPT4ge1xuICBjb25zdCBidWNrZXQgPSBuZXcgczMuQnVja2V0KHBpcGVsaW5lU3RhY2ssICdCdWNrZXQnKTtcbiAgY29uc3Qgcm9sZSA9IG5ldyBSb2xlKHBpcGVsaW5lU3RhY2ssICdUZXN0Um9sZScsIHtcbiAgICBhc3N1bWVkQnk6IG5ldyBBbnlQcmluY2lwYWwoKSxcbiAgfSk7XG4gIG5ldyBNb2Rlcm5UZXN0R2l0SHViTnBtUGlwZWxpbmUocGlwZWxpbmVTdGFjaywgJ1BpcGVsaW5lJywge1xuICAgIGlucHV0OiBjZGtwLkNvZGVQaXBlbGluZVNvdXJjZS5zMyhidWNrZXQsICd0aGVmaWxlLnppcCcsIHtcbiAgICAgIHJvbGUsXG4gICAgfSksXG4gIH0pO1xuXG4gIFRlbXBsYXRlLmZyb21TdGFjayhwaXBlbGluZVN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q29kZVBpcGVsaW5lOjpQaXBlbGluZScsIHtcbiAgICBTdGFnZXM6IE1hdGNoLmFycmF5V2l0aChbe1xuICAgICAgTmFtZTogJ1NvdXJjZScsXG4gICAgICBBY3Rpb25zOiBbXG4gICAgICAgIE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICAgIENvbmZpZ3VyYXRpb246IE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICAgICAgUzNCdWNrZXQ6IHsgUmVmOiBNYXRjaC5hbnlWYWx1ZSgpIH0sXG4gICAgICAgICAgICBTM09iamVjdEtleTogJ3RoZWZpbGUuemlwJyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBOYW1lOiB7IFJlZjogTWF0Y2guYW55VmFsdWUoKSB9LFxuICAgICAgICAgIFJvbGVBcm46IHtcbiAgICAgICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgICAgICBNYXRjaC5zdHJpbmdMaWtlUmVnZXhwKCdUZXN0Um9sZS4qJyksXG4gICAgICAgICAgICAgICdBcm4nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfV0pLFxuICB9KTtcbn0pO1xuXG50eXBlIFNvdXJjZUZhY3RvcnkgPSAoc3RhY2s6IFN0YWNrKSA9PiBjZGtwLkNvZGVQaXBlbGluZVNvdXJjZTtcblxudGVzdC5lYWNoKFtcbiAgWydDb2RlQ29tbWl0JywgKHN0YWNrKSA9PiB7XG4gICAgY29uc3QgcmVwbyA9IG5ldyBjY29tbWl0LlJlcG9zaXRvcnkoc3RhY2ssICdSZXBvJywge1xuICAgICAgcmVwb3NpdG9yeU5hbWU6ICdNeVJlcG8nLFxuICAgIH0pO1xuICAgIHJldHVybiBjZGtwLkNvZGVQaXBlbGluZVNvdXJjZS5jb2RlQ29tbWl0KHJlcG8sICdtYWluJywge1xuICAgICAgYWN0aW9uTmFtZTogJ0NvbmZpZ3VyZWROYW1lJyxcbiAgICB9KTtcbiAgfV0sXG4gIFsnUzMnLCAoc3RhY2spID0+IHtcbiAgICBjb25zdCBidWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG4gICAgcmV0dXJuIGNka3AuQ29kZVBpcGVsaW5lU291cmNlLnMzKGJ1Y2tldCwgJ3RoZWZpbGUuemlwJywge1xuICAgICAgYWN0aW9uTmFtZTogJ0NvbmZpZ3VyZWROYW1lJyxcbiAgICB9KTtcbiAgfV0sXG4gIFsnRUNSJywgKHN0YWNrKSA9PiB7XG4gICAgY29uc3QgcmVwb3NpdG9yeSA9IG5ldyBlY3IuUmVwb3NpdG9yeShzdGFjaywgJ1JlcG9zaXRvcnknLCB7IHJlcG9zaXRvcnlOYW1lOiAnbmFtZXNwYWNlL3JlcG8nIH0pO1xuICAgIHJldHVybiBjZGtwLkNvZGVQaXBlbGluZVNvdXJjZS5lY3IocmVwb3NpdG9yeSwge1xuICAgICAgYWN0aW9uTmFtZTogJ0NvbmZpZ3VyZWROYW1lJyxcbiAgICB9KTtcbiAgfV0sXG4gIFsnR2l0SHViJywgKCkgPT4ge1xuICAgIHJldHVybiBjZGtwLkNvZGVQaXBlbGluZVNvdXJjZS5naXRIdWIoJ293bmVyL3JlcG8nLCAnbWFpbicsIHtcbiAgICAgIGFjdGlvbk5hbWU6ICdDb25maWd1cmVkTmFtZScsXG4gICAgfSk7XG4gIH1dLFxuICBbJ0NvZGVTdGFyJywgKCkgPT4ge1xuICAgIHJldHVybiBjZGtwLkNvZGVQaXBlbGluZVNvdXJjZS5jb25uZWN0aW9uKCdvd25lci9yZXBvJywgJ21haW4nLCB7XG4gICAgICBjb25uZWN0aW9uQXJuOiAnYXJuOmF3czpjb2Rlc3Rhci1jb25uZWN0aW9uczp1cy13ZXN0LTI6MTIzNDU2Nzg5MDEyOmNvbm5lY3Rpb24vMzllNGMzNGQtZTEzYS00ZTk0LWE4ODYnLFxuICAgICAgYWN0aW9uTmFtZTogJ0NvbmZpZ3VyZWROYW1lJyxcbiAgICB9KTtcbiAgfV0sXG5dIGFzIEFycmF5PFtzdHJpbmcsIFNvdXJjZUZhY3RvcnldPikoJ2NhbiBjb25maWd1cmUgYWN0aW9uTmFtZSBmb3IgJXMnLCAoX25hbWU6IHN0cmluZywgZmFjOiBTb3VyY2VGYWN0b3J5KSA9PiB7XG4gIG5ldyBNb2Rlcm5UZXN0R2l0SHViTnBtUGlwZWxpbmUocGlwZWxpbmVTdGFjaywgJ1BpcGVsaW5lJywge1xuICAgIGlucHV0OiBmYWMocGlwZWxpbmVTdGFjayksXG4gIH0pO1xuXG4gIFRlbXBsYXRlLmZyb21TdGFjayhwaXBlbGluZVN0YWNrKS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q29kZVBpcGVsaW5lOjpQaXBlbGluZScsIHtcbiAgICBTdGFnZXM6IE1hdGNoLmFycmF5V2l0aChbe1xuICAgICAgTmFtZTogJ1NvdXJjZScsXG4gICAgICBBY3Rpb25zOiBbXG4gICAgICAgIE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICAgIE5hbWU6ICdDb25maWd1cmVkTmFtZScsXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9XSksXG4gIH0pO1xufSk7XG4iXX0=