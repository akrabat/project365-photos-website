"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const assertions_1 = require("../../../assertions");
const cb = require("../../../aws-codebuild");
const ec2 = require("../../../aws-ec2");
const core_1 = require("../../../core");
const default_codebuild_image_1 = require("../../lib/private/default-codebuild-image");
const testhelpers_1 = require("../testhelpers");
const FILE_ASSET_SOURCE_HASH = '8289faf53c7da377bb2b90615999171adef5e1d8f6b88810e5fef75e6ca09ba5';
const FILE_ASSET_SOURCE_HASH2 = 'ac76997971c3f6ddf37120660003f1ced72b4fc58c498dfd99c78fa77e721e0e';
const FILE_PUBLISHING_ROLE = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-${AWS::AccountId}-${AWS::Region}';
const IMAGE_PUBLISHING_ROLE = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-${AWS::AccountId}-${AWS::Region}';
let app;
let pipelineStack;
beforeEach(() => {
    app = new testhelpers_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
});
afterEach(() => {
    app.cleanup();
});
describe('basic pipeline', () => {
    (0, testhelpers_1.behavior)('no assets stage if the application has no assets', (suite) => {
        suite.legacy(() => {
            const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
            pipeline.addApplicationStage(new testhelpers_1.PlainStackApp(app, 'App'));
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
            pipeline.addStage(new testhelpers_1.PlainStackApp(app, 'App'));
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            // THEN
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                Stages: assertions_1.Match.not(assertions_1.Match.arrayWith([assertions_1.Match.objectLike({
                        Name: 'Assets',
                    })])),
            });
        }
    });
    describe('asset stage placement', () => {
        (0, testhelpers_1.behavior)('assets stage comes before any user-defined stages', (suite) => {
            suite.legacy(() => {
                const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
                pipeline.addApplicationStage(new testhelpers_1.FileAssetApp(app, 'App'));
                THEN_codePipelineExpectation();
            });
            suite.modern(() => {
                const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
                pipeline.addStage(new testhelpers_1.FileAssetApp(app, 'App'));
                THEN_codePipelineExpectation();
            });
            function THEN_codePipelineExpectation() {
                assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                    Stages: [
                        assertions_1.Match.objectLike({ Name: 'Source' }),
                        assertions_1.Match.objectLike({ Name: 'Build' }),
                        assertions_1.Match.objectLike({ Name: 'UpdatePipeline' }),
                        assertions_1.Match.objectLike({ Name: 'Assets' }),
                        assertions_1.Match.objectLike({ Name: 'App' }),
                    ],
                });
            }
        });
        (0, testhelpers_1.behavior)('up to 50 assets fit in a single stage', (suite) => {
            suite.legacy(() => {
                // WHEN
                const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
                pipeline.addApplicationStage(new testhelpers_1.MegaAssetsApp(app, 'App', { numAssets: 50 }));
                THEN_codePipelineExpectation();
            });
            suite.modern(() => {
                const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
                pipeline.addStage(new testhelpers_1.MegaAssetsApp(app, 'App', { numAssets: 50 }));
                THEN_codePipelineExpectation();
            });
            function THEN_codePipelineExpectation() {
                assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                    Stages: [
                        assertions_1.Match.objectLike({ Name: 'Source' }),
                        assertions_1.Match.objectLike({ Name: 'Build' }),
                        assertions_1.Match.objectLike({ Name: 'UpdatePipeline' }),
                        assertions_1.Match.objectLike({ Name: 'Assets' }),
                        assertions_1.Match.objectLike({ Name: 'App' }),
                    ],
                });
            }
        });
        (0, testhelpers_1.behavior)('51 assets triggers a second stage', (suite) => {
            suite.legacy(() => {
                // WHEN
                const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
                pipeline.addApplicationStage(new testhelpers_1.MegaAssetsApp(app, 'App', { numAssets: 51 }));
                THEN_codePipelineExpectation();
            });
            suite.modern(() => {
                // WHEN
                const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
                pipeline.addStage(new testhelpers_1.MegaAssetsApp(app, 'App', { numAssets: 51 }));
                THEN_codePipelineExpectation();
            });
            function THEN_codePipelineExpectation() {
                assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                    Stages: [
                        assertions_1.Match.objectLike({ Name: 'Source' }),
                        assertions_1.Match.objectLike({ Name: 'Build' }),
                        assertions_1.Match.objectLike({ Name: 'UpdatePipeline' }),
                        assertions_1.Match.objectLike({ Name: (0, testhelpers_1.stringLike)('Assets*') }),
                        assertions_1.Match.objectLike({ Name: (0, testhelpers_1.stringLike)('Assets*2') }),
                        assertions_1.Match.objectLike({ Name: 'App' }),
                    ],
                });
            }
        });
        (0, testhelpers_1.behavior)('101 assets triggers a third stage', (suite) => {
            suite.legacy(() => {
                const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
                pipeline.addApplicationStage(new testhelpers_1.MegaAssetsApp(app, 'App', { numAssets: 101 }));
                THEN_codePipelineExpectation();
            });
            suite.modern(() => {
                const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
                pipeline.addStage(new testhelpers_1.MegaAssetsApp(app, 'App', { numAssets: 101 }));
                THEN_codePipelineExpectation();
            });
            function THEN_codePipelineExpectation() {
                assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                    Stages: [
                        assertions_1.Match.objectLike({ Name: 'Source' }),
                        assertions_1.Match.objectLike({ Name: 'Build' }),
                        assertions_1.Match.objectLike({ Name: 'UpdatePipeline' }),
                        assertions_1.Match.objectLike({ Name: (0, testhelpers_1.stringLike)('Assets*') }),
                        assertions_1.Match.objectLike({ Name: (0, testhelpers_1.stringLike)('Assets*2') }),
                        assertions_1.Match.objectLike({ Name: (0, testhelpers_1.stringLike)('Assets*3') }),
                        assertions_1.Match.objectLike({ Name: 'App' }),
                    ],
                });
            }
        });
    });
    (0, testhelpers_1.behavior)('command line properly locates assets in subassembly', (suite) => {
        suite.legacy(() => {
            const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
            pipeline.addApplicationStage(new testhelpers_1.FileAssetApp(app, 'FileAssetApp'));
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
            pipeline.addStage(new testhelpers_1.FileAssetApp(app, 'FileAssetApp'));
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
                Environment: {
                    Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
                },
                Source: {
                    BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                        phases: {
                            build: {
                                commands: assertions_1.Match.arrayWith([`cdk-assets --path "assembly-FileAssetApp/FileAssetAppStackEADD68C5.assets.json" --verbose publish "${FILE_ASSET_SOURCE_HASH}:current_account-current_region"`]),
                            },
                        },
                    })),
                },
            });
        }
    });
    (0, testhelpers_1.behavior)('multiple assets are published in parallel', (suite) => {
        suite.legacy(() => {
            // WHEN
            const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
            pipeline.addApplicationStage(new testhelpers_1.TwoFileAssetsApp(app, 'FileAssetApp'));
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
            pipeline.addStage(new testhelpers_1.TwoFileAssetsApp(app, 'FileAssetApp'));
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                Stages: assertions_1.Match.arrayWith([{
                        Name: 'Assets',
                        Actions: [
                            assertions_1.Match.objectLike({ RunOrder: 1 }),
                            assertions_1.Match.objectLike({ RunOrder: 1 }),
                        ],
                    }]),
            });
        }
    });
    (0, testhelpers_1.behavior)('assets are also published when using the lower-level addStackArtifactDeployment', (suite) => {
        suite.legacy(() => {
            // GIVEN
            const asm = new testhelpers_1.FileAssetApp(app, 'FileAssetApp').synth();
            // WHEN
            const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
            pipeline.addStage('SomeStage').addStackArtifactDeployment(asm.getStackByName('FileAssetApp-Stack'));
            // THEN
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                Stages: assertions_1.Match.arrayWith([{
                        Name: 'Assets',
                        Actions: [
                            assertions_1.Match.objectLike({
                                Name: 'FileAsset1',
                                RunOrder: 1,
                            }),
                        ],
                    }]),
            });
        });
        // This function does not exist in the modern API
        suite.doesNotApply.modern();
    });
    (0, testhelpers_1.behavior)('file image asset publishers do not use privilegedmode', (suite) => {
        suite.legacy(() => {
            // WHEN
            const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
            pipeline.addApplicationStage(new testhelpers_1.FileAssetApp(app, 'FileAssetApp'));
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            // WHEN
            const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
            pipeline.addStage(new testhelpers_1.FileAssetApp(app, 'FileAssetApp'));
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
                Source: {
                    BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                        phases: {
                            build: {
                                commands: assertions_1.Match.arrayWith([(0, testhelpers_1.stringLike)('cdk-assets *')]),
                            },
                        },
                    })),
                },
                Environment: assertions_1.Match.objectLike({
                    PrivilegedMode: false,
                    Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
                }),
            });
        }
    });
    (0, testhelpers_1.behavior)('docker image asset publishers use privilegedmode', (suite) => {
        suite.legacy(() => {
            const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
            pipeline.addApplicationStage(new testhelpers_1.DockerAssetApp(app, 'DockerAssetApp'));
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
            pipeline.addStage(new testhelpers_1.DockerAssetApp(app, 'DockerAssetApp'));
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
                Source: {
                    BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                        phases: {
                            build: {
                                commands: assertions_1.Match.arrayWith([(0, testhelpers_1.stringLike)('cdk-assets *')]),
                            },
                        },
                    })),
                },
                Environment: assertions_1.Match.objectLike({
                    Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
                    PrivilegedMode: true,
                }),
            });
        }
    });
    (0, testhelpers_1.behavior)('can control fix/CLI version used in asset publishing', (suite) => {
        suite.legacy(() => {
            const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                cdkCliVersion: '1.2.3',
            });
            pipeline.addApplicationStage(new testhelpers_1.FileAssetApp(pipelineStack, 'FileAssetApp'));
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                cliVersion: '1.2.3',
            });
            pipeline.addStage(new testhelpers_1.FileAssetApp(pipelineStack, 'FileAssetApp'));
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
                Environment: {
                    Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
                },
                Source: {
                    BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                        phases: {
                            install: {
                                commands: ['npm install -g cdk-assets@1.2.3'],
                            },
                        },
                    })),
                },
            });
        }
    });
    describe('asset roles and policies', () => {
        (0, testhelpers_1.behavior)('includes file publishing assets role for apps with file assets', (suite) => {
            suite.legacy(() => {
                const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
                pipeline.addApplicationStage(new testhelpers_1.FileAssetApp(app, 'App1'));
                THEN_codePipelineExpectation();
            });
            suite.modern(() => {
                const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                    // Expectation expects to see KMS key policy permissions
                    crossAccountKeys: true,
                });
                pipeline.addStage(new testhelpers_1.FileAssetApp(app, 'App1'));
                THEN_codePipelineExpectation();
            });
            function THEN_codePipelineExpectation() {
                assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Role', {
                    AssumeRolePolicyDocument: {
                        Statement: [
                            {
                                Action: 'sts:AssumeRole',
                                Effect: 'Allow',
                                Principal: {
                                    Service: 'codebuild.amazonaws.com',
                                },
                            },
                            {
                                Action: 'sts:AssumeRole',
                                Effect: 'Allow',
                                Principal: {
                                    AWS: {
                                        'Fn::Join': ['', [
                                                'arn:', { Ref: 'AWS::Partition' }, `:iam::${testhelpers_1.PIPELINE_ENV.account}:root`,
                                            ]],
                                    },
                                },
                            },
                        ],
                    },
                });
                assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', expectedAssetRolePolicy(FILE_PUBLISHING_ROLE, 'CdkAssetsFileRole6BE17A07'));
            }
        });
        (0, testhelpers_1.behavior)('publishing assets role may assume roles from multiple environments', (suite) => {
            suite.legacy(() => {
                const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
                pipeline.addApplicationStage(new testhelpers_1.FileAssetApp(app, 'App1'));
                pipeline.addApplicationStage(new testhelpers_1.FileAssetApp(app, 'App2', {
                    env: {
                        account: '0123456789012',
                        region: 'eu-west-1',
                    },
                }));
                THEN_codePipelineExpectation();
            });
            suite.modern(() => {
                const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                    // Expectation expects to see KMS key policy permissions
                    crossAccountKeys: true,
                });
                pipeline.addStage(new testhelpers_1.FileAssetApp(app, 'App1'));
                pipeline.addStage(new testhelpers_1.FileAssetApp(app, 'App2', {
                    env: {
                        account: '0123456789012',
                        region: 'eu-west-1',
                    },
                }));
                THEN_codePipelineExpectation();
            });
            function THEN_codePipelineExpectation() {
                assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', expectedAssetRolePolicy([FILE_PUBLISHING_ROLE, 'arn:${AWS::Partition}:iam::0123456789012:role/cdk-hnb659fds-file-publishing-role-0123456789012-eu-west-1'], 'CdkAssetsFileRole6BE17A07'));
            }
        });
        (0, testhelpers_1.behavior)('publishing assets role de-dupes assumed roles', (suite) => {
            suite.legacy(() => {
                const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
                pipeline.addApplicationStage(new testhelpers_1.FileAssetApp(app, 'App1'));
                pipeline.addApplicationStage(new testhelpers_1.FileAssetApp(app, 'App2'));
                pipeline.addApplicationStage(new testhelpers_1.FileAssetApp(app, 'App3'));
                THEN_codePipelineExpectation();
            });
            suite.modern(() => {
                const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                    // Expectation expects to see KMS key policy permissions
                    crossAccountKeys: true,
                });
                pipeline.addStage(new testhelpers_1.FileAssetApp(app, 'App1'));
                pipeline.addStage(new testhelpers_1.FileAssetApp(app, 'App2'));
                pipeline.addStage(new testhelpers_1.FileAssetApp(app, 'App3'));
                THEN_codePipelineExpectation();
            });
            function THEN_codePipelineExpectation() {
                assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', expectedAssetRolePolicy(FILE_PUBLISHING_ROLE, 'CdkAssetsFileRole6BE17A07'));
            }
        });
        (0, testhelpers_1.behavior)('includes image publishing assets role for apps with Docker assets', (suite) => {
            suite.legacy(() => {
                const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
                pipeline.addApplicationStage(new testhelpers_1.DockerAssetApp(app, 'App1'));
                THEN_codePipelineExpectation();
            });
            suite.modern(() => {
                const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                    // Expectation expects to see KMS key policy permissions
                    crossAccountKeys: true,
                });
                pipeline.addStage(new testhelpers_1.DockerAssetApp(app, 'App1'));
                THEN_codePipelineExpectation();
            });
            function THEN_codePipelineExpectation() {
                assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Role', {
                    AssumeRolePolicyDocument: {
                        Statement: [
                            {
                                Action: 'sts:AssumeRole',
                                Effect: 'Allow',
                                Principal: {
                                    Service: 'codebuild.amazonaws.com',
                                },
                            },
                            {
                                Action: 'sts:AssumeRole',
                                Effect: 'Allow',
                                Principal: {
                                    AWS: {
                                        'Fn::Join': ['', [
                                                'arn:', { Ref: 'AWS::Partition' }, `:iam::${testhelpers_1.PIPELINE_ENV.account}:root`,
                                            ]],
                                    },
                                },
                            },
                        ],
                    },
                });
                assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', expectedAssetRolePolicy(IMAGE_PUBLISHING_ROLE, 'CdkAssetsDockerRole484B6DD3'));
            }
        });
        (0, testhelpers_1.behavior)('includes both roles for apps with both file and Docker assets', (suite) => {
            suite.legacy(() => {
                const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
                pipeline.addApplicationStage(new testhelpers_1.FileAssetApp(app, 'App1'));
                pipeline.addApplicationStage(new testhelpers_1.DockerAssetApp(app, 'App2'));
                THEN_codePipelineExpectation();
            });
            suite.modern(() => {
                const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                    // Expectation expects to see KMS key policy permissions
                    crossAccountKeys: true,
                });
                pipeline.addStage(new testhelpers_1.FileAssetApp(app, 'App1'));
                pipeline.addStage(new testhelpers_1.DockerAssetApp(app, 'App2'));
                THEN_codePipelineExpectation();
            });
            function THEN_codePipelineExpectation() {
                assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', expectedAssetRolePolicy(FILE_PUBLISHING_ROLE, 'CdkAssetsFileRole6BE17A07'));
                assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', expectedAssetRolePolicy(IMAGE_PUBLISHING_ROLE, 'CdkAssetsDockerRole484B6DD3'));
            }
        });
    });
});
(0, testhelpers_1.behavior)('can supply pre-install scripts to asset upload', (suite) => {
    suite.legacy(() => {
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            assetPreInstallCommands: [
                'npm config set registry https://registry.com',
            ],
        });
        pipeline.addApplicationStage(new testhelpers_1.FileAssetApp(app, 'FileAssetApp'));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            assetPublishingCodeBuildDefaults: {
                partialBuildSpec: cb.BuildSpec.fromObject({
                    version: '0.2',
                    phases: {
                        install: {
                            commands: [
                                'npm config set registry https://registry.com',
                            ],
                        },
                    },
                }),
            },
        });
        pipeline.addStage(new testhelpers_1.FileAssetApp(app, 'FileAssetApp'));
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        install: {
                            commands: ['npm config set registry https://registry.com', 'npm install -g cdk-assets@2'],
                        },
                    },
                })),
            },
        });
    }
});
describe('pipeline with VPC', () => {
    let vpc;
    beforeEach(() => {
        vpc = new ec2.Vpc(pipelineStack, 'Vpc');
    });
    (0, testhelpers_1.behavior)('asset CodeBuild Project uses VPC subnets', (suite) => {
        suite.legacy(() => {
            const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                vpc,
            });
            pipeline.addApplicationStage(new testhelpers_1.DockerAssetApp(app, 'DockerAssetApp'));
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                codeBuildDefaults: { vpc },
            });
            pipeline.addStage(new testhelpers_1.DockerAssetApp(app, 'DockerAssetApp'));
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            // THEN
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
                VpcConfig: assertions_1.Match.objectLike({
                    SecurityGroupIds: [
                        { 'Fn::GetAtt': ['CdkAssetsDockerAsset1SecurityGroup078F5C66', 'GroupId'] },
                    ],
                    Subnets: [
                        { Ref: 'VpcPrivateSubnet1Subnet536B997A' },
                        { Ref: 'VpcPrivateSubnet2Subnet3788AAA1' },
                        { Ref: 'VpcPrivateSubnet3SubnetF258B56E' },
                    ],
                    VpcId: { Ref: 'Vpc8378EB38' },
                }),
            });
        }
    });
    (0, testhelpers_1.behavior)('Pipeline-generated CodeBuild Projects have appropriate execution role permissions', (suite) => {
        suite.legacy(() => {
            const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                vpc,
            });
            pipeline.addApplicationStage(new testhelpers_1.DockerAssetApp(app, 'DockerAssetApp'));
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                codeBuildDefaults: { vpc },
            });
            pipeline.addStage(new testhelpers_1.DockerAssetApp(app, 'DockerAssetApp'));
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            // Assets Project
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
                Roles: [
                    { Ref: 'CdkAssetsDockerRole484B6DD3' },
                ],
                PolicyDocument: {
                    Statement: assertions_1.Match.arrayWith([{
                            Action: assertions_1.Match.arrayWith(['ec2:DescribeSecurityGroups']),
                            Effect: 'Allow',
                            Resource: '*',
                        }]),
                },
            });
        }
    });
    (0, testhelpers_1.behavior)('Asset publishing CodeBuild Projects have correct VPC permissions', (suite) => {
        suite.legacy(() => {
            const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                vpc,
            });
            pipeline.addApplicationStage(new testhelpers_1.DockerAssetApp(app, 'DockerAssetApp'));
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                codeBuildDefaults: { vpc },
            });
            pipeline.addStage(new testhelpers_1.DockerAssetApp(app, 'DockerAssetApp'));
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            // Assets Project
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
                PolicyDocument: {
                    Statement: [
                        assertions_1.Match.objectLike({
                            Resource: '*',
                            Action: [
                                'ec2:CreateNetworkInterface',
                                'ec2:DescribeNetworkInterfaces',
                                'ec2:DeleteNetworkInterface',
                                'ec2:DescribeSubnets',
                                'ec2:DescribeSecurityGroups',
                                'ec2:DescribeDhcpOptions',
                                'ec2:DescribeVpcs',
                            ],
                        }),
                    ],
                },
                Roles: [{ Ref: 'CdkAssetsDockerRole484B6DD3' }],
            });
            assertions_1.Template.fromStack(pipelineStack).hasResource('AWS::CodeBuild::Project', {
                Properties: {
                    ServiceRole: { 'Fn::GetAtt': ['CdkAssetsDockerRole484B6DD3', 'Arn'] },
                },
                DependsOn: [
                    'CdkAssetsDockerAsset1PolicyDocument8DA96A22',
                ],
            });
        }
    });
});
describe('pipeline with single asset publisher', () => {
    (0, testhelpers_1.behavior)('multiple assets are using the same job in singlePublisherMode', (suite) => {
        suite.legacy(() => {
            const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                singlePublisherPerType: true,
            });
            pipeline.addApplicationStage(new testhelpers_1.TwoFileAssetsApp(app, 'FileAssetApp'));
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                publishAssetsInParallel: false,
            });
            pipeline.addStage(new testhelpers_1.TwoFileAssetsApp(app, 'FileAssetApp'));
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            // THEN
            const buildSpecName = new assertions_1.Capture((0, testhelpers_1.stringLike)('buildspec-*.yaml'));
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                Stages: assertions_1.Match.arrayWith([{
                        Name: 'Assets',
                        Actions: [
                            // Only one file asset action
                            assertions_1.Match.objectLike({ RunOrder: 1, Name: 'FileAsset' }),
                        ],
                    }]),
            });
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
                Environment: {
                    Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
                },
                Source: {
                    BuildSpec: buildSpecName,
                },
            });
            const assembly = synthesize(pipelineStack);
            const actualFileName = buildSpecName.asString();
            const buildSpec = JSON.parse(fs.readFileSync(path.join(assembly.directory, actualFileName), { encoding: 'utf-8' }));
            expect(buildSpec.phases.build.commands).toContain(`cdk-assets --path "assembly-FileAssetApp/FileAssetAppStackEADD68C5.assets.json" --verbose publish "${FILE_ASSET_SOURCE_HASH}:current_account-current_region"`);
            expect(buildSpec.phases.build.commands).toContain(`cdk-assets --path "assembly-FileAssetApp/FileAssetAppStackEADD68C5.assets.json" --verbose publish "${FILE_ASSET_SOURCE_HASH2}:current_account-current_region"`);
        }
    });
    (0, testhelpers_1.behavior)('other pipeline writes to separate assets build spec file', (suite) => {
        suite.legacy(() => {
            const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                singlePublisherPerType: true,
            });
            pipeline.addApplicationStage(new testhelpers_1.TwoFileAssetsApp(app, 'FileAssetApp'));
            const pipelineStack2 = new core_1.Stack(app, 'PipelineStack2', { env: testhelpers_1.PIPELINE_ENV });
            const otherPipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack2, 'Cdk', {
                singlePublisherPerType: true,
            });
            otherPipeline.addApplicationStage(new testhelpers_1.TwoFileAssetsApp(app, 'OtherFileAssetApp'));
            THEN_codePipelineExpectation(pipelineStack2);
        });
        suite.modern(() => {
            const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                publishAssetsInParallel: false,
            });
            pipeline.addStage(new testhelpers_1.TwoFileAssetsApp(app, 'FileAssetApp'));
            const pipelineStack2 = new core_1.Stack(app, 'PipelineStack2', { env: testhelpers_1.PIPELINE_ENV });
            const otherPipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack2, 'Cdk', {
                publishAssetsInParallel: false,
            });
            otherPipeline.addStage(new testhelpers_1.TwoFileAssetsApp(app, 'OtherFileAssetApp'));
            THEN_codePipelineExpectation(pipelineStack2);
        });
        function THEN_codePipelineExpectation(pipelineStack2) {
            // THEN
            const buildSpecName1 = new assertions_1.Capture((0, testhelpers_1.stringLike)('buildspec-*.yaml'));
            const buildSpecName2 = new assertions_1.Capture((0, testhelpers_1.stringLike)('buildspec-*.yaml'));
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
                Source: {
                    BuildSpec: buildSpecName1,
                },
            });
            assertions_1.Template.fromStack(pipelineStack2).hasResourceProperties('AWS::CodeBuild::Project', {
                Source: {
                    BuildSpec: buildSpecName2,
                },
            });
            expect(buildSpecName1.asString()).not.toEqual(buildSpecName2.asString());
        }
    });
});
describe('pipeline with custom asset publisher BuildSpec', () => {
    (0, testhelpers_1.behavior)('custom buildspec is merged correctly', (suite) => {
        suite.legacy(() => {
            // WHEN
            const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                singlePublisherPerType: true,
                assetBuildSpec: cb.BuildSpec.fromObject({
                    phases: {
                        pre_install: {
                            commands: 'preinstall',
                        },
                    },
                    cache: {
                        paths: 'node_modules',
                    },
                }),
            });
            pipeline.addApplicationStage(new testhelpers_1.TwoFileAssetsApp(app, 'FileAssetApp'));
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            // WHEN
            const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
                publishAssetsInParallel: false,
                assetPublishingCodeBuildDefaults: {
                    partialBuildSpec: cb.BuildSpec.fromObject({
                        phases: {
                            pre_install: {
                                commands: 'preinstall',
                            },
                        },
                        cache: {
                            paths: 'node_modules',
                        },
                    }),
                },
            });
            pipeline.addStage(new testhelpers_1.TwoFileAssetsApp(app, 'FileAssetApp'));
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            const buildSpecName = new assertions_1.Capture((0, testhelpers_1.stringLike)('buildspec-*'));
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                Stages: assertions_1.Match.arrayWith([{
                        Name: 'Assets',
                        Actions: [
                            // Only one file asset action
                            assertions_1.Match.objectLike({ RunOrder: 1, Name: 'FileAsset' }),
                        ],
                    }]),
            });
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
                Environment: {
                    Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
                },
                Source: {
                    BuildSpec: buildSpecName,
                },
            });
            const assembly = synthesize(pipelineStack);
            const buildSpec = JSON.parse(fs.readFileSync(path.join(assembly.directory, buildSpecName.asString())).toString());
            expect(buildSpec.phases.build.commands).toContain(`cdk-assets --path "assembly-FileAssetApp/FileAssetAppStackEADD68C5.assets.json" --verbose publish "${FILE_ASSET_SOURCE_HASH}:current_account-current_region"`);
            expect(buildSpec.phases.build.commands).toContain(`cdk-assets --path "assembly-FileAssetApp/FileAssetAppStackEADD68C5.assets.json" --verbose publish "${FILE_ASSET_SOURCE_HASH2}:current_account-current_region"`);
            expect(buildSpec.phases.pre_install.commands).toContain('preinstall');
            expect(buildSpec.cache.paths).toContain('node_modules');
        }
    });
});
function expectedAssetRolePolicy(assumeRolePattern, attachedRole) {
    if (typeof assumeRolePattern === 'string') {
        assumeRolePattern = [assumeRolePattern];
    }
    return {
        PolicyDocument: {
            Statement: [{
                    Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'],
                    Effect: 'Allow',
                    Resource: {
                        'Fn::Join': ['', [
                                'arn:',
                                { Ref: 'AWS::Partition' },
                                `:logs:${testhelpers_1.PIPELINE_ENV.region}:${testhelpers_1.PIPELINE_ENV.account}:log-group:/aws/codebuild/*`,
                            ]],
                    },
                },
                {
                    Action: ['codebuild:CreateReportGroup', 'codebuild:CreateReport', 'codebuild:UpdateReport', 'codebuild:BatchPutTestCases', 'codebuild:BatchPutCodeCoverages'],
                    Effect: 'Allow',
                    Resource: {
                        'Fn::Join': ['', [
                                'arn:',
                                { Ref: 'AWS::Partition' },
                                `:codebuild:${testhelpers_1.PIPELINE_ENV.region}:${testhelpers_1.PIPELINE_ENV.account}:report-group/*`,
                            ]],
                    },
                },
                {
                    Action: ['codebuild:BatchGetBuilds', 'codebuild:StartBuild', 'codebuild:StopBuild'],
                    Effect: 'Allow',
                    Resource: '*',
                },
                {
                    Action: 'sts:AssumeRole',
                    Effect: 'Allow',
                    Resource: unsingleton(assumeRolePattern.map(arn => { return { 'Fn::Sub': arn }; })),
                },
                {
                    Action: ['s3:GetObject*', 's3:GetBucket*', 's3:List*'],
                    Effect: 'Allow',
                    Resource: [
                        { 'Fn::GetAtt': ['CdkPipelineArtifactsBucket7B46C7BF', 'Arn'] },
                        { 'Fn::Join': ['', [{ 'Fn::GetAtt': ['CdkPipelineArtifactsBucket7B46C7BF', 'Arn'] }, '/*']] },
                    ],
                },
                {
                    Action: ['kms:Decrypt', 'kms:DescribeKey'],
                    Effect: 'Allow',
                    Resource: { 'Fn::GetAtt': ['CdkPipelineArtifactsBucketEncryptionKeyDDD3258C', 'Arn'] },
                }],
        },
        Roles: [{ Ref: attachedRole }],
    };
}
(0, testhelpers_1.behavior)('necessary secrets manager permissions get added to asset roles', suite => {
    // Not possible to configure this for legacy pipelines
    suite.doesNotApply.legacy();
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
            assetPublishingCodeBuildDefaults: {
                buildEnvironment: {
                    environmentVariables: {
                        FOOBAR: {
                            value: 'FoobarSecret',
                            type: cb.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        },
                    },
                },
            },
        });
        pipeline.addStage(new testhelpers_1.FileAssetApp(pipelineStack, 'MyApp'));
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([{
                        Action: 'secretsmanager:GetSecretValue',
                        Effect: 'Allow',
                        Resource: {
                            'Fn::Join': [
                                '',
                                [
                                    'arn:',
                                    { Ref: 'AWS::Partition' },
                                    ':secretsmanager:us-pipeline:123pipeline:secret:FoobarSecret-??????',
                                ],
                            ],
                        },
                    }]),
            },
            Roles: [
                { Ref: 'PipelineAssetsFileRole59943A77' },
            ],
        });
    }
});
(0, testhelpers_1.behavior)('adding environment variable to assets job adds SecretsManager permissions', suite => {
    // No way to manipulate buildEnvironment in legacy API
    suite.doesNotApply.legacy();
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Pipeline', {
            assetPublishingCodeBuildDefaults: {
                buildEnvironment: {
                    environmentVariables: {
                        FOOBAR: {
                            value: 'FoobarSecret',
                            type: cb.BuildEnvironmentVariableType.SECRETS_MANAGER,
                        },
                    },
                },
            },
        });
        pipeline.addStage(new testhelpers_1.FileAssetApp(pipelineStack, 'MyApp'));
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([
                    assertions_1.Match.objectLike({
                        Action: 'secretsmanager:GetSecretValue',
                        Effect: 'Allow',
                        Resource: {
                            'Fn::Join': ['', [
                                    'arn:',
                                    { Ref: 'AWS::Partition' },
                                    ':secretsmanager:us-pipeline:123pipeline:secret:FoobarSecret-??????',
                                ]],
                        },
                    }),
                ]),
            },
        });
    });
});
function synthesize(stack) {
    const root = stack.node.root;
    if (!core_1.Stage.isStage(root)) {
        throw new Error('unexpected: all stacks must be part of a Stage');
    }
    return root.synth({ skipValidation: true });
}
function unsingleton(xs) {
    if (xs.length === 1) {
        return xs[0];
    }
    return xs;
}
//# sourceMappingURL=data:application/json;base64,