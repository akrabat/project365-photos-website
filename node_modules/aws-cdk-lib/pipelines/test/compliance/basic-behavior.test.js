"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/no-extraneous-dependencies */
const fs = require("fs");
const path = require("path");
const assertions_1 = require("../../../assertions");
const core_1 = require("../../../core");
const testhelpers_1 = require("../testhelpers");
let app;
let pipelineStack;
beforeEach(() => {
    app = new testhelpers_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
});
afterEach(() => {
    app.cleanup();
});
(0, testhelpers_1.behavior)('stack templates in nested assemblies are correctly addressed', (suite) => {
    suite.legacy(() => {
        // WHEN
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.OneStackApp(app, 'App'));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        // WHEN
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.OneStackApp(app, 'App'));
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'App',
                    Actions: assertions_1.Match.arrayWith([
                        assertions_1.Match.objectLike({
                            Name: (0, testhelpers_1.stringLike)('*Prepare'),
                            InputArtifacts: [assertions_1.Match.objectLike({})],
                            Configuration: assertions_1.Match.objectLike({
                                StackName: 'App-Stack',
                                TemplatePath: (0, testhelpers_1.stringLike)('*::assembly-App/*.template.json'),
                            }),
                        }),
                    ]),
                }]),
        });
    }
});
(0, testhelpers_1.behavior)('obvious error is thrown when stage contains no stacks', (suite) => {
    suite.legacy(() => {
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        // WHEN
        expect(() => {
            pipeline.addApplicationStage(new core_1.Stage(app, 'EmptyStage'));
        }).toThrow(/should contain at least one Stack/);
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        // WHEN
        expect(() => {
            pipeline.addStage(new core_1.Stage(app, 'EmptyStage'));
        }).toThrow(/should contain at least one Stack/);
    });
});
(0, testhelpers_1.behavior)('overridden stack names are respected', (suite) => {
    suite.legacy(() => {
        // WHEN
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new OneStackAppWithCustomName(app, 'App1'));
        pipeline.addApplicationStage(new OneStackAppWithCustomName(app, 'App2'));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addStage(new OneStackAppWithCustomName(app, 'App1'));
        pipeline.addStage(new OneStackAppWithCustomName(app, 'App2'));
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([
                {
                    Name: 'App1',
                    Actions: assertions_1.Match.arrayWith([assertions_1.Match.objectLike({
                            Name: (0, testhelpers_1.stringLike)('*Prepare'),
                            Configuration: assertions_1.Match.objectLike({
                                StackName: 'MyFancyStack',
                            }),
                        })]),
                },
                {
                    Name: 'App2',
                    Actions: assertions_1.Match.arrayWith([assertions_1.Match.objectLike({
                            Name: (0, testhelpers_1.stringLike)('*Prepare'),
                            Configuration: assertions_1.Match.objectLike({
                                StackName: 'MyFancyStack',
                            }),
                        })]),
                },
            ]),
        });
    }
});
(0, testhelpers_1.behavior)('changing CLI version leads to a different pipeline structure (restarting it)', (suite) => {
    suite.legacy(() => {
        // GIVEN
        const stack2 = new core_1.Stack(app, 'Stack2', { env: testhelpers_1.PIPELINE_ENV });
        const stack3 = new core_1.Stack(app, 'Stack3', { env: testhelpers_1.PIPELINE_ENV });
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(stack2, 'Cdk', {
            cdkCliVersion: '1.2.3',
        });
        new testhelpers_1.LegacyTestGitHubNpmPipeline(stack3, 'Cdk', {
            cdkCliVersion: '4.5.6',
        });
        THEN_codePipelineExpectation(stack2, stack3);
    });
    suite.modern(() => {
        // GIVEN
        const stack2 = new core_1.Stack(app, 'Stack2', { env: testhelpers_1.PIPELINE_ENV });
        const stack3 = new core_1.Stack(app, 'Stack3', { env: testhelpers_1.PIPELINE_ENV });
        // WHEN
        new testhelpers_1.ModernTestGitHubNpmPipeline(stack2, 'Cdk', {
            cliVersion: '1.2.3',
        });
        new testhelpers_1.ModernTestGitHubNpmPipeline(stack3, 'Cdk', {
            cliVersion: '4.5.6',
        });
        THEN_codePipelineExpectation(stack2, stack3);
    });
    function THEN_codePipelineExpectation(stack2, stack3) {
        // THEN
        const structure2 = new assertions_1.Capture();
        const structure3 = new assertions_1.Capture();
        assertions_1.Template.fromStack(stack2).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: structure2,
        });
        assertions_1.Template.fromStack(stack3).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: structure3,
        });
        expect(JSON.stringify(structure2.asArray())).not.toEqual(JSON.stringify(structure3.asArray()));
    }
});
(0, testhelpers_1.behavior)('tags get reflected in pipeline', (suite) => {
    suite.legacy(() => {
        // WHEN
        const stage = new testhelpers_1.OneStackApp(app, 'App');
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        core_1.Tags.of(stage).add('CostCenter', 'F00B4R');
        pipeline.addApplicationStage(stage);
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        // WHEN
        const stage = new testhelpers_1.OneStackApp(app, 'App');
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        core_1.Tags.of(stage).add('CostCenter', 'F00B4R');
        pipeline.addStage(stage);
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        const templateConfig = new assertions_1.Capture();
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'App',
                    Actions: assertions_1.Match.arrayWith([
                        assertions_1.Match.objectLike({
                            Name: (0, testhelpers_1.stringLike)('*Prepare'),
                            InputArtifacts: [assertions_1.Match.objectLike({})],
                            Configuration: assertions_1.Match.objectLike({
                                StackName: 'App-Stack',
                                TemplateConfiguration: templateConfig,
                            }),
                        }),
                    ]),
                }]),
        });
        expect(templateConfig.asString()).toMatch(/::assembly-App\/.*\.template\..*json/);
        const [, relConfigFile] = templateConfig.asString().split('::');
        const absConfigFile = path.join(app.outdir, relConfigFile);
        const configFile = JSON.parse(fs.readFileSync(absConfigFile, { encoding: 'utf-8' }));
        expect(configFile).toEqual(expect.objectContaining({
            Tags: {
                CostCenter: 'F00B4R',
            },
        }));
    }
});
class OneStackAppWithCustomName extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        new testhelpers_1.BucketStack(this, 'Stack', {
            stackName: 'MyFancyStack',
        });
    }
}
//# sourceMappingURL=data:application/json;base64,