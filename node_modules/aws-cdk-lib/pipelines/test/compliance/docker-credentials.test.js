"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const cb = require("../../../aws-codebuild");
const secretsmanager = require("../../../aws-secretsmanager");
const core_1 = require("../../../core");
const cdkp = require("../../lib");
const lib_1 = require("../../lib");
const default_codebuild_image_1 = require("../../lib/private/default-codebuild-image");
const testhelpers_1 = require("../testhelpers");
const secretSynthArn = 'arn:aws:secretsmanager:eu-west-1:0123456789012:secret:synth-012345';
const secretUpdateArn = 'arn:aws:secretsmanager:eu-west-1:0123456789012:secret:update-012345';
const secretPublishArn = 'arn:aws:secretsmanager:eu-west-1:0123456789012:secret:publish-012345';
let app;
let pipelineStack;
let secretSynth;
let secretUpdate;
let secretPublish;
beforeEach(() => {
    app = new testhelpers_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
    secretSynth = secretsmanager.Secret.fromSecretCompleteArn(pipelineStack, 'Secret1', secretSynthArn);
    secretUpdate = secretsmanager.Secret.fromSecretCompleteArn(pipelineStack, 'Secret2', secretUpdateArn);
    secretPublish = secretsmanager.Secret.fromSecretCompleteArn(pipelineStack, 'Secret3', secretPublishArn);
});
afterEach(() => {
    app.cleanup();
});
(0, testhelpers_1.behavior)('synth action receives install commands and access to relevant credentials', (suite) => {
    suite.legacy(() => {
        const pipeline = new LegacyPipelineWithCreds(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.DockerAssetApp(app, 'App1'));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new ModernPipelineWithCreds(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.DockerAssetApp(app, 'App1'));
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        const expectedCredsConfig = JSON.stringify({
            version: '1.0',
            domainCredentials: { 'synth.example.com': { secretsManagerSecretId: secretSynthArn } },
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: { Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        pre_build: {
                            commands: assertions_1.Match.arrayWith([
                                'mkdir $HOME/.cdk',
                                `echo '${expectedCredsConfig}' > $HOME/.cdk/cdk-docker-creds.json`,
                            ]),
                        },
                        // Prove we're looking at the Synth project
                        build: {
                            commands: assertions_1.Match.arrayWith([(0, testhelpers_1.stringLike)('*cdk*synth*')]),
                        },
                    },
                })),
            },
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([{
                        Action: ['secretsmanager:GetSecretValue', 'secretsmanager:DescribeSecret'],
                        Effect: 'Allow',
                        Resource: secretSynthArn,
                    }]),
                Version: '2012-10-17',
            },
            Roles: [{ Ref: (0, testhelpers_1.stringLike)('Cdk*BuildProjectRole*') }],
        });
    }
});
(0, testhelpers_1.behavior)('synth action receives Windows install commands if a Windows image is detected', (suite) => {
    suite.legacy(() => {
        const pipeline = new LegacyPipelineWithCreds(pipelineStack, 'Cdk2', {
            npmSynthOptions: {
                environment: {
                    buildImage: cb.WindowsBuildImage.WINDOWS_BASE_2_0,
                },
            },
        });
        pipeline.addApplicationStage(new testhelpers_1.DockerAssetApp(app, 'App1'));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new ModernPipelineWithCreds(pipelineStack, 'Cdk2', {
            synth: new lib_1.CodeBuildStep('Synth', {
                commands: ['cdk synth'],
                primaryOutputDirectory: 'cdk.out',
                input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                buildEnvironment: {
                    buildImage: cb.WindowsBuildImage.WINDOWS_BASE_2_0,
                    computeType: cb.ComputeType.MEDIUM,
                },
            }),
        });
        pipeline.addStage(new testhelpers_1.DockerAssetApp(app, 'App1'));
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        const expectedCredsConfig = JSON.stringify({
            version: '1.0',
            domainCredentials: { 'synth.example.com': { secretsManagerSecretId: secretSynthArn } },
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: { Image: 'aws/codebuild/windows-base:2.0' },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        pre_build: {
                            commands: assertions_1.Match.arrayWith([
                                'mkdir %USERPROFILE%\\.cdk',
                                `echo '${expectedCredsConfig}' > %USERPROFILE%\\.cdk\\cdk-docker-creds.json`,
                            ]),
                        },
                        // Prove we're looking at the Synth project
                        build: {
                            commands: assertions_1.Match.arrayWith([(0, testhelpers_1.stringLike)('*cdk*synth*')]),
                        },
                    },
                })),
            },
        });
    }
});
(0, testhelpers_1.behavior)('self-update receives install commands and access to relevant credentials', (suite) => {
    suite.legacy(() => {
        const pipeline = new LegacyPipelineWithCreds(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.DockerAssetApp(app, 'App1'));
        THEN_codePipelineExpectation('install');
    });
    suite.modern(() => {
        const pipeline = new ModernPipelineWithCreds(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.DockerAssetApp(app, 'App1'));
        THEN_codePipelineExpectation('pre_build');
    });
    function THEN_codePipelineExpectation(expectedPhase) {
        const expectedCredsConfig = JSON.stringify({
            version: '1.0',
            domainCredentials: { 'selfupdate.example.com': { secretsManagerSecretId: secretUpdateArn } },
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: { Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        [expectedPhase]: {
                            commands: assertions_1.Match.arrayWith([
                                'mkdir $HOME/.cdk',
                                `echo '${expectedCredsConfig}' > $HOME/.cdk/cdk-docker-creds.json`,
                            ]),
                        },
                        // Prove we're looking at the SelfMutate project
                        build: {
                            commands: assertions_1.Match.arrayWith([
                                (0, testhelpers_1.stringLike)('cdk * deploy PipelineStack*'),
                            ]),
                        },
                    },
                })),
            },
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([{
                        Action: ['secretsmanager:GetSecretValue', 'secretsmanager:DescribeSecret'],
                        Effect: 'Allow',
                        Resource: secretUpdateArn,
                    }]),
                Version: '2012-10-17',
            },
            Roles: [{ Ref: (0, testhelpers_1.stringLike)('*SelfMutat*Role*') }],
        });
    }
});
(0, testhelpers_1.behavior)('asset publishing receives install commands and access to relevant credentials', (suite) => {
    suite.legacy(() => {
        const pipeline = new LegacyPipelineWithCreds(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.DockerAssetApp(app, 'App1'));
        THEN_codePipelineExpectation('install');
    });
    suite.modern(() => {
        const pipeline = new ModernPipelineWithCreds(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.DockerAssetApp(app, 'App1'));
        THEN_codePipelineExpectation('pre_build');
    });
    function THEN_codePipelineExpectation(expectedPhase) {
        const expectedCredsConfig = JSON.stringify({
            version: '1.0',
            domainCredentials: { 'publish.example.com': { secretsManagerSecretId: secretPublishArn } },
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: { Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        [expectedPhase]: {
                            commands: assertions_1.Match.arrayWith([
                                'mkdir $HOME/.cdk',
                                `echo '${expectedCredsConfig}' > $HOME/.cdk/cdk-docker-creds.json`,
                            ]),
                        },
                        // Prove we're looking at the Publishing project
                        build: {
                            commands: assertions_1.Match.arrayWith([(0, testhelpers_1.stringLike)('cdk-assets*')]),
                        },
                    },
                })),
            },
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([{
                        Action: ['secretsmanager:GetSecretValue', 'secretsmanager:DescribeSecret'],
                        Effect: 'Allow',
                        Resource: secretPublishArn,
                    }]),
                Version: '2012-10-17',
            },
            Roles: [{ Ref: 'CdkAssetsDockerRole484B6DD3' }],
        });
    }
});
class LegacyPipelineWithCreds extends testhelpers_1.LegacyTestGitHubNpmPipeline {
    constructor(scope, id, props) {
        super(scope, id, {
            dockerCredentials: [
                cdkp.DockerCredential.customRegistry('synth.example.com', secretSynth, {
                    usages: [cdkp.DockerCredentialUsage.SYNTH],
                }),
                cdkp.DockerCredential.customRegistry('selfupdate.example.com', secretUpdate, {
                    usages: [cdkp.DockerCredentialUsage.SELF_UPDATE],
                }),
                cdkp.DockerCredential.customRegistry('publish.example.com', secretPublish, {
                    usages: [cdkp.DockerCredentialUsage.ASSET_PUBLISHING],
                }),
            ],
            ...props,
        });
    }
}
class ModernPipelineWithCreds extends testhelpers_1.ModernTestGitHubNpmPipeline {
    constructor(scope, id, props) {
        super(scope, id, {
            dockerCredentials: [
                cdkp.DockerCredential.customRegistry('synth.example.com', secretSynth, {
                    usages: [cdkp.DockerCredentialUsage.SYNTH],
                }),
                cdkp.DockerCredential.customRegistry('selfupdate.example.com', secretUpdate, {
                    usages: [cdkp.DockerCredentialUsage.SELF_UPDATE],
                }),
                cdkp.DockerCredential.customRegistry('publish.example.com', secretPublish, {
                    usages: [cdkp.DockerCredentialUsage.ASSET_PUBLISHING],
                }),
            ],
            ...props,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,