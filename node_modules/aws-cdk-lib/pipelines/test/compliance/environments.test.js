"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/no-extraneous-dependencies */
const assertions_1 = require("../../../assertions");
const core_1 = require("../../../core");
const testhelpers_1 = require("../testhelpers");
let app;
let pipelineStack;
beforeEach(() => {
    app = new testhelpers_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
});
afterEach(() => {
    app.cleanup();
});
(0, testhelpers_1.behavior)('action has right settings for same-env deployment', (suite) => {
    suite.legacy(() => {
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.OneStackApp(app, 'Same'));
        THEN_codePipelineExpection(agnosticRole);
    });
    suite.additional('legacy: even if env is specified but the same as the pipeline', () => {
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.OneStackApp(app, 'Same', {
            env: testhelpers_1.PIPELINE_ENV,
        }));
        THEN_codePipelineExpection(pipelineEnvRole);
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.OneStackApp(app, 'Same'));
        THEN_codePipelineExpection(agnosticRole);
    });
    suite.additional('modern: even if env is specified but the same as the pipeline', () => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.OneStackApp(app, 'Same', {
            env: testhelpers_1.PIPELINE_ENV,
        }));
        THEN_codePipelineExpection(pipelineEnvRole);
    });
    function THEN_codePipelineExpection(roleArn) {
        // THEN: pipeline structure is correct
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'Same',
                    Actions: [
                        assertions_1.Match.objectLike({
                            Name: (0, testhelpers_1.stringLike)('*Prepare'),
                            RoleArn: roleArn('deploy-role'),
                            Configuration: assertions_1.Match.objectLike({
                                StackName: 'Same-Stack',
                                RoleArn: roleArn('cfn-exec-role'),
                            }),
                        }),
                        assertions_1.Match.objectLike({
                            Name: (0, testhelpers_1.stringLike)('*Deploy'),
                            RoleArn: roleArn('deploy-role'),
                            Configuration: assertions_1.Match.objectLike({
                                StackName: 'Same-Stack',
                            }),
                        }),
                    ],
                }]),
        });
        // THEN: artifact bucket can be read by deploy role
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::S3::BucketPolicy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([assertions_1.Match.objectLike({
                        Action: ['s3:GetObject*', 's3:GetBucket*', 's3:List*'],
                        Principal: {
                            AWS: roleArn('deploy-role'),
                        },
                    })]),
            },
        });
    }
});
(0, testhelpers_1.behavior)('action has right settings for cross-account deployment', (suite) => {
    suite.legacy(() => {
        // WHEN
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.OneStackApp(app, 'CrossAccount', { env: { account: 'you' } }));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        // WHEN
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            crossAccountKeys: true,
        });
        pipeline.addStage(new testhelpers_1.OneStackApp(app, 'CrossAccount', { env: { account: 'you' } }));
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN: Pipelien structure is correct
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'CrossAccount',
                    Actions: [
                        assertions_1.Match.objectLike({
                            Name: (0, testhelpers_1.stringLike)('*Prepare'),
                            RoleArn: {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        ':iam::you:role/cdk-hnb659fds-deploy-role-you-',
                                        { Ref: 'AWS::Region' },
                                    ]],
                            },
                            Configuration: assertions_1.Match.objectLike({
                                StackName: 'CrossAccount-Stack',
                                RoleArn: {
                                    'Fn::Join': ['', [
                                            'arn:',
                                            { Ref: 'AWS::Partition' },
                                            ':iam::you:role/cdk-hnb659fds-cfn-exec-role-you-',
                                            { Ref: 'AWS::Region' },
                                        ]],
                                },
                            }),
                        }),
                        assertions_1.Match.objectLike({
                            Name: (0, testhelpers_1.stringLike)('*Deploy'),
                            RoleArn: {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        ':iam::you:role/cdk-hnb659fds-deploy-role-you-',
                                        { Ref: 'AWS::Region' },
                                    ]],
                            },
                            Configuration: assertions_1.Match.objectLike({
                                StackName: 'CrossAccount-Stack',
                            }),
                        }),
                    ],
                }]),
        });
        // THEN: Artifact bucket can be read by deploy role
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::S3::BucketPolicy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([assertions_1.Match.objectLike({
                        Action: ['s3:GetObject*', 's3:GetBucket*', 's3:List*'],
                        Principal: {
                            AWS: {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        (0, testhelpers_1.stringLike)('*-deploy-role-*'),
                                        { Ref: 'AWS::Region' },
                                    ]],
                            },
                        },
                    })]),
            },
        });
    }
});
(0, testhelpers_1.behavior)('action has right settings for cross-region deployment', (suite) => {
    suite.legacy(() => {
        // WHEN
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.OneStackApp(app, 'CrossRegion', { env: { region: 'elsewhere' } }));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            crossAccountKeys: true,
        });
        pipeline.addStage(new testhelpers_1.OneStackApp(app, 'CrossRegion', { env: { region: 'elsewhere' } }));
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'CrossRegion',
                    Actions: [
                        assertions_1.Match.objectLike({
                            Name: (0, testhelpers_1.stringLike)('*Prepare'),
                            RoleArn: {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        ':iam::',
                                        { Ref: 'AWS::AccountId' },
                                        ':role/cdk-hnb659fds-deploy-role-',
                                        { Ref: 'AWS::AccountId' },
                                        '-elsewhere',
                                    ]],
                            },
                            Region: 'elsewhere',
                            Configuration: assertions_1.Match.objectLike({
                                StackName: 'CrossRegion-Stack',
                                RoleArn: {
                                    'Fn::Join': ['', [
                                            'arn:',
                                            { Ref: 'AWS::Partition' },
                                            ':iam::',
                                            { Ref: 'AWS::AccountId' },
                                            ':role/cdk-hnb659fds-cfn-exec-role-',
                                            { Ref: 'AWS::AccountId' },
                                            '-elsewhere',
                                        ]],
                                },
                            }),
                        }),
                        assertions_1.Match.objectLike({
                            Name: (0, testhelpers_1.stringLike)('*Deploy'),
                            RoleArn: {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        ':iam::',
                                        { Ref: 'AWS::AccountId' },
                                        ':role/cdk-hnb659fds-deploy-role-',
                                        { Ref: 'AWS::AccountId' },
                                        '-elsewhere',
                                    ]],
                            },
                            Region: 'elsewhere',
                            Configuration: assertions_1.Match.objectLike({
                                StackName: 'CrossRegion-Stack',
                            }),
                        }),
                    ],
                }]),
        });
    }
});
(0, testhelpers_1.behavior)('action has right settings for cross-account/cross-region deployment', (suite) => {
    suite.legacy(() => {
        // WHEN
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.OneStackApp(app, 'CrossBoth', {
            env: {
                account: 'you',
                region: 'elsewhere',
            },
        }));
        THEN_codePipelineExpectations();
    });
    suite.modern(() => {
        // WHEN
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            crossAccountKeys: true,
        });
        pipeline.addStage(new testhelpers_1.OneStackApp(app, 'CrossBoth', {
            env: {
                account: 'you',
                region: 'elsewhere',
            },
        }));
        THEN_codePipelineExpectations();
    });
    function THEN_codePipelineExpectations() {
        // THEN: pipeline structure must be correct
        const stack = app.stackArtifact(pipelineStack);
        expect(stack).toBeDefined();
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'CrossBoth',
                    Actions: [
                        assertions_1.Match.objectLike({
                            Name: (0, testhelpers_1.stringLike)('*Prepare'),
                            RoleArn: {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        ':iam::you:role/cdk-hnb659fds-deploy-role-you-elsewhere',
                                    ]],
                            },
                            Region: 'elsewhere',
                            Configuration: assertions_1.Match.objectLike({
                                StackName: 'CrossBoth-Stack',
                                RoleArn: {
                                    'Fn::Join': ['', [
                                            'arn:',
                                            { Ref: 'AWS::Partition' },
                                            ':iam::you:role/cdk-hnb659fds-cfn-exec-role-you-elsewhere',
                                        ]],
                                },
                            }),
                        }),
                        assertions_1.Match.objectLike({
                            Name: (0, testhelpers_1.stringLike)('*Deploy'),
                            RoleArn: {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        ':iam::you:role/cdk-hnb659fds-deploy-role-you-elsewhere',
                                    ]],
                            },
                            Region: 'elsewhere',
                            Configuration: assertions_1.Match.objectLike({
                                StackName: 'CrossBoth-Stack',
                            }),
                        }),
                    ],
                }]),
        });
        // THEN: artifact bucket can be read by deploy role
        const supportStack = app.stackArtifact('PipelineStack-support-elsewhere');
        expect(supportStack).toBeDefined();
        assertions_1.Template.fromStack(supportStack).hasResourceProperties('AWS::S3::BucketPolicy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([assertions_1.Match.objectLike({
                        Action: assertions_1.Match.arrayWith(['s3:GetObject*', 's3:GetBucket*', 's3:List*']),
                        Principal: {
                            AWS: {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        (0, testhelpers_1.stringLike)('*-deploy-role-*'),
                                    ]],
                            },
                        },
                    })]),
            },
        });
        // And the key to go along with it
        assertions_1.Template.fromStack(supportStack).hasResourceProperties('AWS::KMS::Key', {
            KeyPolicy: {
                Statement: assertions_1.Match.arrayWith([assertions_1.Match.objectLike({
                        Action: assertions_1.Match.arrayWith(['kms:Decrypt', 'kms:DescribeKey']),
                        Principal: {
                            AWS: {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        (0, testhelpers_1.stringLike)('*-deploy-role-*'),
                                    ]],
                            },
                        },
                    })]),
            },
        });
    }
});
function agnosticRole(roleName) {
    return {
        'Fn::Join': ['', [
                'arn:',
                { Ref: 'AWS::Partition' },
                ':iam::',
                { Ref: 'AWS::AccountId' },
                `:role/cdk-hnb659fds-${roleName}-`,
                { Ref: 'AWS::AccountId' },
                '-',
                { Ref: 'AWS::Region' },
            ]],
    };
}
function pipelineEnvRole(roleName) {
    return {
        'Fn::Join': ['', [
                'arn:',
                { Ref: 'AWS::Partition' },
                `:iam::${testhelpers_1.PIPELINE_ENV.account}:role/cdk-hnb659fds-${roleName}-${testhelpers_1.PIPELINE_ENV.account}-${testhelpers_1.PIPELINE_ENV.region}`,
            ]],
    };
}
//# sourceMappingURL=data:application/json;base64,