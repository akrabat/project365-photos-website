"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const cp = require("../../../aws-codepipeline");
const cpa = require("../../../aws-codepipeline-actions");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("../../../core");
const cdkp = require("../../lib");
const lib_1 = require("../../lib");
const testhelpers_1 = require("../testhelpers");
let app;
let pipelineStack;
let sourceArtifact;
let cloudAssemblyArtifact;
let codePipeline;
beforeEach(() => {
    app = new testhelpers_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
    sourceArtifact = new cp.Artifact();
    cloudAssemblyArtifact = new cp.Artifact();
});
afterEach(() => {
    app.cleanup();
});
describe('with empty existing CodePipeline', () => {
    beforeEach(() => {
        codePipeline = new cp.Pipeline(pipelineStack, 'CodePipeline');
    });
    (0, testhelpers_1.behavior)('both actions are required', (suite) => {
        suite.legacy(() => {
            // WHEN
            expect(() => {
                new cdkp.CdkPipeline(pipelineStack, 'Cdk', { cloudAssemblyArtifact, codePipeline });
            }).toThrow(/You must pass a 'sourceAction'/);
        });
        // 'synth' is not optional so this doesn't apply
        suite.doesNotApply.modern();
    });
    (0, testhelpers_1.behavior)('can give both actions', (suite) => {
        suite.legacy(() => {
            // WHEN
            new cdkp.CdkPipeline(pipelineStack, 'Cdk', {
                cloudAssemblyArtifact,
                codePipeline,
                sourceAction: new testhelpers_1.TestGitHubAction(sourceArtifact),
                synthAction: cdkp.SimpleSynthAction.standardNpmSynth({ sourceArtifact, cloudAssemblyArtifact }),
            });
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            // WHEN
            new cdkp.CodePipeline(pipelineStack, 'Cdk', {
                codePipeline,
                synth: new cdkp.ShellStep('Synth', {
                    input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                    commands: ['true'],
                }),
            });
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            // THEN
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                Stages: [
                    assertions_1.Match.objectLike({ Name: 'Source' }),
                    assertions_1.Match.objectLike({ Name: 'Build' }),
                    assertions_1.Match.objectLike({ Name: 'UpdatePipeline' }),
                ],
            });
        }
    });
});
describe('with custom Source stage in existing Pipeline', () => {
    beforeEach(() => {
        codePipeline = new cp.Pipeline(pipelineStack, 'CodePipeline', {
            stages: [
                {
                    stageName: 'CustomSource',
                    actions: [new testhelpers_1.TestGitHubAction(sourceArtifact)],
                },
            ],
        });
    });
    (0, testhelpers_1.behavior)('Work with synthAction', (suite) => {
        suite.legacy(() => {
            // WHEN
            new cdkp.CdkPipeline(pipelineStack, 'Cdk', {
                codePipeline,
                cloudAssemblyArtifact,
                synthAction: cdkp.SimpleSynthAction.standardNpmSynth({ sourceArtifact, cloudAssemblyArtifact }),
            });
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            new cdkp.CodePipeline(pipelineStack, 'Cdk', {
                codePipeline,
                synth: new cdkp.ShellStep('Synth', {
                    input: cdkp.CodePipelineFileSet.fromArtifact(sourceArtifact),
                    commands: ['true'],
                }),
            });
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            // THEN
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                Stages: [
                    assertions_1.Match.objectLike({ Name: 'CustomSource' }),
                    assertions_1.Match.objectLike({ Name: 'Build' }),
                    assertions_1.Match.objectLike({ Name: 'UpdatePipeline' }),
                ],
            });
        }
    });
});
(0, cdk_build_tools_1.describeDeprecated)('with Source and Build stages in existing Pipeline', () => {
    beforeEach(() => {
        codePipeline = new cp.Pipeline(pipelineStack, 'CodePipeline', {
            stages: [
                {
                    stageName: 'CustomSource',
                    actions: [new testhelpers_1.TestGitHubAction(sourceArtifact)],
                },
                {
                    stageName: 'CustomBuild',
                    actions: [cdkp.SimpleSynthAction.standardNpmSynth({ sourceArtifact, cloudAssemblyArtifact })],
                },
            ],
        });
    });
    (0, testhelpers_1.behavior)('can supply no actions', (suite) => {
        suite.legacy(() => {
            // WHEN
            new cdkp.CdkPipeline(pipelineStack, 'Cdk', {
                codePipeline,
                cloudAssemblyArtifact,
            });
            THEN_codePipelineExpectation();
        });
        suite.modern(() => {
            new cdkp.CodePipeline(pipelineStack, 'Cdk', {
                codePipeline,
                synth: cdkp.CodePipelineFileSet.fromArtifact(cloudAssemblyArtifact),
            });
            THEN_codePipelineExpectation();
        });
        function THEN_codePipelineExpectation() {
            // THEN
            assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
                Stages: [
                    assertions_1.Match.objectLike({ Name: 'CustomSource' }),
                    assertions_1.Match.objectLike({ Name: 'CustomBuild' }),
                    assertions_1.Match.objectLike({ Name: 'UpdatePipeline' }),
                ],
            });
        }
    });
});
(0, testhelpers_1.behavior)('can add another action to an existing stage', (suite) => {
    suite.legacy(() => {
        // WHEN
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.stage('Source').addAction(new cpa.GitHubSourceAction({
            actionName: 'GitHub2',
            oauthToken: core_1.SecretValue.unsafePlainText('oops'),
            output: new cp.Artifact(),
            owner: 'OWNER',
            repo: 'REPO',
        }));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.buildPipeline();
        pipeline.pipeline.stages[0].addAction(new cpa.GitHubSourceAction({
            actionName: 'GitHub2',
            oauthToken: core_1.SecretValue.unsafePlainText('oops'),
            output: new cp.Artifact(),
            owner: 'OWNER',
            repo: 'REPO',
        }));
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'Source',
                    Actions: [
                        assertions_1.Match.objectLike({ ActionTypeId: assertions_1.Match.objectLike({ Provider: 'GitHub' }) }),
                        assertions_1.Match.objectLike({ ActionTypeId: assertions_1.Match.objectLike({ Provider: 'GitHub' }), Name: 'GitHub2' }),
                    ],
                }]),
        });
    }
});
(0, testhelpers_1.behavior)('assets stage inserted after existing pipeline actions', (suite) => {
    let existingCodePipeline;
    beforeEach(() => {
        existingCodePipeline = new cp.Pipeline(pipelineStack, 'CodePipeline', {
            stages: [
                {
                    stageName: 'CustomSource',
                    actions: [new testhelpers_1.TestGitHubAction(sourceArtifact)],
                },
                {
                    stageName: 'CustomBuild',
                    actions: [cdkp.SimpleSynthAction.standardNpmSynth({ sourceArtifact, cloudAssemblyArtifact })],
                },
            ],
        });
    });
    suite.legacy(() => {
        const pipeline = new cdkp.CdkPipeline(pipelineStack, 'CdkEmptyPipeline', {
            cloudAssemblyArtifact: cloudAssemblyArtifact,
            selfMutating: false,
            codePipeline: existingCodePipeline,
            // No source/build actions
        });
        pipeline.addApplicationStage(new testhelpers_1.FileAssetApp(app, 'App'));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new cdkp.CodePipeline(pipelineStack, 'CdkEmptyPipeline', {
            codePipeline: existingCodePipeline,
            selfMutation: false,
            synth: lib_1.CodePipelineFileSet.fromArtifact(cloudAssemblyArtifact),
            // No source/build actions
        });
        pipeline.addStage(new testhelpers_1.FileAssetApp(app, 'App'));
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: [
                assertions_1.Match.objectLike({ Name: 'CustomSource' }),
                assertions_1.Match.objectLike({ Name: 'CustomBuild' }),
                assertions_1.Match.objectLike({ Name: 'Assets' }),
                assertions_1.Match.objectLike({ Name: 'App' }),
            ],
        });
    }
});
//# sourceMappingURL=data:application/json;base64,