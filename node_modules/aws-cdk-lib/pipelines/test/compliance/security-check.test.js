"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const aws_sns_1 = require("../../../aws-sns");
const core_1 = require("../../../core");
const cdkp = require("../../lib");
const default_codebuild_image_1 = require("../../lib/private/default-codebuild-image");
const testhelpers_1 = require("../testhelpers");
const compliance_1 = require("../testhelpers/compliance");
let app;
let pipelineStack;
beforeEach(() => {
    app = new testhelpers_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineSecurityStack', { env: testhelpers_1.PIPELINE_ENV });
});
afterEach(() => {
    app.cleanup();
});
(0, compliance_1.behavior)('security check option generates lambda/codebuild at pipeline scope', (suite) => {
    suite.legacy(() => {
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.OneStackApp(app, 'App'), { confirmBroadeningPermissions: true });
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        const stage = new testhelpers_1.OneStackApp(app, 'App');
        pipeline.addStage(stage, {
            pre: [
                new cdkp.ConfirmPermissionsBroadening('Check', {
                    stage,
                }),
            ],
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        const template = assertions_1.Template.fromStack(pipelineStack);
        template.resourceCountIs('AWS::Lambda::Function', 1);
        template.hasResourceProperties('AWS::Lambda::Function', {
            Role: {
                'Fn::GetAtt': [
                    (0, testhelpers_1.stringLike)('CdkPipeline*SecurityCheckCDKPipelinesAutoApproveServiceRole*'),
                    'Arn',
                ],
            },
        });
        // 1 for github build, 1 for synth stage, and 1 for the application security check
        template.resourceCountIs('AWS::CodeBuild::Project', 3);
        // No CodeBuild project has a build image that is not the standard iamge
        const projects = template.findResources('AWS::CodeBuild::Project', {
            Properties: {
                Environment: {
                    Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
                },
            },
        });
        expect(Object.keys(projects).length).toEqual(3);
    }
});
(0, compliance_1.behavior)('security check option passes correct environment variables to check project', (suite) => {
    suite.legacy(() => {
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.OneStackApp(pipelineStack, 'App'), { confirmBroadeningPermissions: true });
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        const stage = new testhelpers_1.OneStackApp(pipelineStack, 'App');
        pipeline.addStage(stage, {
            pre: [
                new cdkp.ConfirmPermissionsBroadening('Check', {
                    stage,
                }),
            ],
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([
                {
                    Name: 'App',
                    Actions: assertions_1.Match.arrayWith([
                        assertions_1.Match.objectLike({
                            Name: (0, testhelpers_1.stringLike)('*Check'),
                            Configuration: assertions_1.Match.objectLike({
                                EnvironmentVariables: assertions_1.Match.serializedJson([
                                    { name: 'STAGE_PATH', type: 'PLAINTEXT', value: 'PipelineSecurityStack/App' },
                                    { name: 'STAGE_NAME', type: 'PLAINTEXT', value: 'App' },
                                    { name: 'ACTION_NAME', type: 'PLAINTEXT', value: assertions_1.Match.anyValue() },
                                ]),
                            }),
                        }),
                    ]),
                },
            ]),
        });
    }
});
(0, compliance_1.behavior)('pipeline created with auto approve tags and lambda/codebuild w/ valid permissions', (suite) => {
    suite.legacy(() => {
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.OneStackApp(app, 'App'), { confirmBroadeningPermissions: true });
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        const stage = new testhelpers_1.OneStackApp(app, 'App');
        pipeline.addStage(stage, {
            pre: [
                new cdkp.ConfirmPermissionsBroadening('Check', {
                    stage,
                }),
            ],
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // CodePipeline must be tagged as SECURITY_CHECK=ALLOW_APPROVE
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Tags: [
                {
                    Key: 'SECURITY_CHECK',
                    Value: 'ALLOW_APPROVE',
                },
            ],
        });
        // Lambda Function only has access to pipelines tagged SECURITY_CHECK=ALLOW_APPROVE
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: ['codepipeline:GetPipelineState', 'codepipeline:PutApprovalResult'],
                        Condition: {
                            StringEquals: { 'aws:ResourceTag/SECURITY_CHECK': 'ALLOW_APPROVE' },
                        },
                        Effect: 'Allow',
                        Resource: '*',
                    },
                ],
            },
        });
        // CodeBuild must have access to the stacks and invoking the lambda function
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([
                    {
                        Action: 'sts:AssumeRole',
                        Condition: {
                            'ForAnyValue:StringEquals': {
                                'iam:ResourceTag/aws-cdk:bootstrap-role': [
                                    'deploy',
                                ],
                            },
                        },
                        Effect: 'Allow',
                        Resource: '*',
                    },
                    {
                        Action: 'lambda:InvokeFunction',
                        Effect: 'Allow',
                        Resource: [
                            {
                                'Fn::GetAtt': [
                                    (0, testhelpers_1.stringLike)('*AutoApprove*'),
                                    'Arn',
                                ],
                            },
                            {
                                'Fn::Join': [
                                    '',
                                    [
                                        {
                                            'Fn::GetAtt': [
                                                (0, testhelpers_1.stringLike)('*AutoApprove*'),
                                                'Arn',
                                            ],
                                        },
                                        ':*',
                                    ],
                                ],
                            },
                        ],
                    },
                ]),
            },
        });
    }
});
(0, compliance_1.behavior)('confirmBroadeningPermissions option at addApplicationStage runs security check on all apps unless overriden', (suite) => {
    suite.legacy(() => {
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        const securityStage = pipeline.addApplicationStage(new testhelpers_1.OneStackApp(app, 'StageSecurityCheckStack'), { confirmBroadeningPermissions: true });
        securityStage.addApplication(new testhelpers_1.OneStackApp(app, 'AnotherStack'));
        securityStage.addApplication(new testhelpers_1.OneStackApp(app, 'SkipCheckStack'), { confirmBroadeningPermissions: false });
        THEN_codePipelineExpectation();
    });
    // For the modern API, there is no inheritance
    suite.doesNotApply.modern();
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: [
                {
                    Actions: [assertions_1.Match.objectLike({ Name: 'GitHub', RunOrder: 1 })],
                    Name: 'Source',
                },
                {
                    Actions: [assertions_1.Match.objectLike({ Name: 'Synth', RunOrder: 1 })],
                    Name: 'Build',
                },
                {
                    Actions: [assertions_1.Match.objectLike({ Name: 'SelfMutate', RunOrder: 1 })],
                    Name: 'UpdatePipeline',
                },
                {
                    Actions: [
                        assertions_1.Match.objectLike({ Name: 'StageSecurityCheckStackSecurityCheck', RunOrder: 1 }),
                        assertions_1.Match.objectLike({ Name: 'StageSecurityCheckStackManualApproval', RunOrder: 2 }),
                        assertions_1.Match.objectLike({ Name: 'AnotherStackSecurityCheck', RunOrder: 5 }),
                        assertions_1.Match.objectLike({ Name: 'AnotherStackManualApproval', RunOrder: 6 }),
                        assertions_1.Match.objectLike({ Name: 'Stack.Prepare', RunOrder: 3 }),
                        assertions_1.Match.objectLike({ Name: 'Stack.Deploy', RunOrder: 4 }),
                        assertions_1.Match.objectLike({ Name: 'AnotherStack-Stack.Prepare', RunOrder: 7 }),
                        assertions_1.Match.objectLike({ Name: 'AnotherStack-Stack.Deploy', RunOrder: 8 }),
                        assertions_1.Match.objectLike({ Name: 'SkipCheckStack-Stack.Prepare', RunOrder: 9 }),
                        assertions_1.Match.objectLike({ Name: 'SkipCheckStack-Stack.Deploy', RunOrder: 10 }),
                    ],
                    Name: 'StageSecurityCheckStack',
                },
            ],
        });
    }
});
(0, compliance_1.behavior)('confirmBroadeningPermissions option at addApplication runs security check only on selected application', (suite) => {
    suite.legacy(() => {
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        const noSecurityStage = pipeline.addApplicationStage(new testhelpers_1.OneStackApp(app, 'NoSecurityCheckStack'));
        noSecurityStage.addApplication(new testhelpers_1.OneStackApp(app, 'EnableCheckStack'), { confirmBroadeningPermissions: true });
        THEN_codePipelineExpectation();
    });
    // For the modern API, there is no inheritance
    suite.doesNotApply.modern();
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: [
                {
                    Actions: [assertions_1.Match.objectLike({ Name: 'GitHub', RunOrder: 1 })],
                    Name: 'Source',
                },
                {
                    Actions: [assertions_1.Match.objectLike({ Name: 'Synth', RunOrder: 1 })],
                    Name: 'Build',
                },
                {
                    Actions: [assertions_1.Match.objectLike({ Name: 'SelfMutate', RunOrder: 1 })],
                    Name: 'UpdatePipeline',
                },
                {
                    Actions: [
                        assertions_1.Match.objectLike({ Name: 'EnableCheckStackSecurityCheck', RunOrder: 3 }),
                        assertions_1.Match.objectLike({ Name: 'EnableCheckStackManualApproval', RunOrder: 4 }),
                        assertions_1.Match.objectLike({ Name: 'Stack.Prepare', RunOrder: 1 }),
                        assertions_1.Match.objectLike({ Name: 'Stack.Deploy', RunOrder: 2 }),
                        assertions_1.Match.objectLike({ Name: 'EnableCheckStack-Stack.Prepare', RunOrder: 5 }),
                        assertions_1.Match.objectLike({ Name: 'EnableCheckStack-Stack.Deploy', RunOrder: 6 }),
                    ],
                    Name: 'NoSecurityCheckStack',
                },
            ],
        });
    }
});
(0, compliance_1.behavior)('confirmBroadeningPermissions and notification topic options generates the right resources', (suite) => {
    suite.legacy(() => {
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        const topic = new aws_sns_1.Topic(pipelineStack, 'NotificationTopic');
        pipeline.addApplicationStage(new testhelpers_1.OneStackApp(app, 'MyStack'), {
            confirmBroadeningPermissions: true,
            securityNotificationTopic: topic,
        });
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        const topic = new aws_sns_1.Topic(pipelineStack, 'NotificationTopic');
        const stage = new testhelpers_1.OneStackApp(app, 'MyStack');
        pipeline.addStage(stage, {
            pre: [
                new cdkp.ConfirmPermissionsBroadening('Approve', {
                    stage,
                    notificationTopic: topic,
                }),
            ],
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).resourceCountIs('AWS::SNS::Topic', 1);
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([
                {
                    Name: 'MyStack',
                    Actions: [
                        assertions_1.Match.objectLike({
                            Configuration: {
                                ProjectName: { Ref: (0, testhelpers_1.stringLike)('*SecurityCheck*') },
                                EnvironmentVariables: {
                                    'Fn::Join': ['', [
                                            (0, testhelpers_1.stringLike)('*'),
                                            { Ref: 'NotificationTopicEB7A0DF1' },
                                            (0, testhelpers_1.stringLike)('*'),
                                        ]],
                                },
                            },
                            Name: (0, testhelpers_1.stringLike)('*Check'),
                            Namespace: (0, testhelpers_1.stringLike)('*'),
                            RunOrder: 1,
                        }),
                        assertions_1.Match.objectLike({
                            Configuration: {
                                CustomData: (0, testhelpers_1.stringLike)('#{*.MESSAGE}'),
                                ExternalEntityLink: (0, testhelpers_1.stringLike)('#{*.LINK}'),
                            },
                            Name: (0, testhelpers_1.stringLike)('*Approv*'),
                            RunOrder: 2,
                        }),
                        assertions_1.Match.objectLike({ Name: 'Stack.Prepare', RunOrder: 3 }),
                        assertions_1.Match.objectLike({ Name: 'Stack.Deploy', RunOrder: 4 }),
                    ],
                },
            ]),
        });
    }
});
(0, compliance_1.behavior)('Stages declared outside the pipeline create their own ApplicationSecurityCheck', (suite) => {
    suite.legacy(() => {
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        const pipelineStage = pipeline.codePipeline.addStage({
            stageName: 'UnattachedStage',
        });
        const unattachedStage = new cdkp.CdkStage(pipelineStack, 'UnattachedStage', {
            stageName: 'UnattachedStage',
            pipelineStage,
            cloudAssemblyArtifact: pipeline.cloudAssemblyArtifact,
            host: {
                publishAsset: () => undefined,
                stackOutputArtifact: () => undefined,
            },
        });
        unattachedStage.addApplication(new testhelpers_1.OneStackApp(app, 'UnattachedStage'), {
            confirmBroadeningPermissions: true,
        });
        THEN_codePipelineExpectation();
    });
    // Not a valid use of the modern API
    suite.doesNotApply.modern();
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).resourceCountIs('AWS::Lambda::Function', 1);
        // 1 for github build, 1 for synth stage, and 1 for the application security check
        assertions_1.Template.fromStack(pipelineStack).resourceCountIs('AWS::CodeBuild::Project', 3);
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Tags: [
                {
                    Key: 'SECURITY_CHECK',
                    Value: 'ALLOW_APPROVE',
                },
            ],
            Stages: [
                assertions_1.Match.objectLike({ Name: 'Source' }),
                assertions_1.Match.objectLike({ Name: 'Build' }),
                assertions_1.Match.objectLike({ Name: 'UpdatePipeline' }),
                {
                    Actions: [
                        assertions_1.Match.objectLike({
                            Configuration: {
                                ProjectName: { Ref: 'UnattachedStageStageApplicationSecurityCheckCDKSecurityCheckADCE795B' },
                            },
                            Name: 'UnattachedStageSecurityCheck',
                            RunOrder: 1,
                        }),
                        assertions_1.Match.objectLike({
                            Configuration: {
                                CustomData: '#{UnattachedStageSecurityCheck.MESSAGE}',
                                ExternalEntityLink: '#{UnattachedStageSecurityCheck.LINK}',
                            },
                            Name: 'UnattachedStageManualApproval',
                            RunOrder: 2,
                        }),
                        assertions_1.Match.objectLike({ Name: 'Stack.Prepare', RunOrder: 3 }),
                        assertions_1.Match.objectLike({ Name: 'Stack.Deploy', RunOrder: 4 }),
                    ],
                    Name: 'UnattachedStage',
                },
            ],
        });
    }
});
//# sourceMappingURL=data:application/json;base64,