"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/no-extraneous-dependencies */
const assertions_1 = require("../../../assertions");
const cb = require("../../../aws-codebuild");
const cp = require("../../../aws-codepipeline");
const core_1 = require("../../../core");
const default_codebuild_image_1 = require("../../lib/private/default-codebuild-image");
const testhelpers_1 = require("../testhelpers");
let app;
let pipelineStack;
beforeEach(() => {
    app = new testhelpers_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
});
afterEach(() => {
    app.cleanup();
});
(0, testhelpers_1.behavior)('CodePipeline has self-mutation stage', (suite) => {
    suite.legacy(() => {
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'UpdatePipeline',
                    Actions: [
                        assertions_1.Match.objectLike({
                            Name: 'SelfMutate',
                            Configuration: assertions_1.Match.objectLike({
                                ProjectName: { Ref: assertions_1.Match.anyValue() },
                            }),
                        }),
                    ],
                }]),
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        install: {
                            commands: ['npm install -g aws-cdk@2'],
                        },
                        build: {
                            commands: assertions_1.Match.arrayWith(['cdk -a . deploy PipelineStack --require-approval=never --verbose']),
                        },
                    },
                })),
                Type: 'CODEPIPELINE',
            },
        });
    }
});
(0, testhelpers_1.behavior)('selfmutation stage correctly identifies nested assembly of pipeline stack', (suite) => {
    suite.legacy(() => {
        const pipelineStage = new core_1.Stage(app, 'PipelineStage');
        const nestedPipelineStack = new core_1.Stack(pipelineStage, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
        new testhelpers_1.LegacyTestGitHubNpmPipeline(nestedPipelineStack, 'Cdk');
        THEN_codePipelineExpectation(nestedPipelineStack);
    });
    suite.modern(() => {
        const pipelineStage = new core_1.Stage(app, 'PipelineStage');
        const nestedPipelineStack = new core_1.Stack(pipelineStage, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
        new testhelpers_1.ModernTestGitHubNpmPipeline(nestedPipelineStack, 'Cdk');
        THEN_codePipelineExpectation(nestedPipelineStack);
    });
    function THEN_codePipelineExpectation(nestedPipelineStack) {
        assertions_1.Template.fromStack(nestedPipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        build: {
                            commands: assertions_1.Match.arrayWith(['cdk -a assembly-PipelineStage deploy PipelineStage/PipelineStack --require-approval=never --verbose']),
                        },
                    },
                })),
            },
        });
    }
});
(0, testhelpers_1.behavior)('selfmutation feature can be turned off', (suite) => {
    suite.legacy(() => {
        const cloudAssemblyArtifact = new cp.Artifact();
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            cloudAssemblyArtifact,
            selfMutating: false,
        });
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        // WHEN
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            selfMutation: false,
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.not(assertions_1.Match.arrayWith([{
                    Name: 'UpdatePipeline',
                    Actions: assertions_1.Match.anyValue(),
                }])),
        });
    }
});
(0, testhelpers_1.behavior)('can control fix/CLI version used in pipeline selfupdate', (suite) => {
    suite.legacy(() => {
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            pipelineName: 'vpipe',
            cdkCliVersion: '1.2.3',
        });
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            pipelineName: 'vpipe',
            cliVersion: '1.2.3',
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Name: 'vpipe-selfupdate',
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        install: {
                            commands: ['npm install -g aws-cdk@1.2.3'],
                        },
                    },
                })),
            },
        });
    }
});
(0, testhelpers_1.behavior)('Pipeline stack itself can use assets (has implications for selfupdate)', (suite) => {
    suite.legacy(() => {
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'PrivilegedPipeline', {
            supportDockerAssets: true,
        });
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                PrivilegedMode: true,
            },
        });
    });
    suite.modern(() => {
        // WHEN
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'PrivilegedPipeline', {
            dockerEnabledForSelfMutation: true,
        });
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                PrivilegedMode: true,
            },
        });
    });
});
(0, testhelpers_1.behavior)('self-update project role uses tagged bootstrap-role permissions', (suite) => {
    suite.legacy(() => {
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        THEN_codePipelineExpectations();
    });
    suite.modern(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        THEN_codePipelineExpectations();
    });
    function THEN_codePipelineExpectations() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([
                    {
                        Action: 'sts:AssumeRole',
                        Effect: 'Allow',
                        Resource: 'arn:*:iam::123pipeline:role/*',
                        Condition: {
                            'ForAnyValue:StringEquals': {
                                'iam:ResourceTag/aws-cdk:bootstrap-role': ['image-publishing', 'file-publishing', 'deploy'],
                            },
                        },
                    },
                    {
                        Action: 'cloudformation:DescribeStacks',
                        Effect: 'Allow',
                        Resource: '*',
                    },
                    {
                        Action: 's3:ListBucket',
                        Effect: 'Allow',
                        Resource: '*',
                    },
                ]),
            },
        });
    }
});
(0, testhelpers_1.behavior)('self-mutation stage can be customized with BuildSpec', (suite) => {
    suite.legacy(() => {
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            selfMutationBuildSpec: cb.BuildSpec.fromObject({
                phases: {
                    install: {
                        commands: 'npm config set registry example.com',
                    },
                },
                cache: {
                    paths: 'node_modules',
                },
            }),
        });
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            selfMutationCodeBuildDefaults: {
                partialBuildSpec: cb.BuildSpec.fromObject({
                    phases: {
                        install: {
                            commands: ['npm config set registry example.com'],
                        },
                    },
                    cache: {
                        paths: ['node_modules'],
                    },
                }),
            },
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
                PrivilegedMode: false,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        install: {
                            commands: ['npm config set registry example.com', 'npm install -g aws-cdk@2'],
                        },
                        build: {
                            commands: assertions_1.Match.arrayWith(['cdk -a . deploy PipelineStack --require-approval=never --verbose']),
                        },
                    },
                    cache: {
                        paths: ['node_modules'],
                    },
                })),
                Type: 'CODEPIPELINE',
            },
        });
    }
});
//# sourceMappingURL=data:application/json;base64,