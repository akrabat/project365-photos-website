"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const core_1 = require("../../../core");
const testhelpers_1 = require("../testhelpers");
let app;
let pipelineStack;
beforeEach(() => {
    app = new testhelpers_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
});
(0, testhelpers_1.behavior)('interdependent stacks are in the right order', (suite) => {
    suite.legacy(() => {
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.TwoStackApp(app, 'MyApp'));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.TwoStackApp(app, 'MyApp'));
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'MyApp',
                    Actions: (0, testhelpers_1.sortByRunOrder)([
                        assertions_1.Match.objectLike({ Name: 'Stack1.Prepare' }),
                        assertions_1.Match.objectLike({ Name: 'Stack1.Deploy' }),
                        assertions_1.Match.objectLike({ Name: 'Stack2.Prepare' }),
                        assertions_1.Match.objectLike({ Name: 'Stack2.Deploy' }),
                    ]),
                }]),
        });
    }
});
(0, testhelpers_1.behavior)('multiple independent stacks go in parallel', (suite) => {
    suite.legacy(() => {
        // WHEN
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.ThreeStackApp(app, 'MyApp'));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.ThreeStackApp(app, 'MyApp'));
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'MyApp',
                    Actions: (0, testhelpers_1.sortByRunOrder)([
                        // 1 and 2 in parallel
                        assertions_1.Match.objectLike({ Name: 'Stack1.Prepare' }),
                        assertions_1.Match.objectLike({ Name: 'Stack2.Prepare' }),
                        assertions_1.Match.objectLike({ Name: 'Stack1.Deploy' }),
                        assertions_1.Match.objectLike({ Name: 'Stack2.Deploy' }),
                        // Then 3
                        assertions_1.Match.objectLike({ Name: 'Stack3.Prepare' }),
                        assertions_1.Match.objectLike({ Name: 'Stack3.Deploy' }),
                    ]),
                }]),
        });
    }
});
(0, testhelpers_1.behavior)('user can request manual change set approvals', (suite) => {
    suite.legacy(() => {
        // WHEN
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.TwoStackApp(app, 'MyApp'), {
            manualApprovals: true,
        });
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'MyApp',
                    Actions: (0, testhelpers_1.sortByRunOrder)([
                        assertions_1.Match.objectLike({ Name: 'Stack1.Prepare' }),
                        assertions_1.Match.objectLike({ Name: 'ManualApproval' }),
                        assertions_1.Match.objectLike({ Name: 'Stack1.Deploy' }),
                        assertions_1.Match.objectLike({ Name: 'Stack2.Prepare' }),
                        assertions_1.Match.objectLike({ Name: 'ManualApproval2' }),
                        assertions_1.Match.objectLike({ Name: 'Stack2.Deploy' }),
                    ]),
                }]),
        });
    });
    // No change set approvals in Modern API for now.
    suite.doesNotApply.modern();
});
(0, testhelpers_1.behavior)('user can request extra runorder space between prepare and deploy', (suite) => {
    suite.legacy(() => {
        // WHEN
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.TwoStackApp(app, 'MyApp'), {
            extraRunOrderSpace: 1,
        });
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'MyApp',
                    Actions: (0, testhelpers_1.sortByRunOrder)([
                        assertions_1.Match.objectLike({
                            Name: 'Stack1.Prepare',
                            RunOrder: 1,
                        }),
                        assertions_1.Match.objectLike({
                            Name: 'Stack1.Deploy',
                            RunOrder: 3,
                        }),
                        assertions_1.Match.objectLike({
                            Name: 'Stack2.Prepare',
                            RunOrder: 4,
                        }),
                        assertions_1.Match.objectLike({
                            Name: 'Stack2.Deploy',
                            RunOrder: 6,
                        }),
                    ]),
                }]),
        });
    });
    // No change set approvals in Modern API for now.
    suite.doesNotApply.modern();
});
(0, testhelpers_1.behavior)('user can request both manual change set approval and extraRunOrderSpace', (suite) => {
    suite.legacy(() => {
        // WHEN
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addApplicationStage(new testhelpers_1.OneStackApp(app, 'MyApp'), {
            extraRunOrderSpace: 1,
            manualApprovals: true,
        });
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'MyApp',
                    Actions: (0, testhelpers_1.sortByRunOrder)([
                        assertions_1.Match.objectLike({
                            Name: 'Stack.Prepare',
                            RunOrder: 1,
                        }),
                        assertions_1.Match.objectLike({
                            Name: 'ManualApproval',
                            RunOrder: 2,
                        }),
                        assertions_1.Match.objectLike({
                            Name: 'Stack.Deploy',
                            RunOrder: 4,
                        }),
                    ]),
                }]),
        });
    });
    // No change set approvals in Modern API for now.
    suite.doesNotApply.modern();
});
//# sourceMappingURL=data:application/json;base64,