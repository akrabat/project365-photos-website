"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("../../../assertions");
const cbuild = require("../../../aws-codebuild");
const codepipeline = require("../../../aws-codepipeline");
const ec2 = require("../../../aws-ec2");
const ecr = require("../../../aws-ecr");
const iam = require("../../../aws-iam");
const s3 = require("../../../aws-s3");
const core_1 = require("../../../core");
const cdkp = require("../../lib");
const lib_1 = require("../../lib");
const default_codebuild_image_1 = require("../../lib/private/default-codebuild-image");
const testhelpers_1 = require("../testhelpers");
let app;
let pipelineStack;
let sourceArtifact;
let cloudAssemblyArtifact;
// Must be unique across all test files, but preferably also consistent
const OUTDIR = 'testcdk0.out';
// What phase install commands get rendered to
const LEGACY_INSTALLS = 'pre_build';
const MODERN_INSTALLS = 'install';
beforeEach(() => {
    app = new testhelpers_1.TestApp({ outdir: OUTDIR });
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
    sourceArtifact = new codepipeline.Artifact();
    cloudAssemblyArtifact = new codepipeline.Artifact('CloudAsm');
});
afterEach(() => {
    app.cleanup();
});
(0, testhelpers_1.behavior)('synth takes arrays of commands', (suite) => {
    suite.legacy(() => {
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: new cdkp.SimpleSynthAction({
                sourceArtifact,
                cloudAssemblyArtifact,
                installCommands: ['install1', 'install2'],
                buildCommands: ['build1', 'build2'],
                testCommands: ['test1', 'test2'],
                synthCommand: 'cdk synth',
            }),
        });
        THEN_codePipelineExpectation(LEGACY_INSTALLS);
    });
    suite.modern(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            installCommands: ['install1', 'install2'],
            commands: ['build1', 'build2', 'test1', 'test2', 'cdk synth'],
        });
        THEN_codePipelineExpectation(MODERN_INSTALLS);
    });
    function THEN_codePipelineExpectation(installPhase) {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        [installPhase]: {
                            commands: [
                                'install1',
                                'install2',
                            ],
                        },
                        build: {
                            commands: [
                                'build1',
                                'build2',
                                'test1',
                                'test2',
                                'cdk synth',
                            ],
                        },
                    },
                })),
            },
        });
    }
});
(0, testhelpers_1.behavior)('synth sets artifact base-directory to cdk.out', (suite) => {
    suite.legacy(() => {
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({ sourceArtifact, cloudAssemblyArtifact }),
        });
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    artifacts: {
                        'base-directory': 'cdk.out',
                    },
                })),
            },
        });
    }
});
(0, testhelpers_1.behavior)('synth supports setting subdirectory', (suite) => {
    suite.legacy(() => {
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
                sourceArtifact,
                cloudAssemblyArtifact,
                subdirectory: 'subdir',
            }),
        });
        THEN_codePipelineExpectation(LEGACY_INSTALLS);
    });
    suite.modern(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            installCommands: ['cd subdir'],
            commands: ['true'],
            primaryOutputDirectory: 'subdir/cdk.out',
        });
        THEN_codePipelineExpectation(MODERN_INSTALLS);
    });
    function THEN_codePipelineExpectation(installPhase) {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        [installPhase]: {
                            commands: assertions_1.Match.arrayWith(['cd subdir']),
                        },
                    },
                    artifacts: {
                        'base-directory': 'subdir/cdk.out',
                    },
                })),
            },
        });
    }
});
(0, testhelpers_1.behavior)('npm synth sets, or allows setting, UNSAFE_PERM=true', (suite) => {
    suite.legacy(() => {
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
                sourceArtifact,
                cloudAssemblyArtifact,
            }),
        });
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            env: {
                NPM_CONFIG_UNSAFE_PERM: 'true',
            },
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                EnvironmentVariables: [
                    {
                        Name: 'NPM_CONFIG_UNSAFE_PERM',
                        Type: 'PLAINTEXT',
                        Value: 'true',
                    },
                ],
            },
        });
    }
});
(0, testhelpers_1.behavior)('synth assumes a JavaScript project by default (no build, yes synth)', (suite) => {
    suite.legacy(() => {
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({ sourceArtifact, cloudAssemblyArtifact }),
        });
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        pre_build: {
                            commands: ['npm ci'],
                        },
                        build: {
                            commands: ['npx cdk synth'],
                        },
                    },
                })),
            },
        });
    });
    // Modern pipeline does not assume anything anymore
    suite.doesNotApply.modern();
});
(0, testhelpers_1.behavior)('Magic CodePipeline variables passed to synth envvars must be rendered in the action', (suite) => {
    suite.legacy(() => {
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: new cdkp.SimpleSynthAction({
                sourceArtifact,
                cloudAssemblyArtifact,
                environmentVariables: {
                    VERSION: { value: codepipeline.GlobalVariables.executionId },
                },
                synthCommand: 'synth',
            }),
        });
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            env: {
                VERSION: codepipeline.GlobalVariables.executionId,
            },
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'Build',
                    Actions: [
                        assertions_1.Match.objectLike({
                            Name: 'Synth',
                            Configuration: assertions_1.Match.objectLike({
                                EnvironmentVariables: assertions_1.Match.serializedJson(assertions_1.Match.arrayWith([
                                    {
                                        name: 'VERSION',
                                        type: 'PLAINTEXT',
                                        value: '#{codepipeline.PipelineExecutionId}',
                                    },
                                ])),
                            }),
                        }),
                    ],
                }]),
        });
    }
});
(0, testhelpers_1.behavior)('CodeBuild: environment variables specified in multiple places are correctly merged', (suite) => {
    // We don't support merging environment variables in this way in the legacy API
    suite.doesNotApply.legacy();
    suite.modern(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            synth: new lib_1.CodeBuildStep('Synth', {
                env: {
                    SOME_ENV_VAR: 'SomeValue',
                },
                installCommands: [
                    'install1',
                    'install2',
                ],
                commands: ['synth'],
                input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                primaryOutputDirectory: 'cdk.out',
                buildEnvironment: {
                    environmentVariables: {
                        INNER_VAR: { value: 'InnerValue' },
                    },
                    privileged: true,
                },
            }),
        });
        THEN_codePipelineExpectation(MODERN_INSTALLS);
    });
    suite.additional('modern2, using the specific CodeBuild action', () => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            synth: new cdkp.CodeBuildStep('Synth', {
                input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                primaryOutputDirectory: '.',
                env: {
                    SOME_ENV_VAR: 'SomeValue',
                },
                installCommands: [
                    'install1',
                    'install2',
                ],
                commands: ['synth'],
                buildEnvironment: {
                    environmentVariables: {
                        INNER_VAR: { value: 'InnerValue' },
                    },
                    privileged: true,
                },
            }),
        });
        THEN_codePipelineExpectation(MODERN_INSTALLS);
    });
    function THEN_codePipelineExpectation(installPhase) {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: assertions_1.Match.objectLike({
                PrivilegedMode: true,
                EnvironmentVariables: assertions_1.Match.arrayWith([
                    {
                        Name: 'INNER_VAR',
                        Type: 'PLAINTEXT',
                        Value: 'InnerValue',
                    },
                    {
                        Name: 'SOME_ENV_VAR',
                        Type: 'PLAINTEXT',
                        Value: 'SomeValue',
                    },
                ]),
            }),
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        [installPhase]: {
                            commands: ['install1', 'install2'],
                        },
                        build: {
                            commands: ['synth'],
                        },
                    },
                })),
            },
        });
    }
});
(0, testhelpers_1.behavior)('install command can be overridden/specified', (suite) => {
    suite.legacy(() => {
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
                sourceArtifact,
                cloudAssemblyArtifact,
                installCommand: '/bin/true',
            }),
        });
        THEN_codePipelineExpectation(LEGACY_INSTALLS);
    });
    suite.modern(() => {
        // WHEN
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            installCommands: ['/bin/true'],
        });
        THEN_codePipelineExpectation(MODERN_INSTALLS);
    });
    function THEN_codePipelineExpectation(installPhase) {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        [installPhase]: {
                            commands: ['/bin/true'],
                        },
                    },
                })),
            },
        });
    }
});
(0, testhelpers_1.behavior)('synth can have its test commands set', (suite) => {
    suite.legacy(() => {
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
                sourceArtifact,
                cloudAssemblyArtifact,
                installCommand: '/bin/true',
                testCommands: ['echo "Running tests"'],
            }),
        });
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        pre_build: {
                            commands: ['/bin/true'],
                        },
                        build: {
                            commands: ['echo "Running tests"', 'npx cdk synth'],
                        },
                    },
                })),
            },
        });
    });
    // There are no implicit commands in modern synth
    suite.doesNotApply.modern();
});
(0, testhelpers_1.behavior)('Synth can output additional artifacts', (suite) => {
    suite.legacy(() => {
        // WHEN
        const addlArtifact = new codepipeline.Artifact('IntegTest');
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
                sourceArtifact,
                cloudAssemblyArtifact,
                additionalArtifacts: [
                    {
                        artifact: addlArtifact,
                        directory: 'test',
                    },
                ],
            }),
        });
        THEN_codePipelineExpectation('CloudAsm', 'IntegTest');
    });
    suite.modern(() => {
        // WHEN
        const synth = new cdkp.ShellStep('Synth', {
            input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
            commands: ['cdk synth'],
        });
        synth.addOutputDirectory('test');
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            synth: synth,
        });
        THEN_codePipelineExpectation('Synth_Output', 'Synth_test');
    });
    function THEN_codePipelineExpectation(asmArtifact, testArtifact) {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    artifacts: {
                        'secondary-artifacts': {
                            [asmArtifact]: {
                                'base-directory': 'cdk.out',
                                'files': '**/*',
                            },
                            [testArtifact]: {
                                'base-directory': 'test',
                                'files': '**/*',
                            },
                        },
                    },
                })),
            },
        });
    }
});
(0, testhelpers_1.behavior)('Synth can be made to run in a VPC', (suite) => {
    let vpc;
    beforeEach(() => {
        vpc = new ec2.Vpc(pipelineStack, 'NpmSynthTestVpc');
    });
    suite.legacy(() => {
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
                vpc,
                sourceArtifact,
                cloudAssemblyArtifact,
            }),
        });
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            codeBuildDefaults: { vpc },
        });
        THEN_codePipelineExpectation();
    });
    suite.additional('Modern, using the synthCodeBuildDefaults', () => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            synthCodeBuildDefaults: { vpc },
        });
        THEN_codePipelineExpectation();
    });
    suite.additional('Modern, using CodeBuildStep', () => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            synth: new lib_1.CodeBuildStep('Synth', {
                commands: ['asdf'],
                input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                primaryOutputDirectory: 'cdk.out',
                buildEnvironment: {
                    computeType: cbuild.ComputeType.LARGE,
                },
            }),
            codeBuildDefaults: { vpc },
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            VpcConfig: {
                SecurityGroupIds: [
                    { 'Fn::GetAtt': ['CdkPipelineBuildSynthCdkBuildProjectSecurityGroupEA44D7C2', 'GroupId'] },
                ],
                Subnets: [
                    { Ref: 'NpmSynthTestVpcPrivateSubnet1Subnet81E3AA56' },
                    { Ref: 'NpmSynthTestVpcPrivateSubnet2SubnetC1CA3EF0' },
                    { Ref: 'NpmSynthTestVpcPrivateSubnet3SubnetA04163EE' },
                ],
                VpcId: { Ref: 'NpmSynthTestVpc5E703F25' },
            },
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
            Roles: [
                { Ref: 'CdkPipelineBuildSynthCdkBuildProjectRole5E173C62' },
            ],
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([{
                        Action: assertions_1.Match.arrayWith(['ec2:DescribeSecurityGroups']),
                        Effect: 'Allow',
                        Resource: '*',
                    }]),
            },
        });
    }
});
(0, testhelpers_1.behavior)('Pipeline action contains a hash that changes as the buildspec changes', (suite) => {
    suite.legacy(() => {
        const hash1 = legacySynthWithAction((sa, cxa) => cdkp.SimpleSynthAction.standardNpmSynth({
            sourceArtifact: sa,
            cloudAssemblyArtifact: cxa,
        }));
        // To make sure the hash is not just random :)
        const hash1prime = legacySynthWithAction((sa, cxa) => cdkp.SimpleSynthAction.standardNpmSynth({
            sourceArtifact: sa,
            cloudAssemblyArtifact: cxa,
        }));
        const hash2 = legacySynthWithAction((sa, cxa) => cdkp.SimpleSynthAction.standardNpmSynth({
            sourceArtifact: sa,
            cloudAssemblyArtifact: cxa,
            installCommand: 'do install',
        }));
        const hash3 = legacySynthWithAction((sa, cxa) => cdkp.SimpleSynthAction.standardNpmSynth({
            sourceArtifact: sa,
            cloudAssemblyArtifact: cxa,
            environment: {
                computeType: cbuild.ComputeType.LARGE,
            },
        }));
        const hash4 = legacySynthWithAction((sa, cxa) => cdkp.SimpleSynthAction.standardNpmSynth({
            sourceArtifact: sa,
            cloudAssemblyArtifact: cxa,
            environment: {
                environmentVariables: {
                    xyz: { value: 'SOME-VALUE' },
                },
            },
        }));
        expect(hash1).toEqual(hash1prime);
        expect(hash1).not.toEqual(hash2);
        expect(hash1).not.toEqual(hash3);
        expect(hash1).not.toEqual(hash4);
        expect(hash2).not.toEqual(hash3);
        expect(hash2).not.toEqual(hash4);
        expect(hash3).not.toEqual(hash4);
    });
    suite.modern(() => {
        const hash1 = modernSynthWithAction(() => ({ commands: ['asdf'] }));
        // To make sure the hash is not just random :)
        const hash1prime = modernSynthWithAction(() => ({ commands: ['asdf'] }));
        const hash2 = modernSynthWithAction(() => ({
            installCommands: ['do install'],
        }));
        const hash3 = modernSynthWithAction(() => ({
            synth: new lib_1.CodeBuildStep('Synth', {
                commands: ['asdf'],
                input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                primaryOutputDirectory: 'cdk.out',
                buildEnvironment: {
                    computeType: cbuild.ComputeType.LARGE,
                },
            }),
        }));
        const hash4 = modernSynthWithAction(() => ({
            env: {
                xyz: 'SOME-VALUE',
            },
        }));
        expect(hash1).toEqual(hash1prime);
        expect(hash1).not.toEqual(hash2);
        expect(hash1).not.toEqual(hash3);
        expect(hash1).not.toEqual(hash4);
        expect(hash2).not.toEqual(hash3);
        expect(hash2).not.toEqual(hash4);
        expect(hash3).not.toEqual(hash4);
    });
    // eslint-disable-next-line max-len
    function legacySynthWithAction(cb) {
        const _app = new testhelpers_1.TestApp({ outdir: OUTDIR });
        const _pipelineStack = new core_1.Stack(_app, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
        const _sourceArtifact = new codepipeline.Artifact();
        const _cloudAssemblyArtifact = new codepipeline.Artifact('CloudAsm');
        new testhelpers_1.LegacyTestGitHubNpmPipeline(_pipelineStack, 'Cdk', {
            sourceArtifact: _sourceArtifact,
            cloudAssemblyArtifact: _cloudAssemblyArtifact,
            synthAction: cb(_sourceArtifact, _cloudAssemblyArtifact),
        });
        return captureProjectConfigHash(_pipelineStack);
    }
    function modernSynthWithAction(cb) {
        const _app = new testhelpers_1.TestApp({ outdir: OUTDIR });
        const _pipelineStack = new core_1.Stack(_app, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
        new testhelpers_1.ModernTestGitHubNpmPipeline(_pipelineStack, 'Cdk', cb());
        return captureProjectConfigHash(_pipelineStack);
    }
    function captureProjectConfigHash(_pipelineStack) {
        const theHash = new assertions_1.Capture();
        assertions_1.Template.fromStack(_pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'Build',
                    Actions: [
                        assertions_1.Match.objectLike({
                            Name: 'Synth',
                            Configuration: assertions_1.Match.objectLike({
                                EnvironmentVariables: assertions_1.Match.serializedJson([
                                    {
                                        name: '_PROJECT_CONFIG_HASH',
                                        type: 'PLAINTEXT',
                                        value: theHash,
                                    },
                                ]),
                            }),
                        }),
                    ],
                }]),
        });
        return theHash.asString();
    }
});
(0, testhelpers_1.behavior)('Synth CodeBuild project role can be granted permissions', (suite) => {
    let bucket;
    beforeEach(() => {
        bucket = s3.Bucket.fromBucketArn(pipelineStack, 'Bucket', 'arn:aws:s3:::this-particular-bucket');
    });
    suite.legacy(() => {
        // GIVEN
        const synthAction = cdkp.SimpleSynthAction.standardNpmSynth({
            sourceArtifact,
            cloudAssemblyArtifact,
        });
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction,
        });
        // WHEN
        bucket.grantRead(synthAction);
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        // GIVEN
        const pipe = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipe.buildPipeline();
        // WHEN
        bucket.grantRead(pipe.synthProject);
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([assertions_1.Match.objectLike({
                        Action: ['s3:GetObject*', 's3:GetBucket*', 's3:List*'],
                        Resource: ['arn:aws:s3:::this-particular-bucket', 'arn:aws:s3:::this-particular-bucket/*'],
                    })]),
            },
        });
    }
});
(0, testhelpers_1.behavior)('Synth can reference an imported ECR repo', (suite) => {
    // Repro from https://github.com/aws/aws-cdk/issues/10535
    suite.legacy(() => {
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
                sourceArtifact,
                cloudAssemblyArtifact,
                environment: {
                    buildImage: cbuild.LinuxBuildImage.fromEcrRepository(ecr.Repository.fromRepositoryName(pipelineStack, 'ECRImage', 'my-repo-name')),
                },
            }),
        });
        // THEN -- no exception (necessary for linter)
        expect(true).toBeTruthy();
    });
    suite.modern(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            synth: new cdkp.CodeBuildStep('Synth', {
                commands: ['build'],
                input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                primaryOutputDirectory: 'cdk.out',
                buildEnvironment: {
                    buildImage: cbuild.LinuxBuildImage.fromEcrRepository(ecr.Repository.fromRepositoryName(pipelineStack, 'ECRImage', 'my-repo-name')),
                },
            }),
        });
        // THEN -- no exception (necessary for linter)
        expect(true).toBeTruthy();
    });
});
(0, testhelpers_1.behavior)('CodeBuild: Can specify additional policy statements', (suite) => {
    suite.legacy(() => {
        // WHEN
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
                sourceArtifact,
                cloudAssemblyArtifact,
                rolePolicyStatements: [
                    new iam.PolicyStatement({
                        actions: ['codeartifact:*', 'sts:GetServiceBearerToken'],
                        resources: ['arn:my:arn'],
                    }),
                ],
            }),
        });
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        // WHEN
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            synth: new cdkp.CodeBuildStep('Synth', {
                input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                primaryOutputDirectory: '.',
                commands: ['synth'],
                rolePolicyStatements: [
                    new iam.PolicyStatement({
                        actions: ['codeartifact:*', 'sts:GetServiceBearerToken'],
                        resources: ['arn:my:arn'],
                    }),
                ],
            }),
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([assertions_1.Match.objectLike({
                        Action: [
                            'codeartifact:*',
                            'sts:GetServiceBearerToken',
                        ],
                        Resource: 'arn:my:arn',
                    })]),
            },
        });
    }
});
(0, testhelpers_1.behavior)('Multiple input sources in side-by-side directories', (suite) => {
    // Legacy API does not support this
    suite.doesNotApply.legacy();
    suite.modern(() => {
        // WHEN
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            synth: new cdkp.ShellStep('Synth', {
                input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                commands: ['false'],
                additionalInputs: {
                    '../sibling': cdkp.CodePipelineSource.gitHub('foo/bar', 'main'),
                    'sub': new cdkp.ShellStep('Prebuild', {
                        input: cdkp.CodePipelineSource.gitHub('pre/build', 'main'),
                        commands: ['true'],
                        primaryOutputDirectory: 'built',
                    }),
                },
            }),
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([
                {
                    Name: 'Source',
                    Actions: [
                        assertions_1.Match.objectLike({ Configuration: assertions_1.Match.objectLike({ Repo: 'bar' }) }),
                        assertions_1.Match.objectLike({ Configuration: assertions_1.Match.objectLike({ Repo: 'build' }) }),
                        assertions_1.Match.objectLike({ Configuration: assertions_1.Match.objectLike({ Repo: 'test' }) }),
                    ],
                },
                {
                    Name: 'Build',
                    Actions: [
                        assertions_1.Match.objectLike({ Name: 'Prebuild', RunOrder: 1 }),
                        assertions_1.Match.objectLike({
                            Name: 'Synth',
                            RunOrder: 2,
                            InputArtifacts: [
                                // 3 input artifacts
                                assertions_1.Match.anyValue(),
                                assertions_1.Match.anyValue(),
                                assertions_1.Match.anyValue(),
                            ],
                        }),
                    ],
                },
            ]),
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        install: {
                            commands: [
                                '[ ! -d "../sibling" ] || { echo \'additionalInputs: "../sibling" must not exist yet. If you want to merge multiple artifacts, use a "cp" command.\'; exit 1; } && ln -s -- "$CODEBUILD_SRC_DIR_foo_bar_Source" "../sibling"',
                                '[ ! -d "sub" ] || { echo \'additionalInputs: "sub" must not exist yet. If you want to merge multiple artifacts, use a "cp" command.\'; exit 1; } && ln -s -- "$CODEBUILD_SRC_DIR_Prebuild_Output" "sub"',
                            ],
                        },
                        build: {
                            commands: [
                                'false',
                            ],
                        },
                    },
                })),
            },
        });
    });
});
(0, testhelpers_1.behavior)('Can easily switch on privileged mode for synth', (suite) => {
    // Legacy API does not support this
    suite.doesNotApply.legacy();
    suite.modern(() => {
        // WHEN
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            dockerEnabledForSynth: true,
            commands: ['LookAtMe'],
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: assertions_1.Match.objectLike({
                PrivilegedMode: true,
            }),
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        build: {
                            commands: [
                                'LookAtMe',
                            ],
                        },
                    },
                })),
            },
        });
    });
});
(0, testhelpers_1.behavior)('can provide custom BuildSpec that is merged with generated one', (suite) => {
    suite.legacy(() => {
        new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: new cdkp.SimpleSynthAction({
                sourceArtifact,
                cloudAssemblyArtifact,
                environmentVariables: {
                    SOME_ENV_VAR: { value: 'SomeValue' },
                },
                environment: {
                    environmentVariables: {
                        INNER_VAR: { value: 'InnerValue' },
                    },
                    privileged: true,
                },
                installCommands: [
                    'install1',
                    'install2',
                ],
                synthCommand: 'synth',
                buildSpec: cbuild.BuildSpec.fromObject({
                    env: {
                        variables: {
                            FOO: 'bar',
                        },
                    },
                    phases: {
                        pre_build: {
                            commands: 'installCustom',
                        },
                    },
                    cache: {
                        paths: ['node_modules'],
                    },
                }),
            }),
        });
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            synth: new cdkp.CodeBuildStep('Synth', {
                input: cdkp.CodePipelineSource.gitHub('test/test', 'main'),
                env: {
                    SOME_ENV_VAR: 'SomeValue',
                },
                buildEnvironment: {
                    environmentVariables: {
                        INNER_VAR: { value: 'InnerValue' },
                    },
                    privileged: true,
                },
                installCommands: [
                    'install1',
                    'install2',
                ],
                commands: ['synth'],
                partialBuildSpec: cbuild.BuildSpec.fromObject({
                    env: {
                        variables: {
                            FOO: 'bar',
                        },
                    },
                    phases: {
                        pre_build: {
                            commands: ['installCustom'],
                        },
                    },
                    cache: {
                        paths: ['node_modules'],
                    },
                }),
            }),
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: assertions_1.Match.objectLike({
                PrivilegedMode: true,
                EnvironmentVariables: assertions_1.Match.arrayWith([
                    {
                        Name: 'INNER_VAR',
                        Type: 'PLAINTEXT',
                        Value: 'InnerValue',
                    },
                ]),
            }),
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    env: {
                        variables: {
                            FOO: 'bar',
                        },
                    },
                    phases: {
                        pre_build: {
                            commands: assertions_1.Match.arrayWith(['installCustom']),
                        },
                        build: {
                            commands: ['synth'],
                        },
                    },
                    cache: {
                        paths: ['node_modules'],
                    },
                })),
            },
        });
    }
});
(0, testhelpers_1.behavior)('stacks synthesized for pipeline will be checked during synth', (suite) => {
    let stage;
    beforeEach(() => {
        stage = new testhelpers_1.OneStackApp(pipelineStack, 'MyApp');
    });
    suite.legacy(() => {
        // WHEN
        const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            sourceArtifact,
            cloudAssemblyArtifact,
            synthAction: new cdkp.SimpleSynthAction({
                sourceArtifact,
                cloudAssemblyArtifact,
                installCommands: ['install1', 'install2'],
                buildCommands: ['build1', 'build2'],
                testCommands: ['test1', 'test2'],
                synthCommand: 'cdk synth',
            }),
        });
        pipeline.addApplicationStage(stage);
        THEN();
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            installCommands: ['install1', 'install2'],
            commands: ['build1', 'build2', 'test1', 'test2', 'cdk synth'],
        });
        pipeline.addStage(stage);
        THEN();
    });
    function THEN() {
        // All stacks in the ASM have been synthesized with 'validateOnSynth: true'
        const asm = stage.synth();
        for (const stack of asm.stacks) {
            expect(stack.validateOnSynth).toEqual(true);
        }
    }
});
//# sourceMappingURL=data:application/json;base64,