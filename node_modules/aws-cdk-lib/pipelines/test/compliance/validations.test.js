"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/no-extraneous-dependencies */
const assertions_1 = require("../../../assertions");
const codebuild = require("../../../aws-codebuild");
const codepipeline = require("../../../aws-codepipeline");
const ec2 = require("../../../aws-ec2");
const iam = require("../../../aws-iam");
const s3 = require("../../../aws-s3");
const core_1 = require("../../../core");
const cdkp = require("../../lib");
const lib_1 = require("../../lib");
const default_codebuild_image_1 = require("../../lib/private/default-codebuild-image");
const testhelpers_1 = require("../testhelpers");
let app;
let pipelineStack;
beforeEach(() => {
    app = new testhelpers_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testhelpers_1.PIPELINE_ENV });
});
afterEach(() => {
    app.cleanup();
});
(0, testhelpers_1.behavior)('can add manual approval after app', (suite) => {
    // No need to be backwards compatible
    suite.doesNotApply.legacy();
    suite.modern(() => {
        // WHEN
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.TwoStackApp(app, 'MyApp'), {
            post: [
                new cdkp.ManualApprovalStep('Approve'),
            ],
        });
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'MyApp',
                    Actions: (0, testhelpers_1.sortByRunOrder)([
                        assertions_1.Match.objectLike({ Name: 'Stack1.Prepare' }),
                        assertions_1.Match.objectLike({ Name: 'Stack1.Deploy' }),
                        assertions_1.Match.objectLike({ Name: 'Stack2.Prepare' }),
                        assertions_1.Match.objectLike({ Name: 'Stack2.Deploy' }),
                        assertions_1.Match.objectLike({ Name: 'Approve' }),
                    ]),
                }]),
        });
    });
});
(0, testhelpers_1.behavior)('can add steps to wave', (suite) => {
    // No need to be backwards compatible
    suite.doesNotApply.legacy();
    suite.modern(() => {
        // WHEN
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        const wave = pipeline.addWave('MyWave', {
            post: [
                new cdkp.ManualApprovalStep('Approve'),
            ],
        });
        wave.addStage(new testhelpers_1.OneStackApp(pipelineStack, 'Stage1'));
        wave.addStage(new testhelpers_1.OneStackApp(pipelineStack, 'Stage2'));
        wave.addStage(new testhelpers_1.OneStackApp(pipelineStack, 'Stage3'));
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'MyWave',
                    Actions: (0, testhelpers_1.sortByRunOrder)([
                        assertions_1.Match.objectLike({ Name: 'Stage1.Stack.Prepare' }),
                        assertions_1.Match.objectLike({ Name: 'Stage2.Stack.Prepare' }),
                        assertions_1.Match.objectLike({ Name: 'Stage3.Stack.Prepare' }),
                        assertions_1.Match.objectLike({ Name: 'Stage1.Stack.Deploy' }),
                        assertions_1.Match.objectLike({ Name: 'Stage2.Stack.Deploy' }),
                        assertions_1.Match.objectLike({ Name: 'Stage3.Stack.Deploy' }),
                        assertions_1.Match.objectLike({ Name: 'Approve' }),
                    ]),
                }]),
        });
    });
});
(0, testhelpers_1.behavior)('script validation steps can use stack outputs as environment variables', (suite) => {
    suite.legacy(() => {
        // GIVEN
        const { pipeline } = legacySetup();
        const stage = new testhelpers_1.StageWithStackOutput(app, 'MyApp');
        // WHEN
        const pipeStage = pipeline.addApplicationStage(stage);
        pipeStage.addActions(new cdkp.ShellScriptAction({
            actionName: 'TestOutput',
            useOutputs: {
                BUCKET_NAME: pipeline.stackOutput(stage.output),
            },
            commands: ['echo $BUCKET_NAME'],
        }));
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'MyApp',
                    Actions: assertions_1.Match.arrayWith([
                        assertions_1.Match.objectLike({
                            ActionTypeId: {
                                Provider: 'CodeBuild',
                            },
                            Configuration: {
                                ProjectName: assertions_1.Match.anyValue(),
                            },
                            InputArtifacts: [{ Name: assertions_1.Match.anyValue() }],
                            Name: 'TestOutput',
                        }),
                        assertions_1.Match.objectLike({
                            Name: 'Stack.Deploy',
                            OutputArtifacts: [{ Name: assertions_1.Match.anyValue() }],
                            Configuration: {
                                OutputFileName: 'outputs.json',
                            },
                        }),
                    ]),
                }]),
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        build: {
                            commands: [
                                'set -eu',
                                'export BUCKET_NAME="$(node -pe \'require(process.env.CODEBUILD_SRC_DIR + "/outputs.json")["BucketName"]\')"',
                                'echo $BUCKET_NAME',
                            ],
                        },
                    },
                })),
                Type: 'CODEPIPELINE',
            },
        });
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        const myApp = new testhelpers_1.AppWithOutput(app, 'Alpha');
        pipeline.addStage(myApp, {
            post: [
                new cdkp.ShellStep('Approve', {
                    commands: ['/bin/true'],
                    envFromCfnOutputs: {
                        THE_OUTPUT: myApp.theOutput,
                    },
                }),
            ],
        });
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'Alpha',
                    Actions: assertions_1.Match.arrayWith([
                        assertions_1.Match.objectLike({
                            Name: 'Stack.Deploy',
                            Namespace: 'AlphaStack6B3389FA',
                        }),
                        assertions_1.Match.objectLike({
                            Name: 'Approve',
                            Configuration: assertions_1.Match.objectLike({
                                EnvironmentVariables: assertions_1.Match.serializedJson([
                                    { name: 'THE_OUTPUT', value: '#{AlphaStack6B3389FA.MyOutput}', type: 'PLAINTEXT' },
                                ]),
                            }),
                        }),
                    ]),
                }]),
        });
    });
});
(0, testhelpers_1.behavior)('stackOutput generates names limited to 100 characters', (suite) => {
    suite.legacy(() => {
        const { pipeline } = legacySetup();
        const stage = new testhelpers_1.StageWithStackOutput(app, 'APreposterouslyLongAndComplicatedNameMadeUpJustToMakeItExceedTheLimitDefinedByCodeBuild');
        const pipeStage = pipeline.addApplicationStage(stage);
        pipeStage.addActions(new cdkp.ShellScriptAction({
            actionName: 'TestOutput',
            useOutputs: {
                BUCKET_NAME: pipeline.stackOutput(stage.output),
            },
            commands: ['echo $BUCKET_NAME'],
        }));
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'APreposterouslyLongAndComplicatedNameMadeUpJustToMakeItExceedTheLimitDefinedByCodeBuild',
                    Actions: assertions_1.Match.arrayWith([
                        assertions_1.Match.objectLike({
                            ActionTypeId: {
                                Provider: 'CodeBuild',
                            },
                            Configuration: {
                                ProjectName: assertions_1.Match.anyValue(),
                            },
                            InputArtifacts: [{ Name: (0, testhelpers_1.stringNoLongerThan)(100) }],
                            Name: 'TestOutput',
                        }),
                        assertions_1.Match.objectLike({
                            Name: 'Stack.Deploy',
                            OutputArtifacts: [{ Name: (0, testhelpers_1.stringNoLongerThan)(100) }],
                            Configuration: {
                                OutputFileName: 'outputs.json',
                            },
                        }),
                    ]),
                }]),
        });
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        const stage = new testhelpers_1.StageWithStackOutput(app, 'APreposterouslyLongAndComplicatedNameMadeUpJustToMakeItExceedTheLimitDefinedByCodeBuild');
        pipeline.addStage(stage, {
            post: [
                new cdkp.ShellStep('TestOutput', {
                    commands: ['echo $BUCKET_NAME'],
                    envFromCfnOutputs: {
                        BUCKET_NAME: stage.output,
                    },
                }),
            ],
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'APreposterouslyLongAndComplicatedNameMadeUpJustToMakeItExceedTheLimitDefinedByCodeBuild',
                    Actions: assertions_1.Match.arrayWith([
                        assertions_1.Match.objectLike({
                            Name: 'Stack.Deploy',
                            Namespace: (0, testhelpers_1.stringNoLongerThan)(100),
                        }),
                    ]),
                }]),
        });
    });
});
(0, testhelpers_1.behavior)('validation step can run from scripts in source', (suite) => {
    suite.legacy(() => {
        const { pipeline, sourceArtifact } = legacySetup();
        // WHEN
        pipeline.addStage('Test').addActions(new cdkp.ShellScriptAction({
            actionName: 'UseSources',
            additionalArtifacts: [sourceArtifact],
            commands: ['true'],
        }));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.TwoStackApp(app, 'Test'), {
            post: [
                new cdkp.ShellStep('UseSources', {
                    input: pipeline.gitHubSource,
                    commands: ['set -eu', 'true'],
                }),
            ],
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        const sourceArtifact = new assertions_1.Capture();
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'Source',
                    Actions: [
                        assertions_1.Match.objectLike({
                            OutputArtifacts: [{ Name: sourceArtifact }],
                        }),
                    ],
                }]),
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'Test',
                    Actions: assertions_1.Match.arrayWith([
                        assertions_1.Match.objectLike({
                            Name: 'UseSources',
                            InputArtifacts: [{ Name: sourceArtifact.asString() }],
                        }),
                    ]),
                }]),
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        build: {
                            commands: [
                                'set -eu',
                                'true',
                            ],
                        },
                    },
                })),
            },
        });
    }
});
(0, testhelpers_1.behavior)('can use additional output artifacts from build', (suite) => {
    suite.legacy(() => {
        // WHEN
        const { pipeline, integTestArtifact } = legacySetup();
        pipeline.addStage('Test').addActions(new cdkp.ShellScriptAction({
            actionName: 'UseBuildArtifact',
            additionalArtifacts: [integTestArtifact],
            commands: ['true'],
        }));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const synth = new lib_1.ShellStep('Synth', {
            input: lib_1.CodePipelineSource.gitHub('test/test', 'main'),
            commands: ['synth'],
        });
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            synth,
        });
        pipeline.addStage(new testhelpers_1.TwoStackApp(app, 'Test'), {
            post: [
                new cdkp.ShellStep('UseBuildArtifact', {
                    input: synth.addOutputDirectory('test'),
                    commands: ['set -eu', 'true'],
                }),
            ],
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        const integArtifact = new assertions_1.Capture();
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'Build',
                    Actions: [
                        assertions_1.Match.objectLike({
                            Name: 'Synth',
                            OutputArtifacts: [
                                { Name: assertions_1.Match.anyValue() },
                                { Name: integArtifact },
                            ],
                        }),
                    ],
                }]),
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'Test',
                    Actions: assertions_1.Match.arrayWith([
                        assertions_1.Match.objectLike({
                            Name: 'UseBuildArtifact',
                            InputArtifacts: [{ Name: integArtifact.asString() }],
                        }),
                    ]),
                }]),
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        build: {
                            commands: [
                                'set -eu',
                                'true',
                            ],
                        },
                    },
                })),
            },
        });
    }
});
(0, testhelpers_1.behavior)('can add policy statements to shell script action', (suite) => {
    suite.legacy(() => {
        // WHEN
        const { pipeline, integTestArtifact } = legacySetup();
        pipeline.addStage('Test').addActions(new cdkp.ShellScriptAction({
            actionName: 'Boop',
            additionalArtifacts: [integTestArtifact],
            commands: ['true'],
            rolePolicyStatements: [
                new iam.PolicyStatement({
                    actions: ['s3:Banana'],
                    resources: ['*'],
                }),
            ],
        }));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        // WHEN
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.TwoStackApp(app, 'Test'), {
            post: [
                new cdkp.CodeBuildStep('Boop', {
                    commands: ['true'],
                    rolePolicyStatements: [
                        new iam.PolicyStatement({
                            actions: ['s3:Banana'],
                            resources: ['*'],
                        }),
                    ],
                }),
            ],
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([assertions_1.Match.objectLike({
                        Action: 's3:Banana',
                        Resource: '*',
                    })]),
            },
        });
    }
});
(0, testhelpers_1.behavior)('can grant permissions to shell script action', (suite) => {
    let bucket;
    beforeEach(() => {
        bucket = s3.Bucket.fromBucketArn(pipelineStack, 'Bucket', 'arn:aws:s3:::this-particular-bucket');
    });
    suite.legacy(() => {
        const { pipeline, integTestArtifact } = legacySetup();
        const action = new cdkp.ShellScriptAction({
            actionName: 'Boop',
            additionalArtifacts: [integTestArtifact],
            commands: ['true'],
        });
        pipeline.addStage('Test').addActions(action);
        // WHEN
        bucket.grantRead(action);
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        const codeBuildStep = new cdkp.CodeBuildStep('Boop', {
            commands: ['true'],
        });
        pipeline.addStage(new testhelpers_1.TwoStackApp(app, 'Test'), {
            post: [codeBuildStep],
        });
        pipeline.buildPipeline();
        // WHEN
        bucket.grantRead(codeBuildStep.project);
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assertions_1.Match.arrayWith([assertions_1.Match.objectLike({
                        Action: ['s3:GetObject*', 's3:GetBucket*', 's3:List*'],
                        Resource: ['arn:aws:s3:::this-particular-bucket', 'arn:aws:s3:::this-particular-bucket/*'],
                    })]),
            },
        });
    }
});
(0, testhelpers_1.behavior)('can run shell script actions in a VPC', (suite) => {
    let vpc;
    beforeEach(() => {
        vpc = new ec2.Vpc(pipelineStack, 'VPC');
    });
    suite.legacy(() => {
        const { pipeline, integTestArtifact } = legacySetup();
        pipeline.addStage('Test').addActions(new cdkp.ShellScriptAction({
            vpc,
            actionName: 'VpcAction',
            additionalArtifacts: [integTestArtifact],
            commands: ['true'],
        }));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        // All CodeBuild jobs automatically go into the VPC
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            codeBuildDefaults: { vpc },
        });
        pipeline.addStage(new testhelpers_1.TwoStackApp(app, 'MyApp'), {
            post: [new cdkp.ShellStep('VpcAction', {
                    commands: ['set -eu', 'true'],
                })],
        });
        THEN_codePipelineExpectation();
    });
    suite.additional('modern, alternate API', () => {
        // Can also explicitly specify a VPC when going to the "full config" class
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.TwoStackApp(app, 'MyApp'), {
            post: [new cdkp.CodeBuildStep('VpcAction', {
                    commands: ['set -eu', 'true'],
                    vpc,
                })],
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: default_codebuild_image_1.CDKP_DEFAULT_CODEBUILD_IMAGE.imageId,
            },
            VpcConfig: {
                Subnets: [
                    {
                        Ref: 'VPCPrivateSubnet1Subnet8BCA10E0',
                    },
                    {
                        Ref: 'VPCPrivateSubnet2SubnetCFCDAA7A',
                    },
                    {
                        Ref: 'VPCPrivateSubnet3Subnet3EDCD457',
                    },
                ],
                VpcId: {
                    Ref: 'VPCB9E5F0B4',
                },
            },
            Source: {
                BuildSpec: assertions_1.Match.serializedJson(assertions_1.Match.objectLike({
                    phases: {
                        build: {
                            commands: [
                                'set -eu',
                                'true',
                            ],
                        },
                    },
                })),
            },
        });
    }
});
(0, testhelpers_1.behavior)('can run shell script actions with a specific SecurityGroup', (suite) => {
    let vpc;
    let sg;
    beforeEach(() => {
        vpc = new ec2.Vpc(pipelineStack, 'VPC');
        sg = new ec2.SecurityGroup(pipelineStack, 'SG', { vpc });
    });
    suite.legacy(() => {
        // WHEN
        const { pipeline, integTestArtifact } = legacySetup();
        pipeline.addStage('Test').addActions(new cdkp.ShellScriptAction({
            vpc,
            securityGroups: [sg],
            actionName: 'sgAction',
            additionalArtifacts: [integTestArtifact],
            commands: ['true'],
        }));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        // All CodeBuild jobs automatically go into the VPC
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.TwoStackApp(app, 'Test'), {
            post: [new cdkp.CodeBuildStep('sgAction', {
                    commands: ['set -eu', 'true'],
                    vpc,
                    securityGroups: [sg],
                })],
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'Test',
                    Actions: assertions_1.Match.arrayWith([
                        assertions_1.Match.objectLike({
                            Name: 'sgAction',
                        }),
                    ]),
                }]),
        });
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            VpcConfig: {
                SecurityGroupIds: [
                    {
                        'Fn::GetAtt': [
                            'SGADB53937',
                            'GroupId',
                        ],
                    },
                ],
                VpcId: {
                    Ref: 'VPCB9E5F0B4',
                },
            },
        });
    }
});
(0, testhelpers_1.behavior)('can run scripts with specified BuildEnvironment', (suite) => {
    suite.legacy(() => {
        let { pipeline, integTestArtifact } = legacySetup();
        // WHEN
        pipeline.addStage('Test').addActions(new cdkp.ShellScriptAction({
            actionName: 'imageAction',
            additionalArtifacts: [integTestArtifact],
            commands: ['true'],
            environment: { buildImage: codebuild.LinuxBuildImage.STANDARD_2_0 },
        }));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        // Run all Build jobs with the given image
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
            codeBuildDefaults: {
                buildEnvironment: {
                    buildImage: codebuild.LinuxBuildImage.STANDARD_2_0,
                },
            },
        });
        pipeline.addStage(new testhelpers_1.TwoStackApp(app, 'Test'), {
            post: [new cdkp.ShellStep('imageAction', {
                    commands: ['true'],
                })],
        });
        THEN_codePipelineExpectation();
    });
    suite.additional('modern, alternative API', () => {
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.TwoStackApp(app, 'Test'), {
            post: [new cdkp.CodeBuildStep('imageAction', {
                    commands: ['true'],
                    buildEnvironment: {
                        buildImage: codebuild.LinuxBuildImage.STANDARD_2_0,
                    },
                })],
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodeBuild::Project', {
            Environment: {
                Image: 'aws/codebuild/standard:2.0',
            },
        });
    }
});
(0, testhelpers_1.behavior)('can run scripts with magic environment variables', (suite) => {
    suite.legacy(() => {
        const { pipeline, integTestArtifact } = legacySetup();
        pipeline.addStage('Test').addActions(new cdkp.ShellScriptAction({
            actionName: 'imageAction',
            additionalArtifacts: [integTestArtifact],
            commands: ['true'],
            environmentVariables: {
                VERSION: { value: codepipeline.GlobalVariables.executionId },
            },
        }));
        THEN_codePipelineExpectation();
    });
    suite.modern(() => {
        // Run all Build jobs with the given image
        const pipeline = new testhelpers_1.ModernTestGitHubNpmPipeline(pipelineStack, 'Cdk');
        pipeline.addStage(new testhelpers_1.TwoStackApp(app, 'Test'), {
            post: [new cdkp.ShellStep('imageAction', {
                    commands: ['true'],
                    env: {
                        VERSION: codepipeline.GlobalVariables.executionId,
                    },
                })],
        });
        THEN_codePipelineExpectation();
    });
    function THEN_codePipelineExpectation() {
        // THEN
        assertions_1.Template.fromStack(pipelineStack).hasResourceProperties('AWS::CodePipeline::Pipeline', {
            Stages: assertions_1.Match.arrayWith([{
                    Name: 'Test',
                    Actions: assertions_1.Match.arrayWith([
                        assertions_1.Match.objectLike({
                            Name: 'imageAction',
                            Configuration: assertions_1.Match.objectLike({
                                EnvironmentVariables: assertions_1.Match.serializedJson([
                                    {
                                        name: 'VERSION',
                                        type: 'PLAINTEXT',
                                        value: '#{codepipeline.PipelineExecutionId}',
                                    },
                                ]),
                            }),
                        }),
                    ]),
                }]),
        });
    }
});
/**
 * Some shared setup for legacy API tests
 */
function legacySetup() {
    const sourceArtifact = new codepipeline.Artifact();
    const cloudAssemblyArtifact = new codepipeline.Artifact('CloudAsm');
    const integTestArtifact = new codepipeline.Artifact('IntegTests');
    const pipeline = new testhelpers_1.LegacyTestGitHubNpmPipeline(pipelineStack, 'Cdk', {
        sourceArtifact,
        cloudAssemblyArtifact,
        synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
            sourceArtifact,
            cloudAssemblyArtifact,
            additionalArtifacts: [{ directory: 'test', artifact: integTestArtifact }],
        }),
    });
    return { sourceArtifact, cloudAssemblyArtifact, integTestArtifact, pipeline };
}
//# sourceMappingURL=data:application/json;base64,