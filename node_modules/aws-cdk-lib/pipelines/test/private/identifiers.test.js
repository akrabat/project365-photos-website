"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const identifiers_1 = require("../../lib/private/identifiers");
const util_1 = require("../blueprint/helpers-internal/util");
test('actionName trims subcomponents the same way', () => {
    const long1 = 'ExtremelyLong'.repeat(10);
    const long2 = 'AlsoLong'.repeat(10);
    const g = (0, util_1.mkGraph)('MyGraph', G => {
        G.graph(long1, [], G1 => {
            G1.graph(long2, [], G2 => {
                G2.node('Prepare');
                G2.node('Deploy');
            });
        });
    });
    const G2 = g.tryGetChild(long1)?.tryGetChild(long2);
    expect(G2).toBeDefined();
    const prep = G2.tryGetChild('Prepare');
    const deploy = G2.tryGetChild('Deploy');
    expect(prep).toBeDefined();
    expect(deploy).toBeDefined();
    // ActionNames have the same prefix
    const prepParts = (0, identifiers_1.actionName)(prep, g).split('.');
    const deployParts = (0, identifiers_1.actionName)(deploy, g).split('.');
    // Final parts are unchanged
    expect(prepParts.pop()).toEqual('Prepare');
    expect(deployParts.pop()).toEqual('Deploy');
    // Prefixes are the same
    expect(prepParts).toEqual(deployParts);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpZmllcnMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImlkZW50aWZpZXJzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwrREFBMkQ7QUFDM0QsNkRBQTZEO0FBRTdELElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxHQUFHLEVBQUU7SUFDdkQsTUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXBDLE1BQU0sQ0FBQyxHQUFHLElBQUEsY0FBTyxFQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRTtRQUMvQixDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDdEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUN2QixFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNuQixFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sRUFBRSxHQUFLLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFnQixFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQWdCLENBQUM7SUFDcEYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRXpCLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUV4QyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDM0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRTdCLG1DQUFtQztJQUNuQyxNQUFNLFNBQVMsR0FBRyxJQUFBLHdCQUFVLEVBQUMsSUFBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsRCxNQUFNLFdBQVcsR0FBRyxJQUFBLHdCQUFVLEVBQUMsTUFBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUV0RCw0QkFBNEI7SUFDNUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVDLHdCQUF3QjtJQUN4QixNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3pDLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JhcGggfSBmcm9tICcuLi8uLi9saWIvaGVscGVycy1pbnRlcm5hbCc7XG5pbXBvcnQgeyBhY3Rpb25OYW1lIH0gZnJvbSAnLi4vLi4vbGliL3ByaXZhdGUvaWRlbnRpZmllcnMnO1xuaW1wb3J0IHsgbWtHcmFwaCB9IGZyb20gJy4uL2JsdWVwcmludC9oZWxwZXJzLWludGVybmFsL3V0aWwnO1xuXG50ZXN0KCdhY3Rpb25OYW1lIHRyaW1zIHN1YmNvbXBvbmVudHMgdGhlIHNhbWUgd2F5JywgKCkgPT4ge1xuICBjb25zdCBsb25nMSA9ICdFeHRyZW1lbHlMb25nJy5yZXBlYXQoMTApO1xuICBjb25zdCBsb25nMiA9ICdBbHNvTG9uZycucmVwZWF0KDEwKTtcblxuICBjb25zdCBnID0gbWtHcmFwaCgnTXlHcmFwaCcsIEcgPT4ge1xuICAgIEcuZ3JhcGgobG9uZzEsIFtdLCBHMSA9PiB7XG4gICAgICBHMS5ncmFwaChsb25nMiwgW10sIEcyID0+IHtcbiAgICAgICAgRzIubm9kZSgnUHJlcGFyZScpO1xuICAgICAgICBHMi5ub2RlKCdEZXBsb3knKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBjb25zdCBHMiA9ICgoZy50cnlHZXRDaGlsZChsb25nMSkgYXMgR3JhcGg8YW55Pik/LnRyeUdldENoaWxkKGxvbmcyKSBhcyBHcmFwaDxhbnk+KTtcbiAgZXhwZWN0KEcyKS50b0JlRGVmaW5lZCgpO1xuXG4gIGNvbnN0IHByZXAgPSBHMi50cnlHZXRDaGlsZCgnUHJlcGFyZScpO1xuICBjb25zdCBkZXBsb3kgPSBHMi50cnlHZXRDaGlsZCgnRGVwbG95Jyk7XG5cbiAgZXhwZWN0KHByZXApLnRvQmVEZWZpbmVkKCk7XG4gIGV4cGVjdChkZXBsb3kpLnRvQmVEZWZpbmVkKCk7XG5cbiAgLy8gQWN0aW9uTmFtZXMgaGF2ZSB0aGUgc2FtZSBwcmVmaXhcbiAgY29uc3QgcHJlcFBhcnRzID0gYWN0aW9uTmFtZShwcmVwISwgZykuc3BsaXQoJy4nKTtcbiAgY29uc3QgZGVwbG95UGFydHMgPSBhY3Rpb25OYW1lKGRlcGxveSEsIGcpLnNwbGl0KCcuJyk7XG5cbiAgLy8gRmluYWwgcGFydHMgYXJlIHVuY2hhbmdlZFxuICBleHBlY3QocHJlcFBhcnRzLnBvcCgpKS50b0VxdWFsKCdQcmVwYXJlJyk7XG4gIGV4cGVjdChkZXBsb3lQYXJ0cy5wb3AoKSkudG9FcXVhbCgnRGVwbG95Jyk7XG4gIC8vIFByZWZpeGVzIGFyZSB0aGUgc2FtZVxuICBleHBlY3QocHJlcFBhcnRzKS50b0VxdWFsKGRlcGxveVBhcnRzKTtcbn0pOyJdfQ==