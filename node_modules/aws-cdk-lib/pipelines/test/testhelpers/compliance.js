"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.behavior = void 0;
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
// eslint-disable-next-line jest/no-export
function behavior(name, cb) {
    // Since the goal of the compliance test suites is to compare modern and legacy (i.e. deprecated) APIs,
    // use `describeDeprecated()` block here since usage of the legacy API is inevitable.
    (0, cdk_build_tools_1.describeDeprecated)(name, () => {
        const unwritten = new Set(['modern', 'legacy']);
        function scratchOff(flavor) {
            if (!unwritten.has(flavor)) {
                throw new Error(`Already had test for ${flavor}. Use .additional() to add more tests.`);
            }
            unwritten.delete(flavor);
        }
        cb({
            legacy: (testFn) => {
                scratchOff('legacy');
                test('legacy', testFn);
            },
            modern: (testFn) => {
                scratchOff('modern');
                test('modern', testFn);
            },
            additional: test,
            doesNotApply: {
                modern: (reason) => {
                    scratchOff('modern');
                    if (reason != null) {
                        // eslint-disable-next-line jest/no-disabled-tests
                        test.skip(`modern - ${reason}`, () => { });
                    }
                },
                legacy: (reason) => {
                    scratchOff('legacy');
                    if (reason != null) {
                        // eslint-disable-next-line jest/no-disabled-tests
                        test.skip(`legacy - ${reason}`, () => { });
                    }
                },
            },
        });
        for (const missing of unwritten) {
            test.todo(missing);
        }
    });
}
exports.behavior = behavior;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxpYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbXBsaWFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOERBQThEO0FBa0I5RCwwQ0FBMEM7QUFDMUMsU0FBZ0IsUUFBUSxDQUFDLElBQVksRUFBRSxFQUEwQjtJQUMvRCx1R0FBdUc7SUFDdkcscUZBQXFGO0lBQ3JGLElBQUEsb0NBQWtCLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRTtRQUM1QixNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBRWhELFNBQVMsVUFBVSxDQUFDLE1BQWM7WUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLE1BQU0sd0NBQXdDLENBQUMsQ0FBQzthQUN6RjtZQUNELFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsQ0FBQztRQUdELEVBQUUsQ0FBQztZQUNELE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUNqQixVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDekIsQ0FBQztZQUNELE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUNqQixVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDekIsQ0FBQztZQUNELFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFlBQVksRUFBRTtnQkFDWixNQUFNLEVBQUUsQ0FBQyxNQUFlLEVBQUUsRUFBRTtvQkFDMUIsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUVyQixJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUU7d0JBQ2xCLGtEQUFrRDt3QkFDbEQsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDO3FCQUMzQztnQkFDSCxDQUFDO2dCQUVELE1BQU0sRUFBRSxDQUFDLE1BQWUsRUFBRSxFQUFFO29CQUMxQixVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBRXJCLElBQUksTUFBTSxJQUFJLElBQUksRUFBRTt3QkFDbEIsa0RBQWtEO3dCQUNsRCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUM7cUJBQzNDO2dCQUNILENBQUM7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILEtBQUssTUFBTSxPQUFPLElBQUksU0FBUyxFQUFFO1lBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDcEI7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFqREQsNEJBaURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVzY3JpYmVEZXByZWNhdGVkIH0gZnJvbSAnQGF3cy1jZGsvY2RrLWJ1aWxkLXRvb2xzJztcblxuaW50ZXJmYWNlIFNraXBwZWRTdWl0ZSB7XG4gIGxlZ2FjeShyZWFzb24/OiBzdHJpbmcpOiB2b2lkO1xuXG4gIG1vZGVybihyZWFzb24/OiBzdHJpbmcpOiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgU3VpdGUge1xuICByZWFkb25seSBkb2VzTm90QXBwbHk6IFNraXBwZWRTdWl0ZTtcblxuICBsZWdhY3koZm46ICgpID0+IHZvaWQpOiB2b2lkO1xuXG4gIG1vZGVybihmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG5cbiAgYWRkaXRpb25hbChkZXNjcmlwdGlvbjogc3RyaW5nLCBmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqZXN0L25vLWV4cG9ydFxuZXhwb3J0IGZ1bmN0aW9uIGJlaGF2aW9yKG5hbWU6IHN0cmluZywgY2I6IChzdWl0ZTogU3VpdGUpID0+IHZvaWQpIHtcbiAgLy8gU2luY2UgdGhlIGdvYWwgb2YgdGhlIGNvbXBsaWFuY2UgdGVzdCBzdWl0ZXMgaXMgdG8gY29tcGFyZSBtb2Rlcm4gYW5kIGxlZ2FjeSAoaS5lLiBkZXByZWNhdGVkKSBBUElzLFxuICAvLyB1c2UgYGRlc2NyaWJlRGVwcmVjYXRlZCgpYCBibG9jayBoZXJlIHNpbmNlIHVzYWdlIG9mIHRoZSBsZWdhY3kgQVBJIGlzIGluZXZpdGFibGUuXG4gIGRlc2NyaWJlRGVwcmVjYXRlZChuYW1lLCAoKSA9PiB7XG4gICAgY29uc3QgdW53cml0dGVuID0gbmV3IFNldChbJ21vZGVybicsICdsZWdhY3knXSk7XG5cbiAgICBmdW5jdGlvbiBzY3JhdGNoT2ZmKGZsYXZvcjogc3RyaW5nKSB7XG4gICAgICBpZiAoIXVud3JpdHRlbi5oYXMoZmxhdm9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFscmVhZHkgaGFkIHRlc3QgZm9yICR7Zmxhdm9yfS4gVXNlIC5hZGRpdGlvbmFsKCkgdG8gYWRkIG1vcmUgdGVzdHMuYCk7XG4gICAgICB9XG4gICAgICB1bndyaXR0ZW4uZGVsZXRlKGZsYXZvcik7XG4gICAgfVxuXG5cbiAgICBjYih7XG4gICAgICBsZWdhY3k6ICh0ZXN0Rm4pID0+IHtcbiAgICAgICAgc2NyYXRjaE9mZignbGVnYWN5Jyk7XG4gICAgICAgIHRlc3QoJ2xlZ2FjeScsIHRlc3RGbik7XG4gICAgICB9LFxuICAgICAgbW9kZXJuOiAodGVzdEZuKSA9PiB7XG4gICAgICAgIHNjcmF0Y2hPZmYoJ21vZGVybicpO1xuICAgICAgICB0ZXN0KCdtb2Rlcm4nLCB0ZXN0Rm4pO1xuICAgICAgfSxcbiAgICAgIGFkZGl0aW9uYWw6IHRlc3QsXG4gICAgICBkb2VzTm90QXBwbHk6IHtcbiAgICAgICAgbW9kZXJuOiAocmVhc29uPzogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgc2NyYXRjaE9mZignbW9kZXJuJyk7XG5cbiAgICAgICAgICBpZiAocmVhc29uICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqZXN0L25vLWRpc2FibGVkLXRlc3RzXG4gICAgICAgICAgICB0ZXN0LnNraXAoYG1vZGVybiAtICR7cmVhc29ufWAsICgpID0+IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbGVnYWN5OiAocmVhc29uPzogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgc2NyYXRjaE9mZignbGVnYWN5Jyk7XG5cbiAgICAgICAgICBpZiAocmVhc29uICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqZXN0L25vLWRpc2FibGVkLXRlc3RzXG4gICAgICAgICAgICB0ZXN0LnNraXAoYGxlZ2FjeSAtICR7cmVhc29ufWAsICgpID0+IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgZm9yIChjb25zdCBtaXNzaW5nIG9mIHVud3JpdHRlbikge1xuICAgICAgdGVzdC50b2RvKG1pc3NpbmcpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=