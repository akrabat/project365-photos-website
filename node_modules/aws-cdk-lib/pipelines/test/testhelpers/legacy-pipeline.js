"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestGitHubAction = exports.LegacyTestGitHubNpmPipeline = void 0;
const codepipeline = require("../../../aws-codepipeline");
const codepipeline_actions = require("../../../aws-codepipeline-actions");
const core_1 = require("../../../core");
const cdkp = require("../../lib");
class LegacyTestGitHubNpmPipeline extends cdkp.CdkPipeline {
    constructor(scope, id, props) {
        const sourceArtifact = props?.sourceArtifact ?? new codepipeline.Artifact();
        const cloudAssemblyArtifact = props?.cloudAssemblyArtifact ?? new codepipeline.Artifact();
        super(scope, id, {
            sourceAction: new TestGitHubAction(sourceArtifact),
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
                sourceArtifact,
                cloudAssemblyArtifact,
                ...props?.npmSynthOptions,
            }),
            cloudAssemblyArtifact,
            ...props,
        });
        this.sourceArtifact = sourceArtifact;
        this.cloudAssemblyArtifact = cloudAssemblyArtifact;
    }
}
exports.LegacyTestGitHubNpmPipeline = LegacyTestGitHubNpmPipeline;
class TestGitHubAction extends codepipeline_actions.GitHubSourceAction {
    constructor(sourceArtifact) {
        super({
            actionName: 'GitHub',
            output: sourceArtifact,
            oauthToken: core_1.SecretValue.unsafePlainText('$3kr1t'),
            owner: 'test',
            repo: 'test',
            trigger: codepipeline_actions.GitHubTrigger.POLL,
        });
    }
}
exports.TestGitHubAction = TestGitHubAction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnYWN5LXBpcGVsaW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGVnYWN5LXBpcGVsaW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUEwRDtBQUMxRCwwRUFBMEU7QUFDMUUsd0NBQTRDO0FBRTVDLGtDQUFrQztBQU9sQyxNQUFhLDJCQUE0QixTQUFRLElBQUksQ0FBQyxXQUFXO0lBSS9ELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBOEU7UUFDdEgsTUFBTSxjQUFjLEdBQUcsS0FBSyxFQUFFLGNBQWMsSUFBSSxJQUFJLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1RSxNQUFNLHFCQUFxQixHQUFHLEtBQUssRUFBRSxxQkFBcUIsSUFBSSxJQUFJLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUUxRixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLFlBQVksRUFBRSxJQUFJLGdCQUFnQixDQUFDLGNBQWMsQ0FBQztZQUNsRCxXQUFXLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDO2dCQUNuRCxjQUFjO2dCQUNkLHFCQUFxQjtnQkFDckIsR0FBRyxLQUFLLEVBQUUsZUFBZTthQUMxQixDQUFDO1lBQ0YscUJBQXFCO1lBQ3JCLEdBQUcsS0FBSztTQUNULENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxxQkFBcUIsQ0FBQztLQUNwRDtDQUNGO0FBdEJELGtFQXNCQztBQUdELE1BQWEsZ0JBQWlCLFNBQVEsb0JBQW9CLENBQUMsa0JBQWtCO0lBQzNFLFlBQVksY0FBcUM7UUFDL0MsS0FBSyxDQUFDO1lBQ0osVUFBVSxFQUFFLFFBQVE7WUFDcEIsTUFBTSxFQUFFLGNBQWM7WUFDdEIsVUFBVSxFQUFFLGtCQUFXLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQztZQUNqRCxLQUFLLEVBQUUsTUFBTTtZQUNiLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxJQUFJO1NBQ2pELENBQUMsQ0FBQztLQUNKO0NBQ0Y7QUFYRCw0Q0FXQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvZGVwaXBlbGluZSBmcm9tICcuLi8uLi8uLi9hd3MtY29kZXBpcGVsaW5lJztcbmltcG9ydCAqIGFzIGNvZGVwaXBlbGluZV9hY3Rpb25zIGZyb20gJy4uLy4uLy4uL2F3cy1jb2RlcGlwZWxpbmUtYWN0aW9ucyc7XG5pbXBvcnQgeyBTZWNyZXRWYWx1ZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBjZGtwIGZyb20gJy4uLy4uL2xpYic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGVnYWN5VGVzdEdpdEh1Yk5wbVBpcGVsaW5lRXh0cmFQcm9wcyB7XG4gIHJlYWRvbmx5IHNvdXJjZUFydGlmYWN0PzogY29kZXBpcGVsaW5lLkFydGlmYWN0O1xuICByZWFkb25seSBucG1TeW50aE9wdGlvbnM/OiBQYXJ0aWFsPGNka3AuU3RhbmRhcmROcG1TeW50aE9wdGlvbnM+O1xufVxuXG5leHBvcnQgY2xhc3MgTGVnYWN5VGVzdEdpdEh1Yk5wbVBpcGVsaW5lIGV4dGVuZHMgY2RrcC5DZGtQaXBlbGluZSB7XG4gIHB1YmxpYyByZWFkb25seSBzb3VyY2VBcnRpZmFjdDogY29kZXBpcGVsaW5lLkFydGlmYWN0O1xuICBwdWJsaWMgcmVhZG9ubHkgY2xvdWRBc3NlbWJseUFydGlmYWN0OiBjb2RlcGlwZWxpbmUuQXJ0aWZhY3Q7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBQYXJ0aWFsPGNka3AuQ2RrUGlwZWxpbmVQcm9wcz4gJiBMZWdhY3lUZXN0R2l0SHViTnBtUGlwZWxpbmVFeHRyYVByb3BzKSB7XG4gICAgY29uc3Qgc291cmNlQXJ0aWZhY3QgPSBwcm9wcz8uc291cmNlQXJ0aWZhY3QgPz8gbmV3IGNvZGVwaXBlbGluZS5BcnRpZmFjdCgpO1xuICAgIGNvbnN0IGNsb3VkQXNzZW1ibHlBcnRpZmFjdCA9IHByb3BzPy5jbG91ZEFzc2VtYmx5QXJ0aWZhY3QgPz8gbmV3IGNvZGVwaXBlbGluZS5BcnRpZmFjdCgpO1xuXG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICBzb3VyY2VBY3Rpb246IG5ldyBUZXN0R2l0SHViQWN0aW9uKHNvdXJjZUFydGlmYWN0KSxcbiAgICAgIHN5bnRoQWN0aW9uOiBjZGtwLlNpbXBsZVN5bnRoQWN0aW9uLnN0YW5kYXJkTnBtU3ludGgoe1xuICAgICAgICBzb3VyY2VBcnRpZmFjdCxcbiAgICAgICAgY2xvdWRBc3NlbWJseUFydGlmYWN0LFxuICAgICAgICAuLi5wcm9wcz8ubnBtU3ludGhPcHRpb25zLFxuICAgICAgfSksXG4gICAgICBjbG91ZEFzc2VtYmx5QXJ0aWZhY3QsXG4gICAgICAuLi5wcm9wcyxcbiAgICB9KTtcblxuICAgIHRoaXMuc291cmNlQXJ0aWZhY3QgPSBzb3VyY2VBcnRpZmFjdDtcbiAgICB0aGlzLmNsb3VkQXNzZW1ibHlBcnRpZmFjdCA9IGNsb3VkQXNzZW1ibHlBcnRpZmFjdDtcbiAgfVxufVxuXG5cbmV4cG9ydCBjbGFzcyBUZXN0R2l0SHViQWN0aW9uIGV4dGVuZHMgY29kZXBpcGVsaW5lX2FjdGlvbnMuR2l0SHViU291cmNlQWN0aW9uIHtcbiAgY29uc3RydWN0b3Ioc291cmNlQXJ0aWZhY3Q6IGNvZGVwaXBlbGluZS5BcnRpZmFjdCkge1xuICAgIHN1cGVyKHtcbiAgICAgIGFjdGlvbk5hbWU6ICdHaXRIdWInLFxuICAgICAgb3V0cHV0OiBzb3VyY2VBcnRpZmFjdCxcbiAgICAgIG9hdXRoVG9rZW46IFNlY3JldFZhbHVlLnVuc2FmZVBsYWluVGV4dCgnJDNrcjF0JyksXG4gICAgICBvd25lcjogJ3Rlc3QnLFxuICAgICAgcmVwbzogJ3Rlc3QnLFxuICAgICAgdHJpZ2dlcjogY29kZXBpcGVsaW5lX2FjdGlvbnMuR2l0SHViVHJpZ2dlci5QT0xMLFxuICAgIH0pO1xuICB9XG59XG4iXX0=