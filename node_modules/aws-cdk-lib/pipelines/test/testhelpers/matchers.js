"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringNoLongerThan = exports.sortByRunOrder = exports.stringLike = void 0;
const assertions_1 = require("../../../assertions");
function stringLike(pattern) {
    return new StringLike(pattern);
}
exports.stringLike = stringLike;
function sortByRunOrder(pattern) {
    return new Sorter('SortByRunOrder', pattern, (a, b) => {
        if (a.RunOrder !== b.RunOrder) {
            return a.RunOrder - b.RunOrder;
        }
        return a.Name.localeCompare(b.Name);
    });
}
exports.sortByRunOrder = sortByRunOrder;
function stringNoLongerThan(max) {
    return new StringLengthMatcher(max);
}
exports.stringNoLongerThan = stringNoLongerThan;
class StringLike extends assertions_1.Matcher {
    constructor(pattern) {
        super();
        this.pattern = pattern;
        this.name = 'StringLike';
    }
    test(actual) {
        if (typeof (actual) !== 'string') {
            throw new Error(`Expected string but found ${typeof (actual)} ${JSON.stringify(actual)}`);
        }
        const re = new RegExp(`^${this.pattern.split('*').map(escapeRegex).join('.*')}$`);
        const result = new assertions_1.MatchResult(actual);
        if (!re.test(actual)) {
            result.push(this, [], `Looking for string with pattern "${this.pattern}" but found "${actual}"`);
        }
        return result;
        function escapeRegex(s) {
            return s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
        }
    }
}
class Sorter extends assertions_1.Matcher {
    constructor(name, pattern, compareFn) {
        super();
        this.name = name;
        this.pattern = pattern;
        this.compareFn = compareFn;
    }
    test(actual) {
        const result = new assertions_1.MatchResult(actual);
        if (!Array.isArray(actual)) {
            result.push(this, [], `Expected an Array, but got '${typeof actual}'`);
            return result;
        }
        const copy = actual.slice();
        copy.sort(this.compareFn);
        const matcher = assertions_1.Matcher.isMatcher(this.pattern) ? this.pattern : assertions_1.Match.exact(this.pattern);
        return matcher.test(copy);
    }
}
class StringLengthMatcher extends assertions_1.Matcher {
    constructor(length) {
        super();
        this.length = length;
        this.name = 'StringLength';
    }
    test(actual) {
        const result = new assertions_1.MatchResult(actual);
        if (typeof actual !== 'string') {
            result.push(this, [], `Expected a string, but got '${typeof actual}'`);
        }
        if (actual.length > this.length) {
            result.push(this, [], `String is ${actual.length} characters long. Expected at most ${this.length} characters`);
        }
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0Y2hlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtYXRjaGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvREFBa0U7QUFFbEUsU0FBZ0IsVUFBVSxDQUFDLE9BQWU7SUFDeEMsT0FBTyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRkQsZ0NBRUM7QUFFRCxTQUFnQixjQUFjLENBQUMsT0FBYztJQUMzQyxPQUFPLElBQUksTUFBTSxDQUFDLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxDQUFDLENBQU0sRUFBRSxDQUFNLEVBQUUsRUFBRTtRQUM5RCxJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDLFFBQVEsRUFBRTtZQUFFLE9BQU8sQ0FBQyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDO1NBQUU7UUFDbEUsT0FBUSxDQUFDLENBQUMsSUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBTEQsd0NBS0M7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxHQUFXO0lBQzVDLE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBRkQsZ0RBRUM7QUFFRCxNQUFNLFVBQVcsU0FBUSxvQkFBTztJQUc5QixZQUE2QixPQUFlO1FBQzFDLEtBQUssRUFBRSxDQUFDO1FBRG1CLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFGckMsU0FBSSxHQUFHLFlBQVksQ0FBQztLQUkxQjtJQUVNLElBQUksQ0FBQyxNQUFXO1FBQ3JCLElBQUksT0FBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixPQUFNLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDMUY7UUFDRCxNQUFNLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxGLE1BQU0sTUFBTSxHQUFHLElBQUksd0JBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsb0NBQW9DLElBQUksQ0FBQyxPQUFPLGdCQUFnQixNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ2xHO1FBQ0QsT0FBTyxNQUFNLENBQUM7UUFFZCxTQUFTLFdBQVcsQ0FBQyxDQUFTO1lBQzVCLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLG9DQUFvQztRQUN2RixDQUFDO0tBQ0Y7Q0FDRjtBQUVELE1BQU0sTUFBTyxTQUFRLG9CQUFPO0lBQzFCLFlBQ2tCLElBQVksRUFDWCxPQUFjLEVBQ2QsU0FBcUM7UUFFdEQsS0FBSyxFQUFFLENBQUM7UUFKUSxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1gsWUFBTyxHQUFQLE9BQU8sQ0FBTztRQUNkLGNBQVMsR0FBVCxTQUFTLENBQTRCO0tBR3ZEO0lBRU0sSUFBSSxDQUFDLE1BQVc7UUFDckIsTUFBTSxNQUFNLEdBQUcsSUFBSSx3QkFBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSwrQkFBK0IsT0FBTyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZFLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFFRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFMUIsTUFBTSxPQUFPLEdBQUcsb0JBQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxrQkFBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0YsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzNCO0NBQ0Y7QUFFRCxNQUFNLG1CQUFvQixTQUFRLG9CQUFPO0lBR3ZDLFlBQTZCLE1BQWM7UUFDekMsS0FBSyxFQUFFLENBQUM7UUFEbUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUZwQyxTQUFJLEdBQVcsY0FBYyxDQUFBO0tBSW5DO0lBRU0sSUFBSSxDQUFDLE1BQVc7UUFDckIsTUFBTSxNQUFNLEdBQUcsSUFBSSx3QkFBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXZDLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO1lBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSwrQkFBK0IsT0FBTyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLGFBQWEsTUFBTSxDQUFDLE1BQU0sc0NBQXNDLElBQUksQ0FBQyxNQUFNLGFBQWEsQ0FBQyxDQUFDO1NBQ2pIO1FBRUQsT0FBTyxNQUFNLENBQUM7S0FDZjtDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWF0Y2gsIE1hdGNoZXIsIE1hdGNoUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vYXNzZXJ0aW9ucyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdMaWtlKHBhdHRlcm46IHN0cmluZykge1xuICByZXR1cm4gbmV3IFN0cmluZ0xpa2UocGF0dGVybik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0QnlSdW5PcmRlcihwYXR0ZXJuOiBhbnlbXSk6IE1hdGNoZXIge1xuICByZXR1cm4gbmV3IFNvcnRlcignU29ydEJ5UnVuT3JkZXInLCBwYXR0ZXJuLCAoYTogYW55LCBiOiBhbnkpID0+IHtcbiAgICBpZiAoYS5SdW5PcmRlciAhPT0gYi5SdW5PcmRlcikgeyByZXR1cm4gYS5SdW5PcmRlciAtIGIuUnVuT3JkZXI7IH1cbiAgICByZXR1cm4gKGEuTmFtZSBhcyBzdHJpbmcpLmxvY2FsZUNvbXBhcmUoYi5OYW1lKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdOb0xvbmdlclRoYW4obWF4OiBudW1iZXIpOiBNYXRjaGVyIHtcbiAgcmV0dXJuIG5ldyBTdHJpbmdMZW5ndGhNYXRjaGVyKG1heCk7XG59XG5cbmNsYXNzIFN0cmluZ0xpa2UgZXh0ZW5kcyBNYXRjaGVyIHtcbiAgcHVibGljIG5hbWUgPSAnU3RyaW5nTGlrZSc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBwYXR0ZXJuOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIHRlc3QoYWN0dWFsOiBhbnkpOiBNYXRjaFJlc3VsdCB7XG4gICAgaWYgKHR5cGVvZihhY3R1YWwpICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBzdHJpbmcgYnV0IGZvdW5kICR7dHlwZW9mKGFjdHVhbCl9ICR7SlNPTi5zdHJpbmdpZnkoYWN0dWFsKX1gKTtcbiAgICB9XG4gICAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGBeJHt0aGlzLnBhdHRlcm4uc3BsaXQoJyonKS5tYXAoZXNjYXBlUmVnZXgpLmpvaW4oJy4qJyl9JGApO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hdGNoUmVzdWx0KGFjdHVhbCk7XG4gICAgaWYgKCFyZS50ZXN0KGFjdHVhbCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHRoaXMsIFtdLCBgTG9va2luZyBmb3Igc3RyaW5nIHdpdGggcGF0dGVybiBcIiR7dGhpcy5wYXR0ZXJufVwiIGJ1dCBmb3VuZCBcIiR7YWN0dWFsfVwiYCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdleChzOiBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCAnXFxcXCQmJyk7IC8vICQmIG1lYW5zIHRoZSB3aG9sZSBtYXRjaGVkIHN0cmluZ1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBTb3J0ZXIgZXh0ZW5kcyBNYXRjaGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBhdHRlcm46IGFueVtdLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29tcGFyZUZuOiAoYTogYW55LCBiOiBhbnkpID0+IG51bWJlcixcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyB0ZXN0KGFjdHVhbDogYW55KTogTWF0Y2hSZXN1bHQge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRjaFJlc3VsdChhY3R1YWwpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhY3R1YWwpKSB7XG4gICAgICByZXN1bHQucHVzaCh0aGlzLCBbXSwgYEV4cGVjdGVkIGFuIEFycmF5LCBidXQgZ290ICcke3R5cGVvZiBhY3R1YWx9J2ApO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBjb25zdCBjb3B5ID0gYWN0dWFsLnNsaWNlKCk7XG4gICAgY29weS5zb3J0KHRoaXMuY29tcGFyZUZuKTtcblxuICAgIGNvbnN0IG1hdGNoZXIgPSBNYXRjaGVyLmlzTWF0Y2hlcih0aGlzLnBhdHRlcm4pID8gdGhpcy5wYXR0ZXJuIDogTWF0Y2guZXhhY3QodGhpcy5wYXR0ZXJuKTtcbiAgICByZXR1cm4gbWF0Y2hlci50ZXN0KGNvcHkpO1xuICB9XG59XG5cbmNsYXNzIFN0cmluZ0xlbmd0aE1hdGNoZXIgZXh0ZW5kcyBNYXRjaGVyIHtcbiAgcHVibGljIG5hbWU6IHN0cmluZyA9ICdTdHJpbmdMZW5ndGgnXG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBsZW5ndGg6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgdGVzdChhY3R1YWw6IGFueSk6IE1hdGNoUmVzdWx0IHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0Y2hSZXN1bHQoYWN0dWFsKTtcblxuICAgIGlmICh0eXBlb2YgYWN0dWFsICE9PSAnc3RyaW5nJykge1xuICAgICAgcmVzdWx0LnB1c2godGhpcywgW10sIGBFeHBlY3RlZCBhIHN0cmluZywgYnV0IGdvdCAnJHt0eXBlb2YgYWN0dWFsfSdgKTtcbiAgICB9XG5cbiAgICBpZiAoYWN0dWFsLmxlbmd0aCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgICByZXN1bHQucHVzaCh0aGlzLCBbXSwgYFN0cmluZyBpcyAke2FjdHVhbC5sZW5ndGh9IGNoYXJhY3RlcnMgbG9uZy4gRXhwZWN0ZWQgYXQgbW9zdCAke3RoaXMubGVuZ3RofSBjaGFyYWN0ZXJzYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSJdfQ==