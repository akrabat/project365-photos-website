import * as s3 from '../../../aws-s3';
import { App, AppProps, Environment, CfnOutput, Stage, StageProps, Stack, StackProps } from '../../../core';
import { Construct } from 'constructs';
export declare const PIPELINE_ENV: Environment;
export declare class TestApp extends App {
    constructor(props?: Partial<AppProps>);
    stackArtifact(stackName: string | Stack): Stack | undefined;
    cleanup(): void;
}
export declare class AppWithExposedStacks extends Stage {
    readonly stacks: Stack[];
    constructor(scope: Construct, id: string, props?: StageProps);
}
export declare class OneStackApp extends Stage {
    constructor(scope: Construct, id: string, props?: StageProps);
}
export interface AppWithOutputProps extends StageProps {
    readonly stackId?: string;
}
export declare class AppWithOutput extends Stage {
    readonly theOutput: CfnOutput;
    constructor(scope: Construct, id: string, props?: AppWithOutputProps);
}
export interface TwoStackAppProps extends StageProps {
    /**
     * Create a dependency between the two stacks
     *
     * @default true
     */
    readonly withDependency?: boolean;
}
export declare class TwoStackApp extends Stage {
    readonly stack1: Stack;
    readonly stack2: Stack;
    constructor(scope: Construct, id: string, props?: TwoStackAppProps);
}
/**
 * Three stacks where the last one depends on the earlier 2
 */
export declare class ThreeStackApp extends Stage {
    constructor(scope: Construct, id: string, props?: StageProps);
}
/**
 * A test stack
 *
 * It contains a single Bucket. Such robust. Much uptime.
 */
export declare class BucketStack extends Stack {
    readonly bucket: s3.IBucket;
    constructor(scope: Construct, id: string, props?: StackProps);
}
/**
 * rm -rf reimplementation, don't want to depend on an NPM package for this
 */
export declare function rimraf(fsPath: string): void;
export declare function stackTemplate(stack: Stack): import("../../../cx-api").CloudFormationStackArtifact;
export declare class StageWithStackOutput extends Stage {
    readonly output: CfnOutput;
    constructor(scope: Construct, id: string, props?: StageProps);
}
export declare class FileAssetApp extends Stage {
    constructor(scope: Construct, id: string, props?: StageProps);
}
export declare class TwoFileAssetsApp extends Stage {
    constructor(scope: Construct, id: string, props?: StageProps);
}
export declare class DockerAssetApp extends Stage {
    constructor(scope: Construct, id: string, props?: StageProps);
}
export interface MegaAssetsAppProps extends StageProps {
    readonly numAssets: number;
}
export declare class MegaAssetsApp extends Stage {
    constructor(scope: Construct, id: string, props: MegaAssetsAppProps);
}
export declare class PlainStackApp extends Stage {
    constructor(scope: Construct, id: string, props?: StageProps);
}
export declare class MultiStackApp extends Stage {
    constructor(scope: Construct, id: string, props?: StageProps);
}
