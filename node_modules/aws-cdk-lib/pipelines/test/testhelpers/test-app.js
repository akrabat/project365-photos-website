"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiStackApp = exports.PlainStackApp = exports.MegaAssetsApp = exports.DockerAssetApp = exports.TwoFileAssetsApp = exports.FileAssetApp = exports.StageWithStackOutput = exports.stackTemplate = exports.rimraf = exports.BucketStack = exports.ThreeStackApp = exports.TwoStackApp = exports.AppWithOutput = exports.OneStackApp = exports.AppWithExposedStacks = exports.TestApp = exports.PIPELINE_ENV = void 0;
const fs = require("fs");
const path = require("path");
const ecr_assets = require("../../../aws-ecr-assets");
const s3 = require("../../../aws-s3");
const s3_assets = require("../../../aws-s3-assets");
const core_1 = require("../../../core");
const construct_internals_1 = require("../../lib/private/construct-internals");
exports.PIPELINE_ENV = {
    account: '123pipeline',
    region: 'us-pipeline',
};
class TestApp extends core_1.App {
    constructor(props) {
        super({
            context: {
                '@aws-cdk/core:newStyleStackSynthesis': '1',
            },
            stackTraces: false,
            autoSynth: false,
            treeMetadata: false,
            ...props,
        });
    }
    stackArtifact(stackName) {
        if (typeof stackName !== 'string') {
            stackName = stackName.stackName;
        }
        this.synth();
        const supportStack = this.node.findAll().filter(core_1.Stack.isStack).find(s => s.stackName === stackName);
        expect(supportStack).not.toBeUndefined();
        return supportStack;
    }
    cleanup() {
        rimraf((0, construct_internals_1.assemblyBuilderOf)(this).outdir);
    }
}
exports.TestApp = TestApp;
class AppWithExposedStacks extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.stacks = new Array();
        this.stacks.push(new BucketStack(this, 'Stack1'));
        this.stacks.push(new BucketStack(this, 'Stack2'));
        this.stacks.push(new BucketStack(this, 'Stack3'));
    }
}
exports.AppWithExposedStacks = AppWithExposedStacks;
class OneStackApp extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        new BucketStack(this, 'Stack');
    }
}
exports.OneStackApp = OneStackApp;
class AppWithOutput extends core_1.Stage {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const stack = new BucketStack(this, props.stackId ?? 'Stack');
        this.theOutput = new core_1.CfnOutput(stack, 'MyOutput', { value: stack.bucket.bucketName });
    }
}
exports.AppWithOutput = AppWithOutput;
class TwoStackApp extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.stack2 = new BucketStack(this, 'Stack2');
        this.stack1 = new BucketStack(this, 'Stack1');
        if (props?.withDependency ?? true) {
            this.stack2.addDependency(this.stack1);
        }
    }
}
exports.TwoStackApp = TwoStackApp;
/**
 * Three stacks where the last one depends on the earlier 2
 */
class ThreeStackApp extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stack1 = new BucketStack(this, 'Stack1');
        const stack2 = new BucketStack(this, 'Stack2');
        const stack3 = new BucketStack(this, 'Stack3');
        stack3.addDependency(stack1);
        stack3.addDependency(stack2);
    }
}
exports.ThreeStackApp = ThreeStackApp;
/**
 * A test stack
 *
 * It contains a single Bucket. Such robust. Much uptime.
 */
class BucketStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.bucket = new s3.Bucket(this, 'Bucket');
    }
}
exports.BucketStack = BucketStack;
/**
 * rm -rf reimplementation, don't want to depend on an NPM package for this
 */
function rimraf(fsPath) {
    try {
        const isDir = fs.lstatSync(fsPath).isDirectory();
        if (isDir) {
            for (const file of fs.readdirSync(fsPath)) {
                rimraf(path.join(fsPath, file));
            }
            fs.rmdirSync(fsPath);
        }
        else {
            fs.unlinkSync(fsPath);
        }
    }
    catch (e) {
        // We will survive ENOENT
        if (e.code !== 'ENOENT') {
            throw e;
        }
    }
}
exports.rimraf = rimraf;
function stackTemplate(stack) {
    const stage = core_1.Stage.of(stack);
    if (!stage) {
        throw new Error('stack not in a Stage');
    }
    return stage.synth().getStackArtifact(stack.artifactId);
}
exports.stackTemplate = stackTemplate;
class StageWithStackOutput extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stack = new BucketStack(this, 'Stack');
        this.output = new core_1.CfnOutput(stack, 'BucketName', {
            value: stack.bucket.bucketName,
        });
    }
}
exports.StageWithStackOutput = StageWithStackOutput;
class FileAssetApp extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stack = new core_1.Stack(this, 'Stack');
        new s3_assets.Asset(stack, 'Asset', {
            path: path.join(__dirname, 'assets', 'test-file-asset.txt'),
        });
    }
}
exports.FileAssetApp = FileAssetApp;
class TwoFileAssetsApp extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stack = new core_1.Stack(this, 'Stack');
        new s3_assets.Asset(stack, 'Asset1', {
            path: path.join(__dirname, 'assets', 'test-file-asset.txt'),
        });
        new s3_assets.Asset(stack, 'Asset2', {
            path: path.join(__dirname, 'assets', 'test-file-asset-two.txt'),
        });
    }
}
exports.TwoFileAssetsApp = TwoFileAssetsApp;
class DockerAssetApp extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stack = new core_1.Stack(this, 'Stack');
        new ecr_assets.DockerImageAsset(stack, 'Asset', {
            directory: path.join(__dirname, 'assets', 'test-docker-asset'),
        });
    }
}
exports.DockerAssetApp = DockerAssetApp;
// Creates a mix of file and image assets, up to a specified count
class MegaAssetsApp extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stack = new core_1.Stack(this, 'Stack');
        let assetCount = 0;
        for (; assetCount < props.numAssets / 2; assetCount++) {
            new s3_assets.Asset(stack, `Asset${assetCount}`, {
                path: path.join(__dirname, 'assets', 'test-file-asset.txt'),
                assetHash: `FileAsset${assetCount}`,
            });
        }
        for (; assetCount < props.numAssets; assetCount++) {
            new ecr_assets.DockerImageAsset(stack, `Asset${assetCount}`, {
                directory: path.join(__dirname, 'assets', 'test-docker-asset'),
                extraHash: `FileAsset${assetCount}`,
            });
        }
    }
}
exports.MegaAssetsApp = MegaAssetsApp;
class PlainStackApp extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        new BucketStack(this, 'Stack');
    }
}
exports.PlainStackApp = PlainStackApp;
class MultiStackApp extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        new BucketStack(this, 'Stack1');
        new BucketStack(this, 'Stack2');
    }
}
exports.MultiStackApp = MultiStackApp;
//# sourceMappingURL=data:application/json;base64,