"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fact_tables_1 = require("../build-tools/fact-tables");
const lib_1 = require("../lib");
const aws_entities_1 = require("../lib/aws-entities");
test('built-in data is correct', () => {
    const snapshot = {};
    for (const name of aws_entities_1.AWS_REGIONS) {
        const region = lib_1.RegionInfo.get(name);
        const servicePrincipals = {};
        const lambdaInsightsVersions = {};
        const lambdaInsightsArmVersions = {};
        aws_entities_1.AWS_SERVICES.forEach(service => servicePrincipals[service] = region.servicePrincipal(service));
        for (const version in fact_tables_1.CLOUDWATCH_LAMBDA_INSIGHTS_ARNS) {
            lambdaInsightsVersions[version] = region.cloudwatchLambdaInsightsArn(version);
            if ('arm64' in fact_tables_1.CLOUDWATCH_LAMBDA_INSIGHTS_ARNS[version]) {
                lambdaInsightsArmVersions[version] = region.cloudwatchLambdaInsightsArn(version, 'arm64');
            }
        }
        ;
        snapshot[name] = {
            cdkMetadataResourceAvailable: region.cdkMetadataResourceAvailable,
            domainSuffix: region.domainSuffix,
            partition: region.partition,
            s3StaticWebsiteEndpoint: region.s3StaticWebsiteEndpoint,
            vpcEndPointServiceNamePrefix: region.vpcEndpointServiceNamePrefix,
            servicePrincipals,
            lambdaInsightsVersions,
            lambdaInsightsArmVersions,
        };
    }
    expect(snapshot).toMatchSnapshot();
});
test('built-in data features known regions', () => {
    const regions = lib_1.RegionInfo.regions;
    for (const expected of aws_entities_1.AWS_REGIONS) {
        expect(regions.map(region => region.name)).toContain(expected);
    }
});
test('limitedRegionMap only returns information for certain regions', () => {
    const map = lib_1.RegionInfo.limitedRegionMap(lib_1.FactName.ELBV2_ACCOUNT, ['aws']);
    expect(map['us-east-1']).toBeDefined();
    expect(map['cn-north-1']).not.toBeDefined();
    const map2 = lib_1.RegionInfo.limitedRegionMap(lib_1.FactName.ELBV2_ACCOUNT, ['aws-cn']);
    expect(map2['us-east-1']).not.toBeDefined();
    expect(map2['cn-north-1']).toBeDefined();
});
test.each([
    ['us-east-1', false],
    ['me-south-1', true],
    ['us-iso-west-1', false],
])('%p should be opt-in: %p', (region, expected) => {
    expect(lib_1.RegionInfo.get(region).isOptInRegion).toEqual(expected);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaW9uLWluZm8udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlZ2lvbi1pbmZvLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0REFBNkU7QUFDN0UsZ0NBQThDO0FBQzlDLHNEQUFnRTtBQUVoRSxJQUFJLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLE1BQU0sUUFBUSxHQUFRLEVBQUUsQ0FBQztJQUN6QixLQUFLLE1BQU0sSUFBSSxJQUFJLDBCQUFXLEVBQUU7UUFDOUIsTUFBTSxNQUFNLEdBQUcsZ0JBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFcEMsTUFBTSxpQkFBaUIsR0FBOEMsRUFBRSxDQUFDO1FBQ3hFLE1BQU0sc0JBQXNCLEdBQThDLEVBQUUsQ0FBQztRQUM3RSxNQUFNLHlCQUF5QixHQUE4QyxFQUFFLENBQUM7UUFFaEYsMkJBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUUvRixLQUFLLE1BQU0sT0FBTyxJQUFJLDZDQUErQixFQUFFO1lBQ3JELHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxHQUFHLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUU5RSxJQUFJLE9BQU8sSUFBSSw2Q0FBK0IsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDdkQseUJBQXlCLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQzthQUMzRjtTQUNGO1FBQUEsQ0FBQztRQUVGLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRztZQUNmLDRCQUE0QixFQUFFLE1BQU0sQ0FBQyw0QkFBNEI7WUFDakUsWUFBWSxFQUFFLE1BQU0sQ0FBQyxZQUFZO1lBQ2pDLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUztZQUMzQix1QkFBdUIsRUFBRSxNQUFNLENBQUMsdUJBQXVCO1lBQ3ZELDRCQUE0QixFQUFFLE1BQU0sQ0FBQyw0QkFBNEI7WUFDakUsaUJBQWlCO1lBQ2pCLHNCQUFzQjtZQUN0Qix5QkFBeUI7U0FDMUIsQ0FBQztLQUNIO0lBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ3JDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtJQUNoRCxNQUFNLE9BQU8sR0FBRyxnQkFBVSxDQUFDLE9BQU8sQ0FBQztJQUVuQyxLQUFLLE1BQU0sUUFBUSxJQUFJLDBCQUFXLEVBQUU7UUFDbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDaEU7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQywrREFBK0QsRUFBRSxHQUFHLEVBQUU7SUFFekUsTUFBTSxHQUFHLEdBQUcsZ0JBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFRLENBQUMsYUFBYSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN6RSxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUU1QyxNQUFNLElBQUksR0FBRyxnQkFBVSxDQUFDLGdCQUFnQixDQUFDLGNBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzdFLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDNUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzNDLENBQUMsQ0FBQyxDQUFDO0FBR0gsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNSLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQztJQUNwQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUM7SUFDcEIsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDO0NBQ3pCLENBQUMsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRTtJQUNqRCxNQUFNLENBQUMsZ0JBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ0xPVURXQVRDSF9MQU1CREFfSU5TSUdIVFNfQVJOUyB9IGZyb20gJy4uL2J1aWxkLXRvb2xzL2ZhY3QtdGFibGVzJztcbmltcG9ydCB7IEZhY3ROYW1lLCBSZWdpb25JbmZvIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IEFXU19SRUdJT05TLCBBV1NfU0VSVklDRVMgfSBmcm9tICcuLi9saWIvYXdzLWVudGl0aWVzJztcblxudGVzdCgnYnVpbHQtaW4gZGF0YSBpcyBjb3JyZWN0JywgKCkgPT4ge1xuICBjb25zdCBzbmFwc2hvdDogYW55ID0ge307XG4gIGZvciAoY29uc3QgbmFtZSBvZiBBV1NfUkVHSU9OUykge1xuICAgIGNvbnN0IHJlZ2lvbiA9IFJlZ2lvbkluZm8uZ2V0KG5hbWUpO1xuXG4gICAgY29uc3Qgc2VydmljZVByaW5jaXBhbHM6IHsgW3NlcnZpY2U6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZCB9ID0ge307XG4gICAgY29uc3QgbGFtYmRhSW5zaWdodHNWZXJzaW9uczogeyBbc2VydmljZTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkIH0gPSB7fTtcbiAgICBjb25zdCBsYW1iZGFJbnNpZ2h0c0FybVZlcnNpb25zOiB7IFtzZXJ2aWNlOiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQgfSA9IHt9O1xuXG4gICAgQVdTX1NFUlZJQ0VTLmZvckVhY2goc2VydmljZSA9PiBzZXJ2aWNlUHJpbmNpcGFsc1tzZXJ2aWNlXSA9IHJlZ2lvbi5zZXJ2aWNlUHJpbmNpcGFsKHNlcnZpY2UpKTtcblxuICAgIGZvciAoY29uc3QgdmVyc2lvbiBpbiBDTE9VRFdBVENIX0xBTUJEQV9JTlNJR0hUU19BUk5TKSB7XG4gICAgICBsYW1iZGFJbnNpZ2h0c1ZlcnNpb25zW3ZlcnNpb25dID0gcmVnaW9uLmNsb3Vkd2F0Y2hMYW1iZGFJbnNpZ2h0c0Fybih2ZXJzaW9uKTtcblxuICAgICAgaWYgKCdhcm02NCcgaW4gQ0xPVURXQVRDSF9MQU1CREFfSU5TSUdIVFNfQVJOU1t2ZXJzaW9uXSkge1xuICAgICAgICBsYW1iZGFJbnNpZ2h0c0FybVZlcnNpb25zW3ZlcnNpb25dID0gcmVnaW9uLmNsb3Vkd2F0Y2hMYW1iZGFJbnNpZ2h0c0Fybih2ZXJzaW9uLCAnYXJtNjQnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc25hcHNob3RbbmFtZV0gPSB7XG4gICAgICBjZGtNZXRhZGF0YVJlc291cmNlQXZhaWxhYmxlOiByZWdpb24uY2RrTWV0YWRhdGFSZXNvdXJjZUF2YWlsYWJsZSxcbiAgICAgIGRvbWFpblN1ZmZpeDogcmVnaW9uLmRvbWFpblN1ZmZpeCxcbiAgICAgIHBhcnRpdGlvbjogcmVnaW9uLnBhcnRpdGlvbixcbiAgICAgIHMzU3RhdGljV2Vic2l0ZUVuZHBvaW50OiByZWdpb24uczNTdGF0aWNXZWJzaXRlRW5kcG9pbnQsXG4gICAgICB2cGNFbmRQb2ludFNlcnZpY2VOYW1lUHJlZml4OiByZWdpb24udnBjRW5kcG9pbnRTZXJ2aWNlTmFtZVByZWZpeCxcbiAgICAgIHNlcnZpY2VQcmluY2lwYWxzLFxuICAgICAgbGFtYmRhSW5zaWdodHNWZXJzaW9ucyxcbiAgICAgIGxhbWJkYUluc2lnaHRzQXJtVmVyc2lvbnMsXG4gICAgfTtcbiAgfVxuICBleHBlY3Qoc25hcHNob3QpLnRvTWF0Y2hTbmFwc2hvdCgpO1xufSk7XG5cbnRlc3QoJ2J1aWx0LWluIGRhdGEgZmVhdHVyZXMga25vd24gcmVnaW9ucycsICgpID0+IHtcbiAgY29uc3QgcmVnaW9ucyA9IFJlZ2lvbkluZm8ucmVnaW9ucztcblxuICBmb3IgKGNvbnN0IGV4cGVjdGVkIG9mIEFXU19SRUdJT05TKSB7XG4gICAgZXhwZWN0KHJlZ2lvbnMubWFwKHJlZ2lvbiA9PiByZWdpb24ubmFtZSkpLnRvQ29udGFpbihleHBlY3RlZCk7XG4gIH1cbn0pO1xuXG50ZXN0KCdsaW1pdGVkUmVnaW9uTWFwIG9ubHkgcmV0dXJucyBpbmZvcm1hdGlvbiBmb3IgY2VydGFpbiByZWdpb25zJywgKCkgPT4ge1xuXG4gIGNvbnN0IG1hcCA9IFJlZ2lvbkluZm8ubGltaXRlZFJlZ2lvbk1hcChGYWN0TmFtZS5FTEJWMl9BQ0NPVU5ULCBbJ2F3cyddKTtcbiAgZXhwZWN0KG1hcFsndXMtZWFzdC0xJ10pLnRvQmVEZWZpbmVkKCk7XG4gIGV4cGVjdChtYXBbJ2NuLW5vcnRoLTEnXSkubm90LnRvQmVEZWZpbmVkKCk7XG5cbiAgY29uc3QgbWFwMiA9IFJlZ2lvbkluZm8ubGltaXRlZFJlZ2lvbk1hcChGYWN0TmFtZS5FTEJWMl9BQ0NPVU5ULCBbJ2F3cy1jbiddKTtcbiAgZXhwZWN0KG1hcDJbJ3VzLWVhc3QtMSddKS5ub3QudG9CZURlZmluZWQoKTtcbiAgZXhwZWN0KG1hcDJbJ2NuLW5vcnRoLTEnXSkudG9CZURlZmluZWQoKTtcbn0pO1xuXG5cbnRlc3QuZWFjaChbXG4gIFsndXMtZWFzdC0xJywgZmFsc2VdLFxuICBbJ21lLXNvdXRoLTEnLCB0cnVlXSxcbiAgWyd1cy1pc28td2VzdC0xJywgZmFsc2VdLFxuXSkoJyVwIHNob3VsZCBiZSBvcHQtaW46ICVwJywgKHJlZ2lvbiwgZXhwZWN0ZWQpID0+IHtcbiAgZXhwZWN0KFJlZ2lvbkluZm8uZ2V0KHJlZ2lvbikuaXNPcHRJblJlZ2lvbikudG9FcXVhbChleHBlY3RlZCk7XG59KTsiXX0=