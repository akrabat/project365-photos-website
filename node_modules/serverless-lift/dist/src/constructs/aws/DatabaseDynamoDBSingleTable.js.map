{
  "version": 3,
  "sources": ["../../../../src/constructs/aws/DatabaseDynamoDBSingleTable.ts"],
  "sourcesContent": ["import type { Construct as CdkConstruct } from \"constructs\";\nimport type { CfnResource } from \"aws-cdk-lib\";\nimport { CfnOutput, Fn, Stack } from \"aws-cdk-lib\";\nimport type { CfnTable } from \"aws-cdk-lib/aws-dynamodb\";\nimport { AttributeType, BillingMode, StreamViewType, Table } from \"aws-cdk-lib/aws-dynamodb\";\nimport type { FromSchema } from \"json-schema-to-ts\";\nimport type { AwsProvider } from \"@lift/providers\";\nimport { AwsConstruct } from \"@lift/constructs/abstracts\";\nimport { PolicyStatement } from \"../../CloudFormation\";\n\nconst DATABASE_DEFINITION = {\n    type: \"object\",\n    properties: {\n        type: { const: \"database/dynamodb-single-table\" },\n        localSecondaryIndexes: { type: \"boolean\" },\n        gsiCount: { type: \"integer\", minimum: 1, maximum: 20 },\n    },\n    additionalProperties: false,\n} as const;\n\ntype Configuration = FromSchema<typeof DATABASE_DEFINITION>;\nconst DATABASE_DEFAULTS: Required<Configuration> = {\n    type: \"database/dynamodb-single-table\",\n    localSecondaryIndexes: false,\n    gsiCount: 0,\n};\n\nexport class DatabaseDynamoDBSingleTable extends AwsConstruct {\n    public static type = \"database/dynamodb-single-table\";\n    public static schema = DATABASE_DEFINITION;\n\n    private readonly table: Table;\n    private readonly tableNameOutput: CfnOutput;\n\n    constructor(scope: CdkConstruct, id: string, configuration: Configuration, private provider: AwsProvider) {\n        super(scope, id);\n\n        const resolvedConfiguration = Object.assign({}, DATABASE_DEFAULTS, configuration);\n\n        this.table = new Table(this, \"Table\", {\n            partitionKey: { name: \"PK\", type: AttributeType.STRING },\n            sortKey: { name: \"SK\", type: AttributeType.STRING },\n            billingMode: BillingMode.PAY_PER_REQUEST,\n            pointInTimeRecovery: true,\n            timeToLiveAttribute: \"TimeToLive\",\n            stream: StreamViewType.NEW_AND_OLD_IMAGES,\n        });\n\n        if (resolvedConfiguration.localSecondaryIndexes) {\n            for (let localSecondaryIndex = 1; localSecondaryIndex <= 5; localSecondaryIndex++) {\n                this.table.addLocalSecondaryIndex({\n                    indexName: `LSI-${localSecondaryIndex}`,\n                    sortKey: { name: `LSI-${localSecondaryIndex}-SK`, type: AttributeType.STRING },\n                });\n            }\n        }\n\n        if (resolvedConfiguration.gsiCount > 0) {\n            for (\n                let globalSecondaryIndex = 1;\n                globalSecondaryIndex <= resolvedConfiguration.gsiCount;\n                globalSecondaryIndex++\n            ) {\n                this.table.addGlobalSecondaryIndex({\n                    indexName: `GSI-${globalSecondaryIndex}`,\n                    partitionKey: { name: `GSI-${globalSecondaryIndex}-PK`, type: AttributeType.STRING },\n                    sortKey: { name: `GSI-${globalSecondaryIndex}-SK`, type: AttributeType.STRING },\n                });\n            }\n        }\n\n        this.tableNameOutput = new CfnOutput(this, \"TableName\", {\n            value: this.table.tableName,\n        });\n    }\n\n    permissions(): PolicyStatement[] {\n        return [\n            new PolicyStatement(\n                [\n                    \"dynamodb:GetItem\",\n                    \"dynamodb:BatchGetItem\",\n                    \"dynamodb:Query\",\n                    \"dynamodb:Scan\",\n                    \"dynamodb:PutItem\",\n                    \"dynamodb:DeleteItem\",\n                    \"dynamodb:BatchWriteItem\",\n                    \"dynamodb:UpdateItem\",\n                ],\n                [this.table.tableArn, Stack.of(this).resolve(Fn.join(\"/\", [this.table.tableArn, \"index\", \"*\"]))]\n            ),\n        ];\n    }\n\n    outputs(): Record<string, () => Promise<string | undefined>> {\n        return {\n            tableName: () => this.getTableName(),\n        };\n    }\n\n    variables(): Record<string, unknown> {\n        return {\n            tableName: this.table.tableName,\n            tableArn: this.table.tableArn,\n            tableStreamArn: this.table.tableStreamArn,\n        };\n    }\n\n    extend(): Record<string, CfnResource> {\n        return {\n            table: this.table.node.defaultChild as CfnTable,\n        };\n    }\n\n    async getTableName(): Promise<string | undefined> {\n        return this.provider.getStackOutput(this.tableNameOutput);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,yBAAqC;AAErC,0BAAkE;AAGlE,uBAA6B;AAC7B,4BAAgC;AAEhC,MAAM,sBAAsB;AAAA,EACxB,MAAM;AAAA,EACN,YAAY;AAAA,IACR,MAAM,EAAE,OAAO,iCAAiC;AAAA,IAChD,uBAAuB,EAAE,MAAM,UAAU;AAAA,IACzC,UAAU,EAAE,MAAM,WAAW,SAAS,GAAG,SAAS,GAAG;AAAA,EACzD;AAAA,EACA,sBAAsB;AAC1B;AAGA,MAAM,oBAA6C;AAAA,EAC/C,MAAM;AAAA,EACN,uBAAuB;AAAA,EACvB,UAAU;AACd;AAEO,MAAM,oCAAoC,8BAAa;AAAA,EAO1D,YAAY,OAAqB,IAAY,eAAsC,UAAuB;AACtG,UAAM,OAAO,EAAE;AADgE;AAG/E,UAAM,wBAAwB,OAAO,OAAO,CAAC,GAAG,mBAAmB,aAAa;AAEhF,SAAK,QAAQ,IAAI,0BAAM,MAAM,SAAS;AAAA,MAClC,cAAc,EAAE,MAAM,MAAM,MAAM,kCAAc,OAAO;AAAA,MACvD,SAAS,EAAE,MAAM,MAAM,MAAM,kCAAc,OAAO;AAAA,MAClD,aAAa,gCAAY;AAAA,MACzB,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,MACrB,QAAQ,mCAAe;AAAA,IAC3B,CAAC;AAED,QAAI,sBAAsB,uBAAuB;AAC7C,eAAS,sBAAsB,GAAG,uBAAuB,GAAG,uBAAuB;AAC/E,aAAK,MAAM,uBAAuB;AAAA,UAC9B,WAAW,OAAO;AAAA,UAClB,SAAS,EAAE,MAAM,OAAO,0BAA0B,MAAM,kCAAc,OAAO;AAAA,QACjF,CAAC;AAAA,MACL;AAAA,IACJ;AAEA,QAAI,sBAAsB,WAAW,GAAG;AACpC,eACQ,uBAAuB,GAC3B,wBAAwB,sBAAsB,UAC9C,wBACF;AACE,aAAK,MAAM,wBAAwB;AAAA,UAC/B,WAAW,OAAO;AAAA,UAClB,cAAc,EAAE,MAAM,OAAO,2BAA2B,MAAM,kCAAc,OAAO;AAAA,UACnF,SAAS,EAAE,MAAM,OAAO,2BAA2B,MAAM,kCAAc,OAAO;AAAA,QAClF,CAAC;AAAA,MACL;AAAA,IACJ;AAEA,SAAK,kBAAkB,IAAI,6BAAU,MAAM,aAAa;AAAA,MACpD,OAAO,KAAK,MAAM;AAAA,IACtB,CAAC;AAAA,EACL;AAAA,EAEA,cAAiC;AAC7B,WAAO;AAAA,MACH,IAAI;AAAA,QACA;AAAA,UACI;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAAA,QACA,CAAC,KAAK,MAAM,UAAU,yBAAM,GAAG,IAAI,EAAE,QAAQ,sBAAG,KAAK,KAAK,CAAC,KAAK,MAAM,UAAU,SAAS,GAAG,CAAC,CAAC,CAAC;AAAA,MACnG;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,UAA6D;AACzD,WAAO;AAAA,MACH,WAAW,MAAM,KAAK,aAAa;AAAA,IACvC;AAAA,EACJ;AAAA,EAEA,YAAqC;AACjC,WAAO;AAAA,MACH,WAAW,KAAK,MAAM;AAAA,MACtB,UAAU,KAAK,MAAM;AAAA,MACrB,gBAAgB,KAAK,MAAM;AAAA,IAC/B;AAAA,EACJ;AAAA,EAEA,SAAsC;AAClC,WAAO;AAAA,MACH,OAAO,KAAK,MAAM,KAAK;AAAA,IAC3B;AAAA,EACJ;AAAA,EAEA,MAAM,eAA4C;AAC9C,WAAO,KAAK,SAAS,eAAe,KAAK,eAAe;AAAA,EAC5D;AACJ;AA1Fa,4BACK,OAAO;AADZ,4BAEK,SAAS;",
  "names": []
}
