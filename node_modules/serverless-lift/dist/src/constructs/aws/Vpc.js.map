{
  "version": 3,
  "sources": ["../../../../src/constructs/aws/Vpc.ts"],
  "sourcesContent": ["import { Vpc as CdkVpc, Peer, Port, SecurityGroup } from \"aws-cdk-lib/aws-ec2\";\nimport type { Construct as CdkConstruct } from \"constructs\";\nimport type { FromSchema } from \"json-schema-to-ts\";\nimport type { AwsProvider } from \"@lift/providers\";\nimport type { ConstructInterface } from \"@lift/constructs\";\n\nconst VPC_DEFINITION = {\n    type: \"object\",\n    properties: {\n        type: { const: \"vpc\" },\n    },\n    additionalProperties: false,\n    required: [],\n} as const;\n\ntype Configuration = FromSchema<typeof VPC_DEFINITION>;\n\nexport class Vpc extends CdkVpc implements ConstructInterface {\n    public static type = \"vpc\";\n    public static schema = VPC_DEFINITION;\n\n    static create(provider: AwsProvider, id: string, configuration: Configuration): Vpc {\n        return new this(provider.stack, id, configuration, provider);\n    }\n\n    private readonly appSecurityGroup: SecurityGroup;\n\n    constructor(scope: CdkConstruct, id: string, configuration: Configuration, private provider: AwsProvider) {\n        super(scope, id, {\n            maxAzs: 2,\n        });\n\n        // Add a security group for the Lambda functions\n        this.appSecurityGroup = new SecurityGroup(this, \"AppSecurityGroup\", {\n            vpc: this,\n        });\n        // Lambda is allowed to reach out to the whole internet\n        this.appSecurityGroup.addEgressRule(Peer.anyIpv4(), Port.allTraffic());\n\n        // Auto-register the VPC\n        provider.setVpcConfig(\n            [this.appSecurityGroup.securityGroupId],\n            this.privateSubnets.map((subnet) => subnet.subnetId)\n        );\n    }\n\n    outputs(): Record<string, () => Promise<string | undefined>> {\n        return {};\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAyD;AAMzD,MAAM,iBAAiB;AAAA,EACnB,MAAM;AAAA,EACN,YAAY;AAAA,IACR,MAAM,EAAE,OAAO,MAAM;AAAA,EACzB;AAAA,EACA,sBAAsB;AAAA,EACtB,UAAU,CAAC;AACf;AAIO,MAAM,YAAY,eAAAA,IAAqC;AAAA,EAU1D,YAAY,OAAqB,IAAY,eAAsC,UAAuB;AACtG,UAAM,OAAO,IAAI;AAAA,MACb,QAAQ;AAAA,IACZ,CAAC;AAH8E;AAM/E,SAAK,mBAAmB,IAAI,6BAAc,MAAM,oBAAoB;AAAA,MAChE,KAAK;AAAA,IACT,CAAC;AAED,SAAK,iBAAiB,cAAc,oBAAK,QAAQ,GAAG,oBAAK,WAAW,CAAC;AAGrE,aAAS;AAAA,MACL,CAAC,KAAK,iBAAiB,eAAe;AAAA,MACtC,KAAK,eAAe,IAAI,CAAC,WAAW,OAAO,QAAQ;AAAA,IACvD;AAAA,EACJ;AAAA,EAvBA,OAAO,OAAO,UAAuB,IAAY,eAAmC;AAChF,WAAO,IAAI,KAAK,SAAS,OAAO,IAAI,eAAe,QAAQ;AAAA,EAC/D;AAAA,EAuBA,UAA6D;AACzD,WAAO,CAAC;AAAA,EACZ;AACJ;AAhCa,IACK,OAAO;AADZ,IAEK,SAAS;",
  "names": ["CdkVpc"]
}
