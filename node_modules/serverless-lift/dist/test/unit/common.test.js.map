{
  "version": 3,
  "sources": ["../../../test/unit/common.test.ts"],
  "sourcesContent": ["import { baseConfig, pluginConfigExt, runServerless } from \"../utils/runServerless\";\n\ndescribe(\"common\", () => {\n    it(\"should explicitly require a type for each construct\", async () => {\n        await expect(\n            runServerless({\n                command: \"package\",\n                config: Object.assign(baseConfig, {\n                    constructs: {\n                        avatars: {},\n                    },\n                }),\n            })\n        ).rejects.toThrow(/The construct 'avatars' has no 'type' defined.*/g);\n    });\n\n    it(\"should not override user defined resources in serverless.yml\", async () => {\n        const { cfTemplate } = await runServerless({\n            fixture: \"common\",\n            configExt: pluginConfigExt,\n            command: \"package\",\n        });\n        expect(cfTemplate.Resources).toMatchObject({\n            UserDefinedResource: {},\n        });\n    });\n\n    it(\"should validate construct configuration\", async () => {\n        // Valid config: should not throw\n        await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    avatars: {\n                        type: \"storage\",\n                    },\n                },\n            }),\n        });\n        // Invalid config: invalid property\n        await expect(\n            runServerless({\n                command: \"package\",\n                config: Object.assign(baseConfig, {\n                    constructs: {\n                        avatars: {\n                            type: \"storage\",\n                            foo: \"bar\",\n                        },\n                    },\n                }),\n            })\n        ).rejects.toThrow(/Configuration error at 'constructs\\.avatars'.*/g);\n        // Invalid config: valid property, but in the wrong construct\n        await expect(\n            runServerless({\n                command: \"package\",\n                config: Object.assign(baseConfig, {\n                    constructs: {\n                        avatars: {\n                            type: \"storage\",\n                            // \"path\" is a valid property in the `static-website` construct\n                            path: \".\",\n                        },\n                    },\n                }),\n            })\n        ).rejects.toThrow(/Configuration error at 'constructs\\.avatars'.*/g);\n    });\n});\n"],
  "mappings": ";AAAA,2BAA2D;AAE3D,SAAS,UAAU,MAAM;AACrB,KAAG,uDAAuD,YAAY;AAClE,UAAM;AAAA,UACF,oCAAc;AAAA,QACV,SAAS;AAAA,QACT,QAAQ,OAAO,OAAO,iCAAY;AAAA,UAC9B,YAAY;AAAA,YACR,SAAS,CAAC;AAAA,UACd;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL,EAAE,QAAQ,QAAQ,kDAAkD;AAAA,EACxE,CAAC;AAED,KAAG,gEAAgE,YAAY;AAC3E,UAAM,EAAE,WAAW,IAAI,UAAM,oCAAc;AAAA,MACvC,SAAS;AAAA,MACT,WAAW;AAAA,MACX,SAAS;AAAA,IACb,CAAC;AACD,WAAO,WAAW,SAAS,EAAE,cAAc;AAAA,MACvC,qBAAqB,CAAC;AAAA,IAC1B,CAAC;AAAA,EACL,CAAC;AAED,KAAG,2CAA2C,YAAY;AAEtD,cAAM,oCAAc;AAAA,MAChB,SAAS;AAAA,MACT,QAAQ,OAAO,OAAO,iCAAY;AAAA,QAC9B,YAAY;AAAA,UACR,SAAS;AAAA,YACL,MAAM;AAAA,UACV;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAED,UAAM;AAAA,UACF,oCAAc;AAAA,QACV,SAAS;AAAA,QACT,QAAQ,OAAO,OAAO,iCAAY;AAAA,UAC9B,YAAY;AAAA,YACR,SAAS;AAAA,cACL,MAAM;AAAA,cACN,KAAK;AAAA,YACT;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL,EAAE,QAAQ,QAAQ,iDAAiD;AAEnE,UAAM;AAAA,UACF,oCAAc;AAAA,QACV,SAAS;AAAA,QACT,QAAQ,OAAO,OAAO,iCAAY;AAAA,UAC9B,YAAY;AAAA,YACR,SAAS;AAAA,cACL,MAAM;AAAA;AAAA,cAEN,MAAM;AAAA,YACV;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL,EAAE,QAAQ,QAAQ,iDAAiD;AAAA,EACvE,CAAC;AACL,CAAC;",
  "names": []
}
