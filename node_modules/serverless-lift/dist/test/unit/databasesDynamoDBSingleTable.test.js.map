{
  "version": 3,
  "sources": ["../../../test/unit/databasesDynamoDBSingleTable.test.ts"],
  "sourcesContent": ["import { pluginConfigExt, runServerless } from \"../utils/runServerless\";\n\ndescribe(\"databasesDynamoDBSingleTable\", () => {\n    let cfTemplate: {\n        Resources: Record<string, { Properties: Record<string, unknown> }>;\n        Outputs: Record<string, unknown>;\n    };\n    let computeLogicalId: (...address: string[]) => string;\n    const tableUseCases = [\n        [\"databaseWithoutSecondaryIndexes\"],\n        [\"databaseWithLocalSecondaryIndexes\"],\n        [\"databaseWithGlobalSecondaryIndexes\"],\n    ];\n\n    beforeAll(async () => {\n        ({ cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"databasesDynamoDBSingleTable\",\n            configExt: pluginConfigExt,\n            command: \"package\",\n        }));\n    });\n    describe(\"common tests\", () => {\n        test.each(tableUseCases)(\n            \"%p - should ensure deletion policy and update replace policy are retain\",\n            (tableUseCase) => {\n                expect(cfTemplate.Resources[computeLogicalId(tableUseCase, \"Table\")]).toMatchObject({\n                    UpdateReplacePolicy: \"Retain\",\n                    DeletionPolicy: \"Retain\",\n                });\n            }\n        );\n        test.each(tableUseCases)(\"%p - should provision generic names for primary index\", (tableUseCase) => {\n            expect(\n                cfTemplate.Resources[computeLogicalId(tableUseCase, \"Table\")].Properties.AttributeDefinitions\n            ).toContainEqual({ AttributeName: \"PK\", AttributeType: \"S\" });\n            expect(\n                cfTemplate.Resources[computeLogicalId(tableUseCase, \"Table\")].Properties.AttributeDefinitions\n            ).toContainEqual({ AttributeName: \"SK\", AttributeType: \"S\" });\n            expect(cfTemplate.Resources[computeLogicalId(tableUseCase, \"Table\")].Properties.KeySchema).toEqual([\n                {\n                    AttributeName: \"PK\",\n                    KeyType: \"HASH\",\n                },\n                {\n                    AttributeName: \"SK\",\n                    KeyType: \"RANGE\",\n                },\n            ]);\n        });\n    });\n    it(\"should use generic names for LSI\", () => {\n        for (let localSecondaryIndex = 1; localSecondaryIndex <= 5; localSecondaryIndex++) {\n            expect(\n                cfTemplate.Resources[computeLogicalId(\"databaseWithLocalSecondaryIndexes\", \"Table\")].Properties\n                    .AttributeDefinitions\n            ).toContainEqual({ AttributeName: `LSI-${localSecondaryIndex}-SK`, AttributeType: \"S\" });\n        }\n        expect(\n            cfTemplate.Resources[computeLogicalId(\"databaseWithLocalSecondaryIndexes\", \"Table\")].Properties\n                .LocalSecondaryIndexes\n        ).toEqual(\n            Array.from({ length: 5 }, (_, i) => i + 1).map((localSecondaryIndex) => {\n                return {\n                    IndexName: `LSI-${localSecondaryIndex}`,\n                    KeySchema: [\n                        {\n                            AttributeName: \"PK\",\n                            KeyType: \"HASH\",\n                        },\n                        {\n                            AttributeName: `LSI-${localSecondaryIndex}-SK`,\n                            KeyType: \"RANGE\",\n                        },\n                    ],\n                    Projection: { ProjectionType: \"ALL\" },\n                };\n            })\n        );\n    });\n    it(\"should use generic names for GSI\", () => {\n        for (let globalSecondaryIndex = 1; globalSecondaryIndex <= 2; globalSecondaryIndex++) {\n            expect(\n                cfTemplate.Resources[computeLogicalId(\"databaseWithGlobalSecondaryIndexes\", \"Table\")].Properties\n                    .AttributeDefinitions\n            ).toContainEqual({ AttributeName: `GSI-${globalSecondaryIndex}-PK`, AttributeType: \"S\" });\n            expect(\n                cfTemplate.Resources[computeLogicalId(\"databaseWithGlobalSecondaryIndexes\", \"Table\")].Properties\n                    .AttributeDefinitions\n            ).toContainEqual({ AttributeName: `GSI-${globalSecondaryIndex}-SK`, AttributeType: \"S\" });\n        }\n        expect(\n            cfTemplate.Resources[computeLogicalId(\"databaseWithGlobalSecondaryIndexes\", \"Table\")].Properties\n                .GlobalSecondaryIndexes\n        ).toEqual(\n            Array.from({ length: 2 }, (_, i) => i + 1).map((globalSecondaryIndex) => {\n                return {\n                    IndexName: `GSI-${globalSecondaryIndex}`,\n                    KeySchema: [\n                        {\n                            AttributeName: `GSI-${globalSecondaryIndex}-PK`,\n                            KeyType: \"HASH\",\n                        },\n                        {\n                            AttributeName: `GSI-${globalSecondaryIndex}-SK`,\n                            KeyType: \"RANGE\",\n                        },\n                    ],\n                    Projection: { ProjectionType: \"ALL\" },\n                };\n            })\n        );\n    });\n\n    it(\"allows overriding table properties\", () => {\n        expect(cfTemplate.Resources[computeLogicalId(\"extendedDatabase\", \"Table\")].Properties).toMatchObject({\n            TableClass: \"STANDARD_INFREQUENT_ACCESS\",\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
