{
  "version": 3,
  "sources": ["../../../test/unit/permissions.test.ts"],
  "sourcesContent": ["import { get, merge } from \"lodash\";\nimport { pluginConfigExt, runServerless } from \"../utils/runServerless\";\n\ntype CfTemplate = {\n    Resources: Record<string, unknown>;\n    Outputs?: Record<string, unknown>;\n};\n\nfunction expectLiftStorageStatementIsAdded(cfTemplate: CfTemplate) {\n    expect(get(cfTemplate.Resources.IamRoleLambdaExecution, \"Properties.Policies[0].PolicyDocument.Statement\")).toEqual(\n        expect.arrayContaining([\n            expect.objectContaining({\n                Effect: \"Allow\",\n                Action: [\"s3:PutObject\", \"s3:GetObject\", \"s3:DeleteObject\", \"s3:ListBucket\"],\n            }),\n        ])\n    );\n}\n\nfunction expectUserDynamoStatementIsAdded(cfTemplate: CfTemplate) {\n    expect(\n        get(cfTemplate.Resources.IamRoleLambdaExecution, \"Properties.Policies[0].PolicyDocument.Statement\")\n    ).toContainEqual({\n        Effect: \"Allow\",\n        Action: [\"dynamodb:PutItem\"],\n        Resource: \"arn:aws:dynamodb:us-east-1:123456789012:table/myDynamoDBTable\",\n    });\n}\n\ndescribe(\"permissions\", () => {\n    it(\"should not override user-defined role\", async () => {\n        const { cfTemplate } = await runServerless({\n            fixture: \"permissions\",\n            configExt: merge({}, pluginConfigExt, {\n                provider: {\n                    iam: {\n                        role: \"arn:aws:iam::123456789012:role/role\",\n                    },\n                },\n            }),\n            command: \"package\",\n        });\n        expect(cfTemplate.Resources.FooLambdaFunction).toMatchObject({\n            Properties: {\n                Role: \"arn:aws:iam::123456789012:role/role\",\n            },\n        });\n    });\n\n    it(\"should append permissions when using iam.role.statements\", async () => {\n        const { cfTemplate } = await runServerless({\n            fixture: \"permissions\",\n            configExt: merge({}, pluginConfigExt, {\n                provider: {\n                    iam: {\n                        role: {\n                            statements: [\n                                {\n                                    Effect: \"Allow\",\n                                    Action: [\"dynamodb:PutItem\"],\n                                    Resource: \"arn:aws:dynamodb:us-east-1:123456789012:table/myDynamoDBTable\",\n                                },\n                            ],\n                        },\n                    },\n                },\n            }),\n            command: \"package\",\n        });\n\n        expectUserDynamoStatementIsAdded(cfTemplate);\n        expectLiftStorageStatementIsAdded(cfTemplate);\n    });\n\n    it(\"should append permissions when using the deprecated iamRoleStatements\", async () => {\n        const { cfTemplate } = await runServerless({\n            fixture: \"permissions\",\n            configExt: merge({}, pluginConfigExt, {\n                provider: {\n                    iamRoleStatements: [\n                        {\n                            Effect: \"Allow\",\n                            Action: [\"dynamodb:PutItem\"],\n                            Resource: \"arn:aws:dynamodb:us-east-1:123456789012:table/myDynamoDBTable\",\n                        },\n                    ],\n                },\n            }),\n            command: \"package\",\n        });\n\n        expectUserDynamoStatementIsAdded(cfTemplate);\n        expectLiftStorageStatementIsAdded(cfTemplate);\n    });\n\n    it(\"should add permissions when no custom statements are provided\", async () => {\n        const { cfTemplate } = await runServerless({\n            fixture: \"permissions\",\n            configExt: pluginConfigExt,\n            command: \"package\",\n        });\n\n        expectLiftStorageStatementIsAdded(cfTemplate);\n    });\n\n    it(\"should be possible to disable automatic permissions\", async () => {\n        const { cfTemplate } = await runServerless({\n            fixture: \"permissions\",\n            configExt: merge({}, pluginConfigExt, {\n                // We disable automatic permissions\n                lift: {\n                    automaticPermissions: false,\n                },\n            }),\n            command: \"package\",\n        });\n        // There should be no \"s3:*\" permissions added\n        const statements = get(\n            cfTemplate.Resources.IamRoleLambdaExecution,\n            \"Properties.Policies[0].PolicyDocument.Statement\"\n        ) as unknown as { Action: string[] }[];\n        statements.forEach(({ Action }) => {\n            expect(Action).not.toEqual(expect.arrayContaining([expect.stringMatching(/^s3:.*$/)]));\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
