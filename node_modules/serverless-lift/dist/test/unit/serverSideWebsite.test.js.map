{
  "version": 3,
  "sources": ["../../../test/unit/serverSideWebsite.test.ts"],
  "sourcesContent": ["import * as sinon from \"sinon\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { baseConfig, pluginConfigExt, runServerless } from \"../utils/runServerless\";\nimport * as CloudFormationHelpers from \"../../src/CloudFormation\";\nimport { computeS3ETag } from \"../../src/utils/s3-sync\";\nimport { mockAws } from \"../utils/mockAws\";\n\ndescribe(\"server-side website\", () => {\n    afterEach(() => {\n        sinon.restore();\n    });\n\n    it(\"should create all required resources\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        assets: {\n                            \"/assets/*\": \"public\",\n                        },\n                    },\n                },\n            }),\n        });\n        const bucketLogicalId = computeLogicalId(\"backend\", \"Assets\");\n        const bucketPolicyLogicalId = computeLogicalId(\"backend\", \"Assets\", \"Policy\");\n        const originAccessIdentityLogicalId = computeLogicalId(\"backend\", \"CDN\", \"Origin2\", \"S3Origin\");\n        const cfDistributionLogicalId = computeLogicalId(\"backend\", \"CDN\");\n        const cfOriginId1 = computeLogicalId(\"backend\", \"CDN\", \"Origin1\");\n        const cfOriginId2 = computeLogicalId(\"backend\", \"CDN\", \"Origin2\");\n        const requestFunction = computeLogicalId(\"backend\", \"RequestFunction\");\n        expect(Object.keys(cfTemplate.Resources)).toStrictEqual([\n            \"ServerlessDeploymentBucket\",\n            \"ServerlessDeploymentBucketPolicy\",\n            bucketLogicalId,\n            bucketPolicyLogicalId,\n            requestFunction,\n            originAccessIdentityLogicalId,\n            cfDistributionLogicalId,\n        ]);\n        expect(cfTemplate.Resources[bucketLogicalId]).toMatchObject({\n            Type: \"AWS::S3::Bucket\",\n            UpdateReplacePolicy: \"Delete\",\n            DeletionPolicy: \"Delete\",\n        });\n        expect(cfTemplate.Resources[bucketPolicyLogicalId]).toMatchObject({\n            Properties: {\n                Bucket: { Ref: bucketLogicalId },\n                PolicyDocument: {\n                    Statement: [\n                        {\n                            Action: \"s3:GetObject\",\n                            Effect: \"Allow\",\n                            Principal: {\n                                CanonicalUser: { \"Fn::GetAtt\": [originAccessIdentityLogicalId, \"S3CanonicalUserId\"] },\n                            },\n                            Resource: { \"Fn::Join\": [\"\", [{ \"Fn::GetAtt\": [bucketLogicalId, \"Arn\"] }, \"/*\"]] },\n                        },\n                    ],\n                    Version: \"2012-10-17\",\n                },\n            },\n        });\n        expect(cfTemplate.Resources[originAccessIdentityLogicalId]).toStrictEqual({\n            Type: \"AWS::CloudFront::CloudFrontOriginAccessIdentity\",\n            Properties: {\n                CloudFrontOriginAccessIdentityConfig: {\n                    Comment: `Identity for ${cfOriginId2}`,\n                },\n            },\n        });\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toStrictEqual({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    Comment: \"app-dev backend website CDN\",\n                    CustomErrorResponses: [\n                        { ErrorCachingMinTTL: 0, ErrorCode: 500 },\n                        { ErrorCachingMinTTL: 0, ErrorCode: 504 },\n                    ],\n                    DefaultCacheBehavior: {\n                        AllowedMethods: [\"GET\", \"HEAD\", \"OPTIONS\", \"PUT\", \"PATCH\", \"POST\", \"DELETE\"],\n                        Compress: true,\n                        CachePolicyId: \"4135ea2d-6df8-44a3-9df3-4b5a84be39ad\",\n                        OriginRequestPolicyId: \"b689b0a8-53d0-40ab-baf2-68738e2966ac\",\n                        TargetOriginId: cfOriginId1,\n                        ViewerProtocolPolicy: \"redirect-to-https\",\n                        FunctionAssociations: [\n                            {\n                                EventType: \"viewer-request\",\n                                FunctionARN: {\n                                    \"Fn::GetAtt\": [requestFunction, \"FunctionARN\"],\n                                },\n                            },\n                        ],\n                    },\n                    CacheBehaviors: [\n                        {\n                            AllowedMethods: [\"GET\", \"HEAD\", \"OPTIONS\"],\n                            CachePolicyId: \"658327ea-f89d-4fab-a63d-7e88639e58f6\",\n                            Compress: true,\n                            PathPattern: \"/assets/*\",\n                            TargetOriginId: cfOriginId2,\n                            ViewerProtocolPolicy: \"redirect-to-https\",\n                        },\n                    ],\n                    Enabled: true,\n                    HttpVersion: \"http2\",\n                    IPV6Enabled: true,\n                    Origins: [\n                        {\n                            Id: cfOriginId1,\n                            CustomOriginConfig: {\n                                OriginProtocolPolicy: \"https-only\",\n                                OriginSSLProtocols: [\"TLSv1.2\"],\n                            },\n                            DomainName: {\n                                \"Fn::Join\": [\".\", [{ Ref: \"HttpApi\" }, \"execute-api.us-east-1.amazonaws.com\"]],\n                            },\n                        },\n                        {\n                            DomainName: { \"Fn::GetAtt\": [bucketLogicalId, \"RegionalDomainName\"] },\n                            Id: cfOriginId2,\n                            S3OriginConfig: {\n                                OriginAccessIdentity: {\n                                    \"Fn::Join\": [\n                                        \"\",\n                                        [\"origin-access-identity/cloudfront/\", { Ref: originAccessIdentityLogicalId }],\n                                    ],\n                                },\n                            },\n                        },\n                    ],\n                },\n            },\n        });\n        expect(cfTemplate.Resources[requestFunction]).toMatchObject({\n            Type: \"AWS::CloudFront::Function\",\n            Properties: {\n                Name: \"app-dev-us-east-1-backend-request\",\n                FunctionConfig: {\n                    Comment: \"app-dev-us-east-1-backend-request\",\n                    Runtime: \"cloudfront-js-1.0\",\n                },\n                AutoPublish: true,\n            },\n        });\n        expect(cfTemplate.Outputs).toMatchObject({\n            [computeLogicalId(\"backend\", \"AssetsBucketName\")]: {\n                Description: \"Name of the bucket that stores the website assets.\",\n                Value: { Ref: bucketLogicalId },\n            },\n            [computeLogicalId(\"backend\", \"Domain\")]: {\n                Description: \"Website domain name.\",\n                Value: { \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"] },\n            },\n            [computeLogicalId(\"backend\", \"CloudFrontCName\")]: {\n                Description: \"CloudFront CNAME.\",\n                Value: { \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"] },\n            },\n            [computeLogicalId(\"backend\", \"DistributionId\")]: {\n                Description: \"ID of the CloudFront distribution.\",\n                Value: { Ref: cfDistributionLogicalId },\n            },\n        });\n    });\n\n    it(\"assets should be optional\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                    },\n                },\n            }),\n        });\n        const bucketLogicalId = computeLogicalId(\"backend\", \"Assets\");\n        const cfDistributionLogicalId = computeLogicalId(\"backend\", \"CDN\");\n        const cfOriginId1 = computeLogicalId(\"backend\", \"CDN\", \"Origin1\");\n        const requestFunction = computeLogicalId(\"backend\", \"RequestFunction\");\n        expect(Object.keys(cfTemplate.Resources)).toStrictEqual([\n            \"ServerlessDeploymentBucket\",\n            \"ServerlessDeploymentBucketPolicy\",\n            bucketLogicalId,\n            requestFunction,\n            cfDistributionLogicalId,\n        ]);\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toStrictEqual({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    Comment: \"app-dev backend website CDN\",\n                    CustomErrorResponses: [\n                        { ErrorCachingMinTTL: 0, ErrorCode: 500 },\n                        { ErrorCachingMinTTL: 0, ErrorCode: 504 },\n                    ],\n                    DefaultCacheBehavior: {\n                        AllowedMethods: [\"GET\", \"HEAD\", \"OPTIONS\", \"PUT\", \"PATCH\", \"POST\", \"DELETE\"],\n                        Compress: true,\n                        CachePolicyId: \"4135ea2d-6df8-44a3-9df3-4b5a84be39ad\",\n                        OriginRequestPolicyId: \"b689b0a8-53d0-40ab-baf2-68738e2966ac\",\n                        TargetOriginId: cfOriginId1,\n                        ViewerProtocolPolicy: \"redirect-to-https\",\n                        FunctionAssociations: [\n                            {\n                                EventType: \"viewer-request\",\n                                FunctionARN: { \"Fn::GetAtt\": [requestFunction, \"FunctionARN\"] },\n                            },\n                        ],\n                    },\n                    Enabled: true,\n                    HttpVersion: \"http2\",\n                    IPV6Enabled: true,\n                    Origins: [\n                        {\n                            Id: cfOriginId1,\n                            CustomOriginConfig: {\n                                OriginProtocolPolicy: \"https-only\",\n                                OriginSSLProtocols: [\"TLSv1.2\"],\n                            },\n                            DomainName: {\n                                \"Fn::Join\": [\".\", [{ Ref: \"HttpApi\" }, \"execute-api.us-east-1.amazonaws.com\"]],\n                            },\n                        },\n                    ],\n                },\n            },\n        });\n    });\n\n    it(\"should support REST APIs\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        apiGateway: \"rest\",\n                    },\n                },\n            }),\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"backend\", \"CDN\")]).toMatchObject({\n            Properties: {\n                DistributionConfig: {\n                    Origins: [\n                        {\n                            CustomOriginConfig: {\n                                OriginProtocolPolicy: \"https-only\",\n                                OriginSSLProtocols: [\"TLSv1.2\"],\n                            },\n                            DomainName: {\n                                \"Fn::Join\": [\n                                    \".\",\n                                    [{ Ref: \"ApiGatewayRestApi\" }, \"execute-api.us-east-1.amazonaws.com\"],\n                                ],\n                            },\n                        },\n                    ],\n                },\n            },\n        });\n    });\n\n    it(\"should support a custom domain\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        assets: {\n                            \"/assets/*\": \"public\",\n                        },\n                        domain: \"example.com\",\n                        certificate:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                    },\n                },\n            }),\n        });\n        const cfDistributionLogicalId = computeLogicalId(\"backend\", \"CDN\");\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toMatchObject({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    // Check that CloudFront uses the custom ACM certificate and custom domain\n                    Aliases: [\"example.com\"],\n                    ViewerCertificate: {\n                        AcmCertificateArn:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                        MinimumProtocolVersion: \"TLSv1.2_2021\",\n                        SslSupportMethod: \"sni-only\",\n                    },\n                },\n            },\n        });\n        // The domain should be the custom domain, not the CloudFront one\n        expect(cfTemplate.Outputs).toMatchObject({\n            [computeLogicalId(\"backend\", \"Domain\")]: {\n                Description: \"Website domain name.\",\n                Value: \"example.com\",\n            },\n            [computeLogicalId(\"backend\", \"CloudFrontCName\")]: {\n                Description: \"CloudFront CNAME.\",\n                Value: {\n                    \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"],\n                },\n            },\n        });\n    });\n\n    it(\"should support multiple custom domains\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        assets: {\n                            \"/assets/*\": \"public\",\n                        },\n                        domain: [\"example.com\", \"www.example.com\"],\n                        certificate:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                    },\n                },\n            }),\n        });\n        const cfDistributionLogicalId = computeLogicalId(\"backend\", \"CDN\");\n        // Check that CloudFront uses all the custom domains\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toMatchObject({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    Aliases: [\"example.com\", \"www.example.com\"],\n                },\n            },\n        });\n        // This should contain the first domain of the list\n        expect(cfTemplate.Outputs).toMatchObject({\n            [computeLogicalId(\"backend\", \"Domain\")]: {\n                Description: \"Website domain name.\",\n                Value: \"example.com\",\n            },\n            [computeLogicalId(\"backend\", \"CloudFrontCName\")]: {\n                Description: \"CloudFront CNAME.\",\n                Value: {\n                    \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"],\n                },\n            },\n        });\n    });\n\n    it(\"should allow to customize the error page\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        errorPage: \"my/custom/error-page.html\",\n                    },\n                },\n            }),\n        });\n        const cfDistributionLogicalId = computeLogicalId(\"backend\", \"CDN\");\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toMatchObject({\n            Properties: {\n                DistributionConfig: {\n                    CustomErrorResponses: [\n                        {\n                            ErrorCode: 500,\n                            ErrorCachingMinTTL: 0,\n                            ResponsePagePath: \"/error-page.html\",\n                        },\n                        {\n                            ErrorCode: 504,\n                            ErrorCachingMinTTL: 0,\n                            ResponsePagePath: \"/error-page.html\",\n                        },\n                    ],\n                },\n            },\n        });\n    });\n\n    it(\"should validate the error page path\", async () => {\n        await expect(() => {\n            return runServerless({\n                command: \"package\",\n                config: Object.assign(baseConfig, {\n                    constructs: {\n                        backend: {\n                            type: \"server-side-website\",\n                            errorPage: \"/error.css\",\n                        },\n                    },\n                }),\n            });\n        }).rejects.toThrowError(\n            \"Invalid configuration in 'constructs.backend.errorPage': the custom error page must be a static HTML file. '/error.css' does not end with '.html'.\"\n        );\n    });\n\n    it(\"should validate the assets configuration\", async () => {\n        await expect(() => {\n            return runServerless({\n                command: \"package\",\n                config: Object.assign(baseConfig, {\n                    constructs: {\n                        backend: {\n                            type: \"server-side-website\",\n                            assets: {\n                                \"/\": \"public\",\n                            },\n                        },\n                    },\n                }),\n            });\n        }).rejects.toThrowError(\n            \"Invalid key in 'constructs.backend.assets': '/' and '/*' cannot be routed to assets because the root URL already serves the backend application running in Lambda. You must use a sub-path instead, for example '/assets/*'.\"\n        );\n    });\n\n    it(\"should allow to redirect to the main domain\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        domain: [\"www.example.com\", \"example.com\"],\n                        certificate:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                        redirectToMainDomain: true,\n                    },\n                },\n            }),\n        });\n        const edgeFunction = computeLogicalId(\"backend\", \"RequestFunction\");\n        expect(cfTemplate.Resources[edgeFunction]).toMatchObject({\n            Type: \"AWS::CloudFront::Function\",\n            Properties: {\n                FunctionCode: `function handler(event) {\n    var request = event.request;\n    request.headers[\"x-forwarded-host\"] = request.headers[\"host\"];\n    if (request.headers[\"host\"].value !== \"www.example.com\") {\n        return {\n            statusCode: 301,\n            statusDescription: \"Moved Permanently\",\n            headers: {\n                location: {\n                    value: \"https://www.example.com\" + request.uri\n                }\n            }\n        };\n    }\n    return request;\n}`,\n            },\n        });\n    });\n\n    it(\"should not error if 'forwardedHeaders' are configured\", async () => {\n        return runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        forwardedHeaders: [\"foo\", \"bar\"],\n                    },\n                },\n            }),\n        });\n    });\n\n    it(\"should synchronize assets to S3\", async () => {\n        const awsMock = mockAws();\n        sinon.stub(CloudFormationHelpers, \"getStackOutput\").resolves(\"bucket-name\");\n        /*\n         * This scenario simulates the following:\n         * - assets/logo.png is up to date, it should be ignored\n         * - assets/styles.css has changes, it should be updated to S3\n         * - assets/scripts.js is new, it should be created in S3\n         * - assets/image.jpg doesn't exist on disk, it should be removed from S3\n         */\n        awsMock.mockService(\"S3\", \"listObjectsV2\").resolves({\n            IsTruncated: false,\n            Contents: [\n                {\n                    Key: \"assets/logo.png\",\n                    ETag: computeS3ETag(\n                        fs.readFileSync(path.join(__dirname, \"../fixtures/serverSideWebsite/public/logo.png\"))\n                    ),\n                },\n                { Key: \"assets/styles.css\" },\n                { Key: \"assets/image.jpg\" },\n            ],\n        });\n        const putObjectSpy = awsMock.mockService(\"S3\", \"putObject\");\n        const deleteObjectsSpy = awsMock.mockService(\"S3\", \"deleteObjects\").resolves({\n            Deleted: [\n                {\n                    Key: \"assets/image.jpg\",\n                },\n            ],\n        });\n        const cloudfrontInvalidationSpy = awsMock.mockService(\"CloudFront\", \"createInvalidation\");\n\n        await runServerless({\n            fixture: \"serverSideWebsite\",\n            configExt: pluginConfigExt,\n            command: \"backend:assets:upload\",\n        });\n\n        // scripts.js and styles.css were updated\n        sinon.assert.callCount(putObjectSpy, 3);\n        expect(putObjectSpy.firstCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Key: \"assets/scripts.js\",\n            Body: fs.readFileSync(path.join(__dirname, \"../fixtures/serverSideWebsite/public/scripts.js\")),\n            ContentType: \"application/javascript\",\n        });\n        expect(putObjectSpy.secondCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Key: \"assets/styles.css\",\n            Body: fs.readFileSync(path.join(__dirname, \"../fixtures/serverSideWebsite/public/styles.css\")),\n            ContentType: \"text/css\",\n        });\n        // It should upload the custom error page\n        expect(putObjectSpy.thirdCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Key: \"error.html\",\n            Body: fs.readFileSync(path.join(__dirname, \"../fixtures/serverSideWebsite/error.html\")),\n            ContentType: \"text/html\",\n        });\n        // image.jpg was deleted\n        sinon.assert.calledOnce(deleteObjectsSpy);\n        expect(deleteObjectsSpy.firstCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Delete: {\n                Objects: [\n                    {\n                        Key: \"assets/image.jpg\",\n                    },\n                ],\n            },\n        });\n        // A CloudFront invalidation was triggered\n        sinon.assert.calledOnce(cloudfrontInvalidationSpy);\n    });\n\n    it(\"allows overriding server side website properties\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        extensions: {\n                            distribution: {\n                                Properties: {\n                                    DistributionConfig: {\n                                        Comment: \"This is my comment\",\n                                    },\n                                },\n                            },\n                            bucket: {\n                                Properties: {\n                                    ObjectLockEnabled: true,\n                                },\n                            },\n                        },\n                    },\n                },\n            }),\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"backend\", \"CDN\")].Properties).toMatchObject({\n            DistributionConfig: {\n                Comment: \"This is my comment\",\n            },\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"backend\", \"Assets\")].Properties).toMatchObject({\n            ObjectLockEnabled: true,\n        });\n    });\n\n    it(\"trims CloudFront function names to stay under the limit\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            options: {\n                stage: \"super-long-stage-name\",\n            },\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    \"suuuper-long-construct-name\": {\n                        type: \"server-side-website\",\n                    },\n                },\n            }),\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"suuuper-long-construct-name\", \"RequestFunction\")]).toMatchObject({\n            Type: \"AWS::CloudFront::Function\",\n            Properties: {\n                Name: \"app-super-long-stage-name-us-east-1-suuuper-long-construc-f3b7e1\",\n            },\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
