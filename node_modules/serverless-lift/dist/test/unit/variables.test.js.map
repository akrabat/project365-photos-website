{
  "version": 3,
  "sources": ["../../../test/unit/variables.test.ts"],
  "sourcesContent": ["import { runServerlessCli } from \"../utils/runServerlessCli\";\n\ndescribe(\"variables\", () => {\n    it(\"should resolve construct variables\", async () => {\n        const { cfTemplate } = await runServerlessCli({\n            fixture: \"variables\",\n            command: \"package\",\n        });\n        // Resolves construct variables in `functions`\n        expect(cfTemplate.Resources.FooLambdaFunction).toHaveProperty(\"Properties.Environment.Variables.VAR1\", {\n            Ref: \"barQueueB989EBF4\",\n        });\n        // Resolves construct variables in `resources`\n        expect(cfTemplate.Resources.UserDefinedResource).toHaveProperty(\"Properties.BucketName\", {\n            Ref: \"barQueueB989EBF4\",\n        });\n        // Resolves construct variables in `custom`\n        expect(cfTemplate.Resources.FooLambdaFunction).toHaveProperty(\"Properties.Environment.Variables.CUSTOM_VAR\", {\n            Ref: \"bucketBucketF19722A9\",\n        });\n    });\n\n    it(\"should resolve variables in constructs\", async () => {\n        const { cfTemplate } = await runServerlessCli({\n            fixture: \"variables\",\n            command: \"package\",\n        });\n        expect(cfTemplate.Resources.BarWorkerLambdaFunction).toHaveProperty(\"Properties.Environment.Variables\", {\n            // Native serverless variable\n            VAR1: \"bar\",\n            // Custom variables defined by plugins (using a different API every time\n            CUSTOM_VAR1: \"Custom variable 1\",\n            CUSTOM_VAR2: \"Custom variable 2\",\n        });\n        // ${construct:bucket.bucketName} should have been resolved\n        expect(cfTemplate.Resources.barAlarmTopicSubscription56286022).toHaveProperty(\"Properties.Endpoint\", {\n            Ref: \"bucketBucketF19722A9\",\n        });\n        expect(cfTemplate.Resources.appCDN7AD2C001).toMatchObject({\n            Properties: {\n                DistributionConfig: {\n                    Aliases: [\"Custom variable 1\"],\n                    ViewerCertificate: {\n                        AcmCertificateArn:\n                            \"arn:aws:acm:us-east-1:123466615250:certificate/abcdef-b896-4725-96e3-6f143d06ac0b\",\n                    },\n                },\n            },\n        });\n    });\n});\n"],
  "mappings": ";AAAA,8BAAiC;AAEjC,SAAS,aAAa,MAAM;AACxB,KAAG,sCAAsC,YAAY;AACjD,UAAM,EAAE,WAAW,IAAI,UAAM,0CAAiB;AAAA,MAC1C,SAAS;AAAA,MACT,SAAS;AAAA,IACb,CAAC;AAED,WAAO,WAAW,UAAU,iBAAiB,EAAE,eAAe,yCAAyC;AAAA,MACnG,KAAK;AAAA,IACT,CAAC;AAED,WAAO,WAAW,UAAU,mBAAmB,EAAE,eAAe,yBAAyB;AAAA,MACrF,KAAK;AAAA,IACT,CAAC;AAED,WAAO,WAAW,UAAU,iBAAiB,EAAE,eAAe,+CAA+C;AAAA,MACzG,KAAK;AAAA,IACT,CAAC;AAAA,EACL,CAAC;AAED,KAAG,0CAA0C,YAAY;AACrD,UAAM,EAAE,WAAW,IAAI,UAAM,0CAAiB;AAAA,MAC1C,SAAS;AAAA,MACT,SAAS;AAAA,IACb,CAAC;AACD,WAAO,WAAW,UAAU,uBAAuB,EAAE,eAAe,oCAAoC;AAAA;AAAA,MAEpG,MAAM;AAAA;AAAA,MAEN,aAAa;AAAA,MACb,aAAa;AAAA,IACjB,CAAC;AAED,WAAO,WAAW,UAAU,iCAAiC,EAAE,eAAe,uBAAuB;AAAA,MACjG,KAAK;AAAA,IACT,CAAC;AACD,WAAO,WAAW,UAAU,cAAc,EAAE,cAAc;AAAA,MACtD,YAAY;AAAA,QACR,oBAAoB;AAAA,UAChB,SAAS,CAAC,mBAAmB;AAAA,UAC7B,mBAAmB;AAAA,YACf,mBACI;AAAA,UACR;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AACL,CAAC;",
  "names": []
}
