{
  "version": 3,
  "sources": ["../../../test/unit/webhooks.test.ts"],
  "sourcesContent": ["import { pluginConfigExt, runServerless } from \"../utils/runServerless\";\n\ndescribe(\"webhooks\", () => {\n    let cfTemplate: { Resources: Record<string, { Properties: Record<string, unknown> }> };\n    let computeLogicalId: (...address: string[]) => string;\n    beforeAll(async () => {\n        ({ cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"webhooks\",\n            configExt: pluginConfigExt,\n            command: \"package\",\n        }));\n    });\n    test.each([\n        [\"secure\", \"CUSTOM\"],\n        [\"insecure\", \"NONE\"],\n    ])(\"%p webhook should have authorization type %p\", (useCase, expectedAuthorizationType) => {\n        expect(cfTemplate.Resources[computeLogicalId(useCase, \"Route\")]).toMatchObject({\n            Properties: {\n                AuthorizationType: expectedAuthorizationType,\n            },\n        });\n    });\n\n    it(\"allows overriding webhook properties\", () => {\n        expect(cfTemplate.Resources[computeLogicalId(\"extendedWebhook\", \"Bus\")].Properties).toMatchObject({\n            Name: \"myBus\",\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"extendedWebhook\", \"HttpApi\")].Properties).toMatchObject({\n            FailOnWarnings: true,\n        });\n    });\n});\n"],
  "mappings": ";AAAA,2BAA+C;AAE/C,SAAS,YAAY,MAAM;AACvB,MAAI;AACJ,MAAI;AACJ,YAAU,YAAY;AAClB,KAAC,EAAE,YAAY,iBAAiB,IAAI,UAAM,oCAAc;AAAA,MACpD,SAAS;AAAA,MACT,WAAW;AAAA,MACX,SAAS;AAAA,IACb,CAAC;AAAA,EACL,CAAC;AACD,OAAK,KAAK;AAAA,IACN,CAAC,UAAU,QAAQ;AAAA,IACnB,CAAC,YAAY,MAAM;AAAA,EACvB,CAAC,EAAE,gDAAgD,CAAC,SAAS,8BAA8B;AACvF,WAAO,WAAW,UAAU,iBAAiB,SAAS,OAAO,CAAC,CAAC,EAAE,cAAc;AAAA,MAC3E,YAAY;AAAA,QACR,mBAAmB;AAAA,MACvB;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AAED,KAAG,wCAAwC,MAAM;AAC7C,WAAO,WAAW,UAAU,iBAAiB,mBAAmB,KAAK,CAAC,EAAE,UAAU,EAAE,cAAc;AAAA,MAC9F,MAAM;AAAA,IACV,CAAC;AACD,WAAO,WAAW,UAAU,iBAAiB,mBAAmB,SAAS,CAAC,EAAE,UAAU,EAAE,cAAc;AAAA,MAClG,gBAAgB;AAAA,IACpB,CAAC;AAAA,EACL,CAAC;AACL,CAAC;",
  "names": []
}
