# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: project365

custom: ${file(settings.yml)} # settings

# Please ensure the serverless-openwhisk provider plugin is installed globally.
# $ npm install -g serverless-openwhisk
# ...before installing project dependencies to register this provider.
# $ npm install
provider:
  name: aws
  runtime: provided
  region: eu-west-2
  memorySize: 512

#  stage: dev

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
        - cloudfront:*
      Resource: "*"

package:
  include:
     - "public/*"
     - "src/**"
     - "templates/**"

functions:
  update:
    handler: src/actions/update.main
    layers:
      # Ref name is generated by TitleCasing the layer name & appending "LambdaLayer"
      - {Ref: PhpLambdaLayer}
    environment:
      P365_FLICKR_API_KEY: ${self:custom.P365_FLICKR_API_KEY}
      P365_FLICKR_USER_ID: ${self:custom.P365_FLICKR_USER_ID}
      P365_SITE_NAME: ${self:custom.P365_SITE_NAME}
      P365_BUCKET_NAME: ${self:custom.P365_BUCKET_NAME}
      P365_CLOUDFRONT_ID: !Ref P365CloudFrontDistribution
      P365_CLOUDFRONT_DOMAIN:
        Fn::Select:
          - 0
          - Fn::Split:
            - '.'
            - Fn::GetAtt: [P365CloudFrontDistribution, DomainName]
    events:
      - schedule:
          name: project365-rebuild
          description: "Rebuild this year's page"
          rate: cron(0/30 8-23 * * ? *)

# CloudFormation resource templates
resources:
  Resources:
    ## Create bucket
    Project365Site:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.P365_BUCKET_NAME}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

    ## Set policy to ensure all files inside the Bucket are available to CloudFront
    Project365SitePolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: Project365Site
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    { "Ref": "Project365Site" },
                    "/*"
                  ]
                ]

    ## Set up CloudFront to serve the bucket
    P365CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::Join: [
                  "", [
                    { "Ref": "Project365Site" },
                    ".s3.amazonaws.com"
                  ]
                ]
              Id: P365
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          Aliases:
            - ${self:custom.P365_SITE_NAME}
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: P365
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            # CloudFrontDefaultCertificate: 'true'
            AcmCertificateArn: ${self:custom.P365_CERTIFICATE_ARN}
            SslSupportMethod: sni-only

  ## Add the hosted domain to `serverless info --versbose`
  Outputs:
    CloudFrontDomainName:
      Description: CloudFront domain name
      Value:
        'Fn::GetAtt': [ P365CloudFrontDistribution, DomainName ]

# PHP runtime as a layer
layers:
  php:
    path: layer/php

