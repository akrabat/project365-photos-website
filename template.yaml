AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Project 365 website'

Parameters:
    WebsiteDomain:
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: 'WebsiteDomain'
    FlickrApiKey:
        # note: no version needed here. If you use '{{resolve:ssm:FlickrApiKey:1}}', then you need to specify the version.
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: 'FlickrApiKey'
    WebsiteBucketName:
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: 'WebsiteBucketName'
    FlickrUserId:
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: 'FlickrUserId'


Resources:
    # Lambda function to upload the static assets
    UploadAssets:
        # See https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: 'uploadassets'
            Description: 'Upload assets to S3'
            CodeUri: .
            Handler: action-upload-assets.php
            Timeout: 10 # Timeout in seconds
            MemorySize: 512 # The memory size is related to the pricing and CPU power
            Runtime: provided
            Layers:
                - 'arn:aws:lambda:us-east-1:209497400698:layer:php-73:1'
            Policies:
                # List of prebuilt policies: https://gist.github.com/gene1wood/55b358748be3c314f956
                # S3 permissions: https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html
                - Statement:
                    - Sid: FunctionPermissions
                      Effect: Allow
                      Action:
                          - s3:*
                          - cloudfront:CreateInvalidation
                      Resource: '*'
            Environment:
                Variables:
                    BUCKET_NAME: !Ref WebsiteBucketName
                    CLOUDFRONT_ID: !Ref WebsiteCloudFrontDistribution

    # Lambda function to create "{year)/html" by fetching Flickr data and uploading to the S3 bucket
    Update:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: 'update'
            Description: 'Update a year page with new photos'
            CodeUri: .
            Handler: action-update.php
            Timeout: 10 # Timeout in seconds
            MemorySize: 512 # The memory size is related to the pricing and CPU power
            Runtime: provided
            Layers:
                - 'arn:aws:lambda:us-east-1:209497400698:layer:php-73:1'
            Policies:
                - Statement:
                    - Sid: FunctionPermissions
                      Effect: Allow
                      Action:
                          - s3:*
                          - cloudfront:CreateInvalidation
                      Resource: '*'
            Environment:
                Variables:
                    FLICKR_API_KEY: !Ref FlickrApiKey
                    FLICKR_USER_ID: !Ref FlickrUserId
                    BUCKET_NAME: !Ref WebsiteBucketName
                    CLOUDFRONT_ID: !Ref WebsiteCloudFrontDistribution

    # S3 bucket to store website files
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: !Ref WebsiteBucketName
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

    ## S3 bucket policy to ensure all files inside the Bucket are available to CloudFront
    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsiteBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    { "Ref": "WebsiteBucket" },
                    "/*"
                  ]
                ]

    ## Set up CloudFront to serve the bucket
    WebsiteCloudFrontDistribution:
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-distribution.html
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                # see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-origin.html
                Fn::Join: [
                  "", [
                    { "Ref": "WebsiteBucket" },
                    ".s3.amazonaws.com"
                  ]
                ]
              Id: WebsiteCFT
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: true
          Aliases:
            - !Ref WebsiteDomain
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            TargetOriginId: WebsiteCFT
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
